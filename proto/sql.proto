syntax = "proto3";

package sql;

option go_package="github.com/globulario/services/golang/sql/sqlpb";

// Represents a database connection configuration.
message Connection {
	string id = 1; // Unique identifier for the connection.
	string name = 2; // Human-readable name for the connection.
	string host = 3; // Host address of the SQL server.
	string charset = 4; // Character set used in the SQL server.
	string driver = 5; // Database driver (e.g., MySQL, PostgreSQL).
	string user = 6; // Username for the SQL server authentication.
	string password = 7; // Password for the SQL server authentication.
	int32 port = 8; // Port number for the SQL server.
	string path = 9; // Path to the database file, used by SQLite.
}

// Request to create a new database connection.
message CreateConnectionRqst {
	Connection connection = 1; // The connection details.
}

// Response for CreateConnectionRqst.
message CreateConnectionRsp {
	bool result = 1; // Result of the connection creation process.
}

// Request to delete an existing database connection.
message DeleteConnectionRqst {
	string id = 1; // Identifier of the connection to delete.
}

// Response for DeleteConnectionRqst.
message DeleteConnectionRsp {
	bool result = 1; // Result of the connection deletion process.
}

// Request to ping a database connection to check its validity.
message PingConnectionRqst {
	string id = 1; // Identifier of the connection to ping.
}

// Response for PingConnectionRqst.
message PingConnectionRsp {
	string result = 1; // Result of the ping operation.
}

// Represents an SQL query and its associated parameters.
message Query {
	string connectionId = 1; // The connection ID to use for this query.
	string query = 2; // The SQL query string.
	string parameters = 3; // JSON string of query parameters (for various types).
	string charset = 4; // Charset for the result, defaults to connection charset if not set.
}

// Request to execute a query that returns data (e.g., SELECT).
message QueryContextRqst {
	Query query = 1; // The query to be executed.
}

// Response for QueryContextRqst with query results.
message QueryContextRsp {
	oneof result {
		string header = 1; // Contains column information of the result set.
		string rows = 2; // Array of rows (e.g., [[1,2,3],[4,5,6]]), data types include Null, Number, String, Bool.
    }
}

// Request to execute an SQL statement (e.g., INSERT, UPDATE) with optional transaction.
message ExecContextRqst {
	Query query = 1; // The SQL statement to execute.
	bool tx = 2; // Flag to indicate if a transaction should be used.
}

// Response for ExecContextRqst with execution results.
message ExecContextRsp {
	int64 affectedRows = 1; // Number of rows affected by the SQL statement.
	int64 lastId = 2; // The last inserted ID, if applicable.
}

// Request to stop the SQL service.
message StopRequest {
}

// Response for StopRequest.
message StopResponse {
}

// Service definition for SQL operations.
service SqlService {
  	// Stops the SQL server.
 	rpc Stop(StopRequest) returns (StopResponse);
	
	// Creates a new database connection.
	rpc CreateConnection(CreateConnectionRqst) returns (CreateConnectionRsp);
	
	// Deletes an existing database connection.
	rpc DeleteConnection(DeleteConnectionRqst) returns (DeleteConnectionRsp);
	
	// Pings an existing database connection.
	rpc Ping(PingConnectionRqst) returns (PingConnectionRsp);
	
	// Executes a query and returns zero or more rows, typically used for SQL SELECT.
	rpc QueryContext(QueryContextRqst) returns (stream QueryContextRsp);
	
	// Executes an SQL statement like CREATE, INSERT, UPDATE, and DELETE.
	// Returns the number of affected rows and the last inserted ID, if applicable.
	rpc ExecContext(ExecContextRqst) returns (ExecContextRsp);
}
