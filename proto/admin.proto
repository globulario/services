/**
 * Admin functionality.
 */
syntax = "proto3";
package admin;

option go_package="admin/adminpb";

message HasRunningProcessRequest{
	string name = 1;
}

message HasRunningProcessResponse {
	bool result = 1;
}

message RunCmdRequest{
	string cmd = 1;
	repeated string args = 2;
	bool blocking=3;
}

message RunCmdResponse{
	string result = 1; // The content of the result as a string.
	int32 pid=4;
}

message SetEnvironmentVariableRequest {
	string name = 1;
	string value = 2;
}

message SetEnvironmentVariableResponse {
	/** Nothing here **/
}

message GetEnvironmentVariableRequest {
	string name = 1;
}

message GetEnvironmentVariableResponse {
	string value = 2;
}


message UnsetEnvironmentVariableRequest {
	string name = 1;
}

message UnsetEnvironmentVariableResponse {
	/** Nothing here **/
}


message GetCertificatesRequest {
   string domain = 1;
   int32 port = 2; // 80 by default
   string path = 3; // tmp by default
}

message GetCertificatesResponse {
   string cacert = 1;
   string cert = 2;
   string certkey = 3;
}

message KillProcessRequest{
	int64 pid = 1;
}

message KillProcessResponse{

}

message KillProcessesRequest {
	string name = 1;
}

message KillProcessesResponse {
	
}

message GetPidsRequest {
	string name = 1;
}

message GetPidsResponse {
	repeated int32 pids = 1;
}

message UpdateRequest{
	string platform = 1; // The platform
	bytes data = 2;
}

message UpdateResponse {
	
}

message DownloadGlobularRequest{
	string platform = 1; // The platform
	string source = 2; // The address of the server to update from
}

message DownloadGlobularResponse {
	bytes data = 1;
}

message SaveConfigRequest {
   string config = 1;
}

message SaveConfigResponse {

}

service AdminService {
  /** Root informations*/

  /** Globular executable */
  // Update a given globular server (use by command line.)
  rpc Update(stream  UpdateRequest) returns(UpdateResponse);

  // Download Globular executable file.
  rpc DownloadGlobular(DownloadGlobularRequest) returns(stream DownloadGlobularResponse);

  // Return public certificate from a servcer.
  rpc GetCertificates(GetCertificatesRequest) returns(GetCertificatesResponse);
	
  /** Administration helpers **/

  // Test if a process of given name is running...
  rpc HasRunningProcess(HasRunningProcessRequest) returns(HasRunningProcessResponse);

  // Run an external command.
  rpc RunCmd(RunCmdRequest) returns(stream RunCmdResponse);

  // Set environement variable.
  rpc SetEnvironmentVariable(SetEnvironmentVariableRequest) returns(SetEnvironmentVariableResponse);
  
  // Get environement variable.
  rpc GetEnvironmentVariable(GetEnvironmentVariableRequest) returns(GetEnvironmentVariableResponse);

  // Unset environement variable.
  rpc UnsetEnvironmentVariable(UnsetEnvironmentVariableRequest) returns(UnsetEnvironmentVariableResponse);

  // Kill process by id
  rpc KillProcess(KillProcessRequest) returns(KillProcessResponse);

  // Kill process by name
  rpc KillProcesses(KillProcessesRequest) returns(KillProcessesResponse);

  // Return the list of process id with a given name.
  rpc GetPids(GetPidsRequest) returns(GetPidsResponse);

  // Save Globular configuration.
  rpc SaveConfig(SaveConfigRequest) returns(SaveConfigRequest);

}
