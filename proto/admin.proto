/**
 * Admin functionality.
 */
syntax = "proto3";
package admin;

option go_package="github.com/globulario/services/golang/admin/adminpb";

message HostInfo {
   string ip = 1;
   string mac = 2;
   string name = 3;
   string infos = 4; // additional informations to help identify the host.
}

message getAvailableHostsRequest {
}

message getAvailableHostsResponse {
   repeated HostInfo hosts = 1;
}

message FileInfo {
   string name = 1;
   string path = 2;
   int64 size = 3;
   bool isDir = 4;
   int64 modTime = 5;
   repeated FileInfo files = 6;
}

message HasRunningProcessRequest{
	string name = 1;
}

message HasRunningProcessResponse {
	bool result = 1;
}

message RunCmdRequest{
	string cmd = 1;
	repeated string args = 2;
	bool blocking=3;
   string path=4; // the path where the command must be executed
}

message RunCmdResponse{
	string result = 1; // The content of the result as a string.
	int32 pid=4;
}

message SetEnvironmentVariableRequest {
	string name = 1;
	string value = 2;
}

message SetEnvironmentVariableResponse {
	/** Nothing here **/
}

message GetEnvironmentVariableRequest {
	string name = 1;
}

message GetEnvironmentVariableResponse {
	string value = 2;
}


message UnsetEnvironmentVariableRequest {
	string name = 1;
}

message UnsetEnvironmentVariableResponse {
	/** Nothing here **/
}

message GetCertificatesRequest {
   string domain = 1;
   int32 port = 2; // 80 by default
   string path = 3; // tmp by default
   string country = 4;
   string state = 5;
   string city = 6;
   string organization = 7;
   repeated string alternateDomains = 8;
}

message GetCertificatesResponse {
   string cacert = 1;
   string cert = 2;
   string certkey = 3;
}

message KillProcessRequest{
	int64 pid = 1;
}

message KillProcessResponse{

}

message KillProcessesRequest {
	string name = 1;
}

message KillProcessesResponse {
	
}

message ProcessInfo{
   string name = 1;
   string exec = 2;
   int32 pid = 3;
   int32 ppid = 4;
   string user = 5;
   string priority = 6;
   double cpu_usage_percent = 7;
   float memory_usage_percent = 8;
   uint64 memory_usage = 9;
}

message GetProcessInfosRequest {
   string name = 1;
   int32 pid = 2;
}

message GetProcessInfosResponse {
   repeated ProcessInfo infos = 1;
}

message GetPidsRequest {
	string name = 1;
}

message GetPidsResponse {
	repeated int32 pids = 1;
}

message UpdateRequest{
	string platform = 1; // The platform
	bytes data = 2;
}

message UpdateResponse {
	
}

message DownloadGlobularRequest{
	string platform = 1; // The platform
	string source = 2; // The address of the server to update from
}

message DownloadGlobularResponse {
	bytes data = 1;
}

message SaveConfigRequest {
   string config = 1;
}

message SaveConfigResponse {

}

message GetFileInfoRequest{
   string path = 1;
}

message GetFileInfoResponse{
   FileInfo info = 2;
}

service AdminService {
  /** Root informations*/

  /** Globular executable */
  // Update a given globular server (use by command line.)
  rpc Update(stream  UpdateRequest) returns(UpdateResponse);

  // Download Globular executable file.
  rpc DownloadGlobular(DownloadGlobularRequest) returns(stream DownloadGlobularResponse);

  // Return public certificate from a servcer.
  rpc GetCertificates(GetCertificatesRequest) returns(GetCertificatesResponse);
	
  /** Administration helpers **/

  // Test if a process of given name is running...
  rpc HasRunningProcess(HasRunningProcessRequest) returns(HasRunningProcessResponse);

  // Return the list of process or the process with a given name or id
  rpc GetProcessInfos(GetProcessInfosRequest) returns(stream GetProcessInfosResponse);

  // Run an external command.
  rpc RunCmd(RunCmdRequest) returns(stream RunCmdResponse);

  // Set environement variable.
  rpc SetEnvironmentVariable(SetEnvironmentVariableRequest) returns(SetEnvironmentVariableResponse);
  
  // Get environement variable.
  rpc GetEnvironmentVariable(GetEnvironmentVariableRequest) returns(GetEnvironmentVariableResponse);

  // Unset environement variable.
  rpc UnsetEnvironmentVariable(UnsetEnvironmentVariableRequest) returns(UnsetEnvironmentVariableResponse);

  // Kill process by id
  rpc KillProcess(KillProcessRequest) returns(KillProcessResponse);

  // Kill process by name
  rpc KillProcesses(KillProcessesRequest) returns(KillProcessesResponse);

  // Return the list of process id with a given name.
  rpc GetPids(GetPidsRequest) returns(GetPidsResponse);

  // Save Globular configuration.
  rpc SaveConfig(SaveConfigRequest) returns(SaveConfigRequest);

  // Retrun file info from the server (absolute path)
  rpc GetFileInfo(GetFileInfoRequest) returns(GetFileInfoResponse);

  // Return the list of available host.
  rpc GetAvailableHosts(getAvailableHostsRequest) returns(getAvailableHostsResponse);

}
