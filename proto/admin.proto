/**
 * AdminService: Provides administrative functionalities for managing Globular clusters.
 * This includes managing processes, environment variables, certificates, and system updates.
 */
 syntax = "proto3";
 package admin;
 
 option go_package = "github.com/globulario/services/golang/admin/adminpb";
 
 // HostInfo represents information about a host in the network.
 message HostInfo {
    string ip = 1;     // IP address of the host.
    string mac = 2;    // MAC address of the host.
    string name = 3;   // Name of the host.
    string infos = 4;  // Additional information to help identify the host.
 }
 
 // getAvailableHostsRequest is the request message for listing available hosts.
 message getAvailableHostsRequest {}
 
 // getAvailableHostsResponse is the response message containing a list of available hosts.
 message getAvailableHostsResponse {
    repeated HostInfo hosts = 1;  // List of available hosts.
 }
 
 // FileInfo represents details about a file on the host system.
 message FileInfo {
    string name = 1;          // File name.
    string path = 2;          // File path.
    int64 size = 3;           // File size in bytes.
    bool isDir = 4;           // Indicates if the file is a directory.
    int64 modTime = 5;        // Last modification time (Unix timestamp).
    repeated FileInfo files = 6;  // List of files (used for directories).
 }
 
 // HasRunningProcessRequest is the request message to check if a process is running.
 message HasRunningProcessRequest {
    string name = 1;  // Name of the process to check.
 }
 
 // HasRunningProcessResponse is the response message indicating if a process is running.
 message HasRunningProcessResponse {
    bool result = 1;  // True if the process is running.
 }
 
 // RunCmdRequest is the request message to run a command on the host system.
 message RunCmdRequest {
    string cmd = 1;           // Command to be executed.
    repeated string args = 2; // Arguments for the command.
    bool blocking = 3;        // If true, wait for the command to complete.
    string path = 4;          // The path where the command must be executed.
 }
 
 // RunCmdResponse is the response message containing the result of the command execution.
 message RunCmdResponse {
    string result = 1; // Output of the command execution.
    int32 pid = 4;     // Process ID of the executed command.
 }
 
 // SetEnvironmentVariableRequest is the request message to set an environment variable.
 message SetEnvironmentVariableRequest {
    string name = 1;  // Name of the environment variable.
    string value = 2; // Value of the environment variable.
 }
 
 // SetEnvironmentVariableResponse is the response message for setting an environment variable.
 message SetEnvironmentVariableResponse {}
 
 // GetEnvironmentVariableRequest is the request message to get an environment variable's value.
 message GetEnvironmentVariableRequest {
    string name = 1;  // Name of the environment variable.
 }
 
 // GetEnvironmentVariableResponse is the response message containing the value of an environment variable.
 message GetEnvironmentVariableResponse {
    string value = 2; // Value of the environment variable.
 }
 
 // UnsetEnvironmentVariableRequest is the request message to unset an environment variable.
 message UnsetEnvironmentVariableRequest {
    string name = 1;  // Name of the environment variable to unset.
 }
 
 // UnsetEnvironmentVariableResponse is the response message for unsetting an environment variable.
 message UnsetEnvironmentVariableResponse {}
 
 // GetCertificatesRequest is the request message to retrieve certificates for a domain.
 message GetCertificatesRequest {
    string domain = 1;               // Domain for which the certificates are requested.
    int32 port = 2;                  // Port number (defaults to 80).
    string path = 3;                 // Path to store the certificates (defaults to tmp).
    string country = 4;              // Country for the certificate.
    string state = 5;                // State for the certificate.
    string city = 6;                 // City for the certificate.
    string organization = 7;         // Organization for the certificate.
    repeated string alternateDomains = 8;  // Alternate domains for the certificate.
 }
 
 // GetCertificatesResponse is the response message containing the requested certificates.
 message GetCertificatesResponse {
    string cacert = 1;   // CA certificate.
    string cert = 2;     // Certificate.
    string certkey = 3;  // Certificate key.
 }
 
 // KillProcessRequest is the request message to kill a process by its PID.
 message KillProcessRequest {
    int64 pid = 1;  // Process ID of the process to be killed.
 }
 
 // KillProcessResponse is the response message for killing a process.
 message KillProcessResponse {}
 
 // KillProcessesRequest is the request message to kill processes by name.
 message KillProcessesRequest {
    string name = 1;  // Name of the processes to be killed.
 }
 
 // KillProcessesResponse is the response message for killing processes by name.
 message KillProcessesResponse {}
 
 // ProcessInfo represents details about a process on the host system.
 message ProcessInfo {
    string name = 1;                 // Process name.
    string exec = 2;                 // Executable path.
    int32 pid = 3;                   // Process ID.
    int32 ppid = 4;                  // Parent Process ID.
    string user = 5;                 // User running the process.
    string priority = 6;             // Process priority.
    double cpu_usage_percent = 7;    // CPU usage percentage.
    float memory_usage_percent = 8;  // Memory usage percentage.
    uint64 memory_usage = 9;         // Memory usage in bytes.
 }
 
 // GetProcessInfosRequest is the request message to get information about specific processes.
 message GetProcessInfosRequest {
    string name = 1;  // Name of the process.
    int32 pid = 2;    // Process ID.
 }
 
 // GetProcessInfosResponse is the response message containing information about processes.
 message GetProcessInfosResponse {
    repeated ProcessInfo infos = 1;  // Information about the requested processes.
 }
 
 // GetPidsRequest is the request message to get the PIDs of processes by name.
 message GetPidsRequest {
    string name = 1;  // Name of the process.
 }
 
 // GetPidsResponse is the response message containing the PIDs of the requested processes.
 message GetPidsResponse {
    repeated int32 pids = 1;  // List of Process IDs.
 }
 
 // UpdateRequest is the request message for updating a Globular server.
 message UpdateRequest {
    string platform = 1;  // Platform of the server to be updated.
    bytes data = 2;       // Update data.
 }
 
 // UpdateResponse is the response message for the update operation.
 message UpdateResponse {}
 
 // DownloadGlobularRequest is the request message to download the Globular executable.
 message DownloadGlobularRequest {
    string platform = 1;  // Platform for which the executable is requested.
    string source = 2;    // Address of the server to download from.
 }
 
 // DownloadGlobularResponse is the response message containing the Globular executable.
 message DownloadGlobularResponse {
    bytes data = 1;  // Downloaded data.
 }
 
 // SaveConfigRequest is the request message to save the Globular configuration.
 message SaveConfigRequest {
    string config = 1;  // Configuration data to be saved.
 }
 
 // SaveConfigResponse is the response message for saving the Globular configuration.
 message SaveConfigResponse {}
 
 // GetFileInfoRequest is the request message to get information about a file.
 message GetFileInfoRequest {
    string path = 1;  // Path of the file.
 }
 
 // GetFileInfoResponse is the response message containing information about the requested file.
 message GetFileInfoResponse {
    FileInfo info = 2;  // Information about the file.
 }
 
/**
 * AdminService: Provides administrative functionalities for managing Globular clusters.
 * This includes managing processes, environment variables, certificates, and system updates.
 */
 service AdminService {

   // Updates a specific Globular server. Typically used via command line interface.
   rpc Update(stream UpdateRequest) returns(UpdateResponse);
 
   // Downloads the Globular executable file for specified platform.
   rpc DownloadGlobular(DownloadGlobularRequest) returns(stream DownloadGlobularResponse);
 
   // Retrieves public SSL/TLS certificates for a given domain from a server.
   rpc GetCertificates(GetCertificatesRequest) returns(GetCertificatesResponse);
   
   // Checks if a process with the specified name is currently running.
   rpc HasRunningProcess(HasRunningProcessRequest) returns(HasRunningProcessResponse);
 
   // Fetches detailed information about processes, either all or filtered by name or PID.
   rpc GetProcessInfos(GetProcessInfosRequest) returns(stream GetProcessInfosResponse);
 
   // Executes an external command on the server and returns its output.
   rpc RunCmd(RunCmdRequest) returns(stream RunCmdResponse);
 
   // Sets an environment variable on the server with the specified name and value.
   rpc SetEnvironmentVariable(SetEnvironmentVariableRequest) returns(SetEnvironmentVariableResponse);
   
   // Retrieves the value of a specified environment variable from the server.
   rpc GetEnvironmentVariable(GetEnvironmentVariableRequest) returns(GetEnvironmentVariableResponse);
 
   // Removes a specified environment variable from the server's environment.
   rpc UnsetEnvironmentVariable(UnsetEnvironmentVariableRequest) returns(UnsetEnvironmentVariableResponse);
 
   // Terminates a process on the server using its PID.
   rpc KillProcess(KillProcessRequest) returns(KillProcessResponse);
 
   // Terminates all processes on the server that match a given name.
   rpc KillProcesses(KillProcessesRequest) returns(KillProcessesResponse);
 
   // Retrieves a list of Process IDs (PIDs) for processes matching a given name.
   rpc GetPids(GetPidsRequest) returns(GetPidsResponse);
 
   // Saves the current configuration settings of Globular on the server.
   rpc SaveConfig(SaveConfigRequest) returns(SaveConfigRequest);
 
   // Retrieves information about a specific file located on the server using an absolute path.
   rpc GetFileInfo(GetFileInfoRequest) returns(GetFileInfoResponse);
 
   // Lists all available hosts within the network.
   rpc GetAvailableHosts(getAvailableHostsRequest) returns(getAvailableHostsResponse);
 
 }
