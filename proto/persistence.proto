/**
 * You can use echo as starter project.
 */
syntax = "proto3";

package persistence;

option go_package="persistence/persistencepb";
import "google/protobuf/struct.proto";


enum StoreType{
	MONGO = 0;
}

message Connection {
	string id = 1;
	string name = 2;
	string host = 3;
	StoreType store = 5;
	string user = 6;
	string password = 7;
	int32 port = 8;
	int32 timeout = 9;
	string options = 10;
}

// Create connection
message CreateConnectionRqst {
	Connection connection = 1;
	bool save = 2; // if true it will save in the config file.
}

message CreateConnectionRsp {
	bool result = 1;
}

// Delete connection
message DeleteConnectionRqst {
	string id = 1;
}

message DeleteConnectionRsp {
	bool result = 1;
}

// Ping Connection
message PingConnectionRqst {
	string id = 1;
}

message PingConnectionRsp {
	string result = 1;
}

message InsertManyRqst {
	string id = 1;
	string database = 2;
	string collection = 3;
	bytes data = 4;
	string options = 5;
}

message InsertManyRsp {
	/*nothing here */
}

message InsertOneRqst {
	string id = 1; // The connection id.
	string database = 2;
	string collection = 3;
	string data = 4;
	string options = 5;
}

message InsertOneRsp {
	string id = 1; // Json string with id
}

message FindRqst {
	string id = 1;
	string database = 2;
	string collection = 3;
	string query = 4;
	string options = 6;
}

message FindResp {
	bytes data = 1; // blob
}

message FindOneRqst {
	string id = 1;
	string database = 2;
	string collection = 3;
	string query = 4;
	string options = 6;
}

message FindOneResp {
	google.protobuf.Struct result = 1;
}

message AggregateRqst {
	string id = 1;
	string database = 2;
	string collection = 3;
	string pipeline = 4; // Array of transformations.
	string options = 6;
}

message AggregateResp {
	bytes data = 1; // Json string
}

message UpdateRqst {
	string id = 1;
	string database = 2;
	string collection = 3;
	string query = 4;
	string value = 5;
	string options = 6;
}

message UpdateRsp {
	bool result = 1;
}

message UpdateOneRqst {
	string id = 1;
	string database = 2;
	string collection = 3;
	string query = 4;
	string value = 5;
	string options = 6;
}

message UpdateOneRsp {
	bool result = 1;
}

message ReplaceOneRqst {
	string id = 1;
	string database = 2;
	string collection = 3;
	string query = 4;
	string value = 5;
	string options = 6;
}

message ReplaceOneRsp {
	bool result = 1;
}

message DeleteRqst {
	string id = 1;
	string database = 2;
	string collection = 3;
	string query = 4;
	string options = 5;
}

message DeleteRsp {
	bool result = 1;
}

message DeleteOneRqst {
	string id = 1;
	string database = 2;
	string collection = 3;
	string query = 4;
	string options = 5;
}

message DeleteOneRsp {
	bool result = 1;
}

message CreateDatabaseRqst{
		string id = 1;
	string database = 2;
}

message CreateDatabaseRsp{
	bool result = 1;
}

message DeleteDatabaseRqst{
	string id = 1;
	string database = 2;
}

message DeleteDatabaseRsp{
	bool result = 1;
}

message CreateCollectionRqst{
	string id = 1;
	string database = 2;
	string collection = 3;
	string optionsStr = 4;
}

message CreateCollectionRsp{
	bool result = 1;
}

message DeleteCollectionRqst{
	string id = 1;
	string database = 2;
	string collection = 3;
}

message DeleteCollectionRsp{
	bool result = 1;
}

message CountRqst{
	string id = 1;
	string database = 2;
	string collection = 3;
	string query = 4; // filter
	string options = 5;
}

message CountRsp{
	int64 result = 1;
}

// Create user function

message RunAdminCmdRqst{
	string connectionId = 1;
	string user = 2;
	string password = 3;
	string script = 4;
}

message RunAdminCmdRsp{
	string result = 1;
}


// Open a db connection.
message ConnectRqst{
	string connectionId = 1;
	string password = 3;
}


message ConnectRsp{
	bool result = 1;
}

// Close a db connection
message DisconnectRqst{
	string connectionId = 1;
}

message DisconnectRsp{
	bool result = 1;
}

message StopRequest {
	
}

message StopResponse {
	
}

// Persistence nothing can take place of persistence..!-)
service PersistenceService {
  	// Stop the server.
 	rpc Stop(StopRequest) returns (StopResponse);

	//////////////////////////////////////////////////////////////////////////////
	// admin operations
	//////////////////////////////////////////////////////////////////////////////
	
	// Create a database
	rpc CreateDatabase(CreateDatabaseRqst) returns (CreateDatabaseRsp){};
	
	// Open connection.
	rpc Connect(ConnectRqst) returns (ConnectRsp);
	
	// Close connection.
	rpc Disconnect(DisconnectRqst) returns (DisconnectRsp);
	
	// Delete a database
	rpc DeleteDatabase(DeleteDatabaseRqst) returns (DeleteDatabaseRsp){};
	
	// Create a Collection
	rpc CreateCollection(CreateCollectionRqst) returns (CreateCollectionRsp){};
	
	// Delete collection
	rpc DeleteCollection(DeleteCollectionRqst) returns (DeleteCollectionRsp){};
	
	// Create a connection.
	rpc CreateConnection(CreateConnectionRqst) returns (CreateConnectionRsp){};
	
	// Delete a connection.
	rpc DeleteConnection(DeleteConnectionRqst) returns (DeleteConnectionRsp){};
	
	// Ping existing connection.
	rpc Ping(PingConnectionRqst) returns (PingConnectionRsp) {};
	
	// Get the number of entry in a collection
	rpc Count(CountRqst) returns (CountRsp) {};
	
	//////////////////////////////////////////////////////////////////////////////
	// Crud operations
	//////////////////////////////////////////////////////////////////////////////
	
	// Insert one result
	rpc InsertOne(InsertOneRqst) returns (InsertOneRsp){};

	// Insert many result at once.
	rpc InsertMany(stream InsertManyRqst) returns (InsertManyRsp){};
	
	// Find many
	rpc Find(FindRqst) returns (stream FindResp){};
	
	// Find one
	rpc FindOne(FindOneRqst) returns (FindOneResp){};

	// Aggregate
	rpc Aggregate(AggregateRqst) returns (stream AggregateResp){};
	
	// Update many result.
	rpc Update(UpdateRqst) returns (UpdateRsp){};
	
	// Update one
	rpc UpdateOne(UpdateOneRqst) returns (UpdateOneRsp){};
	
	// Replace one
	rpc ReplaceOne(ReplaceOneRqst) returns (ReplaceOneRsp){};
	
	// Delete many.
	rpc Delete(DeleteRqst) returns (DeleteRsp){};
	
	// Delete one
	rpc DeleteOne(DeleteOneRqst) returns (DeleteOneRsp){};
	
	//////////////////////////////////////////////////////////////////////////////
	// Resource management operations
	//////////////////////////////////////////////////////////////////////////////
	
	// run admin command.
	rpc RunAdminCmd(RunAdminCmdRqst) returns (RunAdminCmdRsp){};
	
	
}