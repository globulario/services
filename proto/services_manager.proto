syntax = "proto3";
package services_manager;

option go_package="github.com/globulario/services/golang/services_manager/services_managerpb";
import "google/protobuf/struct.proto";


message InstallServiceRequest{
	string dicorveryId = 1;
	string serviceId = 2;
	string publisherId = 3;
	string version = 4;
}

message InstallServiceResponse{
	bool result = 1;
}

message UninstallServiceRequest{
	string serviceId = 1;
	string publisherId = 2;
	string version = 3;
	bool deletePermissions = 4;
}

message UninstallServiceResponse{
	bool result = 1;
}

message StopServiceInstanceRequest {
  string service_id = 1;
}

message StopServiceInstanceResponse {
  bool result = 1;
}

message StartServiceInstanceRequest {
  string service_id = 1;
}

// Return the pid of the started service.
message StartServiceInstanceResponse {
  int64 service_pid = 1;
  int64 proxy_pid = 2;
}

// Restart all services.
message RestartAllServicesRequest {
}

message RestartAllServicesResponse {
}

// Get the services configuration for that server.
message GetServicesConfigurationRequest{

}

message GetServicesConfigurationResponse{
  repeated google.protobuf.Struct services = 1;
}

// Return the list of all actions of the server.
message GetAllActionsRequest {
}

message GetAllActionsResponse {
  repeated string actions = 1;
}

message SaveServiceConfigRequest {
  string config = 1;
}

message SaveServiceConfigResponse {
  
}

service ServicesManagerService {

  // Install a service...
  rpc InstallService(InstallServiceRequest) returns (InstallServiceResponse);

  // Uninstall a service...
  rpc UninstallService(UninstallServiceRequest) returns (UninstallServiceResponse);
  
  // Stop a service
  rpc StopServiceInstance(StopServiceInstanceRequest) returns (StopServiceInstanceResponse);

  // Start a service
  rpc StartServiceInstance(StartServiceInstanceRequest) returns (StartServiceInstanceResponse);

  // Restart all Services
  rpc RestartAllServices(RestartAllServicesRequest) returns (RestartAllServicesResponse);

  // Get services configurations...
  rpc GetServicesConfiguration(GetServicesConfigurationRequest) returns (GetServicesConfigurationResponse);

  // Return the list of all actions.
  rpc GetAllActions(GetAllActionsRequest) returns(GetAllActionsResponse);

  // Save a given service configuration.
  rpc SaveServiceConfig(SaveServiceConfigRequest) returns(SaveServiceConfigResponse);
  
}
