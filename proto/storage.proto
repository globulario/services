syntax = "proto3";

package storage;

option go_package="github.com/globulario/services/golang/storage/storagepb";

// Enum representing types of storage.
enum StoreType {
	LEVEL_DB = 0; // Persistent key-value storage.
	BIG_CACHE = 1; // In-memory key-value storage.
	BADGER_DB = 2; // Persistent key-value storage.
	SCYLLA_DB = 3; // Distributed NoSQL datastore.
	ETCD = 4; // Distributed, reliable key-value store for the most critical data.
}

// Represents a storage connection configuration.
message Connection {
	string id = 1; // Unique identifier for the connection.
	string name = 2; // Human-readable name for the store.
	StoreType type = 3; // Type of store (e.g., LEVEL_DB, BIG_CACHE).
}

// Request to open a data store with specific options.
message OpenRqst {
	string id = 1; // Identifier of the store to open.
	string options = 2; // JSON string of options for opening the store.
}

message OpenRsp {
	bool result = 1; // Result of the open operation.
}

// Request to close a data store.
message CloseRqst {
	string id = 1; // Identifier of the store to close.
}

message CloseRsp {
	bool result = 1; // Result of the close operation.
}

// Request to create a new storage connection.
message CreateConnectionRqst {
	Connection connection = 1; // The connection details.
}

message CreateConnectionRsp {
	bool result = 1; // Result of the connection creation process.
}

// Request to delete an existing storage connection.
message DeleteConnectionRqst {
	string id = 1; // Identifier of the connection to delete.
}

message DeleteConnectionRsp {
	bool result = 1; // Result of the connection deletion process.
}

// Request to save an item in the key-value store.
message SetItemRequest {
	string id = 1; // Connection identifier.
	string key = 2; // Key for the item.
	bytes value = 3; // Data to store.
}

message SetItemResponse {
	bool result = 1; // Result of the set item operation.
}

// Request to save a large item in the key-value store.
message SetLargeItemRequest {
	string id = 1; // Connection identifier.
	string key = 2; // Key for the item.
	bytes value = 3; // Large data to store.
}

message SetLargeItemResponse {
	bool result = 1; // Result of the set large item operation.
}

// Request to retrieve a value with a given key.
message GetItemRequest {
	string id = 1; // Connection identifier.
	string key = 2; // Key of the item to retrieve.
}

message GetItemResponse {
	bytes result = 1; // Data retrieved from the store.
}

// Request to remove an item from the store.
message RemoveItemRequest {
	string id = 1; // Connection identifier.
	string key = 2; // Key of the item to remove.
}

message RemoveItemResponse {
	bool result = 1; // Result of the remove item operation.
}

// Request to clear all items from a store.
message ClearRequest {
	string id = 1; // Connection identifier.
}

message ClearResponse {
	bool result = 1; // Result of the clear operation.
}

// Request to delete a data store.
message DropRequest {
	string id = 1; // Connection identifier.
}

message DropResponse {
	bool result = 1; // Result of the drop operation.
}

message GetAllKeysRequest {
	string id = 1; // Connection identifier.
}

message GetAllKeysResponse {
	repeated string keys = 1; // Keys in the store.
}

// Request to stop the storage service.
message StopRequest {
}

message StopResponse {
}

// Service definition for storage operations.
service StorageService {
  	// Stops the storage server.
 	rpc Stop(StopRequest) returns (StopResponse);
	
	// Opens a storage and sets options.
	rpc Open(OpenRqst) returns (OpenRsp);
	
	// Closes the data store.
	rpc Close(CloseRqst) returns (CloseRsp);
	
	// Creates a new storage connection.
	rpc CreateConnection(CreateConnectionRqst) returns (CreateConnectionRsp);
	
	// Deletes an existing storage connection.
	rpc DeleteConnection(DeleteConnectionRqst) returns (DeleteConnectionRsp);

	// Saves an item in the key-value store.
	rpc SetItem(SetItemRequest) returns (SetItemResponse);
	
	// Saves a large item in the key-value store.
	rpc SetLargeItem(stream SetLargeItemRequest) returns (SetLargeItemResponse);
	
	// Retrieves a value with a given key.
	rpc GetItem(GetItemRequest) returns (stream GetItemResponse);
	
	// Removes an item with a given key.
	rpc RemoveItem(RemoveItemRequest) returns (RemoveItemResponse);
	
	// Removes all items from the store.
	rpc Clear(ClearRequest) returns (ClearResponse);
	
	// Deletes a store.
	rpc Drop(DropRequest) returns (DropResponse);

	// Get all keys in the store.
	rpc GetAllKeys(GetAllKeysRequest) returns (stream GetAllKeysResponse);
}
