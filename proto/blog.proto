syntax = "proto3";
package blog;

option go_package="github.com/globulario/services/golang/blog/blogpb";

/**
 * Represents an emoji reaction to a blog post or a comment.
 */
message Emoji {
  /** The ID of the account that set the emoji */
  string Account_id = 1;
  /** Timestamp of emoji creation */
  int64 CreationTime = 2;
  /** ID of the parent post or comment this emoji is associated with */
  string Parent = 3;
  /** The actual emoji, stored as a JSON string */
  string emoji = 4;
}

/**
 * Represents a comment on a blog post or on another comment.
 */
message Comment {
  /** Unique identifier for the comment */
  string Uuid = 1;
  /** ID of the parent entity (post or another comment) to which this comment belongs */
  string Parent = 2;
  /** ID of the account that made the comment */
  string Account_id = 3;
  /** Timestamp when the comment was created */
  int64 CreationTime = 4;
  /** Language of the comment, e.g., 'en', 'es', 'fr' */
  string Language = 5;
  /** Actual text content of the comment */
  string Text = 6;
  /** Replies to this comment, if any */
  repeated Comment Comments = 7;
  /** Emoji reactions to this comment */
  repeated Emoji Emotions = 8;
}

/**
 * Enum for the status of a blog post.
 */
enum BogPostStatus {
  DRAFT = 0;
  PUBLISHED = 1;
  ARCHIVED = 2;
}

/**
 * Represents a blog post.
 */
message BlogPost {
  /** Unique identifier for the blog post */
  string Uuid = 1;
  /** Author of the blog post */
  string Author = 2;
  /** Content of the blog post in JSON format */
  string Text = 3;
  /** Title of the blog post */
  string Title = 4;
  /** Subtitle of the blog post */
  string Subtitle = 5;
  /** Language of the blog post */
  string Language = 6;
  /** Keywords for search optimization */
  repeated string Keywords = 7;
  /** Timestamp when the blog post was created */
  int64 CreationTime = 8;
  /** Emoji reactions to the blog post */
  repeated Emoji Emotions = 9;
  /** Comments on the blog post */
  repeated Comment Comments = 10;
  /** URL of the thumbnail image for the blog post */
  string Thumbnail = 11;
  /** Current status of the blog post (Draft, Published, Archived) */
  BogPostStatus Status = 12;
  /** MAC address of the peer where the blog post is published */
  string Mac = 13;
  /** Domain where the blog post is published */
  string Domain = 14;
}

/**
 * Request message for creating a blog post.
 */
message CreateBlogPostRequest {
  /** Path where the search index will be stored */
  string indexPath = 1;
  /** ID of the account creating the post */
  string account_id = 2;
  /** Language of the blog post */
  string language = 3;
  /** List of keywords associated with the post */
  repeated string keywords = 4;
  /** Title of the blog post */
  string title = 5;
  /** Subtitle of the blog post */
  string subtitle = 6;
  /** URL of the image thumbnail for the blog post */
  string thumbnail = 7;
  /** Actual text content of the blog post */
  string text = 8;
}

/**
 * Response message for creating a blog post.
 */
message CreateBlogPostResponse {
  /** The created blog post */
  BlogPost blog_post = 1;
}

/**
 * Request message for saving/updating a blog post.
 */
message SaveBlogPostRequest {
  /** Unique identifier for the blog post to be updated */
  string uuid = 1;
  /** The blog post with updated information */
  BlogPost blog_post = 2;
  /** Path to the search index */
  string indexPath = 3;
}

/**
 * Response message for saving a blog post.
 */
message SaveBlogPostResponse {
  // This message is intentionally left empty as no specific response data is needed.
}

/**
 * Request message for retrieving blog posts by authors.
 */
message GetBlogPostsByAuthorsRequest {
  /** List of author account IDs */
  repeated string authors = 1;
  /** Maximum number of results to retrieve */
  int32 max = 2;
}

/**
 * Response message for retrieving blog posts by authors.
 */
message GetBlogPostsByAuthorsResponse {
  /** The retrieved blog post */
  BlogPost blog_post = 1;
}

/**
 * Request message for retrieving blog posts by UUIDs.
 */
message GetBlogPostsRequest {
  /** List of UUIDs of the blog posts to retrieve */
  repeated string uuids = 1;
}

/**
 * Response message for retrieving blog posts.
 */
message GetBlogPostsResponse {
  /** The retrieved blog post */
  BlogPost blog_post = 1;
}

/**
 * Request message for deleting a blog post.
 */
message DeleteBlogPostRequest {
  /** UUID of the blog post to be deleted */
  string uuid = 1;
  /** Path to the search index */
  string indexPath = 2;
}

/**
 * Response message for deleting a blog post.
 */
message DeleteBlogPostResponse{

}

// Request to add an emoji to a blog post or comment.
message AddEmojiRequest {
  string uuid = 1; // The target UUID of the blog post or comment.
  Emoji emoji = 2; // Information about the emoji being added.
}

// Response for adding an emoji to a post or comment.
message AddEmojiResponse{
   Emoji emoji = 1; // Information about the added emoji.
}

// Request to remove an emoji from a blog post or comment.
message RemoveEmojiRequest {
  string uuid = 1; // The target UUID of the blog post or comment.
  Emoji emoji = 2; // Information about the emoji being removed.
}

// Response for removing an emoji from a post or comment.
message RemoveEmojiResponse{
  Emoji emoji = 1; // Information about the removed emoji.
}

// Request to add a comment to a blog post or another comment.
message AddCommentRequest {
  string uuid = 1; // The target UUID of the blog post or parent comment.
  Comment comment = 2; // Information about the comment being added.
}

// Response for adding a comment to a post or another comment.
message AddCommentResponse{
  Comment comment = 1; // Information about the added comment.
}

// Request to remove a comment from a blog post or another comment.
message RemoveCommentRequest {
  string uuid = 1; // The target UUID of the blog post or parent comment.
  Comment comment = 2; // Information about the comment being removed.
}

// Response for removing a comment from a post or another comment.
message RemoveCommentResponse{
  // This message does not contain any fields.
}

////////////////////// Search ///////////////////////

// Represents a snippet of a search result.
message Snippet {
	string field = 1; // The field in which the snippet was found.
	repeated string fragments = 2; // The snippets of text found in the field.
}

// Represents a single hit in the search results.
message SearchHit {
	int32 index = 1; // The index of the hit in the search results.
	double score = 2; // The score of the hit in the search results.
	repeated Snippet snippets = 3; // The snippets found in this hit.

	// The blog post corresponding to this hit.
	BlogPost blog = 4;
}

// Summary of the search operation.
message SearchSummary {
	string query = 1; // The search query input.
	uint64 total = 2; // The total number of matches found.
	int64 took = 3; // The time taken for the search operation.
}

// Represents a single term in a search facet.
message SearchFacetTerm {
	string term = 1; // The term in the facet.
	int32 count = 2; // The count of how often the term appears.
}

// Represents a facet in search results.
message SearchFacet {
	string field = 1; // The field for which the facet is relevant.
	int32 total = 2; // The total count of terms for this facet.
	repeated SearchFacetTerm terms = 3; // The terms within this facet.
	int32 other = 4; // The count of other terms not listed individually.
}

// Collection of facets from search results.
message SearchFacets {
	repeated SearchFacet facets = 1; // The list of facets.
}

// Request for searching blog posts.
message SearchBlogPostsRequest {
	string query = 1; // The search query.
	repeated string fields = 2; // The fields to be searched.
	string indexPath = 3; // The index path for the search.
	int32 size = 4; // The number of results to return.
	int32 offset = 5; // The offset for the results.
}

// Response for searching blog posts.
message SearchBlogPostsResponse {
    // Union of possible results.
    oneof result  {
        SearchSummary summary = 1; // The summary of the search results.
        SearchHit hit = 2; // A single hit from the search results.
	      SearchFacets facets = 3; // The facets from the search results.
    }
}


/**
 * Proto file for BlogService, offering a range of functionalities for blogging.
 * This includes creating, updating, managing blog posts, comments, emojis, and
 * searching through blog posts.
 */
service BlogService {

    // Creates a new blog post. This is a simple request-response call.
    rpc CreateBlogPost(CreateBlogPostRequest) returns (CreateBlogPostResponse);
  
    // Updates an existing blog post. This is also a simple request-response call.
    rpc SaveBlogPost(SaveBlogPostRequest) returns (SaveBlogPostResponse);
  
    // Retrieves blog posts by a given set of authors. This method streams the responses back to the client.
    rpc GetBlogPostsByAuthors(GetBlogPostsByAuthorsRequest) returns (stream GetBlogPostsByAuthorsResponse);
  
    // Retrieves blog posts based on keywords or text content within the post. Responses are streamed to the client.
    rpc GetBlogPosts(GetBlogPostsRequest) returns (stream GetBlogPostsResponse);
  
    // Searches for blog posts based on various search criteria. This is a streaming response to handle potentially large result sets.
    rpc SearchBlogPosts(SearchBlogPostsRequest) returns (stream SearchBlogPostsResponse);
  
    // Deletes a specified blog post. This is a simple request-response call.
    rpc DeleteBlogPost(DeleteBlogPostRequest) returns (DeleteBlogPostResponse);
  
    // Adds an emoji as a reaction to a post or a comment. This is a simple request-response call.
    rpc AddEmoji(AddEmojiRequest) returns (AddEmojiResponse);
  
    // Removes an emoji reaction from a post or a comment. This is a simple request-response call.
    rpc RemoveEmoji(RemoveEmojiRequest) returns (RemoveEmojiResponse);
  
    // Adds a comment to a post or another comment. This is a simple request-response call.
    rpc AddComment(AddCommentRequest) returns (AddCommentResponse);
  
    // Removes a comment from a post or another comment. This is a simple request-response call.
    rpc RemoveComment(RemoveCommentRequest) returns (RemoveCommentResponse);
  
}