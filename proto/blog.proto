/**
 * You can use echo as starter project.
 */

syntax = "proto3";
package blog;

option go_package="blog/blogpb";

/**
 * You emoji it...
 */
message Emoji {

  /** The account id you set the like */
  string account_id = 1;

  /** The creation time. */
  int64 creationTime = 2;

  /** The post or the comment */
  string parent = 3;

  /** The emoji json string */
  string emoji = 4;
}

/**
 * Comment about what...
 */
message Comment {
  /** Help to track comment **/
  string uuid = 1;

  /** can be the blog or other comment */
  string parent = 2;

  /** The account id you set the like */
  string account_id = 3;

  /** The creation time. */
  int64 creationTime = 4;

  /** The language ex. en, es, fr*/
	string language = 5;

  /** The comment text */
  string text = 6;

  /** If there is answer's */
  repeated Comment comments = 7;

  /** The list of pepole's reation */
  repeated Emoji emotions = 8;
}

/**
 * The blog state.
 */
enum BogPostStatus{
  DRAFT = 0;
  PUBLISHED = 1;
  ARCHIVED = 2;
}

message BlogPost {
  /** A unique identifier */
  string uuid = 1;

  /** The author of the post */
  string author = 2;

  /** The text will be a json object that contain the Blog text */
  string text = 3;

  /** A title **/
  string title = 4;

	/** The language ex. en, es, fr*/
	string language = 5;

  /** Keywords Can be use by the search engine **/
	repeated  string keywords = 6;

  /** The creation time. */
  int64 creationTime = 7;

  /** Th list of unlike's */
  repeated Emoji emotions = 8;

  /** The list of comment's */
  repeated Comment comments = 9;

  /** A thumbnail to display quickly **/
  string thumbnail = 10;

  /** The satus of the blog */
  BogPostStatus status = 11;

  /** The mac address of the peer where the blog is publish */
  string mac = 12;
}

message CreateBlogPostRequest {
  /** Where the search indexation will be store**/
  string indexPath = 1;

  /** The author of the post */
  string account_id = 2;

  /** The blog post language */
	string language = 3;

  /** List of keywords */
  repeated  string keywords = 4;

  /** A title **/
  string title = 5;

  /** A image url */
  string thumbnail = 6;

  /** The text */
  string text = 7; 

}

message CreateBlogPostResponse {
  BlogPost blog_post = 1;

}

/** Update a blog post */
message SaveBlogPostRequest {
  BlogPost blog_post = 1;
  string indexPath = 2;
}

message SaveBlogPostResponse {
   /* nothing here */
}

message GetBlogPostsByAuthorsRequest{
  /** List of accounts */
  repeated string authors = 1;
  /** The maximum number of results */
  int32 max = 2;

}

message GetBlogPostsByAuthorsResponse{
  /** The list of post */
 BlogPost blog_post = 1;
}

/** Get blogs by uuids */
message GetBlogPostsRequest{
  repeated string uuids = 1;
}

message GetBlogPostsResponse{
  /** Return post one by one... */
  BlogPost blog_post = 1;
}

/** Delete a post */
message DeleteBlogPostRequest{
  string uuid = 1;
  string indexPath = 2;
}

message DeleteBlogPostResponse{

}

message AddEmojiRequest {
  string uuid = 1; // The target uuid.
  Emoji emoji = 2; // info about the emoji.
}

message AddEmojiResponse{
   Emoji emoji = 1; // info about the emoji.
}

message RemoveEmojiRequest {
  string uuid = 1; // The target uuid.
  Emoji emoji = 2; // info about the emoji.
}

message RemoveEmojiResponse{
  Emoji emoji = 1; // info about the emoji.
}

message AddCommentRequest {
  string uuid = 1; // The target uuid.
  Comment comment = 2; // info about the like.
}

message AddCommentResponse{
  Comment comment = 1; // info about the like.
}

message RemoveCommentRequest {
  string uuid = 1; // The target uuid.
  Comment comment = 2; // info about the like.
}

message RemoveCommentResponse{
}

////////////////////// Search ///////////////////////
message Snippet {
	string field = 1;
	repeated string fragments = 2;
}

message SearchHit {
	int32 index = 1;
	double score = 2;
	repeated Snippet snippets = 3;

	// the underlying values.
	BlogPost blog = 4;
}

message SearchSummary {
	string query = 1; // the search input
	uint64 total = 2; // number of found match
	int64 took = 3;
}

message SearchFacetTerm {
	string term = 1;
	int32 count = 2;
}

message SearchFacet {
	string field = 1;
	int32 total = 2; 
	repeated SearchFacetTerm terms = 3;
	int32 other = 4;
}

message SearchFacets {
	repeated SearchFacet facets = 1;
}

message SearchBlogPostsRequest {
	string query = 1;
	repeated string fields = 2;
	string indexPath = 3;
	int32 size = 4;
	int32 offset = 5;
}

message SearchBlogPostsResponse {
    oneof result  {
        SearchSummary summary = 1;
        SearchHit hit = 2;
	      SearchFacets facets = 3;
    }
}


/** A blogger for globular */
service BlogService {


  // One request followed by one response
	rpc CreateBlogPost(CreateBlogPostRequest) returns (CreateBlogPostResponse);

  // Update a blog post...
  rpc SaveBlogPost(SaveBlogPostRequest) returns (SaveBlogPostResponse);

  // Retreive Blog Post by author
  rpc GetBlogPostsByAuthors(GetBlogPostsByAuthorsRequest) returns (stream GetBlogPostsByAuthorsResponse);

  // Search blog by keyword's or text find in the post...
  rpc GetBlogPosts(GetBlogPostsRequest) returns (stream GetBlogPostsResponse);

  // Search blogpost...
	rpc SearchBlogPosts(SearchBlogPostsRequest) returns (stream SearchBlogPostsResponse);

  // Delete a blog.
  rpc DeleteBlogPost(DeleteBlogPostRequest) returns (DeleteBlogPostResponse);

  // Add reaction to a post or comment
  rpc AddEmoji(AddEmojiRequest) returns (AddEmojiResponse);

  // Remove reaction from a post or comment.
  rpc RemoveEmoji(RemoveEmojiRequest) returns (RemoveEmojiResponse);

  // Comment a post or comment
  rpc AddComment(AddCommentRequest) returns (AddCommentResponse);

  // Remove comment from a post or comment.
  rpc RemoveComment(RemoveCommentRequest) returns (RemoveCommentResponse);

}