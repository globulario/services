/**
 * You can use echo as starter project.
 */
syntax = "proto3";

package file;

option go_package="file/filepb";

message Empty {}

message ReadDirRequest {
	string path = 1;
	bool recursive = 2;
	int32 thumnailWidth = 3;
	int32 thumnailHeight = 4;
}

message ReadDirResponse {
	bytes data = 1; // The json string containing the list of files.
}

message CreateDirRequest {
	string path = 1; // The parent path
	string name = 2; // the new directory name
}

message CreateDirResponse {
	bool result = 1;
}

message DeleteDirRequest {
	string path = 1;
}

message DeleteDirResponse {
	bool result = 1;
}

message RenameRequest {
	string path = 1; // the path of the directory
	string new_name = 2; // the new name.
	string old_name = 3; // the old name.
}

message RenameResponse {
	bool result = 1;
}

message CopyRequest {
	string path = 1; // the path of the directory where to copy files.
	repeated string files = 2; // The list of files/directories to be copied
}

message CopyResponse {
	bool result = 1;
}

message MoveRequest {
	string path = 1; // the path of the directory where to move files.
	repeated string files = 2; // The list of files/directories to be move
}

message MoveResponse {
	bool result = 1;
}

message GetFileInfoRequest {
	string path = 1;
	int32 thumnailWidth = 2;
	int32 thumnailHeight = 3;
}

message GetFileInfoResponse {
	string data = 1; // The json string containing the file info.
}

// Read file as a binary file.
message ReadFileRequest {
	string path = 1;
}

message ReadFileResponse {
	bytes data = 1; // The file content.
}

// Read file as a binary file.
message SaveFileRequest {
	oneof file{
		string path = 1;
		bytes  data = 2;
	}
}

message SaveFileResponse {
	bool result = 1;
}

// Delete file
message DeleteFileRequest {
	string path = 1;
}

message DeleteFileResponse {
	bool result = 1;
}

// Return all images thumnails from a directory
message GetThumbnailsRequest{
	string path = 1;
	bool recursive = 2;
	int32 thumnailWidth = 3;
	int32 thumnailHeight = 4;
}

message GetThumbnailsResponse {
	bytes data = 1; // The json string containing the list of files.
}

// Write the execel file on the server.
message CreateArchiveRequest{
	repeated string paths = 1; // The directory to archive
	string name = 2; // the name
}

message CreateArchiveResponse{
	string result = 1;
}

// Write the execel file on the server.
message WriteExcelFileRequest{
	string path = 1;
	string data = 2; // JSON object containing {{"name":"page1", "data"[[1,2,3][4,5,6][7,8,9]]}}
}

message WriteExcelFileResponse{
	bool result = 1; // return true by default.
}

message HtmlToPdfRqst{
	string html = 1; // The html values.
}

message HtmlToPdfResponse{
	bytes pdf = 2; //The pdf data file.
}


/** Video conversion releated function. **/

message CreateVideoPreviewRequest {
	string path = 1;
	int32 nb = 2;
	int32 height = 3;
}

message CreateVideoPreviewResponse{

}

message CreateVideoTimeLineRequest{

	string path = 1;
	int32 width = 2;
	float fps = 3;
}

message CreateVideoTimeLineResponse{
	/** Nothing here **/
}

message ConvertVideoToMpeg4H264Request{
	string path = 1;
}

message ConvertVideoToMpeg4H264Response{
	string outpout = 1; // info about the conversion.
}

message ConvertVideoToHlsRequest{
	string path = 1;
}

message ConvertVideoToHlsResponse{
	string outpout = 1; // info about the conversion.
}

// Process video request.
message StartProcessVideoRequest {
	
}

message StartProcessVideoResponse {
	
}

// Return true if converstion is running.
message IsProcessVideoRequest{

}

// Return true if converstion is running.
message IsProcessVideoResponse{
	bool isProcessVideo = 1;
}

// Upload video request
message UploadVideoRequest {
	string url = 1; // the url of the video to upload
	string dest = 2; // the video destination
	string format = 3; // can be mp3 or mp4
}

// Upload video response
message UploadVideoResponse {
	int32 pid = 1;
	string result = 2;
}

// Stop process video.
message StopProcessVideoRequest {
	
}

message StopProcessVideoResponse {
	
}


message SetVideoConversionRequest {
	bool value = 1;
}

message SetVideoConversionResponse {

}

message SetVideoStreamConversionRequest {
	bool value = 1;
}

message SetVideoStreamConversionResponse {

}

message SetStartVideoConversionHourRequest{
	string value = 1;
}

message SetStartVideoConversionHourResponse {

}

message SetMaximumVideoConversionDelayRequest{
	string value = 1;
}

message SetMaximumVideoConversionDelayResponse{
	
}

message VideoConversionError{
	string path = 1;
	string error = 2;
}

message GetVideoConversionErrorsRequest{

}

message GetVideoConversionErrorsResponse{
	repeated VideoConversionError errors = 1;
}

message ClearVideoConversionErrorsRequest{
	
}

message ClearVideoConversionErrorsResponse{

}

message ClearVideoConversionErrorRequest{
	string path = 1;
}

message ClearVideoConversionErrorResponse{

}

message ClearVideoConversionLogsRequest{

}

message ClearVideoConversionLogsResponse{

}

message VideoConversionLog{
	string path = 1;
	string msg = 2;
	int64 log_time = 3;
	string status = 4;
}

message GetVideoConversionLogsRequest{

}

message GetVideoConversionLogsResponse{
	repeated VideoConversionLog logs = 1;
}

message StopRequest {
	
}

message StopResponse {
	
}

// Add a public dir.
message AddPublicDirRequest{
	string path = 1;
}

message AddPublicDirResponse{

}

// Add a public dir.
message RemovePublicDirRequest{
	string path = 1;
}

message RemovePublicDirResponse{

}

// Return the list of public file path.
message GetPublicDirsRequest {
	
}

message GetPublicDirsResponse {
	repeated string dirs = 1;
}

// Generate playlist for a given directory
message GeneratePlaylistRequest {
	string dir = 1;
}

message GeneratePlaylistResponse {

}


service FileService {
  	// Stop the server.
 	rpc Stop(StopRequest) returns (StopResponse);

	// Append public dir to the list of dir...
	rpc  AddPublicDir( AddPublicDirRequest ) returns(AddPublicDirResponse);

	// Append public dir to the list of dir...
	rpc  RemovePublicDir( RemovePublicDirRequest ) returns(RemovePublicDirResponse);

	// Return the list of public path from a given file server...
	rpc GetPublicDirs( GetPublicDirsRequest )  returns(GetPublicDirsResponse);

	// Return a JOSN string containing the directories informations.
	// In case of image I will return a thumnail of the image so 
	// so the response string can became large.
	rpc ReadDir(ReadDirRequest) returns (stream ReadDirResponse){};

	// Create a new directory
 	rpc CreateDir(CreateDirRequest) returns (CreateDirResponse){};
	
	// Delete a directories
	rpc DeleteDir(DeleteDirRequest) returns (DeleteDirResponse){};
	
	// Rename a file/directory
	rpc Rename(RenameRequest) returns (RenameResponse){};
	
	// Move a file/directory
	rpc Move(MoveRequest) returns (MoveResponse){};
	
	// Copy a file/directory
	rpc Copy(CopyRequest) returns (CopyResponse){};
	
	// Create an archive from a given dir and set it with name.
	rpc CreateAchive(CreateArchiveRequest) returns (CreateArchiveResponse);
	
	// Get file info, if the file exist it return the file size, name, thumnail...
	rpc GetFileInfo(GetFileInfoRequest) returns (GetFileInfoResponse){};

	// Read file, can be use for small to medium file...
	rpc ReadFile(ReadFileRequest) returns (stream ReadFileResponse){};
	
	// Save a file on the server...
	rpc SaveFile(stream SaveFileRequest) returns (SaveFileResponse){};
	
	// Delete file
	rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse){};
	
	// Specific files...
	rpc GetThumbnails(GetThumbnailsRequest) returns (stream GetThumbnailsResponse){};

	// Upload a video from a given url, it use youtube-dl.
	rpc UploadVideo(UploadVideoRequest) returns (stream UploadVideoResponse){};

	// Create a viedeo Preview...
	rpc CreateVideoPreview(CreateVideoPreviewRequest) returns (CreateVideoPreviewResponse){};

	// Create video time line
	rpc CreateVideoTimeLine(CreateVideoTimeLineRequest) returns (CreateVideoTimeLineResponse){};

	// Convert a file from mkv, avi or other format to MPEG-4 AVC
	rpc ConvertVideoToMpeg4H264(ConvertVideoToMpeg4H264Request) returns (ConvertVideoToMpeg4H264Response){};

	// Convert a video file (must be  MPEG-4 H264) to HLS stream... That will automatically generate the 
	// the streams for various resolutions. (see script create-vod-hls.sh for more info)
	rpc ConvertVideoToHls(ConvertVideoToHlsRequest) returns (ConvertVideoToHlsResponse){};

	// Start process video on the server.
	rpc StartProcessVideo(StartProcessVideoRequest) returns (StartProcessVideoResponse) {};

	// Stop process video on the server.
	rpc StopProcessVideo(StopProcessVideoRequest) returns (StopProcessVideoResponse) {};

	// Return true if video processing is running.
	rpc IsProcessVideo(IsProcessVideoRequest) returns (IsProcessVideoResponse) {};

	// Set video processing.
	rpc SetVideoConversion(SetVideoConversionRequest) returns (SetVideoConversionResponse) {};

	// Set video stream conversion.
	rpc SetVideoStreamConversion(SetVideoStreamConversionRequest) returns (SetVideoStreamConversionResponse) {};

	// Set the hour when the video conversion must start.
	rpc SetStartVideoConversionHour(SetStartVideoConversionHourRequest) returns (SetStartVideoConversionHourResponse) {};

	// Set the maximum delay when conversion can run, it will finish actual conversion but it will not begin new conversion past this delay.
	rpc SetMaximumVideoConversionDelay(SetMaximumVideoConversionDelayRequest) returns (SetMaximumVideoConversionDelayResponse) {};

	// Return the list of failed video conversion.
	rpc GetVideoConversionErrors(GetVideoConversionErrorsRequest) returns (GetVideoConversionErrorsResponse) {};

	// Clear the video conversion errors
	rpc ClearVideoConversionErrors(ClearVideoConversionErrorsRequest) returns (ClearVideoConversionErrorsResponse) {};

	// Clear a specific video conversion error
	rpc ClearVideoConversionError(ClearVideoConversionErrorRequest) returns (ClearVideoConversionErrorResponse) {};

	// Clear a specific video conversion log
	rpc ClearVideoConversionLogs(ClearVideoConversionLogsRequest) returns (ClearVideoConversionLogsResponse) {};

	// Return the list of log messages
	rpc GetVideoConversionLogs(GetVideoConversionLogsRequest) returns (GetVideoConversionLogsResponse){};

	// Generate the playlists for a directory...
	rpc GeneratePlaylist(GeneratePlaylistRequest) returns (GeneratePlaylistResponse) {};

	// Excel files...
	rpc WriteExcelFile(WriteExcelFileRequest) returns (WriteExcelFileResponse){};
	
	// Convert html to pdf.
	rpc HtmlToPdf(HtmlToPdfRqst) returns(HtmlToPdfResponse){};
}