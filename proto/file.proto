/**
 * You can use echo as starter project.
 */
 syntax = "proto3";

 package file;
 
 option go_package="github.com/globulario/services/golang/file/filepb";
 import "google/protobuf/struct.proto";
 
 message Empty {
	 // An empty message, often used for simple requests or responses that don't require any data.
 }
 
 /**
  * FileInfo contains detailed information about a file or directory.
  */
 message FileInfo {
	 string name = 1;         // The name of the file or directory.
	 int64 size = 2;          // The size of the file in bytes.
	 uint32 mode = 3;         // File mode (permissions).
	 int64 mode_time = 4;     // Last modification time of the file.
	 bool is_dir = 5;         // True if it's a directory.
	 string path = 6;         // Full path of the file or directory.
	 string mime = 7;         // MIME type of the file.
	 string thumbnail = 8;    // Thumbnail image (if available).
	 string checksum = 9;     // Checksum of the file for validation.
 
	 // Metadata of the file, stored as a flexible struct.
	 google.protobuf.Struct metadata = 10;
 
	 // List of files within a directory (used in recursive directory listings).
	 repeated FileInfo files = 11;
 }
 
 message ReadDirRequest {
	 string path = 1;            // The path of the directory to read.
	 bool recursive = 2;         // Whether to list files recursively.
	 int32 thumbnailWidth = 3;   // Width for generated thumbnails.
	 int32 thumbnailHeight = 4;  // Height for generated thumbnails.
 }
 
 message ReadDirResponse {
	 FileInfo info = 1;  // Information about the files in the requested directory.
 }
 
 message CreateDirRequest {
	 string path = 1;  // The path where the new directory will be created.
	 string name = 2;  // The name of the new directory.
 }
 
 message CreateDirResponse {
	 bool result = 1;  // Indicates if the directory was created successfully.
 }
 
 message DeleteDirRequest {
	 string path = 1;  // The path of the directory to be deleted.
 }
 
 message DeleteDirResponse {
	 bool result = 1;  // Indicates if the directory was deleted successfully.
 }
 
 message RenameRequest {
	 string path = 1;     // The path of the file or directory.
	 string new_name = 2; // The new name for the file or directory.
	 string old_name = 3; // The current name of the file or directory.
 }
 
 message RenameResponse {
	 bool result = 1;  // Indicates if the rename operation was successful.
 }
 
 message CopyRequest {
	 string path = 1;        // The destination path for the copied files/directories.
	 repeated string files = 2;  // List of files/directories to be copied.
 }
 
 message CopyResponse {
	 bool result = 1;  // Indicates if the copy operation was successful.
 }
 
 message MoveRequest {
	 string path = 1;        // The destination path for the moved files/directories.
	 repeated string files = 2;  // List of files/directories to be moved.
 }
 
 message MoveResponse {
	 bool result = 1;  // Indicates if the move operation was successful.
 }
 

 message GetFileInfoRequest {
    string path = 1;            // The path of the file for which information is requested.
    int32 thumbnailWidth = 2;   // Desired width of the thumbnail.
    int32 thumbnailHeight = 3;  // Desired height of the thumbnail.
}

message GetFileInfoResponse {
    FileInfo info = 1;  // Detailed information about the file.
}

message GetFileMetadataRequest {
    string path = 1;  // The path of the file for which metadata is requested.
}

message GetFileMetadataResponse {
    google.protobuf.Struct result = 1;  // Metadata of the file as a structured object.
}

// Request to read a file as binary data.
message ReadFileRequest {
    string path = 1;  // The path of the file to read.
}

// Response containing the file's binary data.
message ReadFileResponse {
    bytes data = 1;  // The binary content of the file.
}

// Request to save a file. The file can be specified either by path or by binary data.
message SaveFileRequest {
    oneof file {
        string path = 1;  // The path where the file will be saved.
        bytes data = 2;   // The binary data of the file to save.
    }
}

message SaveFileResponse {
    bool result = 1;  // Indicates if the file save operation was successful.
}

// Request to delete a file.
message DeleteFileRequest {
    string path = 1;  // The path of the file to be deleted.
}

message DeleteFileResponse {
    bool result = 1;  // Indicates if the file was deleted successfully.
}

// Request to get thumbnails for all images in a directory.
message GetThumbnailsRequest {
    string path = 1;            // The path of the directory.
    bool recursive = 2;         // Whether to search for images recursively.
    int32 thumbnailWidth = 3;   // Desired width of the thumbnails.
    int32 thumbnailHeight = 4;  // Desired height of the thumbnails.
}

// Response containing thumbnails data.
message GetThumbnailsResponse {
    bytes data = 1;  // JSON string containing the list of files with their thumbnail data.
}

// Request to create an archive (e.g., zip) of specified directories.
message CreateArchiveRequest {
    repeated string paths = 1;  // List of directories to include in the archive.
    string name = 2;            // The desired name of the archive file.
}

message CreateArchiveResponse {
    string result = 1;  // Path or identifier of the created archive.
}

// Request to create a shortcut link to a file.
message CreateLnkRequest {
    string path = 1;  // The directory where the link will be created.
    string name = 2;  // The name of the link file (must end with '.lnk').
    string lnk = 3;   // JSON containing the information of the linked file.
}

message CreateLnkResponse {
    // This message is empty as the response does not require specific data.
}

// Request to write an Excel file on the server.
message WriteExcelFileRequest {
    string path = 1;  // The path where the Excel file will be written.
    string data = 2;  // JSON object containing Excel data (e.g., sheets, cells).
}

message WriteExcelFileResponse {
    bool result = 1;  // Indicates if the Excel file write operation was successful.
}


message HtmlToPdfRqst {
    string html = 1; // The HTML content to be converted to PDF.
}

message HtmlToPdfResponse {
    bytes pdf = 1; // The resulting PDF file data.
}

/** Video conversion related functions. **/

message CreateVideoPreviewRequest {
    string path = 1;   // The path of the video file.
    int32 nb = 2;      // Number of preview images to generate.
    int32 height = 3;  // Height of the preview images.
}

message CreateVideoPreviewResponse {
    // This message is empty as the response does not require specific data.
}

message CreateVideoTimeLineRequest {
    string path = 1;  // The path of the video file.
    int32 width = 2;  // Width of the timeline images.
    float fps = 3;    // Frames per second for the timeline.
}

message CreateVideoTimeLineResponse {
    // This message is empty as the response does not require specific data.
}

message ConvertVideoToMpeg4H264Request {
    string path = 1;  // The path of the video file to convert.
}

message ConvertVideoToMpeg4H264Response {
    string output = 1; // Information about the conversion process.
}

message ConvertVideoToHlsRequest {
    string path = 1;  // The path of the video file to convert.
}

message ConvertVideoToHlsResponse {
    string output = 1; // Information about the conversion process.
}

// Request to start processing a video.
message StartProcessVideoRequest {
    string path = 1;  // Path of the video to process. If empty, processes all videos.
}

message StartProcessVideoResponse {
    // This message is empty as the response does not require specific data.
}

// Request to start processing audio.
message StartProcessAudioRequest {
    string path = 1;  // Path of the audio to process. If empty, processes all audio.
}

message StartProcessAudioResponse {
    // This message is empty as the response does not require specific data.
}

// Request to check if video processing is ongoing.
message IsProcessVideoRequest {
    // No fields required for this request.
}

// Response to indicate if video processing is ongoing.
message IsProcessVideoResponse {
    bool isProcessVideo = 1; // True if video processing is currently running.
}

// Request to upload a file.
message UploadFileRequest {
    string url = 1;    // URL of the file to upload.
    string dest = 2;   // Destination path for the uploaded file.
    string name = 3;   // Name of the file.
    string domain = 4; // Domain from which the file is being uploaded.
    bool isDir = 5;    // True if the upload is a directory (e.g., for a directory of streams).
}

message UploadFileResponse {
    int64 uploaded = 1; // Amount of data uploaded.
    int64 total = 2;    // Total size of the file.
    string info = 3;    // Information about the upload status, errors, or completion.
}

// Request to upload a video.
message UploadVideoRequest {
    string url = 1;    // URL of the video to upload.
    string dest = 2;   // Destination path for the uploaded video.
    string format = 3; // Desired format of the video (e.g., mp3, mp4).
}

// Response to video upload request.
message UploadVideoResponse {
    int32 pid = 1;    // Process ID of the upload task.
    string result = 2; // Result of the upload process.
}


/// Stop process video.
message StopProcessVideoRequest {
    // No fields required for this request.
}

message StopProcessVideoResponse {
    // This message is empty as the response does not require specific data.
}

message SetVideoConversionRequest {
    bool value = 1; // Boolean to enable or disable video conversion.
}

message SetVideoConversionResponse {
    // This message is empty as the response does not require specific data.
}

message SetVideoStreamConversionRequest {
    bool value = 1; // Boolean to enable or disable video stream conversion.
}

message SetVideoStreamConversionResponse {
    // This message is empty as the response does not require specific data.
}

message SetStartVideoConversionHourRequest {
    string value = 1; // The start hour for video conversion.
}

message SetStartVideoConversionHourResponse {
    // This message is empty as the response does not require specific data.
}

message SetMaximumVideoConversionDelayRequest {
    string value = 1; // The maximum delay for video conversion.
}

message SetMaximumVideoConversionDelayResponse {
    // This message is empty as the response does not require specific data.
}

message VideoConversionError {
    string path = 1;  // Path of the video file.
    string error = 2; // Error message encountered during conversion.
}

message GetVideoConversionErrorsRequest {
    // No fields required for this request.
}

message GetVideoConversionErrorsResponse {
    repeated VideoConversionError errors = 1; // List of video conversion errors.
}

message ClearVideoConversionErrorsRequest {
    // No fields required for this request.
}

message ClearVideoConversionErrorsResponse {
    // This message is empty as the response does not require specific data.
}

message ClearVideoConversionErrorRequest {
    string path = 1; // Path of the video file for which to clear the error.
}

message ClearVideoConversionErrorResponse {
    // This message is empty as the response does not require specific data.
}

message ClearVideoConversionLogsRequest {
    // No fields required for this request.
}

message ClearVideoConversionLogsResponse {
    // This message is empty as the response does not require specific data.
}

message VideoConversionLog {
    string path = 1;     // Path of the video file.
    string msg = 2;      // Log message.
    int64 log_time = 3;  // Timestamp of the log entry.
    string status = 4;   // Status of the conversion process.
}

message GetVideoConversionLogsRequest {
    // No fields required for this request.
}

message GetVideoConversionLogsResponse {
    repeated VideoConversionLog logs = 1; // List of video conversion logs.
}

message StopRequest {
    // No fields required for this request.
}

message StopResponse {
    // This message is empty as the response does not require specific data.
}

// Add a public directory.
message AddPublicDirRequest {
    string path = 1; // Path of the directory to make public.
}

message AddPublicDirResponse {
    // This message is empty as the response does not require specific data.
}

// Remove a public directory.
message RemovePublicDirRequest {
    string path = 1; // Path of the public directory to remove.
}

message RemovePublicDirResponse {
    // This message is empty as the response does not require specific data.
}

// Request to get the list of public directories.
message GetPublicDirsRequest {
    // No fields required for this request.
}

message GetPublicDirsResponse {
    repeated string dirs = 1; // List of paths of public directories.
}

// Request to generate a playlist for a given directory.
message GeneratePlaylistRequest {
    string dir = 1; // Directory for which to generate the playlist.
}

message GeneratePlaylistResponse {
    // This message is empty as the response does not require specific data.
}

// FileService defines a set of RPCs for managing files and directories, including operations like 
// creating, reading, updating, deleting, and managing conversions and metadata for various file types.
// It also includes services for video processing, thumbnail generation, and public directory management.
service FileService {
    // Stop the server.
    rpc Stop(StopRequest) returns (StopResponse);

    // Add a directory to the list of public directories.
    rpc AddPublicDir(AddPublicDirRequest) returns (AddPublicDirResponse);

    // Remove a directory from the list of public directories.
    rpc RemovePublicDir(RemovePublicDirRequest) returns (RemovePublicDirResponse);

    // Return the list of public directories.
    rpc GetPublicDirs(GetPublicDirsRequest) returns (GetPublicDirsResponse);

    // Return a JSON string containing the directory information, including thumbnails for images.
    rpc ReadDir(ReadDirRequest) returns (stream ReadDirResponse);

    // Create a new directory.
    rpc CreateDir(CreateDirRequest) returns (CreateDirResponse);

    // Create a link file.
    rpc CreateLnk(CreateLnkRequest) returns (CreateLnkResponse);

    // Delete a directory.
    rpc DeleteDir(DeleteDirRequest) returns (DeleteDirResponse);

    // Rename a file or directory.
    rpc Rename(RenameRequest) returns (RenameResponse);

    // Move a file or directory.
    rpc Move(MoveRequest) returns (MoveResponse);

    // Copy a file or directory.
    rpc Copy(CopyRequest) returns (CopyResponse);

    // Create an archive from a given directory and set its name.
    rpc CreateArchive(CreateArchiveRequest) returns (CreateArchiveResponse);

    // Get file information, including size, name, and thumbnail.
    rpc GetFileInfo(GetFileInfoRequest) returns (GetFileInfoResponse);

    // Return file metadata.
    rpc GetFileMetadata(GetFileMetadataRequest) returns (GetFileMetadataResponse);

    // Read a file, suitable for small to medium-sized files.
    rpc ReadFile(ReadFileRequest) returns (stream ReadFileResponse);

    // Save a file on the server.
    rpc SaveFile(stream SaveFileRequest) returns (SaveFileResponse);

    // Delete a file.
    rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);

    // Retrieve thumbnails for specific files.
    rpc GetThumbnails(GetThumbnailsRequest) returns (stream GetThumbnailsResponse);

    // Upload a video from a URL (e.g., YouTube, Hulu, Pornhub).
    rpc UploadVideo(UploadVideoRequest) returns (stream UploadVideoResponse);

    // Upload a file from a URL.
    rpc UploadFile(UploadFileRequest) returns (stream UploadFileResponse);

    // Create a video preview.
    rpc CreateVideoPreview(CreateVideoPreviewRequest) returns (CreateVideoPreviewResponse);

    // Create a video timeline.
    rpc CreateVideoTimeLine(CreateVideoTimeLineRequest) returns (CreateVideoTimeLineResponse);

    // Convert a video file to MPEG-4 AVC (H.264) format.
    rpc ConvertVideoToMpeg4H264(ConvertVideoToMpeg4H264Request) returns (ConvertVideoToMpeg4H264Response);

    // Convert a video file to HLS (HTTP Live Streaming) format.
    rpc ConvertVideoToHls(ConvertVideoToHlsRequest) returns (ConvertVideoToHlsResponse);

    // Start processing video on the server.
    rpc StartProcessVideo(StartProcessVideoRequest) returns (StartProcessVideoResponse);

    // Start processing audio on the server.
    rpc StartProcessAudio(StartProcessAudioRequest) returns (StartProcessAudioResponse);

    // Stop processing video on the server.
    rpc StopProcessVideo(StopProcessVideoRequest) returns (StopProcessVideoResponse);

    // Check if video processing is currently running.
    rpc IsProcessVideo(IsProcessVideoRequest) returns (IsProcessVideoResponse);

    // Set video processing configuration.
    rpc SetVideoConversion(SetVideoConversionRequest) returns (SetVideoConversionResponse);

    // Set video stream conversion configuration.
    rpc SetVideoStreamConversion(SetVideoStreamConversionRequest) returns (SetVideoStreamConversionResponse);

    // Set the start hour for video conversion.
    rpc SetStartVideoConversionHour(SetStartVideoConversionHourRequest) returns (SetStartVideoConversionHourResponse);

    // Set the maximum delay for video conversion.
    rpc SetMaximumVideoConversionDelay(SetMaximumVideoConversionDelayRequest) returns (SetMaximumVideoConversionDelayResponse);

    // Retrieve the list of failed video conversions.
    rpc GetVideoConversionErrors(GetVideoConversionErrorsRequest) returns (GetVideoConversionErrorsResponse);

    // Clear all video conversion errors.
    rpc ClearVideoConversionErrors(ClearVideoConversionErrorsRequest) returns (ClearVideoConversionErrorsResponse);

    // Clear a specific video conversion error.
    rpc ClearVideoConversionError(ClearVideoConversionErrorRequest) returns (ClearVideoConversionErrorResponse);

    // Clear video conversion logs.
    rpc ClearVideoConversionLogs(ClearVideoConversionLogsRequest) returns (ClearVideoConversionLogsResponse);

    // Retrieve video conversion logs.
    rpc GetVideoConversionLogs(GetVideoConversionLogsRequest) returns (GetVideoConversionLogsResponse);

    // Generate playlists for a directory.
    rpc GeneratePlaylist(GeneratePlaylistRequest) returns (GeneratePlaylistResponse);

    // Write an Excel file.
    rpc WriteExcelFile(WriteExcelFileRequest) returns (WriteExcelFileResponse);

    // Convert HTML to PDF.
    rpc HtmlToPdf(HtmlToPdfRqst) returns (HtmlToPdfResponse);
}
