syntax = "proto3";

package ldap;

option go_package="github.com/globulario/services/golang/ldap/ldappb";

message Connection {
	string id = 1;
	string host = 2;
	string user = 3;
	string password = 4;
	int32 port = 5;
}

// Create connection
message CreateConnectionRqst {
	Connection connection = 1;
}

message CreateConnectionRsp {
	bool result = 1;
}

// Delete connection
message DeleteConnectionRqst {
	string id = 1;
}

message DeleteConnectionRsp {
	bool result = 1;
}

// Close connection.
message CloseRqst {
	string id = 1;
}

message CloseRsp {
	bool result = 1;
}

message Search{
	string id = 1; // The connection id
	string baseDN = 2; // The base domain name.
	string filter = 3; // The Filter expression.
	repeated string attributes = 4; // The list of attributes to retreives.
}

message SearchRqst {
	Search search = 1;
}

message SearchResp {
	string result = 1; // Contain a JSON string with the results.
}

// Authenticate request.
message AuthenticateRqst {
	string id = 1;
	string login = 2;
	string pwd = 3;
}

message AuthenticateRsp {
	bool result = 1;
}

message StopRequest {
	
}

message StopResponse {
	
}

message SynchronizeRequest{

}

message SynchronizeResponse{

}

// Now the synchronization informations...
// "LdapSyncInfos": {
//     "my__ldap":
//       {
//         "ConnectionId": "my__ldap",
//         "GroupSyncInfos": {
//           "Base": "OU=Access_Groups,OU=Groups,OU=MON,OU=CA,DC=UD6,DC=UF6",
//           "Id": "name",
//           "Query": "((objectClass=group))"
//         },
//         "Refresh": 1,
//         "UserSyncInfos": {
//           "Base": "OU=Users,OU=MON,OU=CA,DC=UD6,DC=UF6",
//           "Email": "mail",
//           "Id": "userPrincipalName",
//           "Query": "(|(objectClass=person)(objectClass=user))"
//         }
//       }
//  }

message GroupSyncInfo {
	string id = 1;
	string base = 2;
	string query = 3;
}

message UserSyncInfo {
	string id = 1;
	string email = 2;
	string base = 3;
	string query = 4;
}

message LdapSyncInfo {
	string id = 1;
	string connectionId = 2;
	int32 refresh = 3; // in minutes
	GroupSyncInfo group_sync_info = 4;
	UserSyncInfo user_sync_info = 5;
}

// Create / Update ldap sync informations.
message setLdapSyncInfoRequest {
	LdapSyncInfo info = 1;
}
message setLdapSyncInfoResponse {
}

// Retreive 
message getLdapSyncInfoRequest {
	string id = 1; // empty string return all values.
}
message getLdapSyncInfoResponse {
	repeated LdapSyncInfo infos = 1;
}

// Delete info
message deleteLdapSyncInfoRequest {
	string id = 1; // empty string return all values.
}
message deleteLdapSyncInfoResponse {
}

// TODO support TLS conncetion.
service LdapService {
  	// Stop the server.
 	rpc Stop(StopRequest) returns (StopResponse);
	
	// Create a connection.
	rpc CreateConnection(CreateConnectionRqst) returns (CreateConnectionRsp){};
	
	// Delete a connection.
	rpc DeleteConnection(DeleteConnectionRqst) returns (DeleteConnectionRsp){};

	// Close connection. * Open is create at search time. But close must
	// be explicitly call when the connection is no more use.
	rpc Close(CloseRqst) returns (CloseRsp){};
	
	// Search over LDAP server
	rpc Search(SearchRqst) returns (SearchResp){};
	
	// Authenticate a user to a given ldap server (connection id)
	rpc Authenticate(AuthenticateRqst) returns (AuthenticateRsp){};

	// Synchronize the resource with LDAP.
	rpc Synchronize(SynchronizeRequest) returns (SynchronizeResponse){};

	// Append synchronize information. 
	rpc setLdapSyncInfo(setLdapSyncInfoRequest) returns (setLdapSyncInfoResponse){};

	// Delete synchronize information
	rpc deleteLdapSyncInfo(deleteLdapSyncInfoRequest) returns (deleteLdapSyncInfoResponse){};

	// Retreive synchronize informations
	rpc getLdapSyncInfo(getLdapSyncInfoRequest) returns (getLdapSyncInfoResponse){};
}

