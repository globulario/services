syntax = "proto3";

package ldap;

option go_package="github.com/globulario/services/golang/ldap/ldappb";

// Represents the necessary information to establish a connection to an LDAP server.
message Connection {
	string id = 1;       // Unique identifier for the connection.
	string host = 2;     // Hostname or IP address of the LDAP server.
	string user = 3;     // Username for accessing the LDAP server.
	string password = 4; // Password for accessing the LDAP server.
	int32 port = 5;      // Port on which the LDAP server is running.
}

// Request message for creating a new LDAP connection.
message CreateConnectionRqst {
	Connection connection = 1; // Details of the connection to be established.
}

// Response message for the create connection request.
message CreateConnectionRsp {
	bool result = 1; // Indicates if the connection was successfully created.
}

// Request message for deleting an existing LDAP connection.
message DeleteConnectionRqst {
	string id = 1; // Identifier of the connection to be deleted.
}

// Response message for the delete connection request.
message DeleteConnectionRsp {
	bool result = 1; // Indicates if the connection was successfully deleted.
}

// Request message for closing an LDAP connection.
message CloseRqst {
	string id = 1; // Identifier of the connection to be closed.
}

// Response message for the close connection request.
message CloseRsp {
	bool result = 1; // Indicates if the connection was successfully closed.
}

// Defines the parameters for an LDAP search operation.
message Search {
	string id = 1;                   // Identifier of the connection to use for the search.
	string baseDN = 2;               // Base domain name for the search.
	string filter = 3;               // LDAP filter expression for the search.
	repeated string attributes = 4;  // List of attributes to retrieve in the search.
}

// Request message for performing an LDAP search.
message SearchRqst {
	Search search = 1; // Search parameters.
}

// Response message containing the results of the LDAP search.
message SearchResp {
	string result = 1; // JSON string with the search results.
}

// Request message for authenticating a user against an LDAP server.
message AuthenticateRqst {
	string id = 1;   // Identifier of the connection to use for authentication.
	string login = 2; // Login credentials of the user.
	string pwd = 3;  // Password of the user.
}

// Response message for the user authentication request.
message AuthenticateRsp {
	bool result = 1; // Indicates if the authentication was successful.
}


message StopRequest {
	
}

message StopResponse {
	
}

message SynchronizeRequest{

}

message SynchronizeResponse{

}

// Now the synchronization informations...
// "LdapSyncInfos": {
//     "my__ldap":
//       {
//         "ConnectionId": "my__ldap",
//         "GroupSyncInfos": {
//           "Base": "OU=Access_Groups,OU=Groups,OU=MON,OU=CA,DC=UD6,DC=UF6",
//           "Id": "name",
//           "Query": "((objectClass=group))"
//         },
//         "Refresh": 1,
//         "UserSyncInfos": {
//           "Base": "OU=Users,OU=MON,OU=CA,DC=UD6,DC=UF6",
//           "Email": "mail",
//           "Id": "userPrincipalName",
//           "Query": "(|(objectClass=person)(objectClass=user))"
//         }
//       }
//  }

message GroupSyncInfo {
	string id = 1;
	string base = 2;
	string query = 3;
}

message UserSyncInfo {
	string id = 1;
	string email = 2;
	string base = 3;
	string query = 4;
}

message LdapSyncInfo {
	string id = 1;
	string connectionId = 2;
	int32 refresh = 3; // in minutes
	GroupSyncInfo group_sync_info = 4;
	UserSyncInfo user_sync_info = 5;
}

// Create / Update ldap sync informations.
message setLdapSyncInfoRequest {
	LdapSyncInfo info = 1;
}
message setLdapSyncInfoResponse {
}

// Retreive 
message getLdapSyncInfoRequest {
	string id = 1; // empty string return all values.
}
message getLdapSyncInfoResponse {
	repeated LdapSyncInfo infos = 1;
}

// Delete info
message deleteLdapSyncInfoRequest {
	string id = 1; // empty string return all values.
}
message deleteLdapSyncInfoResponse {
}

// TODO: Support TLS connection.
// LdapService defines the RPC methods available for interacting with an LDAP server.
service LdapService {
    // Stops the LDAP service. This method should be called to properly shut down the service.
    rpc Stop(StopRequest) returns (StopResponse);

    // Creates a new LDAP connection using the provided connection details.
    // This is typically the first step in interacting with an LDAP server.
    rpc CreateConnection(CreateConnectionRqst) returns (CreateConnectionRsp);

    // Deletes an existing LDAP connection identified by its ID.
    // Use this method to remove connections that are no longer needed.
    rpc DeleteConnection(DeleteConnectionRqst) returns (DeleteConnectionRsp);

    // Closes an open LDAP connection. It's important to close connections that are no longer in use.
    // Unlike creating a connection, which is done automatically during a search, closing must be done explicitly.
    rpc Close(CloseRqst) returns (CloseRsp);

    // Performs a search on the LDAP server using the specified parameters.
    // This method uses an existing connection to query the LDAP directory.
    rpc Search(SearchRqst) returns (SearchResp);

    // Authenticates a user against the specified LDAP server (identified by the connection ID).
    // This is used for verifying user credentials.
    rpc Authenticate(AuthenticateRqst) returns (AuthenticateRsp);

    // Synchronizes resources with the LDAP server.
    // This method can be used to ensure that local data is in sync with the LDAP directory.
    rpc Synchronize(SynchronizeRequest) returns (SynchronizeResponse);

    // Adds or updates synchronization information in the LDAP service.
    // Use this method to configure or modify how data is synchronized.
    rpc setLdapSyncInfo(setLdapSyncInfoRequest) returns (setLdapSyncInfoResponse);

    // Deletes existing synchronization information from the LDAP service.
    // Use this when certain sync configurations are no longer required.
    rpc deleteLdapSyncInfo(deleteLdapSyncInfoRequest) returns (deleteLdapSyncInfoResponse);

    // Retrieves synchronization information from the LDAP service.
    // This can be used to audit or review current synchronization settings.
    rpc getLdapSyncInfo(getLdapSyncInfoRequest) returns (getLdapSyncInfoResponse);
}


