/**
 * You can use echo as starter project.
 */
syntax = "proto3";
package catalog;

option go_package="catalog/catalogpb";

enum StoreType{
	MONGO = 0;
}

message Reference{
	string refColId = 1;
	string refObjId = 2;
	string refDbName = 3;
}

message References{
	repeated Reference values = 1;
}

message Connection {
	string id = 1;
	string name = 2;
	string host = 3;
	StoreType store = 5;
	string user = 6;
	string password = 7;
	int32 port = 8;
	int32 timeout = 9;
	string options = 10;
}

// Save connection
message CreateConnectionRqst {
	Connection connection = 1;
}

message CreateConnectionRsp {
	bool result = 1;
}

// Delete connection
message DeleteConnectionRqst {
	string id = 1;
}

message DeleteConnectionRsp {
	bool result = 1;
}

// Property define a range of informations.
message PropertyDefinition{

	// Unique univeral identifier.
	string id = 1;
	string name = 2;
	string languageCode = 3;
	string abreviation = 4;
	string description = 5;
	
	enum Type{
		numerical = 0;
		textual = 1;
		boolean = 2;
		dimentional=3;
		enumeration=4;
		aggregate=5;
	}
	
	Type type = 6;
	
	// Properties.
	References properties = 8;
	
	// Use when property is an enumeration
	repeated string choices = 9;
}

message PropertyDefinitions{
	repeated PropertyDefinition values = 1;
}

// Item is a composition of properties.
message ItemDefinition {

	// Unique univeral identifier.
	string id = 1;
	string name = 2; // The oficial item name
	string languageCode = 3;
	string abreviation = 4;
	string description = 5;
    repeated string alias = 6; // also named ...
    repeated string keyWords = 7; // Help to retreive the item. (use it insted of category)
	
	// Reference to properties
	References properties = 9; // Reuse of existing properties...
	
	// releaded items.
	References releadedItemDefintions = 10;
	
	// equivalent items
	References equivalentsItemDefintions = 11;
	
	// the categorie the item belong to.
	References categories = 12;
}

// Append a category to an item definition
message AppendItemDefinitionCategoryRequest{
	string connectionId = 1;
	Reference category = 2;
	Reference itemDefinition = 3;
}

message AppendItemDefinitionCategoryResponse{
	bool result=1;
}

// Remove a category from an item definition.
message RemoveItemDefinitionCategoryRequest{
	string connectionId = 1;
	Reference category = 2;
	Reference itemDefinition = 3;
}

message RemoveItemDefinitionCategoryResponse{
	bool result=1;
}

// The unit of measure.
message UnitOfMeasure{
	string id = 1;
	string name = 2; // can be language dependant
	string languageCode = 3;
	string abreviation = 4;
	string description = 5;
}

// The category
message Category{
	string id = 1;
	string name = 2; // can be language dependant
	string languageCode = 3;
	References categories = 4;
}

// The localisation
message Localisation {
	string id = 1;
	string name = 2; // can be language dependant
	string languageCode = 3;
	References subLocalisations = 4;
}

// The Inventory
message Inventory {
	int64 safetyStock = 1;
	int64 reorderquantity = 2;
	int64 quantity = 3; // save unit as pacakge.
	double factor = 5; // Conversion when the quantity is update.
	string localisationId = 6; // inventory must be deleted if the localisation is delete.
	string pacakgeId = 7; // The package id.
}

// The currency
enum Currency{
	us = 0;
	can = 1;
	euro = 2;
}

// The price.
message Price {
	double value = 1;
	Currency currency = 2;
}

// SubPackage
message SubPackage{
	Reference unitOfMeasure = 1;
	Reference package = 2; // subpackage...
	int64 quantity = 3;
}

// Item instance pacakge.
message ItemInstancePackage{
	Reference unitOfMeasure = 1;
	Reference itemInstance = 2; // item instance...
	int64 quantity = 3;
}

// The Package
message Package {
	
	// Unique univeral identifier.
	string id = 1;
	string name = 2;
	string languageCode = 3;
	string description = 4;
	
	// a package of package
	repeated SubPackage subpackages = 5;
	
	// the item contain in the package with there quantity and unit of measure.
	repeated ItemInstancePackage itemInstances = 6;

}

message Supplier {
	string id = 1;
	string name = 2;
}

message PackageSupplier {
	string id = 1; // the supplier number.
	Reference supplier = 2;
	Reference package = 3;
	Price price = 4;
	int64 date = 5;
	int64 quantity = 6; // number of pacakge order. for the price.
}

// The manufacturer.
message Manufacturer {
	string id = 1;
	string name = 2;
}

// The item manufacturer.
message ItemManufacturer {
	string id = 1; // the manufacturer number.
	Reference manufacturer = 2;
	Reference item = 3;
}

message Dimension{
	string unitId = 1;
	double value = 2;
}

message PropertyValue { 

	string propertyDefinitionId = 1;
	string languageCode = 2;
	
	message Booleans {
		repeated bool values = 1;
	}
		
	message Numerics {
		repeated double values = 1;
	}
	
	message Strings {
		repeated string values = 1;
	}
	
	message Dimensions {
		repeated Dimensions values = 1;
	}

	oneof value {
		// single value
		Dimension dimension_val = 3;
		string text_val = 4;
		double number_val = 5;
		bool boolean_val = 6;

		// multiple values
		Dimensions dimension_arr = 7;
		Strings text_arr = 8;
		Numerics number_arr = 9;
		Booleans boolean_arr = 10;
	}
}

// Item instance
message ItemInstance {
	string id = 1;
	string itemDefinitionId = 2;
	repeated PropertyValue values = 3;
}

message SaveUnitOfMeasureRequest{
	string connectionId = 1;
	UnitOfMeasure unitOfMeasure = 2;
}

message SaveUnitOfMeasureResponse{
	string id = 1;
}

message SaveInventoryRequest{
	string connectionId = 1;
	Inventory inventory = 2;
}

message SaveInventoryResponse{
	string id = 1;
}

message SavePropertyDefinitionRequest{
	string connectionId = 1;
	PropertyDefinition propertyDefinition = 2;
}

message SavePropertyDefinitionResponse{
	string id = 1;
}

message SaveItemDefinitionRequest{
	string connectionId = 1;
	ItemDefinition itemDefinition = 2;
}

message SaveItemDefinitionResponse{
	string id = 1;
}

message SaveItemInstanceRequest{
	string connectionId = 1;
	ItemInstance itemInstance = 2;
}

message SaveItemInstanceResponse{
	string id = 1;
}

message SaveManufacturerRequest {
	string connectionId = 1;
	Manufacturer manufacturer = 2;
}

message SaveManufacturerResponse {
	string id = 1;
}

message SaveSupplierRequest {
	string connectionId = 1;
	Supplier supplier = 2;
}

message SaveSupplierResponse {
	string id = 1;
}

message SaveLocalisationRequest {
	string connectionId = 1;
	Localisation localisation = 2;
}

message SaveLocalisationResponse {
	string id = 1;
}

message SaveCategoryRequest {
	string connectionId = 1;
	Category category = 2;
}

message SaveCategoryResponse {
	string id = 1;
}

message SavePackageRequest {
	string connectionId = 1;
	Package package = 2;
}

message SavePackageResponse {
	string id = 1;
}

message SavePackageSupplierRequest {
	string connectionId = 1;
	PackageSupplier packageSupplier = 2;
}

message SavePackageSupplierResponse {
	string id = 1;
}

message SaveItemManufacturerRequest {
	string connectionId = 1;
	ItemManufacturer itemManafacturer = 2;
}

message SaveItemManufacturerResponse {
	string id = 1;
}

/////////////////////////// Getter functions ///////////////////////////////////
message GetSupplierRequest{
	string connectionId = 1;
	string supplierId = 2;
}

message GetSupplierResponse{
	Supplier supplier = 1;
}

message Suppliers {
	repeated Supplier suppliers = 1;
}

message GetSupplierPackagesRequest{
	string connectionId = 1;
	string supplierId = 2;
}

message GetSupplierPackagesResponse{
	repeated PackageSupplier packagesSupplier = 1;
}

message GetSuppliersRequest{
	string connectionId = 1;
	string query = 2;
	string options = 3;
}

message GetSuppliersResponse{
	repeated Supplier suppliers = 1;
}


// List of packages use to unmarshal package list.
message Manufacturers {
	repeated Manufacturer manufacturers = 1;
}

message GetManufacturerRequest{
	string connectionId = 1;
	string manufacturerId = 2; // must be the _id
}

message GetManufacturerResponse{
	Manufacturer manufacturer = 1;
}

message GetManufacturersRequest{
	string connectionId = 1;
	string query = 2; // all is return if nothing is given.
	string options = 3;
}

message GetManufacturersResponse{
	repeated Manufacturer manufacturers = 1;
}

// List of packages use to unmarshal package list.
message Packages {
	repeated Package packages = 1;
}

message GetPackageRequest{
	string connectionId = 1;
	string packageId = 2; // must be the _id
}

message GetPackageResponse{
	Package pacakge = 1;
}

message GetPackagesRequest{
	string connectionId = 1;
	string query = 2; // all is return if nothing is given.
	string options = 3;
}

message GetPackagesResponse{
	repeated Package packages = 1;
}

// List of localisation use to unmarshal package list.
message Localisations {
	repeated Localisation localisations = 1;
}

message GetLocalisationRequest{
	string connectionId = 1;
	string localisationId = 2; // must be the _id
}

message GetLocalisationResponse{
	Localisation localisation = 1;
}

message GetLocalisationsRequest{
	string connectionId = 1;
	string query = 2; // all is return if nothing is given.
	string options = 3;
}

message GetLocalisationsResponse{
	repeated Localisation localisations = 1;
}

// List of unit of measures use to marshal list.
message UnitOfMeasures{
	repeated UnitOfMeasure unitOfMeasures = 1;
}

message GetUnitOfMeasureRequest{
	string connectionId = 1;
	string unitOfMeasureId = 2; // must be the _id or id + languageCode
}

message GetUnitOfMeasureResponse{
	UnitOfMeasure unitOfMeasure = 1;
}

message GetUnitOfMeasuresRequest{
	string connectionId = 1;
	string query = 2; // all is return if nothing is given.
	string options = 3;
}

message GetUnitOfMeasuresResponse{
	repeated UnitOfMeasure unitOfMeasures = 1;
}

// List of item instance use to unmarshal package list.
message Inventories {
	repeated Inventory inventories = 1;
}

message GetInventoriesRequest{
	string connectionId = 1;
	string query = 2; // all is return if nothing is given.
	string options = 3;
}

message GetInventoriesResponse{
	repeated Inventory inventories = 1;
}

// List of categories.
message Categories {
	repeated Category categories = 1;
}

message GetCategoryRequest{
	string connectionId = 1;
	string categoryId = 2; // must be the _id
}

message GetCategoryResponse{
	Category category = 1;
}

message GetCategoriesRequest{
	string connectionId = 1;
	string query = 2; // all is return if nothing is given.
	string options = 3;
}

message GetCategoriesResponse{
	repeated Category categories = 1;
}

// List of item instance use to unmarshal package list.
message ItemInstances {
	repeated ItemInstance itemInstances = 1;
}

message GetItemInstanceRequest{
	string connectionId = 1;
	string itemInstanceId = 2; // must be the _id
}

message GetItemInstanceResponse{
	ItemInstance itemInstance = 1;
}

message GetItemInstancesRequest{
	string connectionId = 1;
	string query = 2; // all is return if nothing is given.
	string options = 3;
}

message GetItemInstancesResponse{
	repeated ItemInstance itemInstances = 1;
}

// List of item definition use to unmarshal package list.
message ItemDefinitions {
	repeated ItemDefinition itemDefinitions = 1;
}

message GetItemDefinitionRequest{
	string connectionId = 1;
	string itemDefinitionId = 2; // must be the _id
}

message GetItemDefinitionResponse{
	ItemDefinition itemDefinition = 1;
}

message GetItemDefinitionsRequest{
	string connectionId = 1;
	string query = 2; // all is return if nothing is given.
	string options = 3;
}

message GetItemDefinitionsResponse{
	repeated ItemDefinition itemDefinitions = 1;
}

//////////// Delete ///////////
	
// Delete a package supplier
message DeletePackageSupplierRequest{
	string connectionId = 1;
	PackageSupplier packageSupplier = 2;
}

message DeletePackageSupplierResponse{
	bool result = 1;
}
	
// Delete a package
message DeletePackageRequest{
	string connectionId = 1;
	Package package = 2;
}

message DeletePackageResponse{
	bool result = 1;
}

// Delete a supplier
message DeleteSupplierRequest{
	string connectionId = 1;
	Supplier supplier = 2;
}

message DeleteSupplierResponse{
	bool result = 1;
}
	
// Delete propertie definition
message DeletePropertyDefinitionRequest{
	string connectionId = 1;
	PropertyDefinition propertyDefinition = 2;
}

message DeletePropertyDefinitionResponse{
	bool result = 1;
}
	
// Delete unit of measure
message DeleteUnitOfMeasureRequest{
	string connectionId = 1;
	UnitOfMeasure unitOfMeasure = 2;
}

message DeleteUnitOfMeasureResponse{
	bool result = 1;
}
	
// Delete Item Instance
message DeleteItemInstanceRequest{
	string connectionId = 1;
	ItemInstance instance = 2;
}

message DeleteItemInstanceResponse{
	bool result = 1;
}
	
// Delete Manufacturer
message DeleteManufacturerRequest{
	string connectionId = 1;
	Manufacturer manufacturer = 2;
}

message DeleteManufacturerResponse{
	bool result = 1;
}
	
// Delete Item Manufacturer
message DeleteItemManufacturerRequest{
	string connectionId = 1;
	ItemManufacturer itemManufacturer= 2;
}

message DeleteItemManufacturerResponse{
	bool result = 1;
}
	
// Delete Category
message DeleteCategoryRequest{
	string connectionId = 1;
	Category category = 2;
}

message DeleteCategoryResponse{
	bool result = 1;
}
	
// Delete Localisation
message DeleteLocalisationRequest{
	string connectionId = 1;
	Localisation localisation = 2;
}

message DeleteLocalisationResponse{
	bool result = 1;
}

// Delete Inventory
message DeleteInventoryRequest{
	string connectionId = 1;
	Inventory inventory = 2;
}

message DeleteInventoryResponse{
	bool result = 1;
}

message StopRequest {
	
}

message StopResponse {
	
}

service CatalogService {
	
	// Stop the server.
  	rpc Stop(StopRequest) returns (StopResponse);
	
  	// Save function.
	
	// Save a connection.
	rpc CreateConnection(CreateConnectionRqst) returns (CreateConnectionRsp){};
	
	// Delete a connection.
	rpc DeleteConnection(DeleteConnectionRqst) returns (DeleteConnectionRsp){};
	
	//////////////////////// Save (Create) functions ///////////////////////////
	
	// Save unit of measure exemple inch 
	rpc SaveUnitOfMeasure(SaveUnitOfMeasureRequest) returns (SaveUnitOfMeasureResponse){};
	
	// Save property definition return the Id of the Saved property
	rpc SavePropertyDefinition(SavePropertyDefinitionRequest) returns (SavePropertyDefinitionResponse){};
	
	// Save item definition.
	rpc SaveItemDefinition(SaveItemDefinitionRequest) returns (SaveItemDefinitionResponse){};
	
	// Save item
	rpc SaveItemInstance(SaveItemInstanceRequest) returns (SaveItemInstanceResponse){};
	
		
	// Save inventory 
	rpc SaveInventory(SaveInventoryRequest) returns (SaveInventoryResponse){};
	
	
	// Save Manufacturer
	rpc SaveManufacturer(SaveManufacturerRequest) returns (SaveManufacturerResponse){};
	
	// Save Supplier
	rpc SaveSupplier(SaveSupplierRequest) returns (SaveSupplierResponse){};
	
	// Save localisation
	rpc SaveLocalisation(SaveLocalisationRequest) returns (SaveLocalisationResponse){};

	// Save Package
	rpc SavePackage(SavePackageRequest) returns (SavePackageResponse){};
	
	// Save Package Supplier
	rpc SavePackageSupplier(SavePackageSupplierRequest) returns (SavePackageSupplierResponse){};
	
	// Save Item Manufacturer
	rpc SaveItemManufacturer(SaveItemManufacturerRequest) returns (SaveItemManufacturerResponse){};
	
	// Save Item Category
	rpc SaveCategory(SaveCategoryRequest) returns (SaveCategoryResponse){};
	
	// Append a Category to item definition.
	rpc AppendItemDefinitionCategory(AppendItemDefinitionCategoryRequest) returns (AppendItemDefinitionCategoryResponse);
	
	// Remove a Category from item definition.
	rpc RemoveItemDefinitionCategory(RemoveItemDefinitionCategoryRequest) returns (RemoveItemDefinitionCategoryResponse);
	
	// Getter function.
	
	// Get supplier
	rpc getSupplier(GetSupplierRequest) returns (GetSupplierResponse);
	rpc getSuppliers(GetSuppliersRequest) returns (GetSuppliersResponse);
	
	// Get manufacturers
	rpc getManufacturer(GetManufacturerRequest) returns (GetManufacturerResponse);
	rpc getManufacturers(GetManufacturersRequest) returns (GetManufacturersResponse);
	
	
	// Get Supplier Packages
	rpc getSupplierPackages(GetSupplierPackagesRequest) returns (GetSupplierPackagesResponse);
	
	// Getter function for pacakge.
	rpc getPackage(GetPackageRequest) returns (GetPackageResponse);
	rpc getPackages(GetPackagesRequest) returns (GetPackagesResponse);
	
	// Getter for unit of measure
	rpc getUnitOfMeasure(GetUnitOfMeasureRequest) returns (GetUnitOfMeasureResponse);
	rpc getUnitOfMeasures(GetUnitOfMeasuresRequest) returns (GetUnitOfMeasuresResponse);
	
	// Getter for Item definition
	rpc getItemDefinition(GetItemDefinitionRequest) returns (GetItemDefinitionResponse);
	rpc getItemDefinitions(GetItemDefinitionsRequest) returns (GetItemDefinitionsResponse);

	// Getter for Item instance
	rpc getItemInstance(GetItemInstanceRequest) returns (GetItemInstanceResponse);
	rpc getItemInstances(GetItemInstancesRequest) returns (GetItemInstancesResponse);
	
	// Getter for localisation
	rpc getLocalisation(GetLocalisationRequest) returns (GetLocalisationResponse);
	rpc getLocalisations(GetLocalisationsRequest) returns (GetLocalisationsResponse);
	
	// Getter for localisation
	rpc getCategory(GetCategoryRequest) returns (GetCategoryResponse);
	rpc getCategories(GetCategoriesRequest) returns (GetCategoriesResponse);
	
	// Get the inventories
	rpc getInventories(GetInventoriesRequest) returns (GetInventoriesResponse);
	
	// Delete functions.
	
	// Delete inventory.
	rpc deleteInventory(DeleteInventoryRequest) returns (DeleteInventoryResponse);
	
	// Delete a package.
	rpc deletePackage(DeletePackageRequest) returns (DeletePackageResponse);
	
	// Delete a package supplier
	rpc deletePackageSupplier(DeletePackageSupplierRequest) returns (DeletePackageSupplierResponse);
	
	// Delete a supplier
	rpc deleteSupplier(DeleteSupplierRequest) returns (DeleteSupplierResponse);
	
	// Delete propertie definition
	rpc deletePropertyDefinition(DeletePropertyDefinitionRequest) returns (DeletePropertyDefinitionResponse);
	
	// Delete unit of measure
	rpc deleteUnitOfMeasure(DeleteUnitOfMeasureRequest) returns (DeleteUnitOfMeasureResponse);
	
	// Delete Item Instance
	rpc deleteItemInstance(DeleteItemInstanceRequest) returns (DeleteItemInstanceResponse);
	
	// Delete Manufacturer
	rpc deleteManufacturer(DeleteManufacturerRequest) returns (DeleteManufacturerResponse);
	
	// Delete Item Manufacturer
	rpc deleteItemManufacturer(DeleteItemManufacturerRequest) returns (DeleteItemManufacturerResponse);
	
	// Delete Category
	rpc deleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse);
	
	// Delete Localisation
	rpc deleteLocalisation(DeleteLocalisationRequest) returns (DeleteLocalisationResponse);
}