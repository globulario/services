syntax = "proto3";

package rbac;

option go_package="rbac/rbacpb";
import "google/protobuf/struct.proto";


////////////////////////////////////////////////////////////////////////////////
// Role Based Access Control.
////////////////////////////////////////////////////////////////////////////////

// Permission message struct.
message Permission {
	string name = 1; // read, write, delete ... what you need
	repeated string applications = 2;
	repeated string peers = 3;
	repeated string accounts = 4;
	repeated string groups = 5;
	repeated string organizations = 6;
}

message Permissions {
	string path = 1;
	string resource_type = 2;
	Permission owners = 3;
	repeated Permission allowed = 4;
	repeated Permission denied = 5;
}

/** Return a resource permissions **/
message GetResourcePermissionsRqst{
	string path = 1;
}

/** Get resource permissions **/
message GetResourcePermissionsRsp{
	Permissions permissions = 1;
}

/** Return a resource permissions **/
message GetResourcePermissionsByResourceTypeRqst{
	string resourceType = 1;
}

/** Get resource permissions **/
message GetResourcePermissionsByResourceTypeRsp{
	repeated Permissions permissions = 1;
}


/** Return a resource permissions **/
message GetResourcePermissionsBySubjectRqst{
	string subject = 1;
	SubjectType subject_type = 2;
	string resource_type = 3;
}

/** Get resource permissions **/
message GetResourcePermissionsBySubjectRsp{
	repeated Permissions permissions = 1;
}


/** Delete a resource permissions **/
message DeleteResourcePermissionsRqst{
	string path = 1;
}


/** Return permissions **/
message DeleteResourcePermissionsRsp{
	Permissions permissions = 1;
}

/** Delete specific resource permission **/
message DeleteResourcePermissionRqst{
	string path = 1;
	string name = 2;
	PermissionType type = 3;
}

/** Delete permissions **/
message DeleteResourcePermissionRsp{
	/** do nothing **/
}

/** Set all resource permissions **/
message SetResourcePermissionsRqst{
	string path = 1;
	string resourceType = 2;
	Permissions permissions = 3;
}

message SetResourcePermissionsRsp{
	/** nothing here **/
}

enum PermissionType {
	DENIED = 0;
	ALLOWED = 1;
}

message GetResourcePermissionRqst{
	string path = 1;
	string name = 2;
	PermissionType type = 3;
}

message GetResourcePermissionRsp{
	Permission permission = 1;
}

message SetResourcePermissionRqst{
	string path = 1;
	Permission permission = 2;
	PermissionType type = 3;
}

message SetResourcePermissionRsp{
	/** nothing here **/
}

message AddResourceOwnerRqst{
	string path = 1;
	string resourceType = 2;
	string subject = 3;
	SubjectType type = 4;
}

message AddResourceOwnerRsp {
	
}

message RemoveResourceOwnerRqst{
	string path = 1;
	string subject = 2;
	SubjectType type = 3;
}

message RemoveResourceOwnerRsp {
	
}

enum SubjectType {
	ACCOUNT = 0;
	PEER = 1;
	GROUP= 2;
	ORGANIZATION = 3;
	APPLICATION = 4;
	ROLE = 5;
}
	
message DeleteAllAccessRqst {
	string subject = 1;
	SubjectType type = 2;
}

message DeleteAllAccessRsp {
	
}

message ValidateAccessRqst {
	string subject = 1;
	SubjectType type = 2;
	string path = 3; // The Resource path
	string permission = 4; // the name of the permission (read, write, execute...)
}

message ValidateAccessRsp {
	bool hasAccess = 1;
	bool accessDenied = 2;
}

message GetActionResourceInfosRqst{
	string action = 1;
}

message ResourceInfos {
	int32 index = 1; // The parameter index.
	string permission = 2; // The permission name, read, write, ect...
	string path = 3; // The resource path (use by ValidateActionRsp)
	string field = 4; // if the parameter is an object that will given the field name that contain the resource path. ex: video.ID ("ID" will contain the resource)
}

message GetActionResourceInfosRsp{
	repeated ResourceInfos infos = 1;
}

message ValidateActionRqst {
	string subject = 1;
	SubjectType type = 2;
	string action = 3; // The Action path (grpc path)
	repeated ResourceInfos infos = 4; // The resource information associated with the rpc call.
}

message ValidateActionRsp {
	bool hasAccess = 1; // if the user can run the action
	bool accessDenied = 2; // if the resource path access is denied.
}

message SetActionResourcesPermissionsRqst{
	google.protobuf.Struct permissions = 1;
}

message SetActionResourcesPermissionsRsp{

}

/**
 * Resource Shared. The resource can be share by the 
 */
message Share {

	// The resource path must be unique on the domain.
	string path = 1;

	// The domain from where the share is located.
	string domain = 2;

	// List of specific object to share with
	repeated string applications = 3;
	repeated string peers = 4;
	repeated string accounts = 5;
	repeated string groups = 6;
	repeated string organizations = 7;

}

/**
 * Get the list of accessible resource for a given subject.
 */
message GetSharedResourceRqst {
	string subject = 1;
	SubjectType type = 2; 
	string owner = 3; // optional, it filter result for a given owner...
}

message GetSharedResourceRsp {
	repeated Share sharedResource = 1;
}

/**
 * Remove Subject from the list of share.
 */
message RemoveSubjectFromShareRqst{
	string subject = 1;
	SubjectType type = 2;
	string domain = 3;
	string path = 4;
}

message RemoveSubjectFromShareRsp{

}

/**
 * Delete all share for a subject. That can be use if a subject is delete...
 */
message DeleteSubjectShareRqst{
	string subject = 1;
	SubjectType type = 2;
}

message DeleteSubjectShareRsp{

}

message SetSubjectAllocatedSpaceRqst {
	string subject = 1;
	SubjectType type = 2;
	uint64 allocated_space = 3;
}

message SetSubjectAllocatedSpaceRsp {

}

message GetSubjectAllocatedSpaceRqst {
	string subject = 1;
	SubjectType type = 2;
}

message GetSubjectAllocatedSpaceRsp {
	uint64 allocated_space = 3;
}

message GetSubjectAvailableSpaceRqst {
	string subject = 1;
	SubjectType type = 2;
}

message GetSubjectAvailableSpaceRsp {
	uint64 available_space = 3;
}

message ValidateSubjectSpaceRqst {
	string subject = 1;
	SubjectType type = 2;
	uint64 required_space = 3;
}

message ValidateSubjectSpaceRsp {
	bool hasSpace = 1;
}

/**
 * The service to control action and resource access.
 */
service RbacService {

	/** Set resource permissions this method will replace existing permission at once **/
	rpc SetResourcePermissions(SetResourcePermissionsRqst) returns(SetResourcePermissionsRqst);
	
	/** Delete a resource permissions (when a resource is deleted) **/
	rpc DeleteResourcePermissions(DeleteResourcePermissionsRqst) returns(DeleteResourcePermissionsRqst);
	
	/** Delete a specific resource permission **/
	rpc DeleteResourcePermission(DeleteResourcePermissionRqst) returns(DeleteResourcePermissionRqst);
	
	/** Get specific resource permission  ex. read permission... **/
	rpc GetResourcePermission(GetResourcePermissionRqst) returns(GetResourcePermissionRsp);
	
	/** Set specific resource permission  ex. read permission... **/
	rpc SetResourcePermission(SetResourcePermissionRqst) returns(SetResourcePermissionRsp);
	
	/** Get resource permissions **/
	rpc GetResourcePermissions(GetResourcePermissionsRqst) returns(GetResourcePermissionsRsp);

	/** Get the list of all resource permission for a given resource type ex. blog or file...*/
	rpc GetResourcePermissionsByResourceType(GetResourcePermissionsByResourceTypeRqst) returns(stream GetResourcePermissionsByResourceTypeRsp);

	/** Return the list of permissions for a given subject. If no resource type was given all resource will be return. **/
	rpc GetResourcePermissionsBySubject(GetResourcePermissionsBySubjectRqst) returns(stream GetResourcePermissionsBySubjectRsp);
	
	/** Add resource owner do nothing if it already exist */
	rpc AddResourceOwner(AddResourceOwnerRqst) returns(AddResourceOwnerRsp);
	
	/** Remove resource owner */
	rpc RemoveResourceOwner(RemoveResourceOwnerRqst) returns(RemoveResourceOwnerRsp);
	
	/** That function must be call when a subject is removed to clean up permissions. */
	rpc DeleteAllAccess(DeleteAllAccessRqst) returns (DeleteAllAccessRsp);
	
	/** Validate if a user can get access to a given Resource for a given operation (read, write...) */
	rpc ValidateAccess(ValidateAccessRqst) returns(ValidateAccessRsp);

	/** Set Actions resource Permissions */
	rpc SetActionResourcesPermissions(SetActionResourcesPermissionsRqst) returns(SetActionResourcesPermissionsRsp);
		
	/////////////////////////// Rpc Action Valdisation ////////////////////////////////
	
	/** Return the action resource informations. */
	rpc GetActionResourceInfos(GetActionResourceInfosRqst) returns(GetActionResourceInfosRsp);
	
	/** Validate the actions */
	rpc ValidateAction(ValidateActionRqst) returns(ValidateActionRsp);

	///////////////////////// Disk usage ////////////////////////

	/** Validate if the subject has enought space to store file **/
	rpc ValidateSubjectSpace(ValidateSubjectSpaceRqst) returns(ValidateSubjectSpaceRsp);

	/** Return the subject available disk space **/
	rpc GetSubjectAvailableSpace(GetSubjectAvailableSpaceRqst) returns(GetSubjectAvailableSpaceRsp);

	/** Return the subject allocated disk space **/
	rpc GetSubjectAllocatedSpace(GetSubjectAllocatedSpaceRqst) returns(GetSubjectAllocatedSpaceRsp);

	/** Set the user allocated space **/
	rpc SetSubjectAllocatedSpace(SetSubjectAllocatedSpaceRqst) returns(SetSubjectAllocatedSpaceRsp);

	///////////////////////// Share ////////////////////////////

	// Get the list of accessible shared resources.
	rpc GetSharedResource(GetSharedResourceRqst) returns(GetSharedResourceRsp);

	// Remove a subject from a share.
	rpc RemoveSubjectFromShare(RemoveSubjectFromShareRqst) returns(RemoveSubjectFromShareRsp);
	
	// Delete the subject
	rpc DeleteSubjectShare(DeleteSubjectShareRqst) returns(DeleteSubjectShareRsp);
}
