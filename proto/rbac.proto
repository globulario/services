syntax = "proto3";

package rbac;

option go_package="github.com/globulario/services/golang/rbac/rbacpb";
import "google/protobuf/struct.proto";

// Permission defines the access level and scope for a resource.
message Permission {
    string name = 1; // Specific permission type (e.g., read, write, delete).
    repeated string applications = 2; // Applications associated with this permission.
    repeated string peers = 3; // Peers associated with this permission.
    repeated string accounts = 4; // Accounts associated with this permission.
    repeated string groups = 5; // Groups associated with this permission.
    repeated string organizations = 6; // Organizations associated with this permission.
}

// Permissions aggregates all permission settings for a specific resource.
message Permissions {
    string path = 1; // Resource identifier or path.
    string resource_type = 2; // Type of the resource (e.g., file, database).
    Permission owners = 3; // Permissions for resource owners.
    repeated Permission allowed = 4; // List of allowed permissions.
    repeated Permission denied = 5; // List of denied permissions.
}

// GetResourcePermissionsRqst is a request for permissions of a specific resource.
message GetResourcePermissionsRqst {
    string path = 1; // Resource identifier or path.
}

// GetResourcePermissionsRsp is a response containing resource permissions.
message GetResourcePermissionsRsp {
    Permissions permissions = 1; // Permissions associated with the resource.
}

// GetResourcePermissionsByResourceTypeRqst requests permissions by resource type.
message GetResourcePermissionsByResourceTypeRqst {
    string resourceType = 1; // Type of the resource.
}

// GetResourcePermissionsByResourceTypeRsp provides permissions filtered by resource type.
message GetResourcePermissionsByResourceTypeRsp {
    repeated Permissions permissions = 1; // List of permissions for the specified resource type.
}

// GetResourcePermissionsBySubjectRqst requests permissions based on subject.
message GetResourcePermissionsBySubjectRqst {
    string subject = 1; // Subject identifier (e.g., user, group).
    SubjectType subject_type = 2; // Type of the subject (e.g., user, group).
    string resource_type = 3; // Type of the resource.
}

// GetResourcePermissionsBySubjectRsp provides permissions filtered by subject.
message GetResourcePermissionsBySubjectRsp {
    repeated Permissions permissions = 1; // List of permissions for the specified subject.
}

// DeleteResourcePermissionsRqst is a request to delete permissions of a resource.
message DeleteResourcePermissionsRqst {
    string path = 1; // Resource identifier or path.
}

// DeleteResourcePermissionsRsp is a response after deleting resource permissions.
message DeleteResourcePermissionsRsp {
    Permissions permissions = 1; // Permissions that were deleted.
}

// DeleteResourcePermissionRqst is a request to delete a specific permission.
message DeleteResourcePermissionRqst {
    string path = 1; // Resource identifier or path.
    string name = 2; // Name of the permission to delete.
    PermissionType type = 3; // Type of the permission (e.g., allowed, denied).
}

// DeleteResourcePermissionRsp is a response after deleting a specific permission.
message DeleteResourcePermissionRsp {
    // This message does not contain any fields.
}

/** 
 * SetResourcePermissionsRqst is a request to set all permissions for a specific resource.
 */
 message SetResourcePermissionsRqst {
    string path = 1; // Resource identifier or path.
    string resourceType = 2; // Type of the resource.
    Permissions permissions = 3; // Permissions to be set for the resource.
}

/**
 * SetResourcePermissionsRsp is a response to a set resource permissions request.
 * This message is intentionally left empty.
 */
message SetResourcePermissionsRsp {
    // No fields are required for this response.
}

/**
 * PermissionType defines the types of permissions (e.g., allowed, denied).
 */
enum PermissionType {
    DENIED = 0;
    ALLOWED = 1;
}

/**
 * GetResourcePermissionRqst is a request to retrieve a specific permission for a resource.
 */
message GetResourcePermissionRqst {
    string path = 1; // Resource identifier or path.
    string name = 2; // Name of the permission.
    PermissionType type = 3; // Type of the permission (ALLOWED or DENIED).
}

/**
 * GetResourcePermissionRsp is a response containing a specific permission.
 */
message GetResourcePermissionRsp {
    Permission permission = 1; // The requested permission.
}

/**
 * SetResourcePermissionRqst is a request to set a specific permission for a resource.
 */
message SetResourcePermissionRqst {
    string path = 1; // Resource identifier or path.
    string resourceType = 2; // Type of the resource.
    Permission permission = 3; // The permission to be set.
    PermissionType type = 4; // Type of the permission (ALLOWED or DENIED).
}

/**
 * SetResourcePermissionRsp is a response to a set resource permission request.
 * This message is intentionally left empty.
 */
message SetResourcePermissionRsp {
    // No fields are required for this response.
}

/**
 * AddResourceOwnerRqst is a request to add an owner to a resource.
 */
message AddResourceOwnerRqst {
    string path = 1; // Resource identifier or path.
    string resourceType = 2; // Type of the resource.
    string subject = 3; // Identifier of the subject to be added as an owner.
    SubjectType type = 4; // Type of the subject (e.g., user, group).
}

/**
 * AddResourceOwnerRsp is a response to an add resource owner request.
 * This message is intentionally left empty.
 */
message AddResourceOwnerRsp {
    // No fields are required for this response.
}

/**
 * RemoveResourceOwnerRqst is a request to remove an owner from a resource.
 */
message RemoveResourceOwnerRqst {
    string path = 1; // Resource identifier or path.
    string subject = 2; // Identifier of the subject to be removed as an owner.
    SubjectType type = 3; // Type of the subject (e.g., user, group).
}

/**
 * RemoveResourceOwnerRsp is a response to a remove resource owner request.
 * This message is intentionally left empty.
 */
message RemoveResourceOwnerRsp {
    // No fields are required for this response.
}

/**
 * SubjectType defines the types of subjects (e.g., user, group, organization).
 */
enum SubjectType {
    ACCOUNT = 0;
    PEER = 1;
    GROUP = 2;
    ORGANIZATION = 3;
    APPLICATION = 4;
    ROLE = 5;
}

/**
 * DeleteAllAccessRqst is a request to delete all access permissions for a given subject.
 */
message DeleteAllAccessRqst {
    string subject = 1; // Identifier of the subject.
    SubjectType type = 2; // Type of the subject (e.g., user, group).
}

/**
 * DeleteAllAccessRsp is a response to a delete all access request.
 * This message is intentionally left empty.
 */
message DeleteAllAccessRsp {
    // No fields are required for this response.
}

/**
 * ValidateAccessRqst is a request to validate if a subject has a specific permission for a resource.
 */
 message ValidateAccessRqst {
    string subject = 1; // Identifier of the subject.
    SubjectType type = 2; // Type of the subject (e.g., user, group).
    string path = 3; // The resource path for which access is being validated.
    string permission = 4; // The name of the permission to validate (e.g., read, write, execute).
}

/**
 * ValidateAccessRsp is a response indicating whether access is granted or denied.
 */
message ValidateAccessRsp {
    bool hasAccess = 1; // Indicates if the subject has access.
    bool accessDenied = 2; // Indicates if access is explicitly denied.
}

/**
 * GetActionResourceInfosRqst is a request to retrieve resource information related to an action.
 */
message GetActionResourceInfosRqst {
    string action = 1; // The action for which resource information is requested.
}

/**
 * ResourceInfos contains information about a resource in the context of an action.
 */
message ResourceInfos {
    int32 index = 1; // The index of the parameter in the action.
    string permission = 2; // The permission required for the resource (e.g., read, write).
    string path = 3; // The path of the resource.
    string field = 4; // If the parameter is an object, this specifies the field name containing the resource path.
}

/**
 * GetActionResourceInfosRsp is a response containing resource information for an action.
 */
message GetActionResourceInfosRsp {
    repeated ResourceInfos infos = 1; // List of resource information.
}

/**
 * ValidateActionRqst is a request to validate access for an action involving multiple resources.
 */
message ValidateActionRqst {
    string subject = 1; // Identifier of the subject.
    SubjectType type = 2; // Type of the subject (e.g., user, group).
    string action = 3; // The action path (e.g., gRPC path).
    repeated ResourceInfos infos = 4; // Resource information associated with the action.
}

/**
 * ValidateActionRsp is a response indicating whether the action is accessible.
 */
message ValidateActionRsp {
    bool hasAccess = 1; // Indicates if the action can be performed by the user.
    bool accessDenied = 2; // Indicates if any resource path access is denied.
}

/**
 * SetActionResourcesPermissionsRqst is a request to set permissions for resources involved in an action.
 */
message SetActionResourcesPermissionsRqst {
    google.protobuf.Struct permissions = 1; // Struct containing the permissions configuration.
}

/**
 * SetActionResourcesPermissionsRsp is a response to a set action resources permissions request.
 * This message is intentionally left empty.
 */
message SetActionResourcesPermissionsRsp {
    // No fields are required for this response.
}

/**
 * Share represents a shared resource within the system.
 */
message Share {
    string path = 1; // The unique resource path within the domain.
    string domain = 2; // The domain from where the share is located.
    repeated string applications = 3; // Specific applications with which the resource is shared.
    repeated string peers = 4; // Specific peers with whom the resource is shared.
    repeated string accounts = 5; // Specific accounts with whom the resource is shared.
    repeated string groups = 6; // Specific groups with whom the resource is shared.
    repeated string organizations = 7; // Specific organizations with whom the resource is shared.
}

/**
 * GetSharedResourceRqst is a request to retrieve a list of accessible shared resources for a subject.
 */
message GetSharedResourceRqst {
    string subject = 1; // Identifier of the subject.
    SubjectType type = 2; // Type of the subject (e.g., user, group).
    string owner = 3; // Optional filter to retrieve resources shared by a specific owner.
}

/**
 * GetSharedResourceRsp is a response containing a list of shared resources accessible to the subject.
 */
message GetSharedResourceRsp {
    repeated Share sharedResource = 1; // List of shared resources.
}

/**
 * RemoveSubjectFromShareRqst is a request to remove a subject from a shared resource.
 */
message RemoveSubjectFromShareRqst {
    string subject = 1; // Identifier of the subject to be removed.
    SubjectType type = 2; // Type of the subject (e.g., user, group).
    string domain = 3; // The domain of the shared resource.
    string path = 4; // The path of the shared resource.
}

/**
 * RemoveSubjectFromShareRsp is a response to a remove subject from share request.
 * This message is intentionally left empty.
 */
message RemoveSubjectFromShareRsp {
    // No fields are required for this response.
}

/**
 * DeleteSubjectShareRqst is a request to delete all shares associated with a subject.
 * This is commonly used when a subject is deleted from the system.
 */
 message DeleteSubjectShareRqst {
    string subject = 1; // Identifier of the subject.
    SubjectType type = 2; // Type of the subject (e.g., user, group).
}

/**
 * DeleteSubjectShareRsp is a response to the delete subject share request.
 * This message is intentionally left empty.
 */
message DeleteSubjectShareRsp {
    // No fields are required for this response.
}

/**
 * SetSubjectAllocatedSpaceRqst is a request to set the allocated space for a subject.
 */
message SetSubjectAllocatedSpaceRqst {
    string subject = 1; // Identifier of the subject.
    SubjectType type = 2; // Type of the subject (e.g., user, group).
    uint64 allocated_space = 3; // The amount of space to be allocated, in bytes.
}

/**
 * SetSubjectAllocatedSpaceRsp is a response to the set subject allocated space request.
 * This message is intentionally left empty.
 */
message SetSubjectAllocatedSpaceRsp {
    // No fields are required for this response.
}

/**
 * GetSubjectAllocatedSpaceRqst is a request to retrieve the allocated space for a subject.
 */
message GetSubjectAllocatedSpaceRqst {
    string subject = 1; // Identifier of the subject.
    SubjectType type = 2; // Type of the subject (e.g., user, group).
}

/**
 * GetSubjectAllocatedSpaceRsp is a response containing the allocated space for a subject.
 */
message GetSubjectAllocatedSpaceRsp {
    uint64 allocated_space = 1; // The amount of space allocated to the subject, in bytes.
}

/**
 * GetSubjectAvailableSpaceRqst is a request to retrieve the available space for a subject.
 */
message GetSubjectAvailableSpaceRqst {
    string subject = 1; // Identifier of the subject.
    SubjectType type = 2; // Type of the subject (e.g., user, group).
}

/**
 * GetSubjectAvailableSpaceRsp is a response containing the available space for a subject.
 */
message GetSubjectAvailableSpaceRsp {
    uint64 available_space = 1; // The amount of available space for the subject, in bytes.
}

/**
 * ValidateSubjectSpaceRqst is a request to validate if a subject has enough space for a given requirement.
 */
message ValidateSubjectSpaceRqst {
    string subject = 1; // Identifier of the subject.
    SubjectType type = 2; // Type of the subject (e.g., user, group).
    uint64 required_space = 3; // The required space to validate, in bytes.
}

/**
 * ValidateSubjectSpaceRsp is a response indicating whether the subject has sufficient space.
 */
message ValidateSubjectSpaceRsp {
    bool hasSpace = 1; // Indicates if the subject has enough space.
}

/**
 * RbacService is a service for controlling actions and managing access to resources 
 * based on Role-Based Access Control (RBAC) principles.
 */
 service RbacService {

	/**
	 * SetResourcePermissions replaces existing permissions for a resource.
	 */
	rpc SetResourcePermissions(SetResourcePermissionsRqst) returns(SetResourcePermissionsRsp);
	
	/**
	 * DeleteResourcePermissions removes all permissions associated with a resource.
	 * Typically called when a resource is deleted.
	 */
	rpc DeleteResourcePermissions(DeleteResourcePermissionsRqst) returns(DeleteResourcePermissionsRsp);
	
	/**
	 * DeleteResourcePermission removes a specific permission from a resource.
	 */
	rpc DeleteResourcePermission(DeleteResourcePermissionRqst) returns(DeleteResourcePermissionRsp);
	
	/**
	 * GetResourcePermission retrieves a specific permission for a resource (e.g., read permission).
	 */
	rpc GetResourcePermission(GetResourcePermissionRqst) returns(GetResourcePermissionRsp);
	
	/**
	 * SetResourcePermission sets a specific permission for a resource (e.g., read permission).
	 */
	rpc SetResourcePermission(SetResourcePermissionRqst) returns(SetResourcePermissionRsp);
	
	/**
	 * GetResourcePermissions retrieves all permissions associated with a resource.
	 */
	rpc GetResourcePermissions(GetResourcePermissionsRqst) returns(GetResourcePermissionsRsp);

	/**
	 * GetResourcePermissionsByResourceType streams permissions for a specific resource type (e.g., blog, file).
	 */
	rpc GetResourcePermissionsByResourceType(GetResourcePermissionsByResourceTypeRqst) returns(stream GetResourcePermissionsByResourceTypeRsp);

	/**
	 * GetResourcePermissionsBySubject streams permissions associated with a specific subject.
	 */
	rpc GetResourcePermissionsBySubject(GetResourcePermissionsBySubjectRqst) returns(stream GetResourcePermissionsBySubjectRsp);
	
	/**
	 * AddResourceOwner adds an owner to a resource. Does nothing if the owner already exists.
	 */
	rpc AddResourceOwner(AddResourceOwnerRqst) returns(AddResourceOwnerRsp);
	
	/**
	 * RemoveResourceOwner removes an owner from a resource.
	 */
	rpc RemoveResourceOwner(RemoveResourceOwnerRqst) returns(RemoveResourceOwnerRsp);
	
	/**
	 * DeleteAllAccess removes all access permissions associated with a subject.
	 * Typically called when a subject is removed from the system.
	 */
	rpc DeleteAllAccess(DeleteAllAccessRqst) returns (DeleteAllAccessRsp);
	
	/**
	 * ValidateAccess checks if a subject has access to a resource for a specific operation (e.g., read, write).
	 */
	rpc ValidateAccess(ValidateAccessRqst) returns(ValidateAccessRsp);

	/**
	 * SetActionResourcesPermissions sets permissions for resources related to specific actions.
	 */
	rpc SetActionResourcesPermissions(SetActionResourcesPermissionsRqst) returns(SetActionResourcesPermissionsRsp);
		
	/**
	 * GetActionResourceInfos retrieves resource information related to a specific action.
	 */
	rpc GetActionResourceInfos(GetActionResourceInfosRqst) returns(GetActionResourceInfosRsp);
	
	/**
	 * ValidateAction checks if a subject has permission to perform a specific action.
	 */
	rpc ValidateAction(ValidateActionRqst) returns(ValidateActionRsp);

	/**
	 * ValidateSubjectSpace checks if a subject has enough space for storing files.
	 */
	rpc ValidateSubjectSpace(ValidateSubjectSpaceRqst) returns(ValidateSubjectSpaceRsp);

	/**
	 * GetSubjectAvailableSpace retrieves the available disk space for a subject.
	 */
	rpc GetSubjectAvailableSpace(GetSubjectAvailableSpaceRqst) returns(GetSubjectAvailableSpaceRsp);

	/**
	 * GetSubjectAllocatedSpace retrieves the allocated disk space for a subject.
	 */
	rpc GetSubjectAllocatedSpace(GetSubjectAllocatedSpaceRqst) returns(GetSubjectAllocatedSpaceRsp);

	/**
	 * SetSubjectAllocatedSpace sets the allocated disk space for a subject.
	 */
	rpc SetSubjectAllocatedSpace(SetSubjectAllocatedSpaceRqst) returns(SetSubjectAllocatedSpaceRsp);

	/**
	 * GetSharedResource retrieves the list of resources shared with a subject.
	 */
	rpc GetSharedResource(GetSharedResourceRqst) returns(GetSharedResourceRsp);

	/**
	 * RemoveSubjectFromShare removes a subject from a shared resource.
	 */
	rpc RemoveSubjectFromShare(RemoveSubjectFromShareRqst) returns(RemoveSubjectFromShareRsp);
	
	/**
	 * DeleteSubjectShare removes all shares associated with a subject.
	 * Typically used when a subject is deleted from the system.
	 */
	rpc DeleteSubjectShare(DeleteSubjectShareRqst) returns(DeleteSubjectShareRsp);
}
