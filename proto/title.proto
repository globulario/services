/**
 * You can use echo as starter project.
 */

syntax = "proto3";
package title;

option go_package="title/titlepb";
///////////////////////////////////////////
// Movie information taken from IMDB
//////////////////////////////////////////
message Person {
	string ID = 1;
	string URL = 2;
	string FullName = 3;

	// Those information are not required...

	// A lnk to the profile picture...
	string Picture = 4;

	// A short text that describe the person.
	string Biography = 5;

	// Can help to search 
	string About = 6; // in few word...

	string RelationShipStatus = 7; // single married etc.

	string InterestIn = 8; // Sexual orientation.

	string CareerSatus = 9; // active, inactive etc.

	string Gender = 10;

	string BirthPlace = 11;
}

message Poster {
	string ID = 1;
	string titleId = 2;
	string URL = 3;
	string ContentUrl = 4;
}

message Preview {
	string ID = 1;
	string titleId = 2; // can also be a video
	string URL = 3;
	string ContentUrl = 4;
}

///////////////////////////////////////////
// Video 
///////////////////////////////////////////
message Publisher {
	string ID = 1;
	string URL = 2;
	string Name = 3;
}

message Video {
	string ID = 1;
	string URL = 2; // the origin
	string Description = 3; // A short description of the video
	Publisher PublisherId = 4; // The channel or name of the publisher.
	int64 Count = 5; // The number of view.
	float Rating = 6; // The score.
	int64 Likes = 7; // The number of person who like the video
	string Date = 8; // Contain information the publihsh date.
	repeated string Genres = 9; // The kind of video ex. adult, music ect.
	repeated string Tags = 10; // Categories, kewords... 

	// The list of video figurant
	repeated Person Casting = 11;

	Poster poster = 12; // Thumbnail
	Preview preview = 13; // short play...
	int32 Duration = 14;
	string UUID = 15;
}

message Videos {
	repeated Video videos = 1;
}

/**
 * This create a new video and save it in the database.
 */
message CreateVideoRequest {
	Video video = 1;
	/** Where the information will be save */
	string indexPath = 2; 
}

message CreateVideoResponse {
	/** nothing here */
}

/**
 * Return a video with a given id
 */
message GetVideoByIdRequest {
	string vidoeId = 1;
	string indexPath = 2;
}

message GetVideoByIdResponse {
	Video video = 1;
	repeated string filesPaths = 3;
}

/**
 * Remove a video form the db.
 */
message DeleteVideoRequest {
	string videoId = 1;
	string indexPath = 2;
}

message DeleteVideoResponse {
	
}

///////////////////////////////////////////
// Movie, serie game... 
///////////////////////////////////////////
message Title {
	string ID = 1;
	string URL = 2;
	string Name = 3;
	string Type = 4;
	int32 Year = 5;
	float Rating = 6;
	int32 RatingCount = 7;
	repeated Person Directors = 8;
	repeated Person Writers = 9;
	repeated Person Actors = 10;
	repeated string Genres = 11;
	repeated string Language = 12;
	repeated string Nationalities = 13;
	string Description = 14;
	Poster Poster = 15;
	repeated string AKA = 16;
	string Duration = 17;
	int32 Season = 18;
	int32 Episode = 19;
	string Serie = 20;
	string UUID = 21;
}

message Titles {
	repeated Title titles = 1;
}

/**
 * This create a new title and save it in the database.
 */
message CreateTitleRequest {
	Title title = 1;
	/** Where the information will be save */
	string indexPath = 2; 
}

message CreateTitleResponse {
	/** nothing here */
}

/**
 * Return a title with a given id
 */
message GetTitleByIdRequest {
	string titleId = 1;
	string indexPath = 2;
}

message GetTitleByIdResponse {
	Title title = 1;
	repeated string filesPaths = 3;
}

/**
 * Remove a title form the db.
 */
message DeleteTitleRequest {
	string titleId = 1;
	string indexPath = 2;
}

message DeleteTitleResponse {
	
}

message AssociateFileWithTitleRequest {
	string titleId = 1;
	string filePath = 2;
	string indexPath = 3;
}

message AssociateFileWithTitleResponse {
	/** nothing here */
}

message DissociateFileWithTitleRequest {
	string titleId = 1;
	string filePath = 2;
	string indexPath = 3;
}

message DissociateFileWithTitleResponse {
	/** nothing here */
}

/** The list of files titles.*/
message GetFileTitlesRequest {
	string filePath = 1;
	string indexPath = 2;
}

message GetFileTitlesResponse {
	Titles titles = 1;
}

/** The list of files titles.*/
message GetFileVideosRequest {
	string filePath = 1;
	string indexPath = 2;
}

message GetFileVideosResponse {
	Videos videos = 1;
}

/** The list of files asscociated with a title */
message GetTitleFilesRequest {
	string titleId = 1;
	string indexPath = 2;
}

message GetTitleFilesResponse {
	repeated string filePaths = 1;
}

message Snippet {
	string field = 1;
	repeated string fragments = 2;
}

message SearchHit {
	int32 index = 1;
	double score = 2;
	repeated Snippet snippets = 3;

	// the underlying values.
	oneof result  {
		Title title = 4;
		Video video = 5;
		Audio audio = 6;
	 }
}

message SearchSummary {
	string query = 1; // the search input
	uint64 total = 2; // number of found match
	int64 took = 3;
}

message SearchFacetTerm {
	string term = 1;
	int32 count = 2;
}

message SearchFacet {
	string field = 1;
	int32 total = 2; 
	repeated SearchFacetTerm terms = 3;
	int32 other = 4;
}

message SearchFacets {
	repeated SearchFacet facets = 1;
}

message SearchTitlesRequest {
	string query = 1;
	repeated string fields = 2;
	string indexPath = 3;
	int32 size = 4;
	int32 offset = 5;
}

message SearchTitlesResponse {
    oneof result  {
        SearchSummary summary = 1;
        SearchHit hit = 2;
	    SearchFacets facets = 3;
    }
}

message CreatePublisherRequest{
	Publisher publisher = 1;
	string indexPath = 2;
}

message CreatePublisherResponse{
	/** nothing here **/
}

message DeletePublisherRequest{
	string publisherId = 1;
	string indexPath = 2;
}

message DeletePublisherResponse{
	/** nothing here */
}

message GetPublisherByIdRequest {
	string publisherId = 1;
	string indexPath = 2;
}

message GetPublisherByIdResponse {
	Publisher publisher = 1;
}

message CreatePersonRequest{
	Person person = 1;
	string indexPath = 2;
}

message CreatePersonResponse{
	/** noting here. **/
}

message DeletePersonRequest{
	string personId = 1;
	string indexPath = 2;
}

message DeletePersonResponse {
	/** noting here. **/
}

message GetPersonByIdRequest{
	string personId = 1;
	string indexPath = 2;
}

message GetPersonByIdResponse {
	Person person = 1;
}

////////////////////////////////////////////
// Audio
///////////////////////////////////////////

/**
 * This contain information about audio track. The information can be found in the 
 * file metadata.
 */
message Audio {
	string ID = 1;
	string URL = 2;
	string Artist = 3;
	string AlbumArtist = 4;
	string Album = 5;
	string Comment = 6;
	string Composer = 7;
	repeated string Genres = 8; // The kind of video ex. adult, music ect.
	string Lyrics = 9;
	string Title = 10;
	int32 Year = 11;
	int32 DiscNumber = 12;
	int32 DiscTotal = 13;
	int32 TrackNumber = 14;
	int32 TrackTotal = 15;
	Poster Poster = 16;
	int32 Duration = 17;
	string UUID = 19;
}

/**
 * The album info.
 */
message Album {
	string ID = 1;
	string Artist = 2;
	int32  Year = 3;
	repeated string Genres = 4; // The kind of video ex. adult, music ect.
	Audios tracks = 5;
	Poster Poster = 6;
}

message Audios {
	repeated Audio audios = 1;
}

message CreateAudioRequest {
	Audio audio = 1;
	string indexPath = 2;
}

message CreateAudioResponse {
	/** Nothing here **/
}

message GetAudioByIdRequest{
	string audioId = 1;
	string indexPath = 2;
}

message GetAudioByIdResponse{
	Audio audio = 1;
	repeated string filesPaths = 2;
}

message DeleteAudioRequest{
	string audioId = 1;
	string indexPath = 2;
}

message DeleteAudioResponse{
	/** Nothing here **/
}

message GetFileAudiosRequest{
	string filePath = 1;
	string indexPath = 2;
}

message GetFileAudiosResponse{
	Audios audios = 1;
}

message GetAlbumRequest{
	string albumId = 1;
	string indexPath = 2;
}

message GetAlbumResponse{
	Album album = 1;;
}

message DeleteAlbumRequest{
	string albumId = 1;
	string indexPath = 2;
}

message DeleteAlbumResponse {

}

/**
 * That service is use to manage and get access to title informations it offer
 * search functionalities to retreives movies, series, episode information and ther
 * association with file contain on a peer. Information can  
 */
service TitleService {

	// Create a publisher...
	rpc CreatePublisher(CreatePublisherRequest) returns (CreatePublisherResponse);

	// Delete a publisher...
	rpc DeletePublisher(DeletePublisherRequest) returns (DeletePublisherResponse);

	// Retrun a publisher.
	rpc GetPublisherById(GetPublisherByIdRequest) returns (GetPublisherByIdResponse);

	/////////////////////////////////// Cast ////////////////////////////////////////////////////////////
	// Create a person...
	rpc CreatePerson(CreatePersonRequest) returns (CreatePersonResponse);

	// Delete a person...
	rpc DeletePerson(DeletePersonRequest) returns (DeletePersonResponse);

	// Retrun a person with a given id.
	rpc GetPersonById(GetPersonByIdRequest) returns (GetPersonByIdResponse);


	/////////////////////////////////// Title specific functions ////////////////////////////////////////
  	// Insert a title in the database or update it if it already exist.
	rpc CreateTitle(CreateTitleRequest) returns (CreateTitleResponse);

	// Get a title by a given id.
	rpc GetTitleById(GetTitleByIdRequest) returns (GetTitleByIdResponse);

	// Delete a title from the database.
	rpc DeleteTitle(DeleteTitleRequest) returns (DeleteTitleResponse);

	/////////////////////////////////// Audio specific functions ////////////////////////////////////////
	// Insert a audio information in the database or update it if it already exist.
	rpc CreateAudio(CreateAudioRequest) returns (CreateAudioResponse);

	// Get a audio by a given id.
	rpc GetAudioById(GetAudioByIdRequest) returns (GetAudioByIdResponse);

	// Return the album information for a given id.
	rpc GetAlbum(GetAlbumRequest) returns (GetAlbumResponse);

	// Delete a audio from the database.
	rpc DeleteAudio(DeleteAudioRequest) returns (DeleteAudioResponse);

	// Delete album from the database.
	rpc DeleteAlbum(DeleteAlbumRequest) returns (DeleteAlbumResponse);

	/////////////////////////////////// Video specific functions ////////////////////////////////////////
  	// Insert a video in the database or update it if it already exist.
	rpc CreateVideo(CreateVideoRequest) returns (CreateVideoResponse);

	// Get a video by a given id.
	rpc GetVideoById(GetVideoByIdRequest) returns (GetVideoByIdResponse);

	// Delete a video from the database.
	rpc DeleteVideo(DeleteVideoRequest) returns (DeleteVideoResponse);

	////////////////////////////////////// File Tile or Video assocication ///////////////////////////////

	// Associate a file and a title info, so file can be found from title informations...
	rpc AssociateFileWithTitle(AssociateFileWithTitleRequest) returns (AssociateFileWithTitleResponse);

	// Dissociate a file and a title info, so file can be found from title informations...
	rpc DissociateFileWithTitle(DissociateFileWithTitleRequest) returns (DissociateFileWithTitleResponse);

	// Return the list of titles asscociate with a file.
	rpc GetFileTitles(GetFileTitlesRequest) returns (GetFileTitlesResponse);

	// Return the list of videos asscociate with a file.
	rpc GetFileVideos(GetFileVideosRequest) returns (GetFileVideosResponse);

	// Return the list of audios asscociate with a file.
	rpc GetFileAudios(GetFileAudiosRequest) returns (GetFileAudiosResponse);

	// Return the list of files associate with a title
	rpc GetTitleFiles(GetTitleFilesRequest) returns (GetTitleFilesResponse);

	//////////////////////////////////////// Search functionalities ////////////////////////////////////////
	
	// Search title or videos infos...
	rpc SearchTitles(SearchTitlesRequest) returns (stream SearchTitlesResponse);

}