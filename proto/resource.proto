syntax = "proto3";
package resource;

// import "google/protobuf/struct.proto";
option go_package = "github.com/globulario/services/golang/resource/resourcepb";

/** 
 * PackageBundle contains the information for updating a service or application on a node.
 */
message PackageBundle {
  PackageDescriptor packageDescriptor = 1; // Describes the package details.

  // Additional information not found in the descriptor.
  string checksum = 2; // Checksum for validating the package integrity.
  string plaform = 3; // Platform for which the package is intended.
  int32 size = 4; // Size of the package in bytes.
  int64 modified = 5; // Timestamp of when the package was last modified.
  bytes Binairies = 6; // Binary data of the package, not saved in the database.
  string mac = 7; // MAC address where the package data is stored.

  string typeName = 8; // Type of the object (e.g., service, application).
}

message SetPackageBundleRequest { PackageBundle bundle = 1; }

message SetPackageBundleResponse { bool result = 1; }

message GetPackageBundleChecksumRequest {
  string id = 1; // The unique identifier of the package bundle.
}

message GetPackageBundleChecksumResponse { string checksum = 1; }

// Enum to define the type of package.
enum PackageType {
  UNKNOW_TYPE = 0; // Default value for unknown type.
  SERVICE_TYPE = 1; // Indicates a service package.
  APPLICATION_TYPE = 2; // Indicates an application package.
}

/**
 * PackageDescriptor defines the properties of a package, including its type,
 * publisher, and other metadata.
 */
message PackageDescriptor {
  string id = 1; // Unique identifier of the package.
  string name = 2; // Name of the package.
  PackageType type = 3; // Type of the package (service or application).
  string PublisherID = 4; // Identifier of the publisher (organization or individual).
  string version = 6; // Version of the package.
  string description = 7; // Description of the package.
  repeated string repositories = 8; // List of repositories containing the package.
  repeated string discoveries = 9; // List of discoveries related to the package.
  repeated string keywords = 10; // Keywords describing the package.
  repeated string actions = 11; // Actions required by the package.
  repeated Role roles = 12; // Roles required for using the package.
  repeated Group groups = 13; // Groups associated with the package.
  string icon = 14; // Icon representing the package.
  string alias = 15; // Alias or short name for the package.

  string typeName = 16; // Type name for object type identification.
}

message GetPackageDescriptorRequest {
  string serviceId = 1;
  string PublisherID = 2;
}

message GetPackageDescriptorResponse {
  repeated PackageDescriptor results = 1; // List of package descriptors.
}

message GetPackagesDescriptorRequest {
  string query = 1; // Query for searching descriptors.
  string options = 2; // Additional options for the query.
}

message GetPackagesDescriptorResponse {
  repeated PackageDescriptor results = 1; // List of package descriptors.
}

message SetPackageDescriptorRequest { PackageDescriptor packageDescriptor = 1; }

message SetPackageDescriptorResponse { bool result = 1; }

message FindPackagesDescriptorRequest { repeated string keywords = 1; }

message FindPackagesDescriptorResponse {
  repeated PackageDescriptor results = 1; // List of package descriptors matching the keywords.
}

/** 
 * Role defines a set of actions that can be performed by an account.
 */
message Role {
  string id = 1; // Unique identifier of the role.
  string name = 2; // Name of the role.
  string domain = 3; // Domain to which the role belongs.
  string description = 4; // Description of the role.
  repeated string actions = 5; // Actions associated with the role.

  // References to other entities.
  repeated string accounts = 6; // Accounts that are members of this role.
  repeated string organizations = 7; // Organizations associated with this role.

  string typeName = 8; // Type name for object type identification.
}


message AddRoleActionsRqst {
  string roleId = 1; // The unique identifier of the role.
  repeated string actions = 2; // A list of action identifiers to be added to the role.
}

message AddRoleActionsRsp { 
  bool result = 1; // The result of the add action request, typically true if successful.
}

message RemoveRoleActionRqst {
  string roleId = 1; // The unique identifier of the role.
  string action = 2; // The identifier of the action to be removed from the role.
}

message RemoveRoleActionRsp { 
  bool result = 1; // The result of the remove action request, typically true if successful.
}

message RemoveRolesActionRqst { 
  string action = 2; // The identifier of the action to be removed from multiple roles.
}

message RemoveRolesActionRsp { 
  bool result = 1; // The result of the request to remove an action from multiple roles, typically true if successful.
}

/** 
 * Represents an account with various attributes.
 */
message Account {
  string id = 1; // Unique identifier of the account.
  string name = 2; // Name associated with the account.
  string email = 3; // Email of the account holder.
  string password = 4; // Encrypted password (only for non-OAuth accounts).
  string refreshToken = 5; // Refresh token for OAuth accounts.
  string domain = 6; // The domain where the account belongs.
  string profilePicture = 7; // URL or identifier for the profile picture.
  string firstName = 8; // First name of the account holder.
  string lastName = 9; // Last name of the account holder.
  string middle = 10; // Middle name of the account holder.

  // References.
  repeated string organizations = 11; // List of organizations the account is associated with.
  repeated string groups = 12; // List of groups the account is part of.
  repeated string roles = 13; // List of roles assigned to the account.

  string typeName = 14; // Type of the account object, for internal use.
}

message RegisterAccountRqst {
  Account account = 1; // The account information to be registered.
  string confirm_password = 2; // Only required for non-OAuth registrations.
}


message RegisterAccountRsp { 
  string result = 1; // The result of the account registration request.
}

message AccountExistRqst { 
  string id = 1; // The unique identifier of the account to check for existence.
}

message AccountExistRsp { 
  bool result = 1; // The result of the existence check, true if account exists.
}

/**
 * Request for a list of accounts based on a query.
 */
message GetAccountsRqst {
  string query = 1; // Query string to filter accounts.
  string options = 2; // Additional options for the query.
}

message GetAccountsRsp { 
  repeated Account accounts = 1; // The list of accounts matching the query.
}

message GetAccountRqst {
  string accountId = 1; // The unique identifier of the account to retrieve.
}

message GetAccountRsp {
  Account account = 1; // The account information corresponding to the requested ID.
}

message SetAccountRqst {
  Account account = 1; // The account information that needs to be updated or created.
}

message SetAccountRsp {
  // This message does not contain any fields.
}

message SetAccountPasswordRqst {
  string accountId = 1; // The unique identifier of the account for password change.
  string old_password = 2; // The current password of the account.
  string new_password = 3; // The new password to set for the account.
}

message SetAccountPasswordRsp {
  // This message does not contain any fields.
}

message SetEmailRequest {
  string accountId = 1; // The unique identifier of the account for email update.
  string oldEmail = 2; // The current email address of the account.
  string newEmail = 3; // The new email address to set for the account.
}

message SetEmailResponse {
  // This message does not contain any fields.
}

message DeleteAccountRqst {
  string id = 1; // The unique identifier of the account to be deleted.
}

message DeleteAccountRsp {
  string result = 1; // The result of the delete account request.
}

message AddAccountRoleRqst {
  string accountId = 1; // The unique identifier of the account to add a role to.
  string roleId = 2; // The unique identifier of the role to be added to the account.
}

message AddAccountRoleRsp {
  bool result = 1; // The result of the add role request, typically true if successful.
}

message RemoveAccountRoleRqst {
  string accountId = 1; // The unique identifier of the account to remove a role from.
  string roleId = 2; // The unique identifier of the role to be removed from the account.
}

message RemoveAccountRoleRsp {
  bool result = 1; // The result of the remove role request, typically true if successful.
}

message Contact {
  string id = 1; // Unique identifier of the contact.
  int64 invitationTime = 2; // The timestamp of when the contact was invited.
  string status = 3; // The status of the contact (e.g., pending, accepted).
  
  // Optional information.
  string ringtone = 4; // Custom ringtone for the contact.
  string profilePicture = 5; // URL or identifier for the contact's profile picture.
}

message SetAccountContactRqst {
  string accountId = 1; // The unique identifier of the account to set a contact for.
  Contact contact = 2; // The contact information to be associated with the account.
}

message SetAccountContactRsp {
  bool result = 1; // The result of the set contact request, typically true if successful.
}

message CreateRoleRqst {
  Role role = 1; // The role information to be created.
}

message CreateRoleRsp {
  bool result = 1; // The result of the create role request, typically true if successful.
}

/**
 * Request message for updating the values of a specific role.
 */
 message UpdateRoleRqst {
  string roleId = 1; // The unique identifier of the role to be updated.
  string values = 2; // The new values to update the role with, likely in a serialized format.
}

message UpdateRoleRsp {
  bool result = 1; // The result of the update operation, typically true if successful.
}


/**
 * Request message for retrieving a list of roles, potentially based on specific criteria.
 */
message GetRolesRqst {
  string query = 1; // A query string to filter the roles, could be based on name, domain, etc.
  string options = 2; // Additional options for the request, like pagination or sorting parameters.
}

message GetRolesRsp {
  repeated Role roles = 1; // The list of roles that match the query and options.
}

/**
 * Request message for deleting a specific role.
 */
message DeleteRoleRqst {
  string roleId = 1; // The unique identifier of the role to be deleted.
}

message DeleteRoleRsp {
  bool result = 1; // The result of the delete operation, typically true if successful.
}

/** Represents an application with various attributes and metadata. */
message Application {
  string id = 1;                       // Unique identifier of the application.
  string name = 2;                     // Name of the application.
  string domain = 3;                   // Domain associated with the application.
  string password = 4;                 // Password for the application (if applicable).
  string path = 5;                     // Path where the application is located or deployed.
  string version = 6;                  // Version of the application.
  string description = 7;              // Description of the application.
  repeated string actions = 8;         // List of actions associated with the application.
  repeated string keywords = 9;        // Keywords for categorizing or searching the application.
  string icon = 10;                    // URL or path to the application's icon.
  string alias = 11;                   // Alias for the application.
  string PublisherID = 12;             // Identifier of the publisher of the application.
  int64 creation_date = 13;            // Timestamp of the application's creation.
  int64 last_deployed = 14;            // Timestamp of the last deployment of the application.

  string typeName = 15;                // Type information about the object.
}

/** Request to create or update an application. */
message CreateApplicationRqst {
  Application application = 1; // The application to be created or updated.
}

message CreateApplicationRsp {} // Response for application creation/update request.

/** Request to update an existing application. */
message UpdateApplicationRqst {
  string applicationId = 1; // Identifier of the application to update.
  string values = 2;        // Updated values for the application.
}

message UpdateApplicationRsp {
  bool result = 1;          // Result of the update operation.
}

/** Request to delete an application. */
message DeleteApplicationRqst {
  string applicationId = 1; // Identifier of the application to delete.
}

message DeleteApplicationRsp {
  bool result = 1;          // Result of the delete operation.
}

/** Request to add actions to an application. */
message AddApplicationActionsRqst {
  string applicationId = 1;         // Identifier of the application.
  repeated string actions = 2;      // Actions to add to the application.
}

message AddApplicationActionsRsp {
  bool result = 1;                  // Result of adding actions.
}

/** Request to remove a specific action from an application. */
message RemoveApplicationActionRqst {
  string applicationId = 1;         // Identifier of the application.
  string action = 2;                // Action to remove.
}

message RemoveApplicationActionRsp {
  bool result = 1;                  // Result of removing the action.
}

/** Request to remove a specific action from all applications. */
message RemoveApplicationsActionRqst {
  string action = 2;                // Action to be removed.
}

message RemoveApplicationsActionRsp {
  bool result = 1;                  // Result of the removal.
}

/** Request to retrieve applications based on specific criteria. */
message GetApplicationsRqst {
  string query = 1;                 // Query for filtering applications.
  string options = 2;               // Additional options for the request.
}

message GetApplicationsRsp {
  repeated Application applications = 1; // List of applications matching the query.
}

/** Request to retrieve the version of a specific application. */
message GetApplicationVersionRqst {
  string id = 1;                    // Identifier of the application.
}

message GetApplicationVersionRsp {
  string version = 1;               // Version of the application.
}

/** Request to retrieve the icon of a specific application. */
message GetApplicationIconRqst {
  string id = 1;                    // Identifier of the application.
}

message GetApplicationIconRsp {
  string icon = 1;                  // Icon of the application.
}

/** Request to retrieve the alias of a specific application. */
message GetApplicationAliasRqst {
  string id = 1;                    // Identifier of the application.
}

message GetApplicationAliasRsp {
  string alias = 1;                 // Alias of the application.
}

/** Represents a group within Globular with various attributes. */
message Group {
  string id = 1;                    // Unique identifier of the group.
  string name = 2;                  // Name of the group, unique on the network.
  string domain = 3;                // Domain associated with the group.
  string description = 4;           // Description of the group.
  repeated string accounts = 5;      // Members of the group, can be empty.
  repeated string organizations = 6;// Organizations associated with the group, can be empty.
  string typeName = 7;              // Type information about the object.
}

/** Request to create a new group. */
message CreateGroupRqst {
  Group group = 1; // The group details to be registered.
}

message CreateGroupRsp {
  bool result = 1; // Result of the create group operation.
}

/** Request to update an existing group. */
message UpdateGroupRqst {
  string groupId = 1; // Identifier of the group to be updated.
  string values = 2;  // New values for the group's attributes.
}

message UpdateGroupRsp {
  bool result = 1;    // Result of the update group operation.
}

/** Request to retrieve a list of groups. */
message GetGroupsRqst {
  string query = 1;   // Query string to filter groups.
  string options = 2; // Additional options for the request.
}

message GetGroupsRsp {
  repeated Group groups = 1; // List of groups that match the query.
}

/** Request to delete a specific group. */
message DeleteGroupRqst {
  string group = 1;   // Identifier of the group to be deleted.
}

message DeleteGroupRsp {
  bool result = 1;    // Result of the delete group operation.
}

/** Request to add a member account to a group. */
message AddGroupMemberAccountRqst {
  string groupId = 1;   // Identifier of the group.
  string accountId = 2; // Account ID of the member to be added.
}

message AddGroupMemberAccountRsp {
  bool result = 1;      // Result of adding the member account.
}

/** Request to remove a member account from a group. */
message RemoveGroupMemberAccountRqst {
  string groupId = 1;   // Identifier of the group.
  string accountId = 2; // Account ID of the member to be removed.
}

message RemoveGroupMemberAccountRsp {
  bool result = 1;      // Result of removing the member account.
}

/** Represents an organization with various attributes and associated entities. */
message Organization {
  string id = 1;            // Unique identifier of the organization.
  string domain = 2;        // Domain associated with the organization.
  string name = 3;          // Unique name of the organization on the network.
  string email = 4;         // Contact email for the organization.
  string icon = 5;          // Icon representing the organization.
  string description = 6;   // Description of the organization.

  // Aggregations
  repeated string accounts = 7;       // List of accounts associated with the organization.
  repeated string groups = 8;         // List of groups under the organization.
  repeated string roles = 9;          // List of roles defined within the organization.
  repeated string applications = 10;  // Applications developed or used by the organization.

  string typeName = 11;               // Type information about the object.
}

/** Request to create a new organization. */
message CreateOrganizationRqst {
  Organization organization = 1; // The organization details to be registered.
}

message CreateOrganizationRsp {
  bool result = 1; // Result of the create organization operation.
}

/** Request to update an existing organization. */
message UpdateOrganizationRqst {
  string organizationId = 1; // Identifier of the organization to be updated.
  string values = 2;         // New values for the organization's attributes.
}

message UpdateOrganizationRsp {
  bool result = 1;           // Result of the update organization operation.
}

/** Request to retrieve a list of organizations. */
message GetOrganizationsRqst {
  string query = 1;   // Query string to filter organizations.
  string options = 2; // Additional options for the request.
}

message GetOrganizationsRsp {
  repeated Organization organizations = 1; // List of organizations that match the query.
}

/** Request to add an account to an organization. */
message AddOrganizationAccountRqst {
  string organizationId = 1; // Identifier of the organization.
  string accountId = 2;      // Account ID to be added to the organization.
}

message AddOrganizationAccountRsp {
  bool result = 1;           // Result of the add account operation.
}

/** Request to add a group to an organization. */
message AddOrganizationGroupRqst {
  string organizationId = 1; // Identifier of the organization.
  string groupId = 2;        // Group ID to be added to the organization.
}

message AddOrganizationGroupRsp {
  bool result = 1;           // Result of the add group operation.
}

/** Request to add a role to an organization. */
message AddOrganizationRoleRqst {
  string organizationId = 1; // Identifier of the organization.
  string roleId = 2;         // Role ID to be added to the organization.
}

message AddOrganizationRoleRsp {
  bool result = 1;           // Result of the add role operation.
}

/** Request to add an application to an organization. */
message AddOrganizationApplicationRqst {
  string organizationId = 1;    // Identifier of the organization.
  string applicationId = 2;     // Application ID to be added to the organization.
}

message AddOrganizationApplicationRsp {
  bool result = 1;              // Result of the add application operation.
}

/** Request to remove a group from an organization. */
message RemoveOrganizationGroupRqst {
  string organizationId = 1; // Identifier of the organization.
  string groupId = 2;        // Group ID to be removed from the organization.
}

message RemoveOrganizationGroupRsp {
  bool result = 1;           // Result of the remove group operation.
}

/** Request to remove a role from an organization. */
message RemoveOrganizationRoleRqst {
  string organizationId = 1; // Identifier of the organization.
  string roleId = 2;         // Role ID to be removed from the organization.
}

message RemoveOrganizationRoleRsp {
  bool result = 1;           // Result of the remove role operation.
}

/** Request to remove an application from an organization. */
message RemoveOrganizationApplicationRqst {
  string organizationId = 1;    // Identifier of the organization.
  string applicationId = 2;     // Application ID to be removed from the organization.
}

message RemoveOrganizationApplicationRsp {
  bool result = 1;              // Result of the remove application operation.
}

/** Request to remove an account from an organization. */
message RemoveOrganizationAccountRqst {
  string organizationId = 1; // Identifier of the organization.
  string accountId = 2;      // Account ID to be removed from the organization.
}

message RemoveOrganizationAccountRsp {
  bool result = 1;           // Result of the remove account operation.
}

/** Request to check if an account is a member of an organization. */
message IsOrgnanizationMemberRqst {
  string organizationId = 1; // Identifier of the organization.
  string accountId = 2;      // Account ID to check for membership.
}

message IsOrgnanizationMemberRsp {
  bool result = 1;           // Result indicating membership status.
}


/**
 * Request to remove an organization from the network.
 */
 message DeleteOrganizationRqst { 
  string organization = 1; // Identifier of the organization to be deleted.
}

message DeleteOrganizationRsp { 
  bool result = 1; // Result of the deletion operation (true if successful).
}

// Enum to represent the approval state of a peer.
enum PeerApprovalState {
  PEER_PENDING = 0;  // Approval is pending.
  PEER_ACCETEP = 1;  // Peer has been accepted.
  PEER_REJECTED = 2; // Peer has been rejected.
}

/** 
 * Definition of a peer in the network.
 */
message Peer {
  string hostname = 1; // Hostname of the peer.
  string domain = 2;  // Domain associated with the peer, must be unique.
  string external_ip_address = 3 [json_name = "ExternalIPAddress"]; // External IP address of the peer.
  string local_ip_address = 4 [json_name = "localIPAddress"]; // Local IP address of the peer.
  string mac = 5; // MAC address of the peer.
  int32 port_http = 6 [json_name = "PortHTTP"]; // HTTP port used by the peer.
  int32 port_https = 7 [json_name = "PortHTTPS"]; // HTTPS port used by the peer.
  string protocol = 8; // Protocol used (http or https).
  PeerApprovalState state = 9; // Current approval state of the peer.

  repeated string actions = 10; // Actions that the peer can perform.

  string typeName = 11; // Type information of the object.
}

/**
 * Request to get the approval state of a peer.
 */
message GetPeerApprovalStateRqst {
  string mac = 1; // MAC address of the peer.
  string remote_peer_address = 2; // Address of the remote peer.
}

message GetPeerApprovalStateRsp {
  PeerApprovalState state = 1; // Approval state of the peer.
}

/**
 * Request to get the public key of a peer.
 */
message GetPeerPublicKeyRqst {
  string mac = 1; // MAC address of the peer.
  string remote_peer_address = 2; // Address of the remote peer.
}

message GetPeerPublicKeyRsp {
  string public_key = 1; // Public key of the peer.
}

/**
 * Request to register a peer in the network.
 */
message RegisterPeerRqst {
  Peer peer = 1; // Peer information.
  string public_key = 2; // Public key of the peer.
}

message RegisterPeerRsp {
  Peer peer = 1; // Registered peer information.
  string public_key = 2; // Public key of the registered peer.
}

/**
 * Request to update the information of a peer.
 */
message UpdatePeerRqst { 
  Peer peer = 1; // Updated peer information.
}

message UpdatePeerRsp { 
  bool result = 1; // Result of the update operation (true if successful).
}

/**
 * Return the list of peer (query is use to get specific peer's).
 */
message GetPeersRqst {
  string query = 1;
  string options = 2;
}

message GetPeersRsp { repeated Peer peers = 1; }

/**
 * Remove a peer from the network.
 */
message DeletePeerRqst { Peer peer = 1; }

// Response to a delete peer request
message DeletePeerRsp { 
  bool result = 1; // Indicates whether the peer was successfully deleted (true if successful).
}

// Request to add actions to a peer
message AddPeerActionsRqst {
  string mac = 1; // MAC address of the peer.
  repeated string actions = 2; // List of actions to be added to the peer.
}

// Response to the add actions to peer request
message AddPeerActionsRsp { 
  bool result = 1; // Indicates whether the actions were successfully added (true if successful).
}

// Request to remove a specific action from a peer
message RemovePeerActionRqst {
  string mac = 1; // MAC address of the peer.
  string action = 2; // The action to be removed.
}

// Response to the remove action from peer request
message RemovePeerActionRsp { 
  bool result = 1; // Indicates whether the action was successfully removed (true if successful).
}

// Request to remove a specific action from all peers
message RemovePeersActionRqst { 
  string action = 2; // The action to be removed from all peers.
}

// Response to the remove action from all peers request
message RemovePeersActionRsp { 
  bool result = 1; // Indicates whether the action was successfully removed from all peers (true if successful).
}

// Request to accept a peer
message AcceptPeerRqst {
  Peer peer = 1; // The peer to be accepted.
}

// Response to the accept peer request
message AcceptPeerRsp { 
  bool result = 1; // Indicates whether the peer was successfully accepted (true if successful).
}

// Request to reject a peer
message RejectPeerRqst {
  Peer peer = 1; // The peer to be rejected.
}

// Response to the reject peer request
message RejectPeerRsp { 
  bool result = 1; // Indicates whether the peer was successfully rejected (true if successful).
}

// Structure representing a call
message Call {
  string uuid = 1; // Unique identifier for the call.

  string caller = 2; // Identifier of the call initiator.

  string callee = 3; // Identifier of the call recipient.

  int64 startTime = 4; // Timestamp for when the call started.

  int64 endTime = 5; // Timestamp for when the call ended. A value of 0 indicates the call was not answered.

  string typeName = 6; // Type information of the object.
}

// Request to retrieve call history for an account
message GetCallHistoryRqst {
  string account_id = 1; // Identifier of the account.
}

// Response to the get call history request
message GetCallHistoryRsp {
  repeated Call calls = 1; // List of calls associated with the account.
}

// Request to create or update call information
message SetCallRqst {
  Call call = 1; // Call information to be created or updated.
}

// Response to the set call request
message SetCallRsp {
  // No fields are specified, indicating that the response may only confirm the request was received and processed.
}

// Request to delete a specific call from an account's call history.
message DeleteCallRqst {
  string account_id = 1; // Identifier of the account related to the call.
  string uuid = 2;       // Unique identifier of the call to be deleted.
}

// Response for the DeleteCallRqst.
// This message doesn't carry additional data and serves as an acknowledgment.
message DeleteCallRsp {
  // No additional fields required.
}

// Request to clear call history based on a filter.
message ClearCallsRqst {
  string account_id = 1; // Identifier of the account whose call history is to be cleared.
  string filter = 2;     // Filter criteria to select calls to be cleared.
}

// Response for the ClearCallsRqst.
// This message also doesn't carry additional data and serves as an acknowledgment.
message ClearCallsRsp {
  // No additional fields required.
}

// Enumeration for different types of notifications.
enum NotificationType {
  USER_NOTIFICATION = 0;
  APPLICATION_NOTIFICATION = 1;
  SYSTEM_NOTIFICATION = 2;
}

// Structure representing a notification.
message Notification {
  string id = 1;                        // Unique identifier for the notification.
  int64 date = 2;                       // Timestamp of the notification.
  string message = 3;                   // Notification message content.
  string recipient = 4;                 // Identifier of the notification recipient.
  string sender = 5;                    // Identifier of the sender of the notification.
  NotificationType notification_type = 6; // Type of the notification.
  string mac = 7;                       // MAC address where the notification is stored.
  string typeName = 8;                  // Type name for object type identification.
}

// Request to create a notification.
message CreateNotificationRqst {
  Notification notification = 1; // The notification to be created.
}

// Response for the CreateNotificationRqst.
message CreateNotificationRsp {
  // No additional fields required.
}

// Request to retrieve notifications for a recipient.
message GetNotificationsRqst {
  string recipient = 1; // Identifier of the recipient whose notifications are to be retrieved.
}

// Response containing a list of notifications.
message GetNotificationsRsp {
  repeated Notification notifications = 1; // List of notifications for the recipient.
}

// Request to delete a specific notification.
message DeleteNotificationRqst {
  string id = 1;         // Unique identifier of the notification to be deleted.
  string recipient = 2;  // Identifier of the recipient related to the notification.
}

// Response for the DeleteNotificationRqst.
message DeleteNotificationRsp {
  // No additional fields required.
}

// Request to clear all notifications for a recipient.
message ClearAllNotificationsRqst {
  string recipient = 1; // Identifier of the recipient whose notifications are to be cleared.
}

// Response for the ClearAllNotificationsRqst.
message ClearAllNotificationsRsp {
  // No additional fields required.
}

// Request to clear notifications of a specific type for a recipient.
message ClearNotificationsByTypeRqst {
  string recipient = 1;                  // Identifier of the recipient.
  NotificationType notification_type = 2; // Type of notifications to be cleared.
}

// Response for the ClearNotificationsByTypeRqst.
message ClearNotificationsByTypeRsp {
  // No additional fields required.
}

// Enumeration for session states.
enum SessionState {
  ONLINE = 0;  // Indicates the user is online.
  OFFLINE = 1; // Indicates the user is offline.
  AWAY = 2;    // Indicates the user is away.
}

// Message representing information about a user's session.
message Session {
  string accountId = 1;         // Identifier of the account associated with the session.
  SessionState state = 2;       // Current state of the session (Online, Offline, Away).
  int64 last_state_time = 3;    // Timestamp of the last state change.
  int64 expire_at = 4;          // Timestamp indicating when the session expires.
  string typeName = 5;          // Type name for object type identification.
}

// Request to update a session.
message UpdateSessionRequest {
  Session session = 1; // The session information to be updated.
}

// Response for the UpdateSessionRequest.
// This message doesn't carry additional data and serves as an acknowledgment.
message UpdateSessionResponse {
  // No additional fields required.
}

// Request to remove a session.
message RemoveSessionRequest {
  string accountId = 1; // Identifier of the account whose session is to be removed.
}

// Response for the RemoveSessionRequest.
// This message also doesn't carry additional data and serves as an acknowledgment.
message RemoveSessionResponse {
  // No additional fields required.
}

// Request to retrieve sessions based on a query and options.
message GetSessionsRequest {
  string query = 1;    // Query string to filter sessions.
  string options = 2;  // Additional options to modify the query.
}

// Response containing a list of sessions.
message GetSessionsResponse {
  repeated Session sessions = 1; // List of sessions that match the query.
}

// Request to get information about a specific session.
message GetSessionRequest {
  string accountId = 1; // Identifier of the account whose session information is requested.
}

// Response containing the requested session information.
message GetSessionResponse {
  Session session = 1; // The requested session information.
}

// Request to create a reference between two entities.
message CreateReferenceRqst {
  string sourceId = 1;          // Identifier of the source entity.
  string sourceCollection = 2;  // Collection of the source entity.
  string fieldName = 3;         // Field name in the source entity to hold the reference.
  string targetId = 4;          // Identifier of the target entity.
  string targetCollection = 5;  // Collection of the target entity.
}

// Response for the CreateReferenceRqst.
// This message doesn't carry additional data and serves as an acknowledgment.
message CreateReferenceRsp {
  // No additional fields required.
}

// Request to delete a reference between entities.
message DeleteReferenceRqst {
  string refId = 1;             // Identifier of the reference to be deleted.
  string targetId = 2;          // Identifier of the target entity.
  string targetField = 3;       // Field name in the target entity of the reference.
  string targetCollection = 4;  // Collection of the target entity.
}

// Response for the DeleteReferenceRqst.
// This message doesn't carry additional data and serves as an acknowledgment.
message DeleteReferenceRsp {
  // No additional fields required.
}

/**
 * Service for managing Globular resources like permissions, accounts,
 * organizations, roles, etc., using Persistence service for data storage.
 */
service ResourceService {

  // Creates an object reference inside another object. For example, add a reference to an account in a group's 'members' field.
  rpc CreateReference(CreateReferenceRqst) returns(CreateReferenceRsp);

  // Deletes a reference from an object.
  rpc DeleteReference(DeleteReferenceRqst) returns(DeleteReferenceRsp);

  // Registers a new organization.
  rpc CreateOrganization(CreateOrganizationRqst) returns (CreateOrganizationRsp);

  // Updates an existing organization.
  rpc UpdateOrganization(UpdateOrganizationRqst) returns (UpdateOrganizationRsp);

  // Retrieves a list of organizations.
  rpc GetOrganizations(GetOrganizationsRqst) returns (stream GetOrganizationsRsp);

  // Deletes an organization.
  rpc DeleteOrganization(DeleteOrganizationRqst) returns (DeleteOrganizationRsp);

  // Adds an account to an organization.
  rpc AddOrganizationAccount(AddOrganizationAccountRqst) returns (AddOrganizationAccountRsp);

  // Adds a group to an organization.
  rpc AddOrganizationGroup(AddOrganizationGroupRqst) returns (AddOrganizationGroupRsp);

  // Adds a role to an organization.
  rpc AddOrganizationRole(AddOrganizationRoleRqst) returns (AddOrganizationRoleRsp);

  // Adds an application to an organization.
  rpc AddOrganizationApplication(AddOrganizationApplicationRqst) returns (AddOrganizationApplicationRsp);

  // Removes an account from an organization.
  rpc RemoveOrganizationAccount(RemoveOrganizationAccountRqst) returns (RemoveOrganizationAccountRsp);

  // Removes a group from an organization.
  rpc RemoveOrganizationGroup(RemoveOrganizationGroupRqst) returns (RemoveOrganizationGroupRsp);

  // Removes a role from an organization.
  rpc RemoveOrganizationRole(RemoveOrganizationRoleRqst) returns (RemoveOrganizationRoleRsp);

  // Removes an application from an organization.
  rpc RemoveOrganizationApplication(RemoveOrganizationApplicationRqst) returns (RemoveOrganizationApplicationRsp);

  // Registers a new group.
  rpc CreateGroup(CreateGroupRqst) returns (CreateGroupRsp);

  // Updates an existing group.
  rpc UpdateGroup(UpdateGroupRqst) returns (UpdateGroupRsp);

  // Retrieves a list of groups.
  rpc GetGroups(GetGroupsRqst) returns (stream GetGroupsRsp);

  // Deletes a group.
  rpc DeleteGroup(DeleteGroupRqst) returns (DeleteGroupRsp);

  // Adds a member account to a group.
  rpc AddGroupMemberAccount(AddGroupMemberAccountRqst) returns (AddGroupMemberAccountRsp);

  // Removes a member account from a group.
  rpc RemoveGroupMemberAccount(RemoveGroupMemberAccountRqst) returns (RemoveGroupMemberAccountRsp);

  // Registers a new account.
  rpc RegisterAccount(RegisterAccountRqst) returns (RegisterAccountRsp);

  // Deletes an account.
  rpc DeleteAccount(DeleteAccountRqst) returns (DeleteAccountRsp);

  // Retrieves a single account.
  rpc GetAccount(GetAccountRqst) returns (GetAccountRsp);

  // Saves an account.
  rpc SetAccount(SetAccountRqst) returns (SetAccountRsp);

  // Sets or changes an account's password.
  rpc SetAccountPassword(SetAccountPasswordRqst) returns (SetAccountPasswordRsp);

  // Retrieves a list of accounts.
  rpc GetAccounts(GetAccountsRqst) returns (stream GetAccountsRsp);

  // Adds a role to an account.
  rpc AddAccountRole(AddAccountRoleRqst) returns (AddAccountRoleRsp);

  // Removes a role from an account.
  rpc RemoveAccountRole(RemoveAccountRoleRqst) returns (RemoveAccountRoleRsp);

  // Appends or updates a contact for an account.
  rpc SetAccountContact(SetAccountContactRqst) returns (SetAccountContactRsp);

  // Sets or changes the email address for an account.
  rpc SetEmail(SetEmailRequest) returns (SetEmailResponse);

  // Checks if an account is a member of a given organization.
  rpc IsOrgnanizationMember(IsOrgnanizationMemberRqst) returns (IsOrgnanizationMemberRsp);

  // Creates or updates a role with a specified list of actions.
  rpc CreateRole(CreateRoleRqst) returns (CreateRoleRsp);

  // Updates an existing role.
  rpc UpdateRole(UpdateRoleRqst) returns (UpdateRoleRsp);

  // Retrieves a list of roles.
  rpc GetRoles(GetRolesRqst) returns (stream GetRolesRsp);

  // Deletes a role by its ID.
  rpc DeleteRole(DeleteRoleRqst) returns (DeleteRoleRsp);

  // Appends actions to an existing role.
  rpc AddRoleActions(AddRoleActionsRqst) returns (AddRoleActionsRsp);

  // Removes an action from an existing role.
  rpc RemoveRoleAction(RemoveRoleActionRqst) returns (RemoveRoleActionRsp);

  // Removes an action from all roles.
  rpc RemoveRolesAction(RemoveRolesActionRqst) returns (RemoveRolesActionRsp);

  // Creates a new application.
  rpc CreateApplication(CreateApplicationRqst) returns (CreateApplicationRsp);

  // Updates an existing application.
  rpc UpdateApplication(UpdateApplicationRqst) returns (UpdateApplicationRsp);

  // Retrieves information about all applications in a JSON format.
  rpc GetApplications(GetApplicationsRqst) returns (stream GetApplicationsRsp);

  // Deletes an application from the server.
  rpc DeleteApplication(DeleteApplicationRqst) returns (DeleteApplicationRsp);

  // Appends actions to existing applications.
  rpc AddApplicationActions(AddApplicationActionsRqst) returns (AddApplicationActionsRsp);

  // Removes an action from an existing application.
  rpc RemoveApplicationAction(RemoveApplicationActionRqst) returns (RemoveApplicationActionRsp);

    // Removes an action from all applications.
    rpc RemoveApplicationsAction(RemoveApplicationsActionRqst) returns (RemoveApplicationsActionRsp);

    // Retrieves the version of a specified application.
    rpc GetApplicationVersion(GetApplicationVersionRqst) returns (GetApplicationVersionRsp);
  
    // Obtains the alias (a user-friendly name) for a specific application.
    rpc GetApplicationAlias(GetApplicationAliasRqst) returns (GetApplicationAliasRsp);
  
    // Fetches the icon associated with a particular application.
    rpc GetApplicationIcon(GetApplicationIconRqst) returns (GetApplicationIconRsp);
  
    // Registers a new peer in the network.
    rpc RegisterPeer(RegisterPeerRqst) returns (RegisterPeerRsp);
  
    // Retrieves a list of all peers in the network.
    rpc GetPeers(GetPeersRqst) returns (stream GetPeersRsp);
  
    // Gets the approval state of a peer from another peer's perspective.
    rpc GetPeerApprovalState(GetPeerApprovalStateRqst) returns (GetPeerApprovalStateRsp);
  
    // Removes a peer from the network.
    rpc DeletePeer(DeletePeerRqst) returns (DeletePeerRsp);
  
    // Updates the information of an existing peer.
    rpc UpdatePeer(UpdatePeerRqst) returns (UpdatePeerRsp);
  
    // Adds actions to a peer.
    rpc AddPeerActions(AddPeerActionsRqst) returns (AddPeerActionsRsp);
  
    // Removes a specific action permission from a peer.
    rpc RemovePeerAction(RemovePeerActionRqst) returns (RemovePeerActionRsp);
  
    // Removes a specific action permission from multiple peers.
    rpc RemovePeersAction(RemovePeersActionRqst) returns (RemovePeersActionRsp);
  
    // Accepts a peer into the network.
    rpc AcceptPeer(AcceptPeerRqst) returns (AcceptPeerRsp);
  
    // Rejects a peer and prevents further connection attempts.
    rpc RejectPeer(RejectPeerRqst) returns (RejectPeerRsp);
  
    // Retrieves the public key of a specified peer.
    rpc GetPeerPublicKey(GetPeerPublicKeyRqst) returns (GetPeerPublicKeyRsp);
  
    // Creates a new notification.
    rpc CreateNotification(CreateNotificationRqst) returns (CreateNotificationRsp);
  
    // Retrieves a stream of notifications.
    rpc GetNotifications(GetNotificationsRqst) returns (stream GetNotificationsRsp);
  
    // Deletes a specific notification.
    rpc DeleteNotification(DeleteNotificationRqst) returns (DeleteNotificationRsp);
  
    // Clears all notifications.
    rpc ClearAllNotifications(ClearAllNotificationsRqst) returns (ClearAllNotificationsRsp);
  
    // Clears all notifications of a specified type.
    rpc ClearNotificationsByType(ClearNotificationsByTypeRqst) returns (ClearNotificationsByTypeRsp);
  
    // Searches for service packages by keywords.
    rpc FindPackages(FindPackagesDescriptorRequest) returns (FindPackagesDescriptorResponse);
  
    // Retrieves the descriptor of a specific package.
    rpc GetPackageDescriptor(GetPackageDescriptorRequest) returns (GetPackageDescriptorResponse);
  
    // Retrieves descriptors for all packages.
    rpc GetPackagesDescriptor(GetPackagesDescriptorRequest) returns (stream GetPackagesDescriptorResponse);
  
    // Saves or updates a service package descriptor.
    rpc SetPackageDescriptor(SetPackageDescriptorRequest) returns (SetPackageDescriptorResponse);
  
    // Retrieves a package bundle.
    rpc SetPackageBundle(SetPackageBundleRequest) returns (SetPackageBundleResponse);
  
    // Gets the checksum for a specified package bundle.
    rpc GetPackageBundleChecksum(GetPackageBundleChecksumRequest) returns (GetPackageBundleChecksumResponse);
  
    // Updates user session information.
    rpc UpdateSession(UpdateSessionRequest) returns (UpdateSessionResponse);
  
    // Retrieves a list of all user sessions.
    rpc GetSessions(GetSessionsRequest) returns (GetSessionsResponse);
  
    // Removes a specific user session.
    rpc RemoveSession(RemoveSessionRequest) returns (RemoveSessionResponse);
  
    // Retrieves a session for a specific user.
    rpc GetSession(GetSessionRequest) returns (GetSessionResponse);
  
    // Retrieves the call history for a given account.
    rpc GetCallHistory(GetCallHistoryRqst) returns (GetCallHistoryRsp);
  
    // Sets calling information.
    rpc SetCall(SetCallRqst) returns (SetCallRsp);
  
    // Deletes calling information.
    rpc DeleteCall(DeleteCallRqst) returns(DeleteCallRsp);
  
    // Clears all call records.
    rpc ClearCalls(ClearCallsRqst) returns(ClearCallsRsp);

}
