/**
 * @fileoverview gRPC-Web generated client stub for dns
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: dns.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.dns = require('./dns_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dns.DnsServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dns.DnsServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.StopRequest,
 *   !proto.dns.StopResponse>}
 */
const methodDescriptor_DnsService_Stop = new grpc.web.MethodDescriptor(
  '/dns.DnsService/Stop',
  grpc.web.MethodType.UNARY,
  proto.dns.StopRequest,
  proto.dns.StopResponse,
  /**
   * @param {!proto.dns.StopRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.StopResponse.deserializeBinary
);


/**
 * @param {!proto.dns.StopRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.StopResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.StopResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.stop =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/Stop',
      request,
      metadata || {},
      methodDescriptor_DnsService_Stop,
      callback);
};


/**
 * @param {!proto.dns.StopRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.StopResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.stop =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/Stop',
      request,
      metadata || {},
      methodDescriptor_DnsService_Stop);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.SetARequest,
 *   !proto.dns.SetAResponse>}
 */
const methodDescriptor_DnsService_SetA = new grpc.web.MethodDescriptor(
  '/dns.DnsService/SetA',
  grpc.web.MethodType.UNARY,
  proto.dns.SetARequest,
  proto.dns.SetAResponse,
  /**
   * @param {!proto.dns.SetARequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.SetAResponse.deserializeBinary
);


/**
 * @param {!proto.dns.SetARequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.SetAResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.SetAResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.setA =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/SetA',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetA,
      callback);
};


/**
 * @param {!proto.dns.SetARequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.SetAResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.setA =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/SetA',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetA);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.RemoveARequest,
 *   !proto.dns.RemoveAResponse>}
 */
const methodDescriptor_DnsService_RemoveA = new grpc.web.MethodDescriptor(
  '/dns.DnsService/RemoveA',
  grpc.web.MethodType.UNARY,
  proto.dns.RemoveARequest,
  proto.dns.RemoveAResponse,
  /**
   * @param {!proto.dns.RemoveARequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.RemoveAResponse.deserializeBinary
);


/**
 * @param {!proto.dns.RemoveARequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.RemoveAResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.RemoveAResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.removeA =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/RemoveA',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveA,
      callback);
};


/**
 * @param {!proto.dns.RemoveARequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.RemoveAResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.removeA =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/RemoveA',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveA);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.GetARequest,
 *   !proto.dns.GetAResponse>}
 */
const methodDescriptor_DnsService_GetA = new grpc.web.MethodDescriptor(
  '/dns.DnsService/GetA',
  grpc.web.MethodType.UNARY,
  proto.dns.GetARequest,
  proto.dns.GetAResponse,
  /**
   * @param {!proto.dns.GetARequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.GetAResponse.deserializeBinary
);


/**
 * @param {!proto.dns.GetARequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.GetAResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.GetAResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.getA =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/GetA',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetA,
      callback);
};


/**
 * @param {!proto.dns.GetARequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.GetAResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.getA =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/GetA',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetA);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.SetAAAARequest,
 *   !proto.dns.SetAAAAResponse>}
 */
const methodDescriptor_DnsService_SetAAAA = new grpc.web.MethodDescriptor(
  '/dns.DnsService/SetAAAA',
  grpc.web.MethodType.UNARY,
  proto.dns.SetAAAARequest,
  proto.dns.SetAAAAResponse,
  /**
   * @param {!proto.dns.SetAAAARequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.SetAAAAResponse.deserializeBinary
);


/**
 * @param {!proto.dns.SetAAAARequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.SetAAAAResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.SetAAAAResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.setAAAA =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/SetAAAA',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetAAAA,
      callback);
};


/**
 * @param {!proto.dns.SetAAAARequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.SetAAAAResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.setAAAA =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/SetAAAA',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetAAAA);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.RemoveAAAARequest,
 *   !proto.dns.RemoveAAAAResponse>}
 */
const methodDescriptor_DnsService_RemoveAAAA = new grpc.web.MethodDescriptor(
  '/dns.DnsService/RemoveAAAA',
  grpc.web.MethodType.UNARY,
  proto.dns.RemoveAAAARequest,
  proto.dns.RemoveAAAAResponse,
  /**
   * @param {!proto.dns.RemoveAAAARequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.RemoveAAAAResponse.deserializeBinary
);


/**
 * @param {!proto.dns.RemoveAAAARequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.RemoveAAAAResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.RemoveAAAAResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.removeAAAA =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/RemoveAAAA',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveAAAA,
      callback);
};


/**
 * @param {!proto.dns.RemoveAAAARequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.RemoveAAAAResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.removeAAAA =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/RemoveAAAA',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveAAAA);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.GetAAAARequest,
 *   !proto.dns.GetAAAAResponse>}
 */
const methodDescriptor_DnsService_GetAAAA = new grpc.web.MethodDescriptor(
  '/dns.DnsService/GetAAAA',
  grpc.web.MethodType.UNARY,
  proto.dns.GetAAAARequest,
  proto.dns.GetAAAAResponse,
  /**
   * @param {!proto.dns.GetAAAARequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.GetAAAAResponse.deserializeBinary
);


/**
 * @param {!proto.dns.GetAAAARequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.GetAAAAResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.GetAAAAResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.getAAAA =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/GetAAAA',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetAAAA,
      callback);
};


/**
 * @param {!proto.dns.GetAAAARequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.GetAAAAResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.getAAAA =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/GetAAAA',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetAAAA);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.SetTextRequest,
 *   !proto.dns.SetTextResponse>}
 */
const methodDescriptor_DnsService_SetText = new grpc.web.MethodDescriptor(
  '/dns.DnsService/SetText',
  grpc.web.MethodType.UNARY,
  proto.dns.SetTextRequest,
  proto.dns.SetTextResponse,
  /**
   * @param {!proto.dns.SetTextRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.SetTextResponse.deserializeBinary
);


/**
 * @param {!proto.dns.SetTextRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.SetTextResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.SetTextResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.setText =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/SetText',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetText,
      callback);
};


/**
 * @param {!proto.dns.SetTextRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.SetTextResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.setText =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/SetText',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetText);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.GetTextRequest,
 *   !proto.dns.GetTextResponse>}
 */
const methodDescriptor_DnsService_GetText = new grpc.web.MethodDescriptor(
  '/dns.DnsService/GetText',
  grpc.web.MethodType.UNARY,
  proto.dns.GetTextRequest,
  proto.dns.GetTextResponse,
  /**
   * @param {!proto.dns.GetTextRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.GetTextResponse.deserializeBinary
);


/**
 * @param {!proto.dns.GetTextRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.GetTextResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.GetTextResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.getText =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/GetText',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetText,
      callback);
};


/**
 * @param {!proto.dns.GetTextRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.GetTextResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.getText =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/GetText',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetText);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.RemoveTextRequest,
 *   !proto.dns.RemoveTextResponse>}
 */
const methodDescriptor_DnsService_RemoveText = new grpc.web.MethodDescriptor(
  '/dns.DnsService/RemoveText',
  grpc.web.MethodType.UNARY,
  proto.dns.RemoveTextRequest,
  proto.dns.RemoveTextResponse,
  /**
   * @param {!proto.dns.RemoveTextRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.RemoveTextResponse.deserializeBinary
);


/**
 * @param {!proto.dns.RemoveTextRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.RemoveTextResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.RemoveTextResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.removeText =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/RemoveText',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveText,
      callback);
};


/**
 * @param {!proto.dns.RemoveTextRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.RemoveTextResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.removeText =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/RemoveText',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveText);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.SetNsRequest,
 *   !proto.dns.SetNsResponse>}
 */
const methodDescriptor_DnsService_SetNs = new grpc.web.MethodDescriptor(
  '/dns.DnsService/SetNs',
  grpc.web.MethodType.UNARY,
  proto.dns.SetNsRequest,
  proto.dns.SetNsResponse,
  /**
   * @param {!proto.dns.SetNsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.SetNsResponse.deserializeBinary
);


/**
 * @param {!proto.dns.SetNsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.SetNsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.SetNsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.setNs =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/SetNs',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetNs,
      callback);
};


/**
 * @param {!proto.dns.SetNsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.SetNsResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.setNs =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/SetNs',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetNs);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.GetNsRequest,
 *   !proto.dns.GetNsResponse>}
 */
const methodDescriptor_DnsService_GetNs = new grpc.web.MethodDescriptor(
  '/dns.DnsService/GetNs',
  grpc.web.MethodType.UNARY,
  proto.dns.GetNsRequest,
  proto.dns.GetNsResponse,
  /**
   * @param {!proto.dns.GetNsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.GetNsResponse.deserializeBinary
);


/**
 * @param {!proto.dns.GetNsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.GetNsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.GetNsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.getNs =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/GetNs',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetNs,
      callback);
};


/**
 * @param {!proto.dns.GetNsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.GetNsResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.getNs =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/GetNs',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetNs);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.RemoveNsRequest,
 *   !proto.dns.RemoveNsResponse>}
 */
const methodDescriptor_DnsService_RemoveNs = new grpc.web.MethodDescriptor(
  '/dns.DnsService/RemoveNs',
  grpc.web.MethodType.UNARY,
  proto.dns.RemoveNsRequest,
  proto.dns.RemoveNsResponse,
  /**
   * @param {!proto.dns.RemoveNsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.RemoveNsResponse.deserializeBinary
);


/**
 * @param {!proto.dns.RemoveNsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.RemoveNsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.RemoveNsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.removeNs =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/RemoveNs',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveNs,
      callback);
};


/**
 * @param {!proto.dns.RemoveNsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.RemoveNsResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.removeNs =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/RemoveNs',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveNs);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.SetCNameRequest,
 *   !proto.dns.SetCNameResponse>}
 */
const methodDescriptor_DnsService_SetCName = new grpc.web.MethodDescriptor(
  '/dns.DnsService/SetCName',
  grpc.web.MethodType.UNARY,
  proto.dns.SetCNameRequest,
  proto.dns.SetCNameResponse,
  /**
   * @param {!proto.dns.SetCNameRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.SetCNameResponse.deserializeBinary
);


/**
 * @param {!proto.dns.SetCNameRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.SetCNameResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.SetCNameResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.setCName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/SetCName',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetCName,
      callback);
};


/**
 * @param {!proto.dns.SetCNameRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.SetCNameResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.setCName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/SetCName',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetCName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.GetCNameRequest,
 *   !proto.dns.GetCNameResponse>}
 */
const methodDescriptor_DnsService_GetCName = new grpc.web.MethodDescriptor(
  '/dns.DnsService/GetCName',
  grpc.web.MethodType.UNARY,
  proto.dns.GetCNameRequest,
  proto.dns.GetCNameResponse,
  /**
   * @param {!proto.dns.GetCNameRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.GetCNameResponse.deserializeBinary
);


/**
 * @param {!proto.dns.GetCNameRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.GetCNameResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.GetCNameResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.getCName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/GetCName',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetCName,
      callback);
};


/**
 * @param {!proto.dns.GetCNameRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.GetCNameResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.getCName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/GetCName',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetCName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.RemoveCNameRequest,
 *   !proto.dns.RemoveCNameResponse>}
 */
const methodDescriptor_DnsService_RemoveCName = new grpc.web.MethodDescriptor(
  '/dns.DnsService/RemoveCName',
  grpc.web.MethodType.UNARY,
  proto.dns.RemoveCNameRequest,
  proto.dns.RemoveCNameResponse,
  /**
   * @param {!proto.dns.RemoveCNameRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.RemoveCNameResponse.deserializeBinary
);


/**
 * @param {!proto.dns.RemoveCNameRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.RemoveCNameResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.RemoveCNameResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.removeCName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/RemoveCName',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveCName,
      callback);
};


/**
 * @param {!proto.dns.RemoveCNameRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.RemoveCNameResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.removeCName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/RemoveCName',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveCName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.SetMxRequest,
 *   !proto.dns.SetMxResponse>}
 */
const methodDescriptor_DnsService_SetMx = new grpc.web.MethodDescriptor(
  '/dns.DnsService/SetMx',
  grpc.web.MethodType.UNARY,
  proto.dns.SetMxRequest,
  proto.dns.SetMxResponse,
  /**
   * @param {!proto.dns.SetMxRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.SetMxResponse.deserializeBinary
);


/**
 * @param {!proto.dns.SetMxRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.SetMxResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.SetMxResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.setMx =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/SetMx',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetMx,
      callback);
};


/**
 * @param {!proto.dns.SetMxRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.SetMxResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.setMx =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/SetMx',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetMx);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.GetMxRequest,
 *   !proto.dns.GetMxResponse>}
 */
const methodDescriptor_DnsService_GetMx = new grpc.web.MethodDescriptor(
  '/dns.DnsService/GetMx',
  grpc.web.MethodType.UNARY,
  proto.dns.GetMxRequest,
  proto.dns.GetMxResponse,
  /**
   * @param {!proto.dns.GetMxRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.GetMxResponse.deserializeBinary
);


/**
 * @param {!proto.dns.GetMxRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.GetMxResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.GetMxResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.getMx =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/GetMx',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetMx,
      callback);
};


/**
 * @param {!proto.dns.GetMxRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.GetMxResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.getMx =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/GetMx',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetMx);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.RemoveMxRequest,
 *   !proto.dns.RemoveMxResponse>}
 */
const methodDescriptor_DnsService_RemoveMx = new grpc.web.MethodDescriptor(
  '/dns.DnsService/RemoveMx',
  grpc.web.MethodType.UNARY,
  proto.dns.RemoveMxRequest,
  proto.dns.RemoveMxResponse,
  /**
   * @param {!proto.dns.RemoveMxRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.RemoveMxResponse.deserializeBinary
);


/**
 * @param {!proto.dns.RemoveMxRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.RemoveMxResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.RemoveMxResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.removeMx =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/RemoveMx',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveMx,
      callback);
};


/**
 * @param {!proto.dns.RemoveMxRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.RemoveMxResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.removeMx =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/RemoveMx',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveMx);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.SetSoaRequest,
 *   !proto.dns.SetSoaResponse>}
 */
const methodDescriptor_DnsService_SetSoa = new grpc.web.MethodDescriptor(
  '/dns.DnsService/SetSoa',
  grpc.web.MethodType.UNARY,
  proto.dns.SetSoaRequest,
  proto.dns.SetSoaResponse,
  /**
   * @param {!proto.dns.SetSoaRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.SetSoaResponse.deserializeBinary
);


/**
 * @param {!proto.dns.SetSoaRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.SetSoaResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.SetSoaResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.setSoa =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/SetSoa',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetSoa,
      callback);
};


/**
 * @param {!proto.dns.SetSoaRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.SetSoaResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.setSoa =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/SetSoa',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetSoa);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.GetSoaRequest,
 *   !proto.dns.GetSoaResponse>}
 */
const methodDescriptor_DnsService_GetSoa = new grpc.web.MethodDescriptor(
  '/dns.DnsService/GetSoa',
  grpc.web.MethodType.UNARY,
  proto.dns.GetSoaRequest,
  proto.dns.GetSoaResponse,
  /**
   * @param {!proto.dns.GetSoaRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.GetSoaResponse.deserializeBinary
);


/**
 * @param {!proto.dns.GetSoaRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.GetSoaResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.GetSoaResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.getSoa =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/GetSoa',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetSoa,
      callback);
};


/**
 * @param {!proto.dns.GetSoaRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.GetSoaResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.getSoa =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/GetSoa',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetSoa);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.RemoveSoaRequest,
 *   !proto.dns.RemoveSoaResponse>}
 */
const methodDescriptor_DnsService_RemoveSoa = new grpc.web.MethodDescriptor(
  '/dns.DnsService/RemoveSoa',
  grpc.web.MethodType.UNARY,
  proto.dns.RemoveSoaRequest,
  proto.dns.RemoveSoaResponse,
  /**
   * @param {!proto.dns.RemoveSoaRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.RemoveSoaResponse.deserializeBinary
);


/**
 * @param {!proto.dns.RemoveSoaRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.RemoveSoaResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.RemoveSoaResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.removeSoa =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/RemoveSoa',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveSoa,
      callback);
};


/**
 * @param {!proto.dns.RemoveSoaRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.RemoveSoaResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.removeSoa =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/RemoveSoa',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveSoa);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.SetUriRequest,
 *   !proto.dns.SetUriResponse>}
 */
const methodDescriptor_DnsService_SetUri = new grpc.web.MethodDescriptor(
  '/dns.DnsService/SetUri',
  grpc.web.MethodType.UNARY,
  proto.dns.SetUriRequest,
  proto.dns.SetUriResponse,
  /**
   * @param {!proto.dns.SetUriRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.SetUriResponse.deserializeBinary
);


/**
 * @param {!proto.dns.SetUriRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.SetUriResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.SetUriResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.setUri =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/SetUri',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetUri,
      callback);
};


/**
 * @param {!proto.dns.SetUriRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.SetUriResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.setUri =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/SetUri',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetUri);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.GetUriRequest,
 *   !proto.dns.GetUriResponse>}
 */
const methodDescriptor_DnsService_GetUri = new grpc.web.MethodDescriptor(
  '/dns.DnsService/GetUri',
  grpc.web.MethodType.UNARY,
  proto.dns.GetUriRequest,
  proto.dns.GetUriResponse,
  /**
   * @param {!proto.dns.GetUriRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.GetUriResponse.deserializeBinary
);


/**
 * @param {!proto.dns.GetUriRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.GetUriResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.GetUriResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.getUri =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/GetUri',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetUri,
      callback);
};


/**
 * @param {!proto.dns.GetUriRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.GetUriResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.getUri =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/GetUri',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetUri);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.RemoveUriRequest,
 *   !proto.dns.RemoveUriResponse>}
 */
const methodDescriptor_DnsService_RemoveUri = new grpc.web.MethodDescriptor(
  '/dns.DnsService/RemoveUri',
  grpc.web.MethodType.UNARY,
  proto.dns.RemoveUriRequest,
  proto.dns.RemoveUriResponse,
  /**
   * @param {!proto.dns.RemoveUriRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.RemoveUriResponse.deserializeBinary
);


/**
 * @param {!proto.dns.RemoveUriRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.RemoveUriResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.RemoveUriResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.removeUri =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/RemoveUri',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveUri,
      callback);
};


/**
 * @param {!proto.dns.RemoveUriRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.RemoveUriResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.removeUri =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/RemoveUri',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveUri);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.SetCaaRequest,
 *   !proto.dns.SetCaaResponse>}
 */
const methodDescriptor_DnsService_SetCaa = new grpc.web.MethodDescriptor(
  '/dns.DnsService/SetCaa',
  grpc.web.MethodType.UNARY,
  proto.dns.SetCaaRequest,
  proto.dns.SetCaaResponse,
  /**
   * @param {!proto.dns.SetCaaRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.SetCaaResponse.deserializeBinary
);


/**
 * @param {!proto.dns.SetCaaRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.SetCaaResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.SetCaaResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.setCaa =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/SetCaa',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetCaa,
      callback);
};


/**
 * @param {!proto.dns.SetCaaRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.SetCaaResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.setCaa =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/SetCaa',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetCaa);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.GetCaaRequest,
 *   !proto.dns.GetCaaResponse>}
 */
const methodDescriptor_DnsService_GetCaa = new grpc.web.MethodDescriptor(
  '/dns.DnsService/GetCaa',
  grpc.web.MethodType.UNARY,
  proto.dns.GetCaaRequest,
  proto.dns.GetCaaResponse,
  /**
   * @param {!proto.dns.GetCaaRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.GetCaaResponse.deserializeBinary
);


/**
 * @param {!proto.dns.GetCaaRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.GetCaaResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.GetCaaResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.getCaa =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/GetCaa',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetCaa,
      callback);
};


/**
 * @param {!proto.dns.GetCaaRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.GetCaaResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.getCaa =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/GetCaa',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetCaa);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.RemoveCaaRequest,
 *   !proto.dns.RemoveCaaResponse>}
 */
const methodDescriptor_DnsService_RemoveCaa = new grpc.web.MethodDescriptor(
  '/dns.DnsService/RemoveCaa',
  grpc.web.MethodType.UNARY,
  proto.dns.RemoveCaaRequest,
  proto.dns.RemoveCaaResponse,
  /**
   * @param {!proto.dns.RemoveCaaRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.RemoveCaaResponse.deserializeBinary
);


/**
 * @param {!proto.dns.RemoveCaaRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.RemoveCaaResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.RemoveCaaResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.removeCaa =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/RemoveCaa',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveCaa,
      callback);
};


/**
 * @param {!proto.dns.RemoveCaaRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.RemoveCaaResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.removeCaa =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/RemoveCaa',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveCaa);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.SetAfsdbRequest,
 *   !proto.dns.SetAfsdbResponse>}
 */
const methodDescriptor_DnsService_SetAfsdb = new grpc.web.MethodDescriptor(
  '/dns.DnsService/SetAfsdb',
  grpc.web.MethodType.UNARY,
  proto.dns.SetAfsdbRequest,
  proto.dns.SetAfsdbResponse,
  /**
   * @param {!proto.dns.SetAfsdbRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.SetAfsdbResponse.deserializeBinary
);


/**
 * @param {!proto.dns.SetAfsdbRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.SetAfsdbResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.SetAfsdbResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.setAfsdb =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/SetAfsdb',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetAfsdb,
      callback);
};


/**
 * @param {!proto.dns.SetAfsdbRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.SetAfsdbResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.setAfsdb =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/SetAfsdb',
      request,
      metadata || {},
      methodDescriptor_DnsService_SetAfsdb);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.GetAfsdbRequest,
 *   !proto.dns.GetAfsdbResponse>}
 */
const methodDescriptor_DnsService_GetAfsdb = new grpc.web.MethodDescriptor(
  '/dns.DnsService/GetAfsdb',
  grpc.web.MethodType.UNARY,
  proto.dns.GetAfsdbRequest,
  proto.dns.GetAfsdbResponse,
  /**
   * @param {!proto.dns.GetAfsdbRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.GetAfsdbResponse.deserializeBinary
);


/**
 * @param {!proto.dns.GetAfsdbRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.GetAfsdbResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.GetAfsdbResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.getAfsdb =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/GetAfsdb',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetAfsdb,
      callback);
};


/**
 * @param {!proto.dns.GetAfsdbRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.GetAfsdbResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.getAfsdb =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/GetAfsdb',
      request,
      metadata || {},
      methodDescriptor_DnsService_GetAfsdb);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dns.RemoveAfsdbRequest,
 *   !proto.dns.RemoveAfsdbResponse>}
 */
const methodDescriptor_DnsService_RemoveAfsdb = new grpc.web.MethodDescriptor(
  '/dns.DnsService/RemoveAfsdb',
  grpc.web.MethodType.UNARY,
  proto.dns.RemoveAfsdbRequest,
  proto.dns.RemoveAfsdbResponse,
  /**
   * @param {!proto.dns.RemoveAfsdbRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dns.RemoveAfsdbResponse.deserializeBinary
);


/**
 * @param {!proto.dns.RemoveAfsdbRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dns.RemoveAfsdbResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dns.RemoveAfsdbResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dns.DnsServiceClient.prototype.removeAfsdb =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dns.DnsService/RemoveAfsdb',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveAfsdb,
      callback);
};


/**
 * @param {!proto.dns.RemoveAfsdbRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dns.RemoveAfsdbResponse>}
 *     Promise that resolves to the response
 */
proto.dns.DnsServicePromiseClient.prototype.removeAfsdb =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dns.DnsService/RemoveAfsdb',
      request,
      metadata || {},
      methodDescriptor_DnsService_RemoveAfsdb);
};


module.exports = proto.dns;

