/**
 * @fileoverview gRPC-Web generated client stub for media
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.12.4
// source: media.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.media = require('./media_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.media.MediaServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.media.MediaServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.StopRequest,
 *   !proto.media.StopResponse>}
 */
const methodDescriptor_MediaService_Stop = new grpc.web.MethodDescriptor(
  '/media.MediaService/Stop',
  grpc.web.MethodType.UNARY,
  proto.media.StopRequest,
  proto.media.StopResponse,
  /**
   * @param {!proto.media.StopRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.StopResponse.deserializeBinary
);


/**
 * @param {!proto.media.StopRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.StopResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.StopResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.stop =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/Stop',
      request,
      metadata || {},
      methodDescriptor_MediaService_Stop,
      callback);
};


/**
 * @param {!proto.media.StopRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.StopResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.stop =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/Stop',
      request,
      metadata || {},
      methodDescriptor_MediaService_Stop);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.UploadVideoRequest,
 *   !proto.media.UploadVideoResponse>}
 */
const methodDescriptor_MediaService_UploadVideo = new grpc.web.MethodDescriptor(
  '/media.MediaService/UploadVideo',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.media.UploadVideoRequest,
  proto.media.UploadVideoResponse,
  /**
   * @param {!proto.media.UploadVideoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.UploadVideoResponse.deserializeBinary
);


/**
 * @param {!proto.media.UploadVideoRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.media.UploadVideoResponse>}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.uploadVideo =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/media.MediaService/UploadVideo',
      request,
      metadata || {},
      methodDescriptor_MediaService_UploadVideo);
};


/**
 * @param {!proto.media.UploadVideoRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.media.UploadVideoResponse>}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServicePromiseClient.prototype.uploadVideo =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/media.MediaService/UploadVideo',
      request,
      metadata || {},
      methodDescriptor_MediaService_UploadVideo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.CreateVideoPreviewRequest,
 *   !proto.media.CreateVideoPreviewResponse>}
 */
const methodDescriptor_MediaService_CreateVideoPreview = new grpc.web.MethodDescriptor(
  '/media.MediaService/CreateVideoPreview',
  grpc.web.MethodType.UNARY,
  proto.media.CreateVideoPreviewRequest,
  proto.media.CreateVideoPreviewResponse,
  /**
   * @param {!proto.media.CreateVideoPreviewRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.CreateVideoPreviewResponse.deserializeBinary
);


/**
 * @param {!proto.media.CreateVideoPreviewRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.CreateVideoPreviewResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.CreateVideoPreviewResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.createVideoPreview =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/CreateVideoPreview',
      request,
      metadata || {},
      methodDescriptor_MediaService_CreateVideoPreview,
      callback);
};


/**
 * @param {!proto.media.CreateVideoPreviewRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.CreateVideoPreviewResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.createVideoPreview =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/CreateVideoPreview',
      request,
      metadata || {},
      methodDescriptor_MediaService_CreateVideoPreview);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.CreateVideoTimeLineRequest,
 *   !proto.media.CreateVideoTimeLineResponse>}
 */
const methodDescriptor_MediaService_CreateVideoTimeLine = new grpc.web.MethodDescriptor(
  '/media.MediaService/CreateVideoTimeLine',
  grpc.web.MethodType.UNARY,
  proto.media.CreateVideoTimeLineRequest,
  proto.media.CreateVideoTimeLineResponse,
  /**
   * @param {!proto.media.CreateVideoTimeLineRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.CreateVideoTimeLineResponse.deserializeBinary
);


/**
 * @param {!proto.media.CreateVideoTimeLineRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.CreateVideoTimeLineResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.CreateVideoTimeLineResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.createVideoTimeLine =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/CreateVideoTimeLine',
      request,
      metadata || {},
      methodDescriptor_MediaService_CreateVideoTimeLine,
      callback);
};


/**
 * @param {!proto.media.CreateVideoTimeLineRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.CreateVideoTimeLineResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.createVideoTimeLine =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/CreateVideoTimeLine',
      request,
      metadata || {},
      methodDescriptor_MediaService_CreateVideoTimeLine);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.ConvertVideoToMpeg4H264Request,
 *   !proto.media.ConvertVideoToMpeg4H264Response>}
 */
const methodDescriptor_MediaService_ConvertVideoToMpeg4H264 = new grpc.web.MethodDescriptor(
  '/media.MediaService/ConvertVideoToMpeg4H264',
  grpc.web.MethodType.UNARY,
  proto.media.ConvertVideoToMpeg4H264Request,
  proto.media.ConvertVideoToMpeg4H264Response,
  /**
   * @param {!proto.media.ConvertVideoToMpeg4H264Request} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.ConvertVideoToMpeg4H264Response.deserializeBinary
);


/**
 * @param {!proto.media.ConvertVideoToMpeg4H264Request} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.ConvertVideoToMpeg4H264Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.ConvertVideoToMpeg4H264Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.convertVideoToMpeg4H264 =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/ConvertVideoToMpeg4H264',
      request,
      metadata || {},
      methodDescriptor_MediaService_ConvertVideoToMpeg4H264,
      callback);
};


/**
 * @param {!proto.media.ConvertVideoToMpeg4H264Request} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.ConvertVideoToMpeg4H264Response>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.convertVideoToMpeg4H264 =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/ConvertVideoToMpeg4H264',
      request,
      metadata || {},
      methodDescriptor_MediaService_ConvertVideoToMpeg4H264);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.ConvertVideoToHlsRequest,
 *   !proto.media.ConvertVideoToHlsResponse>}
 */
const methodDescriptor_MediaService_ConvertVideoToHls = new grpc.web.MethodDescriptor(
  '/media.MediaService/ConvertVideoToHls',
  grpc.web.MethodType.UNARY,
  proto.media.ConvertVideoToHlsRequest,
  proto.media.ConvertVideoToHlsResponse,
  /**
   * @param {!proto.media.ConvertVideoToHlsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.ConvertVideoToHlsResponse.deserializeBinary
);


/**
 * @param {!proto.media.ConvertVideoToHlsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.ConvertVideoToHlsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.ConvertVideoToHlsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.convertVideoToHls =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/ConvertVideoToHls',
      request,
      metadata || {},
      methodDescriptor_MediaService_ConvertVideoToHls,
      callback);
};


/**
 * @param {!proto.media.ConvertVideoToHlsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.ConvertVideoToHlsResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.convertVideoToHls =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/ConvertVideoToHls',
      request,
      metadata || {},
      methodDescriptor_MediaService_ConvertVideoToHls);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.StartProcessVideoRequest,
 *   !proto.media.StartProcessVideoResponse>}
 */
const methodDescriptor_MediaService_StartProcessVideo = new grpc.web.MethodDescriptor(
  '/media.MediaService/StartProcessVideo',
  grpc.web.MethodType.UNARY,
  proto.media.StartProcessVideoRequest,
  proto.media.StartProcessVideoResponse,
  /**
   * @param {!proto.media.StartProcessVideoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.StartProcessVideoResponse.deserializeBinary
);


/**
 * @param {!proto.media.StartProcessVideoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.StartProcessVideoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.StartProcessVideoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.startProcessVideo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/StartProcessVideo',
      request,
      metadata || {},
      methodDescriptor_MediaService_StartProcessVideo,
      callback);
};


/**
 * @param {!proto.media.StartProcessVideoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.StartProcessVideoResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.startProcessVideo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/StartProcessVideo',
      request,
      metadata || {},
      methodDescriptor_MediaService_StartProcessVideo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.StartProcessAudioRequest,
 *   !proto.media.StartProcessAudioResponse>}
 */
const methodDescriptor_MediaService_StartProcessAudio = new grpc.web.MethodDescriptor(
  '/media.MediaService/StartProcessAudio',
  grpc.web.MethodType.UNARY,
  proto.media.StartProcessAudioRequest,
  proto.media.StartProcessAudioResponse,
  /**
   * @param {!proto.media.StartProcessAudioRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.StartProcessAudioResponse.deserializeBinary
);


/**
 * @param {!proto.media.StartProcessAudioRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.StartProcessAudioResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.StartProcessAudioResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.startProcessAudio =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/StartProcessAudio',
      request,
      metadata || {},
      methodDescriptor_MediaService_StartProcessAudio,
      callback);
};


/**
 * @param {!proto.media.StartProcessAudioRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.StartProcessAudioResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.startProcessAudio =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/StartProcessAudio',
      request,
      metadata || {},
      methodDescriptor_MediaService_StartProcessAudio);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.StopProcessVideoRequest,
 *   !proto.media.StopProcessVideoResponse>}
 */
const methodDescriptor_MediaService_StopProcessVideo = new grpc.web.MethodDescriptor(
  '/media.MediaService/StopProcessVideo',
  grpc.web.MethodType.UNARY,
  proto.media.StopProcessVideoRequest,
  proto.media.StopProcessVideoResponse,
  /**
   * @param {!proto.media.StopProcessVideoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.StopProcessVideoResponse.deserializeBinary
);


/**
 * @param {!proto.media.StopProcessVideoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.StopProcessVideoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.StopProcessVideoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.stopProcessVideo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/StopProcessVideo',
      request,
      metadata || {},
      methodDescriptor_MediaService_StopProcessVideo,
      callback);
};


/**
 * @param {!proto.media.StopProcessVideoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.StopProcessVideoResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.stopProcessVideo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/StopProcessVideo',
      request,
      metadata || {},
      methodDescriptor_MediaService_StopProcessVideo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.IsProcessVideoRequest,
 *   !proto.media.IsProcessVideoResponse>}
 */
const methodDescriptor_MediaService_IsProcessVideo = new grpc.web.MethodDescriptor(
  '/media.MediaService/IsProcessVideo',
  grpc.web.MethodType.UNARY,
  proto.media.IsProcessVideoRequest,
  proto.media.IsProcessVideoResponse,
  /**
   * @param {!proto.media.IsProcessVideoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.IsProcessVideoResponse.deserializeBinary
);


/**
 * @param {!proto.media.IsProcessVideoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.IsProcessVideoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.IsProcessVideoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.isProcessVideo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/IsProcessVideo',
      request,
      metadata || {},
      methodDescriptor_MediaService_IsProcessVideo,
      callback);
};


/**
 * @param {!proto.media.IsProcessVideoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.IsProcessVideoResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.isProcessVideo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/IsProcessVideo',
      request,
      metadata || {},
      methodDescriptor_MediaService_IsProcessVideo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.SetVideoConversionRequest,
 *   !proto.media.SetVideoConversionResponse>}
 */
const methodDescriptor_MediaService_SetVideoConversion = new grpc.web.MethodDescriptor(
  '/media.MediaService/SetVideoConversion',
  grpc.web.MethodType.UNARY,
  proto.media.SetVideoConversionRequest,
  proto.media.SetVideoConversionResponse,
  /**
   * @param {!proto.media.SetVideoConversionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.SetVideoConversionResponse.deserializeBinary
);


/**
 * @param {!proto.media.SetVideoConversionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.SetVideoConversionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.SetVideoConversionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.setVideoConversion =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/SetVideoConversion',
      request,
      metadata || {},
      methodDescriptor_MediaService_SetVideoConversion,
      callback);
};


/**
 * @param {!proto.media.SetVideoConversionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.SetVideoConversionResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.setVideoConversion =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/SetVideoConversion',
      request,
      metadata || {},
      methodDescriptor_MediaService_SetVideoConversion);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.SetVideoStreamConversionRequest,
 *   !proto.media.SetVideoStreamConversionResponse>}
 */
const methodDescriptor_MediaService_SetVideoStreamConversion = new grpc.web.MethodDescriptor(
  '/media.MediaService/SetVideoStreamConversion',
  grpc.web.MethodType.UNARY,
  proto.media.SetVideoStreamConversionRequest,
  proto.media.SetVideoStreamConversionResponse,
  /**
   * @param {!proto.media.SetVideoStreamConversionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.SetVideoStreamConversionResponse.deserializeBinary
);


/**
 * @param {!proto.media.SetVideoStreamConversionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.SetVideoStreamConversionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.SetVideoStreamConversionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.setVideoStreamConversion =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/SetVideoStreamConversion',
      request,
      metadata || {},
      methodDescriptor_MediaService_SetVideoStreamConversion,
      callback);
};


/**
 * @param {!proto.media.SetVideoStreamConversionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.SetVideoStreamConversionResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.setVideoStreamConversion =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/SetVideoStreamConversion',
      request,
      metadata || {},
      methodDescriptor_MediaService_SetVideoStreamConversion);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.SetStartVideoConversionHourRequest,
 *   !proto.media.SetStartVideoConversionHourResponse>}
 */
const methodDescriptor_MediaService_SetStartVideoConversionHour = new grpc.web.MethodDescriptor(
  '/media.MediaService/SetStartVideoConversionHour',
  grpc.web.MethodType.UNARY,
  proto.media.SetStartVideoConversionHourRequest,
  proto.media.SetStartVideoConversionHourResponse,
  /**
   * @param {!proto.media.SetStartVideoConversionHourRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.SetStartVideoConversionHourResponse.deserializeBinary
);


/**
 * @param {!proto.media.SetStartVideoConversionHourRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.SetStartVideoConversionHourResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.SetStartVideoConversionHourResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.setStartVideoConversionHour =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/SetStartVideoConversionHour',
      request,
      metadata || {},
      methodDescriptor_MediaService_SetStartVideoConversionHour,
      callback);
};


/**
 * @param {!proto.media.SetStartVideoConversionHourRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.SetStartVideoConversionHourResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.setStartVideoConversionHour =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/SetStartVideoConversionHour',
      request,
      metadata || {},
      methodDescriptor_MediaService_SetStartVideoConversionHour);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.SetMaximumVideoConversionDelayRequest,
 *   !proto.media.SetMaximumVideoConversionDelayResponse>}
 */
const methodDescriptor_MediaService_SetMaximumVideoConversionDelay = new grpc.web.MethodDescriptor(
  '/media.MediaService/SetMaximumVideoConversionDelay',
  grpc.web.MethodType.UNARY,
  proto.media.SetMaximumVideoConversionDelayRequest,
  proto.media.SetMaximumVideoConversionDelayResponse,
  /**
   * @param {!proto.media.SetMaximumVideoConversionDelayRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.SetMaximumVideoConversionDelayResponse.deserializeBinary
);


/**
 * @param {!proto.media.SetMaximumVideoConversionDelayRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.SetMaximumVideoConversionDelayResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.SetMaximumVideoConversionDelayResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.setMaximumVideoConversionDelay =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/SetMaximumVideoConversionDelay',
      request,
      metadata || {},
      methodDescriptor_MediaService_SetMaximumVideoConversionDelay,
      callback);
};


/**
 * @param {!proto.media.SetMaximumVideoConversionDelayRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.SetMaximumVideoConversionDelayResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.setMaximumVideoConversionDelay =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/SetMaximumVideoConversionDelay',
      request,
      metadata || {},
      methodDescriptor_MediaService_SetMaximumVideoConversionDelay);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.GetVideoConversionErrorsRequest,
 *   !proto.media.GetVideoConversionErrorsResponse>}
 */
const methodDescriptor_MediaService_GetVideoConversionErrors = new grpc.web.MethodDescriptor(
  '/media.MediaService/GetVideoConversionErrors',
  grpc.web.MethodType.UNARY,
  proto.media.GetVideoConversionErrorsRequest,
  proto.media.GetVideoConversionErrorsResponse,
  /**
   * @param {!proto.media.GetVideoConversionErrorsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.GetVideoConversionErrorsResponse.deserializeBinary
);


/**
 * @param {!proto.media.GetVideoConversionErrorsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.GetVideoConversionErrorsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.GetVideoConversionErrorsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.getVideoConversionErrors =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/GetVideoConversionErrors',
      request,
      metadata || {},
      methodDescriptor_MediaService_GetVideoConversionErrors,
      callback);
};


/**
 * @param {!proto.media.GetVideoConversionErrorsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.GetVideoConversionErrorsResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.getVideoConversionErrors =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/GetVideoConversionErrors',
      request,
      metadata || {},
      methodDescriptor_MediaService_GetVideoConversionErrors);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.ClearVideoConversionErrorsRequest,
 *   !proto.media.ClearVideoConversionErrorsResponse>}
 */
const methodDescriptor_MediaService_ClearVideoConversionErrors = new grpc.web.MethodDescriptor(
  '/media.MediaService/ClearVideoConversionErrors',
  grpc.web.MethodType.UNARY,
  proto.media.ClearVideoConversionErrorsRequest,
  proto.media.ClearVideoConversionErrorsResponse,
  /**
   * @param {!proto.media.ClearVideoConversionErrorsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.ClearVideoConversionErrorsResponse.deserializeBinary
);


/**
 * @param {!proto.media.ClearVideoConversionErrorsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.ClearVideoConversionErrorsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.ClearVideoConversionErrorsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.clearVideoConversionErrors =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/ClearVideoConversionErrors',
      request,
      metadata || {},
      methodDescriptor_MediaService_ClearVideoConversionErrors,
      callback);
};


/**
 * @param {!proto.media.ClearVideoConversionErrorsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.ClearVideoConversionErrorsResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.clearVideoConversionErrors =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/ClearVideoConversionErrors',
      request,
      metadata || {},
      methodDescriptor_MediaService_ClearVideoConversionErrors);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.ClearVideoConversionErrorRequest,
 *   !proto.media.ClearVideoConversionErrorResponse>}
 */
const methodDescriptor_MediaService_ClearVideoConversionError = new grpc.web.MethodDescriptor(
  '/media.MediaService/ClearVideoConversionError',
  grpc.web.MethodType.UNARY,
  proto.media.ClearVideoConversionErrorRequest,
  proto.media.ClearVideoConversionErrorResponse,
  /**
   * @param {!proto.media.ClearVideoConversionErrorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.ClearVideoConversionErrorResponse.deserializeBinary
);


/**
 * @param {!proto.media.ClearVideoConversionErrorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.ClearVideoConversionErrorResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.ClearVideoConversionErrorResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.clearVideoConversionError =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/ClearVideoConversionError',
      request,
      metadata || {},
      methodDescriptor_MediaService_ClearVideoConversionError,
      callback);
};


/**
 * @param {!proto.media.ClearVideoConversionErrorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.ClearVideoConversionErrorResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.clearVideoConversionError =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/ClearVideoConversionError',
      request,
      metadata || {},
      methodDescriptor_MediaService_ClearVideoConversionError);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.ClearVideoConversionLogsRequest,
 *   !proto.media.ClearVideoConversionLogsResponse>}
 */
const methodDescriptor_MediaService_ClearVideoConversionLogs = new grpc.web.MethodDescriptor(
  '/media.MediaService/ClearVideoConversionLogs',
  grpc.web.MethodType.UNARY,
  proto.media.ClearVideoConversionLogsRequest,
  proto.media.ClearVideoConversionLogsResponse,
  /**
   * @param {!proto.media.ClearVideoConversionLogsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.ClearVideoConversionLogsResponse.deserializeBinary
);


/**
 * @param {!proto.media.ClearVideoConversionLogsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.ClearVideoConversionLogsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.ClearVideoConversionLogsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.clearVideoConversionLogs =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/ClearVideoConversionLogs',
      request,
      metadata || {},
      methodDescriptor_MediaService_ClearVideoConversionLogs,
      callback);
};


/**
 * @param {!proto.media.ClearVideoConversionLogsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.ClearVideoConversionLogsResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.clearVideoConversionLogs =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/ClearVideoConversionLogs',
      request,
      metadata || {},
      methodDescriptor_MediaService_ClearVideoConversionLogs);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.GetVideoConversionLogsRequest,
 *   !proto.media.GetVideoConversionLogsResponse>}
 */
const methodDescriptor_MediaService_GetVideoConversionLogs = new grpc.web.MethodDescriptor(
  '/media.MediaService/GetVideoConversionLogs',
  grpc.web.MethodType.UNARY,
  proto.media.GetVideoConversionLogsRequest,
  proto.media.GetVideoConversionLogsResponse,
  /**
   * @param {!proto.media.GetVideoConversionLogsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.GetVideoConversionLogsResponse.deserializeBinary
);


/**
 * @param {!proto.media.GetVideoConversionLogsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.GetVideoConversionLogsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.GetVideoConversionLogsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.getVideoConversionLogs =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/GetVideoConversionLogs',
      request,
      metadata || {},
      methodDescriptor_MediaService_GetVideoConversionLogs,
      callback);
};


/**
 * @param {!proto.media.GetVideoConversionLogsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.GetVideoConversionLogsResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.getVideoConversionLogs =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/GetVideoConversionLogs',
      request,
      metadata || {},
      methodDescriptor_MediaService_GetVideoConversionLogs);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.GeneratePlaylistRequest,
 *   !proto.media.GeneratePlaylistResponse>}
 */
const methodDescriptor_MediaService_GeneratePlaylist = new grpc.web.MethodDescriptor(
  '/media.MediaService/GeneratePlaylist',
  grpc.web.MethodType.UNARY,
  proto.media.GeneratePlaylistRequest,
  proto.media.GeneratePlaylistResponse,
  /**
   * @param {!proto.media.GeneratePlaylistRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.GeneratePlaylistResponse.deserializeBinary
);


/**
 * @param {!proto.media.GeneratePlaylistRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.GeneratePlaylistResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.GeneratePlaylistResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.generatePlaylist =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/GeneratePlaylist',
      request,
      metadata || {},
      methodDescriptor_MediaService_GeneratePlaylist,
      callback);
};


/**
 * @param {!proto.media.GeneratePlaylistRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.GeneratePlaylistResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.generatePlaylist =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/GeneratePlaylist',
      request,
      metadata || {},
      methodDescriptor_MediaService_GeneratePlaylist);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.media.CreateVttFileRequest,
 *   !proto.media.CreateVttFileResponse>}
 */
const methodDescriptor_MediaService_CreateVttFile = new grpc.web.MethodDescriptor(
  '/media.MediaService/CreateVttFile',
  grpc.web.MethodType.UNARY,
  proto.media.CreateVttFileRequest,
  proto.media.CreateVttFileResponse,
  /**
   * @param {!proto.media.CreateVttFileRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.media.CreateVttFileResponse.deserializeBinary
);


/**
 * @param {!proto.media.CreateVttFileRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.media.CreateVttFileResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.media.CreateVttFileResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.media.MediaServiceClient.prototype.createVttFile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/media.MediaService/CreateVttFile',
      request,
      metadata || {},
      methodDescriptor_MediaService_CreateVttFile,
      callback);
};


/**
 * @param {!proto.media.CreateVttFileRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.media.CreateVttFileResponse>}
 *     Promise that resolves to the response
 */
proto.media.MediaServicePromiseClient.prototype.createVttFile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/media.MediaService/CreateVttFile',
      request,
      metadata || {},
      methodDescriptor_MediaService_CreateVttFile);
};


module.exports = proto.media;

