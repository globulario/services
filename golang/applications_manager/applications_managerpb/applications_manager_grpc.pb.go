// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: applications_manager.proto

package applications_managerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApplicationManagerService_InstallApplication_FullMethodName   = "/applications_manager.ApplicationManagerService/InstallApplication"
	ApplicationManagerService_UninstallApplication_FullMethodName = "/applications_manager.ApplicationManagerService/UninstallApplication"
)

// ApplicationManagerServiceClient is the client API for ApplicationManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ApplicationManagerService defines RPC methods for managing applications.
type ApplicationManagerServiceClient interface {
	// Installs an application based on provided details.
	InstallApplication(ctx context.Context, in *InstallApplicationRequest, opts ...grpc.CallOption) (*InstallApplicationResponse, error)
	// Uninstalls an application based on provided details.
	UninstallApplication(ctx context.Context, in *UninstallApplicationRequest, opts ...grpc.CallOption) (*UninstallApplicationResponse, error)
}

type applicationManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationManagerServiceClient(cc grpc.ClientConnInterface) ApplicationManagerServiceClient {
	return &applicationManagerServiceClient{cc}
}

func (c *applicationManagerServiceClient) InstallApplication(ctx context.Context, in *InstallApplicationRequest, opts ...grpc.CallOption) (*InstallApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallApplicationResponse)
	err := c.cc.Invoke(ctx, ApplicationManagerService_InstallApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerServiceClient) UninstallApplication(ctx context.Context, in *UninstallApplicationRequest, opts ...grpc.CallOption) (*UninstallApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UninstallApplicationResponse)
	err := c.cc.Invoke(ctx, ApplicationManagerService_UninstallApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationManagerServiceServer is the server API for ApplicationManagerService service.
// All implementations should embed UnimplementedApplicationManagerServiceServer
// for forward compatibility.
//
// ApplicationManagerService defines RPC methods for managing applications.
type ApplicationManagerServiceServer interface {
	// Installs an application based on provided details.
	InstallApplication(context.Context, *InstallApplicationRequest) (*InstallApplicationResponse, error)
	// Uninstalls an application based on provided details.
	UninstallApplication(context.Context, *UninstallApplicationRequest) (*UninstallApplicationResponse, error)
}

// UnimplementedApplicationManagerServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApplicationManagerServiceServer struct{}

func (UnimplementedApplicationManagerServiceServer) InstallApplication(context.Context, *InstallApplicationRequest) (*InstallApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallApplication not implemented")
}
func (UnimplementedApplicationManagerServiceServer) UninstallApplication(context.Context, *UninstallApplicationRequest) (*UninstallApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallApplication not implemented")
}
func (UnimplementedApplicationManagerServiceServer) testEmbeddedByValue() {}

// UnsafeApplicationManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationManagerServiceServer will
// result in compilation errors.
type UnsafeApplicationManagerServiceServer interface {
	mustEmbedUnimplementedApplicationManagerServiceServer()
}

func RegisterApplicationManagerServiceServer(s grpc.ServiceRegistrar, srv ApplicationManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedApplicationManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApplicationManagerService_ServiceDesc, srv)
}

func _ApplicationManagerService_InstallApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServiceServer).InstallApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagerService_InstallApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServiceServer).InstallApplication(ctx, req.(*InstallApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagerService_UninstallApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServiceServer).UninstallApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagerService_UninstallApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServiceServer).UninstallApplication(ctx, req.(*UninstallApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationManagerService_ServiceDesc is the grpc.ServiceDesc for ApplicationManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "applications_manager.ApplicationManagerService",
	HandlerType: (*ApplicationManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallApplication",
			Handler:    _ApplicationManagerService_InstallApplication_Handler,
		},
		{
			MethodName: "UninstallApplication",
			Handler:    _ApplicationManagerService_UninstallApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "applications_manager.proto",
}
