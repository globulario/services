// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: mail.proto

package mailpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MailService_Stop_FullMethodName                      = "/mail.MailService/Stop"
	MailService_CreateConnection_FullMethodName          = "/mail.MailService/CreateConnection"
	MailService_DeleteConnection_FullMethodName          = "/mail.MailService/DeleteConnection"
	MailService_SendEmail_FullMethodName                 = "/mail.MailService/SendEmail"
	MailService_SendEmailWithAttachements_FullMethodName = "/mail.MailService/SendEmailWithAttachements"
)

// MailServiceClient is the client API for MailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MailService provides RPC methods for email operations.
type MailServiceClient interface {
	// Stop the server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Create a connection to a mail server.
	CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error)
	// Delete an existing mail connection.
	DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error)
	// Send a simple email without file attachments.
	SendEmail(ctx context.Context, in *SendEmailRqst, opts ...grpc.CallOption) (*SendEmailRsp, error)
	// Send an email with file attachments.
	SendEmailWithAttachements(ctx context.Context, opts ...grpc.CallOption) (MailService_SendEmailWithAttachementsClient, error)
}

type mailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailServiceClient(cc grpc.ClientConnInterface) MailServiceClient {
	return &mailServiceClient{cc}
}

func (c *mailServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, MailService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionRsp)
	err := c.cc.Invoke(ctx, MailService_CreateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConnectionRsp)
	err := c.cc.Invoke(ctx, MailService_DeleteConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServiceClient) SendEmail(ctx context.Context, in *SendEmailRqst, opts ...grpc.CallOption) (*SendEmailRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailRsp)
	err := c.cc.Invoke(ctx, MailService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServiceClient) SendEmailWithAttachements(ctx context.Context, opts ...grpc.CallOption) (MailService_SendEmailWithAttachementsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MailService_ServiceDesc.Streams[0], MailService_SendEmailWithAttachements_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &mailServiceSendEmailWithAttachementsClient{ClientStream: stream}
	return x, nil
}

type MailService_SendEmailWithAttachementsClient interface {
	Send(*SendEmailWithAttachementsRqst) error
	CloseAndRecv() (*SendEmailWithAttachementsRsp, error)
	grpc.ClientStream
}

type mailServiceSendEmailWithAttachementsClient struct {
	grpc.ClientStream
}

func (x *mailServiceSendEmailWithAttachementsClient) Send(m *SendEmailWithAttachementsRqst) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mailServiceSendEmailWithAttachementsClient) CloseAndRecv() (*SendEmailWithAttachementsRsp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendEmailWithAttachementsRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MailServiceServer is the server API for MailService service.
// All implementations should embed UnimplementedMailServiceServer
// for forward compatibility
//
// MailService provides RPC methods for email operations.
type MailServiceServer interface {
	// Stop the server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Create a connection to a mail server.
	CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error)
	// Delete an existing mail connection.
	DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error)
	// Send a simple email without file attachments.
	SendEmail(context.Context, *SendEmailRqst) (*SendEmailRsp, error)
	// Send an email with file attachments.
	SendEmailWithAttachements(MailService_SendEmailWithAttachementsServer) error
}

// UnimplementedMailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMailServiceServer struct {
}

func (UnimplementedMailServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedMailServiceServer) CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedMailServiceServer) DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedMailServiceServer) SendEmail(context.Context, *SendEmailRqst) (*SendEmailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedMailServiceServer) SendEmailWithAttachements(MailService_SendEmailWithAttachementsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendEmailWithAttachements not implemented")
}

// UnsafeMailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailServiceServer will
// result in compilation errors.
type UnsafeMailServiceServer interface {
	mustEmbedUnimplementedMailServiceServer()
}

func RegisterMailServiceServer(s grpc.ServiceRegistrar, srv MailServiceServer) {
	s.RegisterService(&MailService_ServiceDesc, srv)
}

func _MailService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServiceServer).CreateConnection(ctx, req.(*CreateConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailService_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailService_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServiceServer).SendEmail(ctx, req.(*SendEmailRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailService_SendEmailWithAttachements_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MailServiceServer).SendEmailWithAttachements(&mailServiceSendEmailWithAttachementsServer{ServerStream: stream})
}

type MailService_SendEmailWithAttachementsServer interface {
	SendAndClose(*SendEmailWithAttachementsRsp) error
	Recv() (*SendEmailWithAttachementsRqst, error)
	grpc.ServerStream
}

type mailServiceSendEmailWithAttachementsServer struct {
	grpc.ServerStream
}

func (x *mailServiceSendEmailWithAttachementsServer) SendAndClose(m *SendEmailWithAttachementsRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mailServiceSendEmailWithAttachementsServer) Recv() (*SendEmailWithAttachementsRqst, error) {
	m := new(SendEmailWithAttachementsRqst)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MailService_ServiceDesc is the grpc.ServiceDesc for MailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mail.MailService",
	HandlerType: (*MailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _MailService_Stop_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _MailService_CreateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _MailService_DeleteConnection_Handler,
		},
		{
			MethodName: "SendEmail",
			Handler:    _MailService_SendEmail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendEmailWithAttachements",
			Handler:       _MailService_SendEmailWithAttachements_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mail.proto",
}
