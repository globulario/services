//*
// You can use conversation as starter project.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: conversation.proto

package conversationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConversationService_Stop_FullMethodName                    = "/conversation.ConversationService/Stop"
	ConversationService_Connect_FullMethodName                 = "/conversation.ConversationService/Connect"
	ConversationService_Disconnect_FullMethodName              = "/conversation.ConversationService/Disconnect"
	ConversationService_CreateConversation_FullMethodName      = "/conversation.ConversationService/CreateConversation"
	ConversationService_DeleteConversation_FullMethodName      = "/conversation.ConversationService/DeleteConversation"
	ConversationService_FindConversations_FullMethodName       = "/conversation.ConversationService/FindConversations"
	ConversationService_JoinConversation_FullMethodName        = "/conversation.ConversationService/JoinConversation"
	ConversationService_LeaveConversation_FullMethodName       = "/conversation.ConversationService/LeaveConversation"
	ConversationService_GetConversation_FullMethodName         = "/conversation.ConversationService/GetConversation"
	ConversationService_GetConversations_FullMethodName        = "/conversation.ConversationService/GetConversations"
	ConversationService_KickoutFromConversation_FullMethodName = "/conversation.ConversationService/KickoutFromConversation"
	ConversationService_SendInvitation_FullMethodName          = "/conversation.ConversationService/SendInvitation"
	ConversationService_AcceptInvitation_FullMethodName        = "/conversation.ConversationService/AcceptInvitation"
	ConversationService_DeclineInvitation_FullMethodName       = "/conversation.ConversationService/DeclineInvitation"
	ConversationService_RevokeInvitation_FullMethodName        = "/conversation.ConversationService/RevokeInvitation"
	ConversationService_GetReceivedInvitations_FullMethodName  = "/conversation.ConversationService/GetReceivedInvitations"
	ConversationService_GetSentInvitations_FullMethodName      = "/conversation.ConversationService/GetSentInvitations"
	ConversationService_SendMessage_FullMethodName             = "/conversation.ConversationService/SendMessage"
	ConversationService_DeleteMessage_FullMethodName           = "/conversation.ConversationService/DeleteMessage"
	ConversationService_FindMessages_FullMethodName            = "/conversation.ConversationService/FindMessages"
	ConversationService_LikeMessage_FullMethodName             = "/conversation.ConversationService/LikeMessage"
	ConversationService_DislikeMessage_FullMethodName          = "/conversation.ConversationService/DislikeMessage"
	ConversationService_SetMessageRead_FullMethodName          = "/conversation.ConversationService/SetMessageRead"
)

// ConversationServiceClient is the client API for ConversationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationServiceClient interface {
	// Stop the server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Connect will open a channel between the conversation sever and it client
	// and that channel will be use to send all conversation message.
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectResponse], error)
	// Close connection with the conversation server.
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
	// Create a new conversation with a given name. The creator will became the
	// owner of that conversation and he will be able to set permissions to
	// determine who can participate to the conversation.
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error)
	// Delete the conversation
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error)
	// Retreive a conversation by keywords or name...
	FindConversations(ctx context.Context, in *FindConversationsRequest, opts ...grpc.CallOption) (*FindConversationsResponse, error)
	// Join a conversation.
	JoinConversation(ctx context.Context, in *JoinConversationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinConversationResponse], error)
	// Leave a given conversation.
	LeaveConversation(ctx context.Context, in *LeaveConversationRequest, opts ...grpc.CallOption) (*LeaveConversationResponse, error)
	// Return a conversation with a given id.
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error)
	// Return the list of conversations created by a given user.
	GetConversations(ctx context.Context, in *GetConversationsRequest, opts ...grpc.CallOption) (*GetConversationsResponse, error)
	// Kickout a user for any good reason...
	KickoutFromConversation(ctx context.Context, in *KickoutFromConversationRequest, opts ...grpc.CallOption) (*KickoutFromConversationResponse, error)
	// Conversation owner can invite a contact into Conversation.
	SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*SendInvitationResponse, error)
	// Accept invitation response.
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error)
	// Decline invitation response.
	DeclineInvitation(ctx context.Context, in *DeclineInvitationRequest, opts ...grpc.CallOption) (*DeclineInvitationResponse, error)
	// Revoke invitation.
	RevokeInvitation(ctx context.Context, in *RevokeInvitationRequest, opts ...grpc.CallOption) (*RevokeInvitationResponse, error)
	// Get the list of received invitations request.
	GetReceivedInvitations(ctx context.Context, in *GetReceivedInvitationsRequest, opts ...grpc.CallOption) (*GetReceivedInvitationsResponse, error)
	// Get the list of sent invitations request.
	GetSentInvitations(ctx context.Context, in *GetSentInvitationsRequest, opts ...grpc.CallOption) (*GetSentInvitationsResponse, error)
	// Send a message
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// Delete message.
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	// Retreive a conversation by keywords or name...
	FindMessages(ctx context.Context, in *FindMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FindMessagesResponse], error)
	// append a like message
	LikeMessage(ctx context.Context, in *LikeMessageRqst, opts ...grpc.CallOption) (*LikeMessageResponse, error)
	// dislike message
	DislikeMessage(ctx context.Context, in *DislikeMessageRqst, opts ...grpc.CallOption) (*DislikeMessageResponse, error)
	// set message as read
	SetMessageRead(ctx context.Context, in *SetMessageReadRqst, opts ...grpc.CallOption) (*SetMessageReadResponse, error)
}

type conversationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationServiceClient(cc grpc.ClientConnInterface) ConversationServiceClient {
	return &conversationServiceClient{cc}
}

func (c *conversationServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, ConversationService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConnectResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConversationService_ServiceDesc.Streams[0], ConversationService_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConnectRequest, ConnectResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConversationService_ConnectClient = grpc.ServerStreamingClient[ConnectResponse]

func (c *conversationServiceClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, ConversationService_Disconnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConversationResponse)
	err := c.cc.Invoke(ctx, ConversationService_CreateConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConversationResponse)
	err := c.cc.Invoke(ctx, ConversationService_DeleteConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) FindConversations(ctx context.Context, in *FindConversationsRequest, opts ...grpc.CallOption) (*FindConversationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindConversationsResponse)
	err := c.cc.Invoke(ctx, ConversationService_FindConversations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) JoinConversation(ctx context.Context, in *JoinConversationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinConversationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConversationService_ServiceDesc.Streams[1], ConversationService_JoinConversation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinConversationRequest, JoinConversationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConversationService_JoinConversationClient = grpc.ServerStreamingClient[JoinConversationResponse]

func (c *conversationServiceClient) LeaveConversation(ctx context.Context, in *LeaveConversationRequest, opts ...grpc.CallOption) (*LeaveConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveConversationResponse)
	err := c.cc.Invoke(ctx, ConversationService_LeaveConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationResponse)
	err := c.cc.Invoke(ctx, ConversationService_GetConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetConversations(ctx context.Context, in *GetConversationsRequest, opts ...grpc.CallOption) (*GetConversationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationsResponse)
	err := c.cc.Invoke(ctx, ConversationService_GetConversations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) KickoutFromConversation(ctx context.Context, in *KickoutFromConversationRequest, opts ...grpc.CallOption) (*KickoutFromConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KickoutFromConversationResponse)
	err := c.cc.Invoke(ctx, ConversationService_KickoutFromConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*SendInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendInvitationResponse)
	err := c.cc.Invoke(ctx, ConversationService_SendInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptInvitationResponse)
	err := c.cc.Invoke(ctx, ConversationService_AcceptInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) DeclineInvitation(ctx context.Context, in *DeclineInvitationRequest, opts ...grpc.CallOption) (*DeclineInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeclineInvitationResponse)
	err := c.cc.Invoke(ctx, ConversationService_DeclineInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) RevokeInvitation(ctx context.Context, in *RevokeInvitationRequest, opts ...grpc.CallOption) (*RevokeInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeInvitationResponse)
	err := c.cc.Invoke(ctx, ConversationService_RevokeInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetReceivedInvitations(ctx context.Context, in *GetReceivedInvitationsRequest, opts ...grpc.CallOption) (*GetReceivedInvitationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceivedInvitationsResponse)
	err := c.cc.Invoke(ctx, ConversationService_GetReceivedInvitations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetSentInvitations(ctx context.Context, in *GetSentInvitationsRequest, opts ...grpc.CallOption) (*GetSentInvitationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSentInvitationsResponse)
	err := c.cc.Invoke(ctx, ConversationService_GetSentInvitations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ConversationService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, ConversationService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) FindMessages(ctx context.Context, in *FindMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FindMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConversationService_ServiceDesc.Streams[2], ConversationService_FindMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FindMessagesRequest, FindMessagesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConversationService_FindMessagesClient = grpc.ServerStreamingClient[FindMessagesResponse]

func (c *conversationServiceClient) LikeMessage(ctx context.Context, in *LikeMessageRqst, opts ...grpc.CallOption) (*LikeMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeMessageResponse)
	err := c.cc.Invoke(ctx, ConversationService_LikeMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) DislikeMessage(ctx context.Context, in *DislikeMessageRqst, opts ...grpc.CallOption) (*DislikeMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DislikeMessageResponse)
	err := c.cc.Invoke(ctx, ConversationService_DislikeMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) SetMessageRead(ctx context.Context, in *SetMessageReadRqst, opts ...grpc.CallOption) (*SetMessageReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMessageReadResponse)
	err := c.cc.Invoke(ctx, ConversationService_SetMessageRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationServiceServer is the server API for ConversationService service.
// All implementations should embed UnimplementedConversationServiceServer
// for forward compatibility.
type ConversationServiceServer interface {
	// Stop the server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Connect will open a channel between the conversation sever and it client
	// and that channel will be use to send all conversation message.
	Connect(*ConnectRequest, grpc.ServerStreamingServer[ConnectResponse]) error
	// Close connection with the conversation server.
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
	// Create a new conversation with a given name. The creator will became the
	// owner of that conversation and he will be able to set permissions to
	// determine who can participate to the conversation.
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error)
	// Delete the conversation
	DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationResponse, error)
	// Retreive a conversation by keywords or name...
	FindConversations(context.Context, *FindConversationsRequest) (*FindConversationsResponse, error)
	// Join a conversation.
	JoinConversation(*JoinConversationRequest, grpc.ServerStreamingServer[JoinConversationResponse]) error
	// Leave a given conversation.
	LeaveConversation(context.Context, *LeaveConversationRequest) (*LeaveConversationResponse, error)
	// Return a conversation with a given id.
	GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error)
	// Return the list of conversations created by a given user.
	GetConversations(context.Context, *GetConversationsRequest) (*GetConversationsResponse, error)
	// Kickout a user for any good reason...
	KickoutFromConversation(context.Context, *KickoutFromConversationRequest) (*KickoutFromConversationResponse, error)
	// Conversation owner can invite a contact into Conversation.
	SendInvitation(context.Context, *SendInvitationRequest) (*SendInvitationResponse, error)
	// Accept invitation response.
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error)
	// Decline invitation response.
	DeclineInvitation(context.Context, *DeclineInvitationRequest) (*DeclineInvitationResponse, error)
	// Revoke invitation.
	RevokeInvitation(context.Context, *RevokeInvitationRequest) (*RevokeInvitationResponse, error)
	// Get the list of received invitations request.
	GetReceivedInvitations(context.Context, *GetReceivedInvitationsRequest) (*GetReceivedInvitationsResponse, error)
	// Get the list of sent invitations request.
	GetSentInvitations(context.Context, *GetSentInvitationsRequest) (*GetSentInvitationsResponse, error)
	// Send a message
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// Delete message.
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	// Retreive a conversation by keywords or name...
	FindMessages(*FindMessagesRequest, grpc.ServerStreamingServer[FindMessagesResponse]) error
	// append a like message
	LikeMessage(context.Context, *LikeMessageRqst) (*LikeMessageResponse, error)
	// dislike message
	DislikeMessage(context.Context, *DislikeMessageRqst) (*DislikeMessageResponse, error)
	// set message as read
	SetMessageRead(context.Context, *SetMessageReadRqst) (*SetMessageReadResponse, error)
}

// UnimplementedConversationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConversationServiceServer struct{}

func (UnimplementedConversationServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedConversationServiceServer) Connect(*ConnectRequest, grpc.ServerStreamingServer[ConnectResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedConversationServiceServer) Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedConversationServiceServer) CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedConversationServiceServer) DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversation not implemented")
}
func (UnimplementedConversationServiceServer) FindConversations(context.Context, *FindConversationsRequest) (*FindConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindConversations not implemented")
}
func (UnimplementedConversationServiceServer) JoinConversation(*JoinConversationRequest, grpc.ServerStreamingServer[JoinConversationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method JoinConversation not implemented")
}
func (UnimplementedConversationServiceServer) LeaveConversation(context.Context, *LeaveConversationRequest) (*LeaveConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveConversation not implemented")
}
func (UnimplementedConversationServiceServer) GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedConversationServiceServer) GetConversations(context.Context, *GetConversationsRequest) (*GetConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversations not implemented")
}
func (UnimplementedConversationServiceServer) KickoutFromConversation(context.Context, *KickoutFromConversationRequest) (*KickoutFromConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickoutFromConversation not implemented")
}
func (UnimplementedConversationServiceServer) SendInvitation(context.Context, *SendInvitationRequest) (*SendInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvitation not implemented")
}
func (UnimplementedConversationServiceServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedConversationServiceServer) DeclineInvitation(context.Context, *DeclineInvitationRequest) (*DeclineInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineInvitation not implemented")
}
func (UnimplementedConversationServiceServer) RevokeInvitation(context.Context, *RevokeInvitationRequest) (*RevokeInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInvitation not implemented")
}
func (UnimplementedConversationServiceServer) GetReceivedInvitations(context.Context, *GetReceivedInvitationsRequest) (*GetReceivedInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedInvitations not implemented")
}
func (UnimplementedConversationServiceServer) GetSentInvitations(context.Context, *GetSentInvitationsRequest) (*GetSentInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSentInvitations not implemented")
}
func (UnimplementedConversationServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedConversationServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedConversationServiceServer) FindMessages(*FindMessagesRequest, grpc.ServerStreamingServer[FindMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FindMessages not implemented")
}
func (UnimplementedConversationServiceServer) LikeMessage(context.Context, *LikeMessageRqst) (*LikeMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeMessage not implemented")
}
func (UnimplementedConversationServiceServer) DislikeMessage(context.Context, *DislikeMessageRqst) (*DislikeMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikeMessage not implemented")
}
func (UnimplementedConversationServiceServer) SetMessageRead(context.Context, *SetMessageReadRqst) (*SetMessageReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMessageRead not implemented")
}
func (UnimplementedConversationServiceServer) testEmbeddedByValue() {}

// UnsafeConversationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationServiceServer will
// result in compilation errors.
type UnsafeConversationServiceServer interface {
	mustEmbedUnimplementedConversationServiceServer()
}

func RegisterConversationServiceServer(s grpc.ServiceRegistrar, srv ConversationServiceServer) {
	// If the following call pancis, it indicates UnimplementedConversationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConversationService_ServiceDesc, srv)
}

func _ConversationService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConversationServiceServer).Connect(m, &grpc.GenericServerStream[ConnectRequest, ConnectResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConversationService_ConnectServer = grpc.ServerStreamingServer[ConnectResponse]

func _ConversationService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_CreateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_DeleteConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).DeleteConversation(ctx, req.(*DeleteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_FindConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).FindConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_FindConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).FindConversations(ctx, req.(*FindConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_JoinConversation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinConversationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConversationServiceServer).JoinConversation(m, &grpc.GenericServerStream[JoinConversationRequest, JoinConversationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConversationService_JoinConversationServer = grpc.ServerStreamingServer[JoinConversationResponse]

func _ConversationService_LeaveConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).LeaveConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_LeaveConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).LeaveConversation(ctx, req.(*LeaveConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_GetConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_GetConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetConversations(ctx, req.(*GetConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_KickoutFromConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickoutFromConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).KickoutFromConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_KickoutFromConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).KickoutFromConversation(ctx, req.(*KickoutFromConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_SendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).SendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_SendInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).SendInvitation(ctx, req.(*SendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_DeclineInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).DeclineInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_DeclineInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).DeclineInvitation(ctx, req.(*DeclineInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_RevokeInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).RevokeInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_RevokeInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).RevokeInvitation(ctx, req.(*RevokeInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetReceivedInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceivedInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetReceivedInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_GetReceivedInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetReceivedInvitations(ctx, req.(*GetReceivedInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetSentInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSentInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetSentInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_GetSentInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetSentInvitations(ctx, req.(*GetSentInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_FindMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConversationServiceServer).FindMessages(m, &grpc.GenericServerStream[FindMessagesRequest, FindMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConversationService_FindMessagesServer = grpc.ServerStreamingServer[FindMessagesResponse]

func _ConversationService_LikeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeMessageRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).LikeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_LikeMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).LikeMessage(ctx, req.(*LikeMessageRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_DislikeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikeMessageRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).DislikeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_DislikeMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).DislikeMessage(ctx, req.(*DislikeMessageRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_SetMessageRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMessageReadRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).SetMessageRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationService_SetMessageRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).SetMessageRead(ctx, req.(*SetMessageReadRqst))
	}
	return interceptor(ctx, in, info, handler)
}

// ConversationService_ServiceDesc is the grpc.ServiceDesc for ConversationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conversation.ConversationService",
	HandlerType: (*ConversationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _ConversationService_Stop_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _ConversationService_Disconnect_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _ConversationService_CreateConversation_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _ConversationService_DeleteConversation_Handler,
		},
		{
			MethodName: "FindConversations",
			Handler:    _ConversationService_FindConversations_Handler,
		},
		{
			MethodName: "LeaveConversation",
			Handler:    _ConversationService_LeaveConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _ConversationService_GetConversation_Handler,
		},
		{
			MethodName: "GetConversations",
			Handler:    _ConversationService_GetConversations_Handler,
		},
		{
			MethodName: "KickoutFromConversation",
			Handler:    _ConversationService_KickoutFromConversation_Handler,
		},
		{
			MethodName: "SendInvitation",
			Handler:    _ConversationService_SendInvitation_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _ConversationService_AcceptInvitation_Handler,
		},
		{
			MethodName: "DeclineInvitation",
			Handler:    _ConversationService_DeclineInvitation_Handler,
		},
		{
			MethodName: "RevokeInvitation",
			Handler:    _ConversationService_RevokeInvitation_Handler,
		},
		{
			MethodName: "GetReceivedInvitations",
			Handler:    _ConversationService_GetReceivedInvitations_Handler,
		},
		{
			MethodName: "GetSentInvitations",
			Handler:    _ConversationService_GetSentInvitations_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ConversationService_SendMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ConversationService_DeleteMessage_Handler,
		},
		{
			MethodName: "LikeMessage",
			Handler:    _ConversationService_LikeMessage_Handler,
		},
		{
			MethodName: "DislikeMessage",
			Handler:    _ConversationService_DislikeMessage_Handler,
		},
		{
			MethodName: "SetMessageRead",
			Handler:    _ConversationService_SetMessageRead_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _ConversationService_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JoinConversation",
			Handler:       _ConversationService_JoinConversation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindMessages",
			Handler:       _ConversationService_FindMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "conversation.proto",
}
