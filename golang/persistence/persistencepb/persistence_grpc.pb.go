// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: persistence.proto

package persistencepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PersistenceService_Stop_FullMethodName             = "/persistence.PersistenceService/Stop"
	PersistenceService_CreateDatabase_FullMethodName   = "/persistence.PersistenceService/CreateDatabase"
	PersistenceService_Connect_FullMethodName          = "/persistence.PersistenceService/Connect"
	PersistenceService_Disconnect_FullMethodName       = "/persistence.PersistenceService/Disconnect"
	PersistenceService_DeleteDatabase_FullMethodName   = "/persistence.PersistenceService/DeleteDatabase"
	PersistenceService_CreateCollection_FullMethodName = "/persistence.PersistenceService/CreateCollection"
	PersistenceService_DeleteCollection_FullMethodName = "/persistence.PersistenceService/DeleteCollection"
	PersistenceService_CreateConnection_FullMethodName = "/persistence.PersistenceService/CreateConnection"
	PersistenceService_DeleteConnection_FullMethodName = "/persistence.PersistenceService/DeleteConnection"
	PersistenceService_Ping_FullMethodName             = "/persistence.PersistenceService/Ping"
	PersistenceService_Count_FullMethodName            = "/persistence.PersistenceService/Count"
	PersistenceService_InsertOne_FullMethodName        = "/persistence.PersistenceService/InsertOne"
	PersistenceService_InsertMany_FullMethodName       = "/persistence.PersistenceService/InsertMany"
	PersistenceService_Find_FullMethodName             = "/persistence.PersistenceService/Find"
	PersistenceService_FindOne_FullMethodName          = "/persistence.PersistenceService/FindOne"
	PersistenceService_Aggregate_FullMethodName        = "/persistence.PersistenceService/Aggregate"
	PersistenceService_Update_FullMethodName           = "/persistence.PersistenceService/Update"
	PersistenceService_UpdateOne_FullMethodName        = "/persistence.PersistenceService/UpdateOne"
	PersistenceService_ReplaceOne_FullMethodName       = "/persistence.PersistenceService/ReplaceOne"
	PersistenceService_Delete_FullMethodName           = "/persistence.PersistenceService/Delete"
	PersistenceService_DeleteOne_FullMethodName        = "/persistence.PersistenceService/DeleteOne"
	PersistenceService_RunAdminCmd_FullMethodName      = "/persistence.PersistenceService/RunAdminCmd"
)

// PersistenceServiceClient is the client API for PersistenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PersistenceService handles database management and CRUD operations.
type PersistenceServiceClient interface {
	// Stop the server - Ends the server process.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// CreateDatabase - Creates a new database.
	CreateDatabase(ctx context.Context, in *CreateDatabaseRqst, opts ...grpc.CallOption) (*CreateDatabaseRsp, error)
	// Connect - Establishes a connection to the database.
	Connect(ctx context.Context, in *ConnectRqst, opts ...grpc.CallOption) (*ConnectRsp, error)
	// Disconnect - Closes an established database connection.
	Disconnect(ctx context.Context, in *DisconnectRqst, opts ...grpc.CallOption) (*DisconnectRsp, error)
	// DeleteDatabase - Deletes an existing database.
	DeleteDatabase(ctx context.Context, in *DeleteDatabaseRqst, opts ...grpc.CallOption) (*DeleteDatabaseRsp, error)
	// CreateCollection - Creates a new collection in the database.
	CreateCollection(ctx context.Context, in *CreateCollectionRqst, opts ...grpc.CallOption) (*CreateCollectionRsp, error)
	// DeleteCollection - Removes a collection from the database.
	DeleteCollection(ctx context.Context, in *DeleteCollectionRqst, opts ...grpc.CallOption) (*DeleteCollectionRsp, error)
	// CreateConnection - Configures a new connection to a data store.
	CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error)
	// DeleteConnection - Removes an existing connection configuration.
	DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error)
	// Ping - Checks the status of an existing connection.
	Ping(ctx context.Context, in *PingConnectionRqst, opts ...grpc.CallOption) (*PingConnectionRsp, error)
	// Count - Retrieves the count of documents in a collection based on a query.
	Count(ctx context.Context, in *CountRqst, opts ...grpc.CallOption) (*CountRsp, error)
	// InsertOne - Inserts a single document into a collection.
	InsertOne(ctx context.Context, in *InsertOneRqst, opts ...grpc.CallOption) (*InsertOneRsp, error)
	// InsertMany - Inserts multiple documents into a collection.
	InsertMany(ctx context.Context, opts ...grpc.CallOption) (PersistenceService_InsertManyClient, error)
	// Find - Retrieves multiple documents based on a query.
	Find(ctx context.Context, in *FindRqst, opts ...grpc.CallOption) (PersistenceService_FindClient, error)
	// FindOne - Retrieves a single document based on a query.
	FindOne(ctx context.Context, in *FindOneRqst, opts ...grpc.CallOption) (*FindOneResp, error)
	// Aggregate - Performs aggregation operations on a collection.
	Aggregate(ctx context.Context, in *AggregateRqst, opts ...grpc.CallOption) (PersistenceService_AggregateClient, error)
	// Update - Updates multiple documents in a collection.
	Update(ctx context.Context, in *UpdateRqst, opts ...grpc.CallOption) (*UpdateRsp, error)
	// UpdateOne - Updates a single document in a collection.
	UpdateOne(ctx context.Context, in *UpdateOneRqst, opts ...grpc.CallOption) (*UpdateOneRsp, error)
	// ReplaceOne - Replaces a single document in a collection.
	ReplaceOne(ctx context.Context, in *ReplaceOneRqst, opts ...grpc.CallOption) (*ReplaceOneRsp, error)
	// Delete - Deletes multiple documents from a collection.
	Delete(ctx context.Context, in *DeleteRqst, opts ...grpc.CallOption) (*DeleteRsp, error)
	// DeleteOne - Deletes a single document from a collection.
	DeleteOne(ctx context.Context, in *DeleteOneRqst, opts ...grpc.CallOption) (*DeleteOneRsp, error)
	// RunAdminCmd - Executes an administrative command or script.
	RunAdminCmd(ctx context.Context, in *RunAdminCmdRqst, opts ...grpc.CallOption) (*RunAdminCmdRsp, error)
}

type persistenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersistenceServiceClient(cc grpc.ClientConnInterface) PersistenceServiceClient {
	return &persistenceServiceClient{cc}
}

func (c *persistenceServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, PersistenceService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) CreateDatabase(ctx context.Context, in *CreateDatabaseRqst, opts ...grpc.CallOption) (*CreateDatabaseRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDatabaseRsp)
	err := c.cc.Invoke(ctx, PersistenceService_CreateDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) Connect(ctx context.Context, in *ConnectRqst, opts ...grpc.CallOption) (*ConnectRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectRsp)
	err := c.cc.Invoke(ctx, PersistenceService_Connect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) Disconnect(ctx context.Context, in *DisconnectRqst, opts ...grpc.CallOption) (*DisconnectRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisconnectRsp)
	err := c.cc.Invoke(ctx, PersistenceService_Disconnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) DeleteDatabase(ctx context.Context, in *DeleteDatabaseRqst, opts ...grpc.CallOption) (*DeleteDatabaseRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDatabaseRsp)
	err := c.cc.Invoke(ctx, PersistenceService_DeleteDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRqst, opts ...grpc.CallOption) (*CreateCollectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCollectionRsp)
	err := c.cc.Invoke(ctx, PersistenceService_CreateCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRqst, opts ...grpc.CallOption) (*DeleteCollectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCollectionRsp)
	err := c.cc.Invoke(ctx, PersistenceService_DeleteCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionRsp)
	err := c.cc.Invoke(ctx, PersistenceService_CreateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConnectionRsp)
	err := c.cc.Invoke(ctx, PersistenceService_DeleteConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) Ping(ctx context.Context, in *PingConnectionRqst, opts ...grpc.CallOption) (*PingConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingConnectionRsp)
	err := c.cc.Invoke(ctx, PersistenceService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) Count(ctx context.Context, in *CountRqst, opts ...grpc.CallOption) (*CountRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountRsp)
	err := c.cc.Invoke(ctx, PersistenceService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) InsertOne(ctx context.Context, in *InsertOneRqst, opts ...grpc.CallOption) (*InsertOneRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertOneRsp)
	err := c.cc.Invoke(ctx, PersistenceService_InsertOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) InsertMany(ctx context.Context, opts ...grpc.CallOption) (PersistenceService_InsertManyClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PersistenceService_ServiceDesc.Streams[0], PersistenceService_InsertMany_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &persistenceServiceInsertManyClient{ClientStream: stream}
	return x, nil
}

type PersistenceService_InsertManyClient interface {
	Send(*InsertManyRqst) error
	CloseAndRecv() (*InsertManyRsp, error)
	grpc.ClientStream
}

type persistenceServiceInsertManyClient struct {
	grpc.ClientStream
}

func (x *persistenceServiceInsertManyClient) Send(m *InsertManyRqst) error {
	return x.ClientStream.SendMsg(m)
}

func (x *persistenceServiceInsertManyClient) CloseAndRecv() (*InsertManyRsp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InsertManyRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *persistenceServiceClient) Find(ctx context.Context, in *FindRqst, opts ...grpc.CallOption) (PersistenceService_FindClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PersistenceService_ServiceDesc.Streams[1], PersistenceService_Find_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &persistenceServiceFindClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersistenceService_FindClient interface {
	Recv() (*FindResp, error)
	grpc.ClientStream
}

type persistenceServiceFindClient struct {
	grpc.ClientStream
}

func (x *persistenceServiceFindClient) Recv() (*FindResp, error) {
	m := new(FindResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *persistenceServiceClient) FindOne(ctx context.Context, in *FindOneRqst, opts ...grpc.CallOption) (*FindOneResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindOneResp)
	err := c.cc.Invoke(ctx, PersistenceService_FindOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) Aggregate(ctx context.Context, in *AggregateRqst, opts ...grpc.CallOption) (PersistenceService_AggregateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PersistenceService_ServiceDesc.Streams[2], PersistenceService_Aggregate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &persistenceServiceAggregateClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersistenceService_AggregateClient interface {
	Recv() (*AggregateResp, error)
	grpc.ClientStream
}

type persistenceServiceAggregateClient struct {
	grpc.ClientStream
}

func (x *persistenceServiceAggregateClient) Recv() (*AggregateResp, error) {
	m := new(AggregateResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *persistenceServiceClient) Update(ctx context.Context, in *UpdateRqst, opts ...grpc.CallOption) (*UpdateRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRsp)
	err := c.cc.Invoke(ctx, PersistenceService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) UpdateOne(ctx context.Context, in *UpdateOneRqst, opts ...grpc.CallOption) (*UpdateOneRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOneRsp)
	err := c.cc.Invoke(ctx, PersistenceService_UpdateOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) ReplaceOne(ctx context.Context, in *ReplaceOneRqst, opts ...grpc.CallOption) (*ReplaceOneRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceOneRsp)
	err := c.cc.Invoke(ctx, PersistenceService_ReplaceOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) Delete(ctx context.Context, in *DeleteRqst, opts ...grpc.CallOption) (*DeleteRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRsp)
	err := c.cc.Invoke(ctx, PersistenceService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) DeleteOne(ctx context.Context, in *DeleteOneRqst, opts ...grpc.CallOption) (*DeleteOneRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOneRsp)
	err := c.cc.Invoke(ctx, PersistenceService_DeleteOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistenceServiceClient) RunAdminCmd(ctx context.Context, in *RunAdminCmdRqst, opts ...grpc.CallOption) (*RunAdminCmdRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunAdminCmdRsp)
	err := c.cc.Invoke(ctx, PersistenceService_RunAdminCmd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersistenceServiceServer is the server API for PersistenceService service.
// All implementations should embed UnimplementedPersistenceServiceServer
// for forward compatibility
//
// PersistenceService handles database management and CRUD operations.
type PersistenceServiceServer interface {
	// Stop the server - Ends the server process.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// CreateDatabase - Creates a new database.
	CreateDatabase(context.Context, *CreateDatabaseRqst) (*CreateDatabaseRsp, error)
	// Connect - Establishes a connection to the database.
	Connect(context.Context, *ConnectRqst) (*ConnectRsp, error)
	// Disconnect - Closes an established database connection.
	Disconnect(context.Context, *DisconnectRqst) (*DisconnectRsp, error)
	// DeleteDatabase - Deletes an existing database.
	DeleteDatabase(context.Context, *DeleteDatabaseRqst) (*DeleteDatabaseRsp, error)
	// CreateCollection - Creates a new collection in the database.
	CreateCollection(context.Context, *CreateCollectionRqst) (*CreateCollectionRsp, error)
	// DeleteCollection - Removes a collection from the database.
	DeleteCollection(context.Context, *DeleteCollectionRqst) (*DeleteCollectionRsp, error)
	// CreateConnection - Configures a new connection to a data store.
	CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error)
	// DeleteConnection - Removes an existing connection configuration.
	DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error)
	// Ping - Checks the status of an existing connection.
	Ping(context.Context, *PingConnectionRqst) (*PingConnectionRsp, error)
	// Count - Retrieves the count of documents in a collection based on a query.
	Count(context.Context, *CountRqst) (*CountRsp, error)
	// InsertOne - Inserts a single document into a collection.
	InsertOne(context.Context, *InsertOneRqst) (*InsertOneRsp, error)
	// InsertMany - Inserts multiple documents into a collection.
	InsertMany(PersistenceService_InsertManyServer) error
	// Find - Retrieves multiple documents based on a query.
	Find(*FindRqst, PersistenceService_FindServer) error
	// FindOne - Retrieves a single document based on a query.
	FindOne(context.Context, *FindOneRqst) (*FindOneResp, error)
	// Aggregate - Performs aggregation operations on a collection.
	Aggregate(*AggregateRqst, PersistenceService_AggregateServer) error
	// Update - Updates multiple documents in a collection.
	Update(context.Context, *UpdateRqst) (*UpdateRsp, error)
	// UpdateOne - Updates a single document in a collection.
	UpdateOne(context.Context, *UpdateOneRqst) (*UpdateOneRsp, error)
	// ReplaceOne - Replaces a single document in a collection.
	ReplaceOne(context.Context, *ReplaceOneRqst) (*ReplaceOneRsp, error)
	// Delete - Deletes multiple documents from a collection.
	Delete(context.Context, *DeleteRqst) (*DeleteRsp, error)
	// DeleteOne - Deletes a single document from a collection.
	DeleteOne(context.Context, *DeleteOneRqst) (*DeleteOneRsp, error)
	// RunAdminCmd - Executes an administrative command or script.
	RunAdminCmd(context.Context, *RunAdminCmdRqst) (*RunAdminCmdRsp, error)
}

// UnimplementedPersistenceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPersistenceServiceServer struct {
}

func (UnimplementedPersistenceServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedPersistenceServiceServer) CreateDatabase(context.Context, *CreateDatabaseRqst) (*CreateDatabaseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedPersistenceServiceServer) Connect(context.Context, *ConnectRqst) (*ConnectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedPersistenceServiceServer) Disconnect(context.Context, *DisconnectRqst) (*DisconnectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedPersistenceServiceServer) DeleteDatabase(context.Context, *DeleteDatabaseRqst) (*DeleteDatabaseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabase not implemented")
}
func (UnimplementedPersistenceServiceServer) CreateCollection(context.Context, *CreateCollectionRqst) (*CreateCollectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedPersistenceServiceServer) DeleteCollection(context.Context, *DeleteCollectionRqst) (*DeleteCollectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedPersistenceServiceServer) CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedPersistenceServiceServer) DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedPersistenceServiceServer) Ping(context.Context, *PingConnectionRqst) (*PingConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPersistenceServiceServer) Count(context.Context, *CountRqst) (*CountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedPersistenceServiceServer) InsertOne(context.Context, *InsertOneRqst) (*InsertOneRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOne not implemented")
}
func (UnimplementedPersistenceServiceServer) InsertMany(PersistenceService_InsertManyServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertMany not implemented")
}
func (UnimplementedPersistenceServiceServer) Find(*FindRqst, PersistenceService_FindServer) error {
	return status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedPersistenceServiceServer) FindOne(context.Context, *FindOneRqst) (*FindOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedPersistenceServiceServer) Aggregate(*AggregateRqst, PersistenceService_AggregateServer) error {
	return status.Errorf(codes.Unimplemented, "method Aggregate not implemented")
}
func (UnimplementedPersistenceServiceServer) Update(context.Context, *UpdateRqst) (*UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPersistenceServiceServer) UpdateOne(context.Context, *UpdateOneRqst) (*UpdateOneRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOne not implemented")
}
func (UnimplementedPersistenceServiceServer) ReplaceOne(context.Context, *ReplaceOneRqst) (*ReplaceOneRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceOne not implemented")
}
func (UnimplementedPersistenceServiceServer) Delete(context.Context, *DeleteRqst) (*DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPersistenceServiceServer) DeleteOne(context.Context, *DeleteOneRqst) (*DeleteOneRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOne not implemented")
}
func (UnimplementedPersistenceServiceServer) RunAdminCmd(context.Context, *RunAdminCmdRqst) (*RunAdminCmdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAdminCmd not implemented")
}

// UnsafePersistenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersistenceServiceServer will
// result in compilation errors.
type UnsafePersistenceServiceServer interface {
	mustEmbedUnimplementedPersistenceServiceServer()
}

func RegisterPersistenceServiceServer(s grpc.ServiceRegistrar, srv PersistenceServiceServer) {
	s.RegisterService(&PersistenceService_ServiceDesc, srv)
}

func _PersistenceService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_CreateDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).CreateDatabase(ctx, req.(*CreateDatabaseRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).Connect(ctx, req.(*ConnectRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).Disconnect(ctx, req.(*DisconnectRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_DeleteDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatabaseRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).DeleteDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_DeleteDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).DeleteDatabase(ctx, req.(*DeleteDatabaseRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).CreateCollection(ctx, req.(*CreateCollectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).DeleteCollection(ctx, req.(*DeleteCollectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).CreateConnection(ctx, req.(*CreateConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).Ping(ctx, req.(*PingConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).Count(ctx, req.(*CountRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_InsertOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertOneRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).InsertOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_InsertOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).InsertOne(ctx, req.(*InsertOneRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_InsertMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersistenceServiceServer).InsertMany(&persistenceServiceInsertManyServer{ServerStream: stream})
}

type PersistenceService_InsertManyServer interface {
	SendAndClose(*InsertManyRsp) error
	Recv() (*InsertManyRqst, error)
	grpc.ServerStream
}

type persistenceServiceInsertManyServer struct {
	grpc.ServerStream
}

func (x *persistenceServiceInsertManyServer) SendAndClose(m *InsertManyRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *persistenceServiceInsertManyServer) Recv() (*InsertManyRqst, error) {
	m := new(InsertManyRqst)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersistenceService_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindRqst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersistenceServiceServer).Find(m, &persistenceServiceFindServer{ServerStream: stream})
}

type PersistenceService_FindServer interface {
	Send(*FindResp) error
	grpc.ServerStream
}

type persistenceServiceFindServer struct {
	grpc.ServerStream
}

func (x *persistenceServiceFindServer) Send(m *FindResp) error {
	return x.ServerStream.SendMsg(m)
}

func _PersistenceService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).FindOne(ctx, req.(*FindOneRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_Aggregate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AggregateRqst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersistenceServiceServer).Aggregate(m, &persistenceServiceAggregateServer{ServerStream: stream})
}

type PersistenceService_AggregateServer interface {
	Send(*AggregateResp) error
	grpc.ServerStream
}

type persistenceServiceAggregateServer struct {
	grpc.ServerStream
}

func (x *persistenceServiceAggregateServer) Send(m *AggregateResp) error {
	return x.ServerStream.SendMsg(m)
}

func _PersistenceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).Update(ctx, req.(*UpdateRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_UpdateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).UpdateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_UpdateOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).UpdateOne(ctx, req.(*UpdateOneRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_ReplaceOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceOneRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).ReplaceOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_ReplaceOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).ReplaceOne(ctx, req.(*ReplaceOneRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).Delete(ctx, req.(*DeleteRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_DeleteOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).DeleteOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_DeleteOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).DeleteOne(ctx, req.(*DeleteOneRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistenceService_RunAdminCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunAdminCmdRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistenceServiceServer).RunAdminCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistenceService_RunAdminCmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistenceServiceServer).RunAdminCmd(ctx, req.(*RunAdminCmdRqst))
	}
	return interceptor(ctx, in, info, handler)
}

// PersistenceService_ServiceDesc is the grpc.ServiceDesc for PersistenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersistenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "persistence.PersistenceService",
	HandlerType: (*PersistenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _PersistenceService_Stop_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _PersistenceService_CreateDatabase_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _PersistenceService_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _PersistenceService_Disconnect_Handler,
		},
		{
			MethodName: "DeleteDatabase",
			Handler:    _PersistenceService_DeleteDatabase_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _PersistenceService_CreateCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _PersistenceService_DeleteCollection_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _PersistenceService_CreateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _PersistenceService_DeleteConnection_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _PersistenceService_Ping_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _PersistenceService_Count_Handler,
		},
		{
			MethodName: "InsertOne",
			Handler:    _PersistenceService_InsertOne_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _PersistenceService_FindOne_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PersistenceService_Update_Handler,
		},
		{
			MethodName: "UpdateOne",
			Handler:    _PersistenceService_UpdateOne_Handler,
		},
		{
			MethodName: "ReplaceOne",
			Handler:    _PersistenceService_ReplaceOne_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PersistenceService_Delete_Handler,
		},
		{
			MethodName: "DeleteOne",
			Handler:    _PersistenceService_DeleteOne_Handler,
		},
		{
			MethodName: "RunAdminCmd",
			Handler:    _PersistenceService_RunAdminCmd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertMany",
			Handler:       _PersistenceService_InsertMany_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Find",
			Handler:       _PersistenceService_Find_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Aggregate",
			Handler:       _PersistenceService_Aggregate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "persistence.proto",
}
