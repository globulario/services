// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: persistence.proto

package persistencepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum defining the types of stores supported.
type StoreType int32

const (
	StoreType_MONGO  StoreType = 0 // MongoDB
	StoreType_SQL    StoreType = 1 // SQL-based databases
	StoreType_SCYLLA StoreType = 2 // ScyllaDB
)

// Enum value maps for StoreType.
var (
	StoreType_name = map[int32]string{
		0: "MONGO",
		1: "SQL",
		2: "SCYLLA",
	}
	StoreType_value = map[string]int32{
		"MONGO":  0,
		"SQL":    1,
		"SCYLLA": 2,
	}
)

func (x StoreType) Enum() *StoreType {
	p := new(StoreType)
	*p = x
	return p
}

func (x StoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_persistence_proto_enumTypes[0].Descriptor()
}

func (StoreType) Type() protoreflect.EnumType {
	return &file_persistence_proto_enumTypes[0]
}

func (x StoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoreType.Descriptor instead.
func (StoreType) EnumDescriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{0}
}

// Represents a database connection configuration.
type Connection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // Unique identifier for the connection
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                               // Human-readable name for the connection
	Host          string                 `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`                               // Hostname or IP address of the database server
	Store         StoreType              `protobuf:"varint,5,opt,name=store,proto3,enum=persistence.StoreType" json:"store,omitempty"` // Type of the database store
	User          string                 `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`                               // Username for authentication
	Password      string                 `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`                       // Password for authentication
	Port          int32                  `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`                              // Port number for the database server
	Timeout       int32                  `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`                        // Timeout for the connection
	Options       string                 `protobuf:"bytes,10,opt,name=options,proto3" json:"options,omitempty"`                        // Additional options for the connection
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connection) Reset() {
	*x = Connection{}
	mi := &file_persistence_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{0}
}

func (x *Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Connection) GetStore() StoreType {
	if x != nil {
		return x.Store
	}
	return StoreType_MONGO
}

func (x *Connection) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Connection) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Connection) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Connection) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Connection) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Request to create a new database connection.
type CreateConnectionRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Connection    *Connection            `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"` // The connection details
	Save          bool                   `protobuf:"varint,2,opt,name=save,proto3" json:"save,omitempty"`            // If true, saves the connection details in a config file
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConnectionRqst) Reset() {
	*x = CreateConnectionRqst{}
	mi := &file_persistence_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConnectionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionRqst) ProtoMessage() {}

func (x *CreateConnectionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionRqst.ProtoReflect.Descriptor instead.
func (*CreateConnectionRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{1}
}

func (x *CreateConnectionRqst) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *CreateConnectionRqst) GetSave() bool {
	if x != nil {
		return x.Save
	}
	return false
}

// Response for a create connection request.
type CreateConnectionRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the connection creation operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConnectionRsp) Reset() {
	*x = CreateConnectionRsp{}
	mi := &file_persistence_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConnectionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionRsp) ProtoMessage() {}

func (x *CreateConnectionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionRsp.ProtoReflect.Descriptor instead.
func (*CreateConnectionRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{2}
}

func (x *CreateConnectionRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to delete an existing database connection.
type DeleteConnectionRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // The connection id to be deleted
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConnectionRqst) Reset() {
	*x = DeleteConnectionRqst{}
	mi := &file_persistence_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConnectionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionRqst) ProtoMessage() {}

func (x *DeleteConnectionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionRqst.ProtoReflect.Descriptor instead.
func (*DeleteConnectionRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteConnectionRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for a delete connection request.
type DeleteConnectionRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the connection deletion operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConnectionRsp) Reset() {
	*x = DeleteConnectionRsp{}
	mi := &file_persistence_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConnectionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionRsp) ProtoMessage() {}

func (x *DeleteConnectionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionRsp.ProtoReflect.Descriptor instead.
func (*DeleteConnectionRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteConnectionRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to ping a database connection to check its availability.
type PingConnectionRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // The connection id to be pinged
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingConnectionRqst) Reset() {
	*x = PingConnectionRqst{}
	mi := &file_persistence_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingConnectionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingConnectionRqst) ProtoMessage() {}

func (x *PingConnectionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingConnectionRqst.ProtoReflect.Descriptor instead.
func (*PingConnectionRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{5}
}

func (x *PingConnectionRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for a ping connection request.
type PingConnectionRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the ping operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingConnectionRsp) Reset() {
	*x = PingConnectionRsp{}
	mi := &file_persistence_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingConnectionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingConnectionRsp) ProtoMessage() {}

func (x *PingConnectionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingConnectionRsp.ProtoReflect.Descriptor instead.
func (*PingConnectionRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{6}
}

func (x *PingConnectionRsp) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// Request to insert multiple documents/records.
type InsertManyRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                 // The connection id
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`     // Database name
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"` // Collection or table name
	Data          []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`             // Data to be inserted
	Options       string                 `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`       // Additional options for insertion
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertManyRqst) Reset() {
	*x = InsertManyRqst{}
	mi := &file_persistence_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertManyRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertManyRqst) ProtoMessage() {}

func (x *InsertManyRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertManyRqst.ProtoReflect.Descriptor instead.
func (*InsertManyRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{7}
}

func (x *InsertManyRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InsertManyRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *InsertManyRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *InsertManyRqst) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InsertManyRqst) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Response for an insert many request.
type InsertManyRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertManyRsp) Reset() {
	*x = InsertManyRsp{}
	mi := &file_persistence_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertManyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertManyRsp) ProtoMessage() {}

func (x *InsertManyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertManyRsp.ProtoReflect.Descriptor instead.
func (*InsertManyRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{8}
}

// Request to insert a single document/record.
type InsertOneRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                 // The connection id
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`     // Database name
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"` // Collection or table name
	Data          string                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`             // Data to be inserted
	Options       string                 `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`       // Additional options for insertion
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertOneRqst) Reset() {
	*x = InsertOneRqst{}
	mi := &file_persistence_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertOneRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertOneRqst) ProtoMessage() {}

func (x *InsertOneRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertOneRqst.ProtoReflect.Descriptor instead.
func (*InsertOneRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{9}
}

func (x *InsertOneRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InsertOneRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *InsertOneRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *InsertOneRqst) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *InsertOneRqst) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Response for an insert one request.
type InsertOneRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // The JSON string containing the inserted document's ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertOneRsp) Reset() {
	*x = InsertOneRsp{}
	mi := &file_persistence_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertOneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertOneRsp) ProtoMessage() {}

func (x *InsertOneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertOneRsp.ProtoReflect.Descriptor instead.
func (*InsertOneRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{10}
}

func (x *InsertOneRsp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request to find multiple documents/records based on a query.
type FindRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                 // The connection id
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`     // Database name
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"` // Collection or table name
	Query         string                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`           // Query string in JSON format
	Options       string                 `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`       // Additional options for the find operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindRqst) Reset() {
	*x = FindRqst{}
	mi := &file_persistence_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRqst) ProtoMessage() {}

func (x *FindRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRqst.ProtoReflect.Descriptor instead.
func (*FindRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{11}
}

func (x *FindRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FindRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *FindRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *FindRqst) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *FindRqst) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Response for a find request.
type FindResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // Data blob containing the query results
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindResp) Reset() {
	*x = FindResp{}
	mi := &file_persistence_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindResp) ProtoMessage() {}

func (x *FindResp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindResp.ProtoReflect.Descriptor instead.
func (*FindResp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{12}
}

func (x *FindResp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to find a single document/record based on a query.
type FindOneRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	Query         string                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Options       string                 `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindOneRqst) Reset() {
	*x = FindOneRqst{}
	mi := &file_persistence_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOneRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneRqst) ProtoMessage() {}

func (x *FindOneRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneRqst.ProtoReflect.Descriptor instead.
func (*FindOneRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{13}
}

func (x *FindOneRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FindOneRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *FindOneRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *FindOneRqst) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *FindOneRqst) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Response for a find one request.
type FindOneResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *structpb.Struct       `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the find one operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindOneResp) Reset() {
	*x = FindOneResp{}
	mi := &file_persistence_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindOneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneResp) ProtoMessage() {}

func (x *FindOneResp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneResp.ProtoReflect.Descriptor instead.
func (*FindOneResp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{14}
}

func (x *FindOneResp) GetResult() *structpb.Struct {
	if x != nil {
		return x.Result
	}
	return nil
}

// Request to perform an aggregation operation.
type AggregateRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	Pipeline      string                 `protobuf:"bytes,4,opt,name=pipeline,proto3" json:"pipeline,omitempty"` // JSON string representing the aggregation pipeline
	Options       string                 `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AggregateRqst) Reset() {
	*x = AggregateRqst{}
	mi := &file_persistence_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateRqst) ProtoMessage() {}

func (x *AggregateRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateRqst.ProtoReflect.Descriptor instead.
func (*AggregateRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{15}
}

func (x *AggregateRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AggregateRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *AggregateRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *AggregateRqst) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

func (x *AggregateRqst) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Response for an aggregate request.
type AggregateResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // JSON string containing the aggregation results
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AggregateResp) Reset() {
	*x = AggregateResp{}
	mi := &file_persistence_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateResp) ProtoMessage() {}

func (x *AggregateResp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateResp.ProtoReflect.Descriptor instead.
func (*AggregateResp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{16}
}

func (x *AggregateResp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to update multiple documents/records.
type UpdateRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	Query         string                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"` // Query to select documents
	Value         string                 `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"` // Update values
	Options       string                 `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRqst) Reset() {
	*x = UpdateRqst{}
	mi := &file_persistence_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRqst) ProtoMessage() {}

func (x *UpdateRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRqst.ProtoReflect.Descriptor instead.
func (*UpdateRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *UpdateRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *UpdateRqst) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *UpdateRqst) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateRqst) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Response for an update request.
type UpdateRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the update operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRsp) Reset() {
	*x = UpdateRsp{}
	mi := &file_persistence_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRsp) ProtoMessage() {}

func (x *UpdateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRsp.ProtoReflect.Descriptor instead.
func (*UpdateRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to update a single document/record.
type UpdateOneRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	Query         string                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Value         string                 `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Options       string                 `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOneRqst) Reset() {
	*x = UpdateOneRqst{}
	mi := &file_persistence_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOneRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneRqst) ProtoMessage() {}

func (x *UpdateOneRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneRqst.ProtoReflect.Descriptor instead.
func (*UpdateOneRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateOneRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOneRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *UpdateOneRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *UpdateOneRqst) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *UpdateOneRqst) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateOneRqst) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Response for an update one request.
type UpdateOneRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOneRsp) Reset() {
	*x = UpdateOneRsp{}
	mi := &file_persistence_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneRsp) ProtoMessage() {}

func (x *UpdateOneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneRsp.ProtoReflect.Descriptor instead.
func (*UpdateOneRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateOneRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to replace a single document/record.
type ReplaceOneRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	Query         string                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"` // Query to select the document
	Value         string                 `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"` // New value for the document
	Options       string                 `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceOneRqst) Reset() {
	*x = ReplaceOneRqst{}
	mi := &file_persistence_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceOneRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceOneRqst) ProtoMessage() {}

func (x *ReplaceOneRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceOneRqst.ProtoReflect.Descriptor instead.
func (*ReplaceOneRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{21}
}

func (x *ReplaceOneRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReplaceOneRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ReplaceOneRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *ReplaceOneRqst) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ReplaceOneRqst) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ReplaceOneRqst) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Response for a replace one request.
type ReplaceOneRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaceOneRsp) Reset() {
	*x = ReplaceOneRsp{}
	mi := &file_persistence_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceOneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceOneRsp) ProtoMessage() {}

func (x *ReplaceOneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceOneRsp.ProtoReflect.Descriptor instead.
func (*ReplaceOneRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{22}
}

func (x *ReplaceOneRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to delete multiple documents/records.
type DeleteRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	Query         string                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"` // Query to select documents for deletion
	Options       string                 `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRqst) Reset() {
	*x = DeleteRqst{}
	mi := &file_persistence_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRqst) ProtoMessage() {}

func (x *DeleteRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRqst.ProtoReflect.Descriptor instead.
func (*DeleteRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DeleteRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *DeleteRqst) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DeleteRqst) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Response for a delete request.
type DeleteRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the delete operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRsp) Reset() {
	*x = DeleteRsp{}
	mi := &file_persistence_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRsp) ProtoMessage() {}

func (x *DeleteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRsp.ProtoReflect.Descriptor instead.
func (*DeleteRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to delete a single document/record.
type DeleteOneRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	Query         string                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Options       string                 `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOneRqst) Reset() {
	*x = DeleteOneRqst{}
	mi := &file_persistence_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOneRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneRqst) ProtoMessage() {}

func (x *DeleteOneRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneRqst.ProtoReflect.Descriptor instead.
func (*DeleteOneRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteOneRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteOneRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DeleteOneRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *DeleteOneRqst) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DeleteOneRqst) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Response for a delete one request.
type DeleteOneRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOneRsp) Reset() {
	*x = DeleteOneRsp{}
	mi := &file_persistence_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneRsp) ProtoMessage() {}

func (x *DeleteOneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneRsp.ProtoReflect.Descriptor instead.
func (*DeleteOneRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteOneRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to create a new database.
type CreateDatabaseRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`             // The connection id
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"` // Name of the database to be created
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDatabaseRqst) Reset() {
	*x = CreateDatabaseRqst{}
	mi := &file_persistence_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDatabaseRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatabaseRqst) ProtoMessage() {}

func (x *CreateDatabaseRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatabaseRqst.ProtoReflect.Descriptor instead.
func (*CreateDatabaseRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{27}
}

func (x *CreateDatabaseRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateDatabaseRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// Response for a create database request.
type CreateDatabaseRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the database creation operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDatabaseRsp) Reset() {
	*x = CreateDatabaseRsp{}
	mi := &file_persistence_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDatabaseRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatabaseRsp) ProtoMessage() {}

func (x *CreateDatabaseRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatabaseRsp.ProtoReflect.Descriptor instead.
func (*CreateDatabaseRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{28}
}

func (x *CreateDatabaseRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to delete a database.
type DeleteDatabaseRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`             // Connection ID
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"` // Name of the database to delete
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDatabaseRqst) Reset() {
	*x = DeleteDatabaseRqst{}
	mi := &file_persistence_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDatabaseRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatabaseRqst) ProtoMessage() {}

func (x *DeleteDatabaseRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatabaseRqst.ProtoReflect.Descriptor instead.
func (*DeleteDatabaseRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteDatabaseRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteDatabaseRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// Response for a delete database request.
type DeleteDatabaseRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the delete operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDatabaseRsp) Reset() {
	*x = DeleteDatabaseRsp{}
	mi := &file_persistence_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDatabaseRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatabaseRsp) ProtoMessage() {}

func (x *DeleteDatabaseRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatabaseRsp.ProtoReflect.Descriptor instead.
func (*DeleteDatabaseRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteDatabaseRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to create a new collection.
type CreateCollectionRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                 // Connection ID
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`     // Database name
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"` // Name of the collection to create
	OptionsStr    string                 `protobuf:"bytes,4,opt,name=optionsStr,proto3" json:"optionsStr,omitempty"` // Additional options for collection creation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCollectionRqst) Reset() {
	*x = CreateCollectionRqst{}
	mi := &file_persistence_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCollectionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCollectionRqst) ProtoMessage() {}

func (x *CreateCollectionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCollectionRqst.ProtoReflect.Descriptor instead.
func (*CreateCollectionRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{31}
}

func (x *CreateCollectionRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateCollectionRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *CreateCollectionRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *CreateCollectionRqst) GetOptionsStr() string {
	if x != nil {
		return x.OptionsStr
	}
	return ""
}

// Response for a create collection request.
type CreateCollectionRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the create operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCollectionRsp) Reset() {
	*x = CreateCollectionRsp{}
	mi := &file_persistence_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCollectionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCollectionRsp) ProtoMessage() {}

func (x *CreateCollectionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCollectionRsp.ProtoReflect.Descriptor instead.
func (*CreateCollectionRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{32}
}

func (x *CreateCollectionRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to delete a collection.
type DeleteCollectionRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                 // Connection ID
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`     // Database name
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"` // Name of the collection to delete
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCollectionRqst) Reset() {
	*x = DeleteCollectionRqst{}
	mi := &file_persistence_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCollectionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectionRqst) ProtoMessage() {}

func (x *DeleteCollectionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectionRqst.ProtoReflect.Descriptor instead.
func (*DeleteCollectionRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteCollectionRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteCollectionRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DeleteCollectionRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

// Response for a delete collection request.
type DeleteCollectionRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the delete operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCollectionRsp) Reset() {
	*x = DeleteCollectionRsp{}
	mi := &file_persistence_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCollectionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectionRsp) ProtoMessage() {}

func (x *DeleteCollectionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectionRsp.ProtoReflect.Descriptor instead.
func (*DeleteCollectionRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteCollectionRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to count documents in a collection.
type CountRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                 // Connection ID
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`     // Database name
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"` // Collection name
	Query         string                 `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`           // Filter query for counting
	Options       string                 `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`       // Additional options for the count operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountRqst) Reset() {
	*x = CountRqst{}
	mi := &file_persistence_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRqst) ProtoMessage() {}

func (x *CountRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRqst.ProtoReflect.Descriptor instead.
func (*CountRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{35}
}

func (x *CountRqst) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CountRqst) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *CountRqst) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *CountRqst) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *CountRqst) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// Response for a count request.
type CountRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        int64                  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // The count result
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountRsp) Reset() {
	*x = CountRsp{}
	mi := &file_persistence_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRsp) ProtoMessage() {}

func (x *CountRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRsp.ProtoReflect.Descriptor instead.
func (*CountRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{36}
}

func (x *CountRsp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

// Request to run an administrative command.
type RunAdminCmdRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connectionId,proto3" json:"connectionId,omitempty"` // Connection ID
	User          string                 `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                 // Username for authentication
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`         // Password for authentication
	Script        string                 `protobuf:"bytes,4,opt,name=script,proto3" json:"script,omitempty"`             // Administrative script or command to run
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunAdminCmdRqst) Reset() {
	*x = RunAdminCmdRqst{}
	mi := &file_persistence_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunAdminCmdRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAdminCmdRqst) ProtoMessage() {}

func (x *RunAdminCmdRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAdminCmdRqst.ProtoReflect.Descriptor instead.
func (*RunAdminCmdRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{37}
}

func (x *RunAdminCmdRqst) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *RunAdminCmdRqst) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *RunAdminCmdRqst) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RunAdminCmdRqst) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

// Response for running an administrative command.
type RunAdminCmdRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the command execution
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunAdminCmdRsp) Reset() {
	*x = RunAdminCmdRsp{}
	mi := &file_persistence_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunAdminCmdRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAdminCmdRsp) ProtoMessage() {}

func (x *RunAdminCmdRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAdminCmdRsp.ProtoReflect.Descriptor instead.
func (*RunAdminCmdRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{38}
}

func (x *RunAdminCmdRsp) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// Request to open a database connection.
type ConnectRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connectionId,proto3" json:"connectionId,omitempty"` // Connection ID
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`         // Password for authentication
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRqst) Reset() {
	*x = ConnectRqst{}
	mi := &file_persistence_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRqst) ProtoMessage() {}

func (x *ConnectRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRqst.ProtoReflect.Descriptor instead.
func (*ConnectRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{39}
}

func (x *ConnectRqst) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *ConnectRqst) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Response for a connection request.
type ConnectRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the connection attempt
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRsp) Reset() {
	*x = ConnectRsp{}
	mi := &file_persistence_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRsp) ProtoMessage() {}

func (x *ConnectRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRsp.ProtoReflect.Descriptor instead.
func (*ConnectRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{40}
}

func (x *ConnectRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to close a database connection.
type DisconnectRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connectionId,proto3" json:"connectionId,omitempty"` // Connection ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectRqst) Reset() {
	*x = DisconnectRqst{}
	mi := &file_persistence_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRqst) ProtoMessage() {}

func (x *DisconnectRqst) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRqst.ProtoReflect.Descriptor instead.
func (*DisconnectRqst) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{41}
}

func (x *DisconnectRqst) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

// Response for a disconnect request.
type DisconnectRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Result of the disconnect operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectRsp) Reset() {
	*x = DisconnectRsp{}
	mi := &file_persistence_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRsp) ProtoMessage() {}

func (x *DisconnectRsp) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRsp.ProtoReflect.Descriptor instead.
func (*DisconnectRsp) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{42}
}

func (x *DisconnectRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to stop a service or process.
type StopRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	mi := &file_persistence_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{43}
}

// Response for a stop request.
type StopResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	mi := &file_persistence_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_persistence_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_persistence_proto_rawDescGZIP(), []int{44}
}

var File_persistence_proto protoreflect.FileDescriptor

const file_persistence_proto_rawDesc = "" +
	"\n" +
	"\x11persistence.proto\x12\vpersistence\x1a\x1cgoogle/protobuf/struct.proto\"\xea\x01\n" +
	"\n" +
	"Connection\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04host\x18\x03 \x01(\tR\x04host\x12,\n" +
	"\x05store\x18\x05 \x01(\x0e2\x16.persistence.StoreTypeR\x05store\x12\x12\n" +
	"\x04user\x18\x06 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\a \x01(\tR\bpassword\x12\x12\n" +
	"\x04port\x18\b \x01(\x05R\x04port\x12\x18\n" +
	"\atimeout\x18\t \x01(\x05R\atimeout\x12\x18\n" +
	"\aoptions\x18\n" +
	" \x01(\tR\aoptions\"c\n" +
	"\x14CreateConnectionRqst\x127\n" +
	"\n" +
	"connection\x18\x01 \x01(\v2\x17.persistence.ConnectionR\n" +
	"connection\x12\x12\n" +
	"\x04save\x18\x02 \x01(\bR\x04save\"-\n" +
	"\x13CreateConnectionRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"&\n" +
	"\x14DeleteConnectionRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"-\n" +
	"\x13DeleteConnectionRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"$\n" +
	"\x12PingConnectionRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"+\n" +
	"\x11PingConnectionRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\tR\x06result\"\x8a\x01\n" +
	"\x0eInsertManyRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12\x18\n" +
	"\aoptions\x18\x05 \x01(\tR\aoptions\"\x0f\n" +
	"\rInsertManyRsp\"\x89\x01\n" +
	"\rInsertOneRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x12\n" +
	"\x04data\x18\x04 \x01(\tR\x04data\x12\x18\n" +
	"\aoptions\x18\x05 \x01(\tR\aoptions\"\x1e\n" +
	"\fInsertOneRsp\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x86\x01\n" +
	"\bFindRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x14\n" +
	"\x05query\x18\x04 \x01(\tR\x05query\x12\x18\n" +
	"\aoptions\x18\x06 \x01(\tR\aoptions\"\x1e\n" +
	"\bFindResp\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"\x89\x01\n" +
	"\vFindOneRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x14\n" +
	"\x05query\x18\x04 \x01(\tR\x05query\x12\x18\n" +
	"\aoptions\x18\x06 \x01(\tR\aoptions\">\n" +
	"\vFindOneResp\x12/\n" +
	"\x06result\x18\x01 \x01(\v2\x17.google.protobuf.StructR\x06result\"\x91\x01\n" +
	"\rAggregateRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x1a\n" +
	"\bpipeline\x18\x04 \x01(\tR\bpipeline\x12\x18\n" +
	"\aoptions\x18\x06 \x01(\tR\aoptions\"#\n" +
	"\rAggregateResp\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"\x9e\x01\n" +
	"\n" +
	"UpdateRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x14\n" +
	"\x05query\x18\x04 \x01(\tR\x05query\x12\x14\n" +
	"\x05value\x18\x05 \x01(\tR\x05value\x12\x18\n" +
	"\aoptions\x18\x06 \x01(\tR\aoptions\"#\n" +
	"\tUpdateRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"\xa1\x01\n" +
	"\rUpdateOneRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x14\n" +
	"\x05query\x18\x04 \x01(\tR\x05query\x12\x14\n" +
	"\x05value\x18\x05 \x01(\tR\x05value\x12\x18\n" +
	"\aoptions\x18\x06 \x01(\tR\aoptions\"&\n" +
	"\fUpdateOneRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"\xa2\x01\n" +
	"\x0eReplaceOneRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x14\n" +
	"\x05query\x18\x04 \x01(\tR\x05query\x12\x14\n" +
	"\x05value\x18\x05 \x01(\tR\x05value\x12\x18\n" +
	"\aoptions\x18\x06 \x01(\tR\aoptions\"'\n" +
	"\rReplaceOneRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"\x88\x01\n" +
	"\n" +
	"DeleteRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x14\n" +
	"\x05query\x18\x04 \x01(\tR\x05query\x12\x18\n" +
	"\aoptions\x18\x05 \x01(\tR\aoptions\"#\n" +
	"\tDeleteRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"\x8b\x01\n" +
	"\rDeleteOneRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x14\n" +
	"\x05query\x18\x04 \x01(\tR\x05query\x12\x18\n" +
	"\aoptions\x18\x05 \x01(\tR\aoptions\"&\n" +
	"\fDeleteOneRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"@\n" +
	"\x12CreateDatabaseRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\"+\n" +
	"\x11CreateDatabaseRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"@\n" +
	"\x12DeleteDatabaseRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\"+\n" +
	"\x11DeleteDatabaseRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"\x82\x01\n" +
	"\x14CreateCollectionRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x1e\n" +
	"\n" +
	"optionsStr\x18\x04 \x01(\tR\n" +
	"optionsStr\"-\n" +
	"\x13CreateCollectionRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"b\n" +
	"\x14DeleteCollectionRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\"-\n" +
	"\x13DeleteCollectionRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"\x87\x01\n" +
	"\tCountRqst\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x1e\n" +
	"\n" +
	"collection\x18\x03 \x01(\tR\n" +
	"collection\x12\x14\n" +
	"\x05query\x18\x04 \x01(\tR\x05query\x12\x18\n" +
	"\aoptions\x18\x05 \x01(\tR\aoptions\"\"\n" +
	"\bCountRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\x03R\x06result\"}\n" +
	"\x0fRunAdminCmdRqst\x12\"\n" +
	"\fconnectionId\x18\x01 \x01(\tR\fconnectionId\x12\x12\n" +
	"\x04user\x18\x02 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\x12\x16\n" +
	"\x06script\x18\x04 \x01(\tR\x06script\"(\n" +
	"\x0eRunAdminCmdRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\tR\x06result\"M\n" +
	"\vConnectRqst\x12\"\n" +
	"\fconnectionId\x18\x01 \x01(\tR\fconnectionId\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\"$\n" +
	"\n" +
	"ConnectRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"4\n" +
	"\x0eDisconnectRqst\x12\"\n" +
	"\fconnectionId\x18\x01 \x01(\tR\fconnectionId\"'\n" +
	"\rDisconnectRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"\r\n" +
	"\vStopRequest\"\x0e\n" +
	"\fStopResponse*+\n" +
	"\tStoreType\x12\t\n" +
	"\x05MONGO\x10\x00\x12\a\n" +
	"\x03SQL\x10\x01\x12\n" +
	"\n" +
	"\x06SCYLLA\x10\x022\xbb\f\n" +
	"\x12PersistenceService\x12;\n" +
	"\x04Stop\x12\x18.persistence.StopRequest\x1a\x19.persistence.StopResponse\x12Q\n" +
	"\x0eCreateDatabase\x12\x1f.persistence.CreateDatabaseRqst\x1a\x1e.persistence.CreateDatabaseRsp\x12<\n" +
	"\aConnect\x12\x18.persistence.ConnectRqst\x1a\x17.persistence.ConnectRsp\x12E\n" +
	"\n" +
	"Disconnect\x12\x1b.persistence.DisconnectRqst\x1a\x1a.persistence.DisconnectRsp\x12Q\n" +
	"\x0eDeleteDatabase\x12\x1f.persistence.DeleteDatabaseRqst\x1a\x1e.persistence.DeleteDatabaseRsp\x12W\n" +
	"\x10CreateCollection\x12!.persistence.CreateCollectionRqst\x1a .persistence.CreateCollectionRsp\x12W\n" +
	"\x10DeleteCollection\x12!.persistence.DeleteCollectionRqst\x1a .persistence.DeleteCollectionRsp\x12W\n" +
	"\x10CreateConnection\x12!.persistence.CreateConnectionRqst\x1a .persistence.CreateConnectionRsp\x12W\n" +
	"\x10DeleteConnection\x12!.persistence.DeleteConnectionRqst\x1a .persistence.DeleteConnectionRsp\x12G\n" +
	"\x04Ping\x12\x1f.persistence.PingConnectionRqst\x1a\x1e.persistence.PingConnectionRsp\x126\n" +
	"\x05Count\x12\x16.persistence.CountRqst\x1a\x15.persistence.CountRsp\x12B\n" +
	"\tInsertOne\x12\x1a.persistence.InsertOneRqst\x1a\x19.persistence.InsertOneRsp\x12G\n" +
	"\n" +
	"InsertMany\x12\x1b.persistence.InsertManyRqst\x1a\x1a.persistence.InsertManyRsp(\x01\x126\n" +
	"\x04Find\x12\x15.persistence.FindRqst\x1a\x15.persistence.FindResp0\x01\x12=\n" +
	"\aFindOne\x12\x18.persistence.FindOneRqst\x1a\x18.persistence.FindOneResp\x12E\n" +
	"\tAggregate\x12\x1a.persistence.AggregateRqst\x1a\x1a.persistence.AggregateResp0\x01\x129\n" +
	"\x06Update\x12\x17.persistence.UpdateRqst\x1a\x16.persistence.UpdateRsp\x12B\n" +
	"\tUpdateOne\x12\x1a.persistence.UpdateOneRqst\x1a\x19.persistence.UpdateOneRsp\x12E\n" +
	"\n" +
	"ReplaceOne\x12\x1b.persistence.ReplaceOneRqst\x1a\x1a.persistence.ReplaceOneRsp\x129\n" +
	"\x06Delete\x12\x17.persistence.DeleteRqst\x1a\x16.persistence.DeleteRsp\x12B\n" +
	"\tDeleteOne\x12\x1a.persistence.DeleteOneRqst\x1a\x19.persistence.DeleteOneRsp\x12H\n" +
	"\vRunAdminCmd\x12\x1c.persistence.RunAdminCmdRqst\x1a\x1b.persistence.RunAdminCmdRspBAZ?github.com/globulario/services/golang/persistence/persistencepbb\x06proto3"

var (
	file_persistence_proto_rawDescOnce sync.Once
	file_persistence_proto_rawDescData []byte
)

func file_persistence_proto_rawDescGZIP() []byte {
	file_persistence_proto_rawDescOnce.Do(func() {
		file_persistence_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_persistence_proto_rawDesc), len(file_persistence_proto_rawDesc)))
	})
	return file_persistence_proto_rawDescData
}

var file_persistence_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_persistence_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_persistence_proto_goTypes = []any{
	(StoreType)(0),               // 0: persistence.StoreType
	(*Connection)(nil),           // 1: persistence.Connection
	(*CreateConnectionRqst)(nil), // 2: persistence.CreateConnectionRqst
	(*CreateConnectionRsp)(nil),  // 3: persistence.CreateConnectionRsp
	(*DeleteConnectionRqst)(nil), // 4: persistence.DeleteConnectionRqst
	(*DeleteConnectionRsp)(nil),  // 5: persistence.DeleteConnectionRsp
	(*PingConnectionRqst)(nil),   // 6: persistence.PingConnectionRqst
	(*PingConnectionRsp)(nil),    // 7: persistence.PingConnectionRsp
	(*InsertManyRqst)(nil),       // 8: persistence.InsertManyRqst
	(*InsertManyRsp)(nil),        // 9: persistence.InsertManyRsp
	(*InsertOneRqst)(nil),        // 10: persistence.InsertOneRqst
	(*InsertOneRsp)(nil),         // 11: persistence.InsertOneRsp
	(*FindRqst)(nil),             // 12: persistence.FindRqst
	(*FindResp)(nil),             // 13: persistence.FindResp
	(*FindOneRqst)(nil),          // 14: persistence.FindOneRqst
	(*FindOneResp)(nil),          // 15: persistence.FindOneResp
	(*AggregateRqst)(nil),        // 16: persistence.AggregateRqst
	(*AggregateResp)(nil),        // 17: persistence.AggregateResp
	(*UpdateRqst)(nil),           // 18: persistence.UpdateRqst
	(*UpdateRsp)(nil),            // 19: persistence.UpdateRsp
	(*UpdateOneRqst)(nil),        // 20: persistence.UpdateOneRqst
	(*UpdateOneRsp)(nil),         // 21: persistence.UpdateOneRsp
	(*ReplaceOneRqst)(nil),       // 22: persistence.ReplaceOneRqst
	(*ReplaceOneRsp)(nil),        // 23: persistence.ReplaceOneRsp
	(*DeleteRqst)(nil),           // 24: persistence.DeleteRqst
	(*DeleteRsp)(nil),            // 25: persistence.DeleteRsp
	(*DeleteOneRqst)(nil),        // 26: persistence.DeleteOneRqst
	(*DeleteOneRsp)(nil),         // 27: persistence.DeleteOneRsp
	(*CreateDatabaseRqst)(nil),   // 28: persistence.CreateDatabaseRqst
	(*CreateDatabaseRsp)(nil),    // 29: persistence.CreateDatabaseRsp
	(*DeleteDatabaseRqst)(nil),   // 30: persistence.DeleteDatabaseRqst
	(*DeleteDatabaseRsp)(nil),    // 31: persistence.DeleteDatabaseRsp
	(*CreateCollectionRqst)(nil), // 32: persistence.CreateCollectionRqst
	(*CreateCollectionRsp)(nil),  // 33: persistence.CreateCollectionRsp
	(*DeleteCollectionRqst)(nil), // 34: persistence.DeleteCollectionRqst
	(*DeleteCollectionRsp)(nil),  // 35: persistence.DeleteCollectionRsp
	(*CountRqst)(nil),            // 36: persistence.CountRqst
	(*CountRsp)(nil),             // 37: persistence.CountRsp
	(*RunAdminCmdRqst)(nil),      // 38: persistence.RunAdminCmdRqst
	(*RunAdminCmdRsp)(nil),       // 39: persistence.RunAdminCmdRsp
	(*ConnectRqst)(nil),          // 40: persistence.ConnectRqst
	(*ConnectRsp)(nil),           // 41: persistence.ConnectRsp
	(*DisconnectRqst)(nil),       // 42: persistence.DisconnectRqst
	(*DisconnectRsp)(nil),        // 43: persistence.DisconnectRsp
	(*StopRequest)(nil),          // 44: persistence.StopRequest
	(*StopResponse)(nil),         // 45: persistence.StopResponse
	(*structpb.Struct)(nil),      // 46: google.protobuf.Struct
}
var file_persistence_proto_depIdxs = []int32{
	0,  // 0: persistence.Connection.store:type_name -> persistence.StoreType
	1,  // 1: persistence.CreateConnectionRqst.connection:type_name -> persistence.Connection
	46, // 2: persistence.FindOneResp.result:type_name -> google.protobuf.Struct
	44, // 3: persistence.PersistenceService.Stop:input_type -> persistence.StopRequest
	28, // 4: persistence.PersistenceService.CreateDatabase:input_type -> persistence.CreateDatabaseRqst
	40, // 5: persistence.PersistenceService.Connect:input_type -> persistence.ConnectRqst
	42, // 6: persistence.PersistenceService.Disconnect:input_type -> persistence.DisconnectRqst
	30, // 7: persistence.PersistenceService.DeleteDatabase:input_type -> persistence.DeleteDatabaseRqst
	32, // 8: persistence.PersistenceService.CreateCollection:input_type -> persistence.CreateCollectionRqst
	34, // 9: persistence.PersistenceService.DeleteCollection:input_type -> persistence.DeleteCollectionRqst
	2,  // 10: persistence.PersistenceService.CreateConnection:input_type -> persistence.CreateConnectionRqst
	4,  // 11: persistence.PersistenceService.DeleteConnection:input_type -> persistence.DeleteConnectionRqst
	6,  // 12: persistence.PersistenceService.Ping:input_type -> persistence.PingConnectionRqst
	36, // 13: persistence.PersistenceService.Count:input_type -> persistence.CountRqst
	10, // 14: persistence.PersistenceService.InsertOne:input_type -> persistence.InsertOneRqst
	8,  // 15: persistence.PersistenceService.InsertMany:input_type -> persistence.InsertManyRqst
	12, // 16: persistence.PersistenceService.Find:input_type -> persistence.FindRqst
	14, // 17: persistence.PersistenceService.FindOne:input_type -> persistence.FindOneRqst
	16, // 18: persistence.PersistenceService.Aggregate:input_type -> persistence.AggregateRqst
	18, // 19: persistence.PersistenceService.Update:input_type -> persistence.UpdateRqst
	20, // 20: persistence.PersistenceService.UpdateOne:input_type -> persistence.UpdateOneRqst
	22, // 21: persistence.PersistenceService.ReplaceOne:input_type -> persistence.ReplaceOneRqst
	24, // 22: persistence.PersistenceService.Delete:input_type -> persistence.DeleteRqst
	26, // 23: persistence.PersistenceService.DeleteOne:input_type -> persistence.DeleteOneRqst
	38, // 24: persistence.PersistenceService.RunAdminCmd:input_type -> persistence.RunAdminCmdRqst
	45, // 25: persistence.PersistenceService.Stop:output_type -> persistence.StopResponse
	29, // 26: persistence.PersistenceService.CreateDatabase:output_type -> persistence.CreateDatabaseRsp
	41, // 27: persistence.PersistenceService.Connect:output_type -> persistence.ConnectRsp
	43, // 28: persistence.PersistenceService.Disconnect:output_type -> persistence.DisconnectRsp
	31, // 29: persistence.PersistenceService.DeleteDatabase:output_type -> persistence.DeleteDatabaseRsp
	33, // 30: persistence.PersistenceService.CreateCollection:output_type -> persistence.CreateCollectionRsp
	35, // 31: persistence.PersistenceService.DeleteCollection:output_type -> persistence.DeleteCollectionRsp
	3,  // 32: persistence.PersistenceService.CreateConnection:output_type -> persistence.CreateConnectionRsp
	5,  // 33: persistence.PersistenceService.DeleteConnection:output_type -> persistence.DeleteConnectionRsp
	7,  // 34: persistence.PersistenceService.Ping:output_type -> persistence.PingConnectionRsp
	37, // 35: persistence.PersistenceService.Count:output_type -> persistence.CountRsp
	11, // 36: persistence.PersistenceService.InsertOne:output_type -> persistence.InsertOneRsp
	9,  // 37: persistence.PersistenceService.InsertMany:output_type -> persistence.InsertManyRsp
	13, // 38: persistence.PersistenceService.Find:output_type -> persistence.FindResp
	15, // 39: persistence.PersistenceService.FindOne:output_type -> persistence.FindOneResp
	17, // 40: persistence.PersistenceService.Aggregate:output_type -> persistence.AggregateResp
	19, // 41: persistence.PersistenceService.Update:output_type -> persistence.UpdateRsp
	21, // 42: persistence.PersistenceService.UpdateOne:output_type -> persistence.UpdateOneRsp
	23, // 43: persistence.PersistenceService.ReplaceOne:output_type -> persistence.ReplaceOneRsp
	25, // 44: persistence.PersistenceService.Delete:output_type -> persistence.DeleteRsp
	27, // 45: persistence.PersistenceService.DeleteOne:output_type -> persistence.DeleteOneRsp
	39, // 46: persistence.PersistenceService.RunAdminCmd:output_type -> persistence.RunAdminCmdRsp
	25, // [25:47] is the sub-list for method output_type
	3,  // [3:25] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_persistence_proto_init() }
func file_persistence_proto_init() {
	if File_persistence_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_persistence_proto_rawDesc), len(file_persistence_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_persistence_proto_goTypes,
		DependencyIndexes: file_persistence_proto_depIdxs,
		EnumInfos:         file_persistence_proto_enumTypes,
		MessageInfos:      file_persistence_proto_msgTypes,
	}.Build()
	File_persistence_proto = out.File
	file_persistence_proto_goTypes = nil
	file_persistence_proto_depIdxs = nil
}
