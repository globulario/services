// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: rbac.proto

package rbacpb

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PermissionType int32

const (
	PermissionType_DENIED  PermissionType = 0
	PermissionType_ALLOWED PermissionType = 1
)

// Enum value maps for PermissionType.
var (
	PermissionType_name = map[int32]string{
		0: "DENIED",
		1: "ALLOWED",
	}
	PermissionType_value = map[string]int32{
		"DENIED":  0,
		"ALLOWED": 1,
	}
)

func (x PermissionType) Enum() *PermissionType {
	p := new(PermissionType)
	*p = x
	return p
}

func (x PermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_proto_enumTypes[0].Descriptor()
}

func (PermissionType) Type() protoreflect.EnumType {
	return &file_rbac_proto_enumTypes[0]
}

func (x PermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionType.Descriptor instead.
func (PermissionType) EnumDescriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{0}
}

type SubjectType int32

const (
	SubjectType_ACCOUNT      SubjectType = 0
	SubjectType_PEER         SubjectType = 1
	SubjectType_GROUP        SubjectType = 2
	SubjectType_ORGANIZATION SubjectType = 3
	SubjectType_APPLICATION  SubjectType = 4
	SubjectType_ROLE         SubjectType = 5
)

// Enum value maps for SubjectType.
var (
	SubjectType_name = map[int32]string{
		0: "ACCOUNT",
		1: "PEER",
		2: "GROUP",
		3: "ORGANIZATION",
		4: "APPLICATION",
		5: "ROLE",
	}
	SubjectType_value = map[string]int32{
		"ACCOUNT":      0,
		"PEER":         1,
		"GROUP":        2,
		"ORGANIZATION": 3,
		"APPLICATION":  4,
		"ROLE":         5,
	}
)

func (x SubjectType) Enum() *SubjectType {
	p := new(SubjectType)
	*p = x
	return p
}

func (x SubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_proto_enumTypes[1].Descriptor()
}

func (SubjectType) Type() protoreflect.EnumType {
	return &file_rbac_proto_enumTypes[1]
}

func (x SubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectType.Descriptor instead.
func (SubjectType) EnumDescriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{1}
}

// Permission message struct.
type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // read, write, delete ... what you need
	Applications  []string `protobuf:"bytes,2,rep,name=applications,proto3" json:"applications,omitempty"`
	Peers         []string `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	Accounts      []string `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Groups        []string `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	Organizations []string `protobuf:"bytes,6,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *Permission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Permission) GetApplications() []string {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *Permission) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *Permission) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *Permission) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Permission) GetOrganizations() []string {
	if x != nil {
		return x.Organizations
	}
	return nil
}

type Permissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string        `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ResourceType string        `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Owners       *Permission   `protobuf:"bytes,3,opt,name=owners,proto3" json:"owners,omitempty"`
	Allowed      []*Permission `protobuf:"bytes,4,rep,name=allowed,proto3" json:"allowed,omitempty"`
	Denied       []*Permission `protobuf:"bytes,5,rep,name=denied,proto3" json:"denied,omitempty"`
}

func (x *Permissions) Reset() {
	*x = Permissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permissions) ProtoMessage() {}

func (x *Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permissions.ProtoReflect.Descriptor instead.
func (*Permissions) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *Permissions) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Permissions) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Permissions) GetOwners() *Permission {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Permissions) GetAllowed() []*Permission {
	if x != nil {
		return x.Allowed
	}
	return nil
}

func (x *Permissions) GetDenied() []*Permission {
	if x != nil {
		return x.Denied
	}
	return nil
}

// * Return a resource permissions *
type GetResourcePermissionsRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GetResourcePermissionsRqst) Reset() {
	*x = GetResourcePermissionsRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcePermissionsRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsRqst) ProtoMessage() {}

func (x *GetResourcePermissionsRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsRqst.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *GetResourcePermissionsRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// * Get resource permissions *
type GetResourcePermissionsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions *Permissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *GetResourcePermissionsRsp) Reset() {
	*x = GetResourcePermissionsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcePermissionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsRsp) ProtoMessage() {}

func (x *GetResourcePermissionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsRsp.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *GetResourcePermissionsRsp) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// * Return a resource permissions *
type GetResourcePermissionsByResourceTypeRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
}

func (x *GetResourcePermissionsByResourceTypeRqst) Reset() {
	*x = GetResourcePermissionsByResourceTypeRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcePermissionsByResourceTypeRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsByResourceTypeRqst) ProtoMessage() {}

func (x *GetResourcePermissionsByResourceTypeRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsByResourceTypeRqst.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsByResourceTypeRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{4}
}

func (x *GetResourcePermissionsByResourceTypeRqst) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

// * Get resource permissions *
type GetResourcePermissionsByResourceTypeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []*Permissions `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *GetResourcePermissionsByResourceTypeRsp) Reset() {
	*x = GetResourcePermissionsByResourceTypeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcePermissionsByResourceTypeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsByResourceTypeRsp) ProtoMessage() {}

func (x *GetResourcePermissionsByResourceTypeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsByResourceTypeRsp.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsByResourceTypeRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{5}
}

func (x *GetResourcePermissionsByResourceTypeRsp) GetPermissions() []*Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// * Return a resource permissions *
type GetResourcePermissionsBySubjectRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject      string      `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectType  SubjectType `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=rbac.SubjectType" json:"subject_type,omitempty"`
	ResourceType string      `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
}

func (x *GetResourcePermissionsBySubjectRqst) Reset() {
	*x = GetResourcePermissionsBySubjectRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcePermissionsBySubjectRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsBySubjectRqst) ProtoMessage() {}

func (x *GetResourcePermissionsBySubjectRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsBySubjectRqst.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsBySubjectRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{6}
}

func (x *GetResourcePermissionsBySubjectRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetResourcePermissionsBySubjectRqst) GetSubjectType() SubjectType {
	if x != nil {
		return x.SubjectType
	}
	return SubjectType_ACCOUNT
}

func (x *GetResourcePermissionsBySubjectRqst) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

// * Get resource permissions *
type GetResourcePermissionsBySubjectRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []*Permissions `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *GetResourcePermissionsBySubjectRsp) Reset() {
	*x = GetResourcePermissionsBySubjectRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcePermissionsBySubjectRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsBySubjectRsp) ProtoMessage() {}

func (x *GetResourcePermissionsBySubjectRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsBySubjectRsp.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsBySubjectRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7}
}

func (x *GetResourcePermissionsBySubjectRsp) GetPermissions() []*Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// * Delete a resource permissions *
type DeleteResourcePermissionsRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DeleteResourcePermissionsRqst) Reset() {
	*x = DeleteResourcePermissionsRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourcePermissionsRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcePermissionsRqst) ProtoMessage() {}

func (x *DeleteResourcePermissionsRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcePermissionsRqst.ProtoReflect.Descriptor instead.
func (*DeleteResourcePermissionsRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteResourcePermissionsRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// * Return permissions *
type DeleteResourcePermissionsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions *Permissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *DeleteResourcePermissionsRsp) Reset() {
	*x = DeleteResourcePermissionsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourcePermissionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcePermissionsRsp) ProtoMessage() {}

func (x *DeleteResourcePermissionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcePermissionsRsp.ProtoReflect.Descriptor instead.
func (*DeleteResourcePermissionsRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteResourcePermissionsRsp) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// * Delete specific resource permission *
type DeleteResourcePermissionRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string         `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Name string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type PermissionType `protobuf:"varint,3,opt,name=type,proto3,enum=rbac.PermissionType" json:"type,omitempty"`
}

func (x *DeleteResourcePermissionRqst) Reset() {
	*x = DeleteResourcePermissionRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourcePermissionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcePermissionRqst) ProtoMessage() {}

func (x *DeleteResourcePermissionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcePermissionRqst.ProtoReflect.Descriptor instead.
func (*DeleteResourcePermissionRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteResourcePermissionRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DeleteResourcePermissionRqst) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteResourcePermissionRqst) GetType() PermissionType {
	if x != nil {
		return x.Type
	}
	return PermissionType_DENIED
}

// * Delete permissions *
type DeleteResourcePermissionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResourcePermissionRsp) Reset() {
	*x = DeleteResourcePermissionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourcePermissionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcePermissionRsp) ProtoMessage() {}

func (x *DeleteResourcePermissionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcePermissionRsp.ProtoReflect.Descriptor instead.
func (*DeleteResourcePermissionRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{11}
}

// * Set all resource permissions *
type SetResourcePermissionsRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string       `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ResourceType string       `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	Permissions  *Permissions `protobuf:"bytes,3,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *SetResourcePermissionsRqst) Reset() {
	*x = SetResourcePermissionsRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetResourcePermissionsRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResourcePermissionsRqst) ProtoMessage() {}

func (x *SetResourcePermissionsRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResourcePermissionsRqst.ProtoReflect.Descriptor instead.
func (*SetResourcePermissionsRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{12}
}

func (x *SetResourcePermissionsRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SetResourcePermissionsRqst) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *SetResourcePermissionsRqst) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type SetResourcePermissionsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetResourcePermissionsRsp) Reset() {
	*x = SetResourcePermissionsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetResourcePermissionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResourcePermissionsRsp) ProtoMessage() {}

func (x *SetResourcePermissionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResourcePermissionsRsp.ProtoReflect.Descriptor instead.
func (*SetResourcePermissionsRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{13}
}

type GetResourcePermissionRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string         `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Name string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type PermissionType `protobuf:"varint,3,opt,name=type,proto3,enum=rbac.PermissionType" json:"type,omitempty"`
}

func (x *GetResourcePermissionRqst) Reset() {
	*x = GetResourcePermissionRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcePermissionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionRqst) ProtoMessage() {}

func (x *GetResourcePermissionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionRqst.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{14}
}

func (x *GetResourcePermissionRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetResourcePermissionRqst) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetResourcePermissionRqst) GetType() PermissionType {
	if x != nil {
		return x.Type
	}
	return PermissionType_DENIED
}

type GetResourcePermissionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission *Permission `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *GetResourcePermissionRsp) Reset() {
	*x = GetResourcePermissionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcePermissionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionRsp) ProtoMessage() {}

func (x *GetResourcePermissionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionRsp.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{15}
}

func (x *GetResourcePermissionRsp) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

type SetResourcePermissionRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string         `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Permission *Permission    `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
	Type       PermissionType `protobuf:"varint,3,opt,name=type,proto3,enum=rbac.PermissionType" json:"type,omitempty"`
}

func (x *SetResourcePermissionRqst) Reset() {
	*x = SetResourcePermissionRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetResourcePermissionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResourcePermissionRqst) ProtoMessage() {}

func (x *SetResourcePermissionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResourcePermissionRqst.ProtoReflect.Descriptor instead.
func (*SetResourcePermissionRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{16}
}

func (x *SetResourcePermissionRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SetResourcePermissionRqst) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *SetResourcePermissionRqst) GetType() PermissionType {
	if x != nil {
		return x.Type
	}
	return PermissionType_DENIED
}

type SetResourcePermissionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetResourcePermissionRsp) Reset() {
	*x = SetResourcePermissionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetResourcePermissionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResourcePermissionRsp) ProtoMessage() {}

func (x *SetResourcePermissionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResourcePermissionRsp.ProtoReflect.Descriptor instead.
func (*SetResourcePermissionRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{17}
}

type AddResourceOwnerRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string      `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ResourceType string      `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	Subject      string      `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	Type         SubjectType `protobuf:"varint,4,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
}

func (x *AddResourceOwnerRqst) Reset() {
	*x = AddResourceOwnerRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddResourceOwnerRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResourceOwnerRqst) ProtoMessage() {}

func (x *AddResourceOwnerRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResourceOwnerRqst.ProtoReflect.Descriptor instead.
func (*AddResourceOwnerRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{18}
}

func (x *AddResourceOwnerRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AddResourceOwnerRqst) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *AddResourceOwnerRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *AddResourceOwnerRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

type AddResourceOwnerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddResourceOwnerRsp) Reset() {
	*x = AddResourceOwnerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddResourceOwnerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResourceOwnerRsp) ProtoMessage() {}

func (x *AddResourceOwnerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResourceOwnerRsp.ProtoReflect.Descriptor instead.
func (*AddResourceOwnerRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{19}
}

type RemoveResourceOwnerRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string      `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Subject string      `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Type    SubjectType `protobuf:"varint,3,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
}

func (x *RemoveResourceOwnerRqst) Reset() {
	*x = RemoveResourceOwnerRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveResourceOwnerRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveResourceOwnerRqst) ProtoMessage() {}

func (x *RemoveResourceOwnerRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveResourceOwnerRqst.ProtoReflect.Descriptor instead.
func (*RemoveResourceOwnerRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{20}
}

func (x *RemoveResourceOwnerRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RemoveResourceOwnerRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *RemoveResourceOwnerRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

type RemoveResourceOwnerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveResourceOwnerRsp) Reset() {
	*x = RemoveResourceOwnerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveResourceOwnerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveResourceOwnerRsp) ProtoMessage() {}

func (x *RemoveResourceOwnerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveResourceOwnerRsp.ProtoReflect.Descriptor instead.
func (*RemoveResourceOwnerRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{21}
}

type DeleteAllAccessRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string      `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Type    SubjectType `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
}

func (x *DeleteAllAccessRqst) Reset() {
	*x = DeleteAllAccessRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllAccessRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllAccessRqst) ProtoMessage() {}

func (x *DeleteAllAccessRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllAccessRqst.ProtoReflect.Descriptor instead.
func (*DeleteAllAccessRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteAllAccessRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *DeleteAllAccessRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

type DeleteAllAccessRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAllAccessRsp) Reset() {
	*x = DeleteAllAccessRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllAccessRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllAccessRsp) ProtoMessage() {}

func (x *DeleteAllAccessRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllAccessRsp.ProtoReflect.Descriptor instead.
func (*DeleteAllAccessRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{23}
}

type ValidateAccessRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject    string      `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Type       SubjectType `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
	Path       string      `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`             // The Resource path
	Permission string      `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission,omitempty"` // the name of the permission (read, write, execute...)
}

func (x *ValidateAccessRqst) Reset() {
	*x = ValidateAccessRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateAccessRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAccessRqst) ProtoMessage() {}

func (x *ValidateAccessRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAccessRqst.ProtoReflect.Descriptor instead.
func (*ValidateAccessRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{24}
}

func (x *ValidateAccessRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ValidateAccessRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *ValidateAccessRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ValidateAccessRqst) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

type ValidateAccessRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAccess    bool `protobuf:"varint,1,opt,name=hasAccess,proto3" json:"hasAccess,omitempty"`
	AccessDenied bool `protobuf:"varint,2,opt,name=accessDenied,proto3" json:"accessDenied,omitempty"`
}

func (x *ValidateAccessRsp) Reset() {
	*x = ValidateAccessRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateAccessRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAccessRsp) ProtoMessage() {}

func (x *ValidateAccessRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAccessRsp.ProtoReflect.Descriptor instead.
func (*ValidateAccessRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{25}
}

func (x *ValidateAccessRsp) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *ValidateAccessRsp) GetAccessDenied() bool {
	if x != nil {
		return x.AccessDenied
	}
	return false
}

type GetActionResourceInfosRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *GetActionResourceInfosRqst) Reset() {
	*x = GetActionResourceInfosRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActionResourceInfosRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionResourceInfosRqst) ProtoMessage() {}

func (x *GetActionResourceInfosRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionResourceInfosRqst.ProtoReflect.Descriptor instead.
func (*GetActionResourceInfosRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{26}
}

func (x *GetActionResourceInfosRqst) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type ResourceInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`          // The parameter index.
	Permission string `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"` // The permission name, read, write, ect...
	Path       string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`             // The resource path (use by ValidateActionRsp)
	Field      string `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`           // if the parameter is an object that will given the field name that contain the resource path. ex: video.ID ("ID" will contain the resource)
}

func (x *ResourceInfos) Reset() {
	*x = ResourceInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInfos) ProtoMessage() {}

func (x *ResourceInfos) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInfos.ProtoReflect.Descriptor instead.
func (*ResourceInfos) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{27}
}

func (x *ResourceInfos) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ResourceInfos) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *ResourceInfos) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ResourceInfos) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type GetActionResourceInfosRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*ResourceInfos `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *GetActionResourceInfosRsp) Reset() {
	*x = GetActionResourceInfosRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActionResourceInfosRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionResourceInfosRsp) ProtoMessage() {}

func (x *GetActionResourceInfosRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionResourceInfosRsp.ProtoReflect.Descriptor instead.
func (*GetActionResourceInfosRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{28}
}

func (x *GetActionResourceInfosRsp) GetInfos() []*ResourceInfos {
	if x != nil {
		return x.Infos
	}
	return nil
}

type ValidateActionRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string           `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Type    SubjectType      `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
	Action  string           `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"` // The Action path (grpc path)
	Infos   []*ResourceInfos `protobuf:"bytes,4,rep,name=infos,proto3" json:"infos,omitempty"`   // The resource information associated with the rpc call.
}

func (x *ValidateActionRqst) Reset() {
	*x = ValidateActionRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateActionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateActionRqst) ProtoMessage() {}

func (x *ValidateActionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateActionRqst.ProtoReflect.Descriptor instead.
func (*ValidateActionRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{29}
}

func (x *ValidateActionRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ValidateActionRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *ValidateActionRqst) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ValidateActionRqst) GetInfos() []*ResourceInfos {
	if x != nil {
		return x.Infos
	}
	return nil
}

type ValidateActionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAccess    bool `protobuf:"varint,1,opt,name=hasAccess,proto3" json:"hasAccess,omitempty"`       // if the user can run the action
	AccessDenied bool `protobuf:"varint,2,opt,name=accessDenied,proto3" json:"accessDenied,omitempty"` // if the resource path access is denied.
}

func (x *ValidateActionRsp) Reset() {
	*x = ValidateActionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateActionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateActionRsp) ProtoMessage() {}

func (x *ValidateActionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateActionRsp.ProtoReflect.Descriptor instead.
func (*ValidateActionRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{30}
}

func (x *ValidateActionRsp) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *ValidateActionRsp) GetAccessDenied() bool {
	if x != nil {
		return x.AccessDenied
	}
	return false
}

type SetActionResourcesPermissionsRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions *_struct.Struct `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *SetActionResourcesPermissionsRqst) Reset() {
	*x = SetActionResourcesPermissionsRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActionResourcesPermissionsRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActionResourcesPermissionsRqst) ProtoMessage() {}

func (x *SetActionResourcesPermissionsRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActionResourcesPermissionsRqst.ProtoReflect.Descriptor instead.
func (*SetActionResourcesPermissionsRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{31}
}

func (x *SetActionResourcesPermissionsRqst) GetPermissions() *_struct.Struct {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type SetActionResourcesPermissionsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetActionResourcesPermissionsRsp) Reset() {
	*x = SetActionResourcesPermissionsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActionResourcesPermissionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActionResourcesPermissionsRsp) ProtoMessage() {}

func (x *SetActionResourcesPermissionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActionResourcesPermissionsRsp.ProtoReflect.Descriptor instead.
func (*SetActionResourcesPermissionsRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{32}
}

// *
// Resource Shared. The resource can be share by the
type Share struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource path must be unique on the domain.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The domain from where the share is located.
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// List of specific object to share with
	Applications  []string `protobuf:"bytes,3,rep,name=applications,proto3" json:"applications,omitempty"`
	Peers         []string `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
	Accounts      []string `protobuf:"bytes,5,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Groups        []string `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty"`
	Organizations []string `protobuf:"bytes,7,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *Share) Reset() {
	*x = Share{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Share) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Share) ProtoMessage() {}

func (x *Share) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Share.ProtoReflect.Descriptor instead.
func (*Share) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{33}
}

func (x *Share) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Share) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Share) GetApplications() []string {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *Share) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *Share) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *Share) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Share) GetOrganizations() []string {
	if x != nil {
		return x.Organizations
	}
	return nil
}

// *
// Get the list of accessible resource for a given subject.
type GetSharedResourceRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string      `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Type    SubjectType `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
	Owner   string      `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"` // optional, it filter result for a given owner...
}

func (x *GetSharedResourceRqst) Reset() {
	*x = GetSharedResourceRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSharedResourceRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSharedResourceRqst) ProtoMessage() {}

func (x *GetSharedResourceRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSharedResourceRqst.ProtoReflect.Descriptor instead.
func (*GetSharedResourceRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{34}
}

func (x *GetSharedResourceRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetSharedResourceRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *GetSharedResourceRqst) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type GetSharedResourceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedResource []*Share `protobuf:"bytes,1,rep,name=sharedResource,proto3" json:"sharedResource,omitempty"`
}

func (x *GetSharedResourceRsp) Reset() {
	*x = GetSharedResourceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSharedResourceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSharedResourceRsp) ProtoMessage() {}

func (x *GetSharedResourceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSharedResourceRsp.ProtoReflect.Descriptor instead.
func (*GetSharedResourceRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{35}
}

func (x *GetSharedResourceRsp) GetSharedResource() []*Share {
	if x != nil {
		return x.SharedResource
	}
	return nil
}

// *
// Remove Subject from the list of share.
type RemoveSubjectFromShareRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string      `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Type    SubjectType `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
	Domain  string      `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Path    string      `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoveSubjectFromShareRqst) Reset() {
	*x = RemoveSubjectFromShareRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubjectFromShareRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubjectFromShareRqst) ProtoMessage() {}

func (x *RemoveSubjectFromShareRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubjectFromShareRqst.ProtoReflect.Descriptor instead.
func (*RemoveSubjectFromShareRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{36}
}

func (x *RemoveSubjectFromShareRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *RemoveSubjectFromShareRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *RemoveSubjectFromShareRqst) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RemoveSubjectFromShareRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RemoveSubjectFromShareRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSubjectFromShareRsp) Reset() {
	*x = RemoveSubjectFromShareRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubjectFromShareRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubjectFromShareRsp) ProtoMessage() {}

func (x *RemoveSubjectFromShareRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubjectFromShareRsp.ProtoReflect.Descriptor instead.
func (*RemoveSubjectFromShareRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{37}
}

// *
// Delete all share for a subject. That can be use if a subject is delete...
type DeleteSubjectShareRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string      `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Type    SubjectType `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
}

func (x *DeleteSubjectShareRqst) Reset() {
	*x = DeleteSubjectShareRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectShareRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectShareRqst) ProtoMessage() {}

func (x *DeleteSubjectShareRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectShareRqst.ProtoReflect.Descriptor instead.
func (*DeleteSubjectShareRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteSubjectShareRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *DeleteSubjectShareRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

type DeleteSubjectShareRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSubjectShareRsp) Reset() {
	*x = DeleteSubjectShareRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectShareRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectShareRsp) ProtoMessage() {}

func (x *DeleteSubjectShareRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectShareRsp.ProtoReflect.Descriptor instead.
func (*DeleteSubjectShareRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{39}
}

type SetSubjectAllocatedSpaceRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject        string      `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Type           SubjectType `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
	AllocatedSpace uint64      `protobuf:"varint,3,opt,name=allocated_space,json=allocatedSpace,proto3" json:"allocated_space,omitempty"`
}

func (x *SetSubjectAllocatedSpaceRqst) Reset() {
	*x = SetSubjectAllocatedSpaceRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSubjectAllocatedSpaceRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubjectAllocatedSpaceRqst) ProtoMessage() {}

func (x *SetSubjectAllocatedSpaceRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubjectAllocatedSpaceRqst.ProtoReflect.Descriptor instead.
func (*SetSubjectAllocatedSpaceRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{40}
}

func (x *SetSubjectAllocatedSpaceRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SetSubjectAllocatedSpaceRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *SetSubjectAllocatedSpaceRqst) GetAllocatedSpace() uint64 {
	if x != nil {
		return x.AllocatedSpace
	}
	return 0
}

type SetSubjectAllocatedSpaceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSubjectAllocatedSpaceRsp) Reset() {
	*x = SetSubjectAllocatedSpaceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSubjectAllocatedSpaceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubjectAllocatedSpaceRsp) ProtoMessage() {}

func (x *SetSubjectAllocatedSpaceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubjectAllocatedSpaceRsp.ProtoReflect.Descriptor instead.
func (*SetSubjectAllocatedSpaceRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{41}
}

type GetSubjectAllocatedSpaceRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string      `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Type    SubjectType `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
}

func (x *GetSubjectAllocatedSpaceRqst) Reset() {
	*x = GetSubjectAllocatedSpaceRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectAllocatedSpaceRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectAllocatedSpaceRqst) ProtoMessage() {}

func (x *GetSubjectAllocatedSpaceRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectAllocatedSpaceRqst.ProtoReflect.Descriptor instead.
func (*GetSubjectAllocatedSpaceRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{42}
}

func (x *GetSubjectAllocatedSpaceRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetSubjectAllocatedSpaceRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

type GetSubjectAllocatedSpaceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocatedSpace uint64 `protobuf:"varint,3,opt,name=allocated_space,json=allocatedSpace,proto3" json:"allocated_space,omitempty"`
}

func (x *GetSubjectAllocatedSpaceRsp) Reset() {
	*x = GetSubjectAllocatedSpaceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectAllocatedSpaceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectAllocatedSpaceRsp) ProtoMessage() {}

func (x *GetSubjectAllocatedSpaceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectAllocatedSpaceRsp.ProtoReflect.Descriptor instead.
func (*GetSubjectAllocatedSpaceRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{43}
}

func (x *GetSubjectAllocatedSpaceRsp) GetAllocatedSpace() uint64 {
	if x != nil {
		return x.AllocatedSpace
	}
	return 0
}

type GetSubjectAvailableSpaceRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject string      `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Type    SubjectType `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
}

func (x *GetSubjectAvailableSpaceRqst) Reset() {
	*x = GetSubjectAvailableSpaceRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectAvailableSpaceRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectAvailableSpaceRqst) ProtoMessage() {}

func (x *GetSubjectAvailableSpaceRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectAvailableSpaceRqst.ProtoReflect.Descriptor instead.
func (*GetSubjectAvailableSpaceRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{44}
}

func (x *GetSubjectAvailableSpaceRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetSubjectAvailableSpaceRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

type GetSubjectAvailableSpaceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableSpace uint64 `protobuf:"varint,3,opt,name=available_space,json=availableSpace,proto3" json:"available_space,omitempty"`
}

func (x *GetSubjectAvailableSpaceRsp) Reset() {
	*x = GetSubjectAvailableSpaceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectAvailableSpaceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectAvailableSpaceRsp) ProtoMessage() {}

func (x *GetSubjectAvailableSpaceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectAvailableSpaceRsp.ProtoReflect.Descriptor instead.
func (*GetSubjectAvailableSpaceRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{45}
}

func (x *GetSubjectAvailableSpaceRsp) GetAvailableSpace() uint64 {
	if x != nil {
		return x.AvailableSpace
	}
	return 0
}

type ValidateSubjectSpaceRqst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject       string      `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Type          SubjectType `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`
	RequiredSpace uint64      `protobuf:"varint,3,opt,name=required_space,json=requiredSpace,proto3" json:"required_space,omitempty"`
}

func (x *ValidateSubjectSpaceRqst) Reset() {
	*x = ValidateSubjectSpaceRqst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSubjectSpaceRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSubjectSpaceRqst) ProtoMessage() {}

func (x *ValidateSubjectSpaceRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSubjectSpaceRqst.ProtoReflect.Descriptor instead.
func (*ValidateSubjectSpaceRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{46}
}

func (x *ValidateSubjectSpaceRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ValidateSubjectSpaceRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *ValidateSubjectSpaceRqst) GetRequiredSpace() uint64 {
	if x != nil {
		return x.RequiredSpace
	}
	return 0
}

type ValidateSubjectSpaceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasSpace bool `protobuf:"varint,1,opt,name=hasSpace,proto3" json:"hasSpace,omitempty"`
}

func (x *ValidateSubjectSpaceRsp) Reset() {
	*x = ValidateSubjectSpaceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbac_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSubjectSpaceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSubjectSpaceRsp) ProtoMessage() {}

func (x *ValidateSubjectSpaceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSubjectSpaceRsp.ProtoReflect.Descriptor instead.
func (*ValidateSubjectSpaceRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{47}
}

func (x *ValidateSubjectSpaceRsp) GetHasSpace() bool {
	if x != nil {
		return x.HasSpace
	}
	return false
}

var File_rbac_proto protoreflect.FileDescriptor

var file_rbac_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x62,
	0x61, 0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb4, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x22, 0x30, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x71, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x50, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x33, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4e, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x71, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x33, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x71, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x59, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x33, 0x0a, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x71, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x53, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x70, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x71, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x71, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70,
	0x22, 0x6d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x71, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x4c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01,
	0x0a, 0x19, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x71, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x30, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x71, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x73, 0x70,
	0x22, 0x6e, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x71, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x56, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x71, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x71, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61,
	0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x22, 0x34, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x71, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x6f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x46, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x71, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x55, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61,
	0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68,
	0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x21,
	0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x71, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x22, 0x0a, 0x20,
	0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70,
	0x22, 0xc7, 0x01, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6e, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x71, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x33, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x71, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x73, 0x70,
	0x22, 0x59, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x71, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x73, 0x70, 0x22, 0x88, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x71, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x73, 0x70, 0x22, 0x5f,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x71, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x46, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x71, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x82, 0x01, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x71, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x35, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x2a, 0x29, 0x0a, 0x0e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x5c, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x45, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41,
	0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x4f, 0x4c, 0x45, 0x10, 0x05, 0x32, 0x87, 0x10, 0x0a, 0x0b, 0x52, 0x62, 0x61, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x20, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x71, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x71, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x23, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x71, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x71, 0x73, 0x74, 0x12, 0x58,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x71,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x73, 0x70, 0x12, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x87, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x73, 0x70, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x73,
	0x70, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x71, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x52,
	0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x52, 0x71, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x46, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x71, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x70, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x27, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x20, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x73, 0x70, 0x12, 0x43,
	0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12, 0x61, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x61, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x71, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x5b, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x71, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x73, 0x70, 0x12, 0x4f,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x71,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x73, 0x70, 0x42,
	0x0d, 0x5a, 0x0b, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rbac_proto_rawDescOnce sync.Once
	file_rbac_proto_rawDescData = file_rbac_proto_rawDesc
)

func file_rbac_proto_rawDescGZIP() []byte {
	file_rbac_proto_rawDescOnce.Do(func() {
		file_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(file_rbac_proto_rawDescData)
	})
	return file_rbac_proto_rawDescData
}

var file_rbac_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_rbac_proto_goTypes = []interface{}{
	(PermissionType)(0),                              // 0: rbac.PermissionType
	(SubjectType)(0),                                 // 1: rbac.SubjectType
	(*Permission)(nil),                               // 2: rbac.Permission
	(*Permissions)(nil),                              // 3: rbac.Permissions
	(*GetResourcePermissionsRqst)(nil),               // 4: rbac.GetResourcePermissionsRqst
	(*GetResourcePermissionsRsp)(nil),                // 5: rbac.GetResourcePermissionsRsp
	(*GetResourcePermissionsByResourceTypeRqst)(nil), // 6: rbac.GetResourcePermissionsByResourceTypeRqst
	(*GetResourcePermissionsByResourceTypeRsp)(nil),  // 7: rbac.GetResourcePermissionsByResourceTypeRsp
	(*GetResourcePermissionsBySubjectRqst)(nil),      // 8: rbac.GetResourcePermissionsBySubjectRqst
	(*GetResourcePermissionsBySubjectRsp)(nil),       // 9: rbac.GetResourcePermissionsBySubjectRsp
	(*DeleteResourcePermissionsRqst)(nil),            // 10: rbac.DeleteResourcePermissionsRqst
	(*DeleteResourcePermissionsRsp)(nil),             // 11: rbac.DeleteResourcePermissionsRsp
	(*DeleteResourcePermissionRqst)(nil),             // 12: rbac.DeleteResourcePermissionRqst
	(*DeleteResourcePermissionRsp)(nil),              // 13: rbac.DeleteResourcePermissionRsp
	(*SetResourcePermissionsRqst)(nil),               // 14: rbac.SetResourcePermissionsRqst
	(*SetResourcePermissionsRsp)(nil),                // 15: rbac.SetResourcePermissionsRsp
	(*GetResourcePermissionRqst)(nil),                // 16: rbac.GetResourcePermissionRqst
	(*GetResourcePermissionRsp)(nil),                 // 17: rbac.GetResourcePermissionRsp
	(*SetResourcePermissionRqst)(nil),                // 18: rbac.SetResourcePermissionRqst
	(*SetResourcePermissionRsp)(nil),                 // 19: rbac.SetResourcePermissionRsp
	(*AddResourceOwnerRqst)(nil),                     // 20: rbac.AddResourceOwnerRqst
	(*AddResourceOwnerRsp)(nil),                      // 21: rbac.AddResourceOwnerRsp
	(*RemoveResourceOwnerRqst)(nil),                  // 22: rbac.RemoveResourceOwnerRqst
	(*RemoveResourceOwnerRsp)(nil),                   // 23: rbac.RemoveResourceOwnerRsp
	(*DeleteAllAccessRqst)(nil),                      // 24: rbac.DeleteAllAccessRqst
	(*DeleteAllAccessRsp)(nil),                       // 25: rbac.DeleteAllAccessRsp
	(*ValidateAccessRqst)(nil),                       // 26: rbac.ValidateAccessRqst
	(*ValidateAccessRsp)(nil),                        // 27: rbac.ValidateAccessRsp
	(*GetActionResourceInfosRqst)(nil),               // 28: rbac.GetActionResourceInfosRqst
	(*ResourceInfos)(nil),                            // 29: rbac.ResourceInfos
	(*GetActionResourceInfosRsp)(nil),                // 30: rbac.GetActionResourceInfosRsp
	(*ValidateActionRqst)(nil),                       // 31: rbac.ValidateActionRqst
	(*ValidateActionRsp)(nil),                        // 32: rbac.ValidateActionRsp
	(*SetActionResourcesPermissionsRqst)(nil),        // 33: rbac.SetActionResourcesPermissionsRqst
	(*SetActionResourcesPermissionsRsp)(nil),         // 34: rbac.SetActionResourcesPermissionsRsp
	(*Share)(nil),                                    // 35: rbac.Share
	(*GetSharedResourceRqst)(nil),                    // 36: rbac.GetSharedResourceRqst
	(*GetSharedResourceRsp)(nil),                     // 37: rbac.GetSharedResourceRsp
	(*RemoveSubjectFromShareRqst)(nil),               // 38: rbac.RemoveSubjectFromShareRqst
	(*RemoveSubjectFromShareRsp)(nil),                // 39: rbac.RemoveSubjectFromShareRsp
	(*DeleteSubjectShareRqst)(nil),                   // 40: rbac.DeleteSubjectShareRqst
	(*DeleteSubjectShareRsp)(nil),                    // 41: rbac.DeleteSubjectShareRsp
	(*SetSubjectAllocatedSpaceRqst)(nil),             // 42: rbac.SetSubjectAllocatedSpaceRqst
	(*SetSubjectAllocatedSpaceRsp)(nil),              // 43: rbac.SetSubjectAllocatedSpaceRsp
	(*GetSubjectAllocatedSpaceRqst)(nil),             // 44: rbac.GetSubjectAllocatedSpaceRqst
	(*GetSubjectAllocatedSpaceRsp)(nil),              // 45: rbac.GetSubjectAllocatedSpaceRsp
	(*GetSubjectAvailableSpaceRqst)(nil),             // 46: rbac.GetSubjectAvailableSpaceRqst
	(*GetSubjectAvailableSpaceRsp)(nil),              // 47: rbac.GetSubjectAvailableSpaceRsp
	(*ValidateSubjectSpaceRqst)(nil),                 // 48: rbac.ValidateSubjectSpaceRqst
	(*ValidateSubjectSpaceRsp)(nil),                  // 49: rbac.ValidateSubjectSpaceRsp
	(*_struct.Struct)(nil),                           // 50: google.protobuf.Struct
}
var file_rbac_proto_depIdxs = []int32{
	2,  // 0: rbac.Permissions.owners:type_name -> rbac.Permission
	2,  // 1: rbac.Permissions.allowed:type_name -> rbac.Permission
	2,  // 2: rbac.Permissions.denied:type_name -> rbac.Permission
	3,  // 3: rbac.GetResourcePermissionsRsp.permissions:type_name -> rbac.Permissions
	3,  // 4: rbac.GetResourcePermissionsByResourceTypeRsp.permissions:type_name -> rbac.Permissions
	1,  // 5: rbac.GetResourcePermissionsBySubjectRqst.subject_type:type_name -> rbac.SubjectType
	3,  // 6: rbac.GetResourcePermissionsBySubjectRsp.permissions:type_name -> rbac.Permissions
	3,  // 7: rbac.DeleteResourcePermissionsRsp.permissions:type_name -> rbac.Permissions
	0,  // 8: rbac.DeleteResourcePermissionRqst.type:type_name -> rbac.PermissionType
	3,  // 9: rbac.SetResourcePermissionsRqst.permissions:type_name -> rbac.Permissions
	0,  // 10: rbac.GetResourcePermissionRqst.type:type_name -> rbac.PermissionType
	2,  // 11: rbac.GetResourcePermissionRsp.permission:type_name -> rbac.Permission
	2,  // 12: rbac.SetResourcePermissionRqst.permission:type_name -> rbac.Permission
	0,  // 13: rbac.SetResourcePermissionRqst.type:type_name -> rbac.PermissionType
	1,  // 14: rbac.AddResourceOwnerRqst.type:type_name -> rbac.SubjectType
	1,  // 15: rbac.RemoveResourceOwnerRqst.type:type_name -> rbac.SubjectType
	1,  // 16: rbac.DeleteAllAccessRqst.type:type_name -> rbac.SubjectType
	1,  // 17: rbac.ValidateAccessRqst.type:type_name -> rbac.SubjectType
	29, // 18: rbac.GetActionResourceInfosRsp.infos:type_name -> rbac.ResourceInfos
	1,  // 19: rbac.ValidateActionRqst.type:type_name -> rbac.SubjectType
	29, // 20: rbac.ValidateActionRqst.infos:type_name -> rbac.ResourceInfos
	50, // 21: rbac.SetActionResourcesPermissionsRqst.permissions:type_name -> google.protobuf.Struct
	1,  // 22: rbac.GetSharedResourceRqst.type:type_name -> rbac.SubjectType
	35, // 23: rbac.GetSharedResourceRsp.sharedResource:type_name -> rbac.Share
	1,  // 24: rbac.RemoveSubjectFromShareRqst.type:type_name -> rbac.SubjectType
	1,  // 25: rbac.DeleteSubjectShareRqst.type:type_name -> rbac.SubjectType
	1,  // 26: rbac.SetSubjectAllocatedSpaceRqst.type:type_name -> rbac.SubjectType
	1,  // 27: rbac.GetSubjectAllocatedSpaceRqst.type:type_name -> rbac.SubjectType
	1,  // 28: rbac.GetSubjectAvailableSpaceRqst.type:type_name -> rbac.SubjectType
	1,  // 29: rbac.ValidateSubjectSpaceRqst.type:type_name -> rbac.SubjectType
	14, // 30: rbac.RbacService.SetResourcePermissions:input_type -> rbac.SetResourcePermissionsRqst
	10, // 31: rbac.RbacService.DeleteResourcePermissions:input_type -> rbac.DeleteResourcePermissionsRqst
	12, // 32: rbac.RbacService.DeleteResourcePermission:input_type -> rbac.DeleteResourcePermissionRqst
	16, // 33: rbac.RbacService.GetResourcePermission:input_type -> rbac.GetResourcePermissionRqst
	18, // 34: rbac.RbacService.SetResourcePermission:input_type -> rbac.SetResourcePermissionRqst
	4,  // 35: rbac.RbacService.GetResourcePermissions:input_type -> rbac.GetResourcePermissionsRqst
	6,  // 36: rbac.RbacService.GetResourcePermissionsByResourceType:input_type -> rbac.GetResourcePermissionsByResourceTypeRqst
	8,  // 37: rbac.RbacService.GetResourcePermissionsBySubject:input_type -> rbac.GetResourcePermissionsBySubjectRqst
	20, // 38: rbac.RbacService.AddResourceOwner:input_type -> rbac.AddResourceOwnerRqst
	22, // 39: rbac.RbacService.RemoveResourceOwner:input_type -> rbac.RemoveResourceOwnerRqst
	24, // 40: rbac.RbacService.DeleteAllAccess:input_type -> rbac.DeleteAllAccessRqst
	26, // 41: rbac.RbacService.ValidateAccess:input_type -> rbac.ValidateAccessRqst
	33, // 42: rbac.RbacService.SetActionResourcesPermissions:input_type -> rbac.SetActionResourcesPermissionsRqst
	28, // 43: rbac.RbacService.GetActionResourceInfos:input_type -> rbac.GetActionResourceInfosRqst
	31, // 44: rbac.RbacService.ValidateAction:input_type -> rbac.ValidateActionRqst
	48, // 45: rbac.RbacService.ValidateSubjectSpace:input_type -> rbac.ValidateSubjectSpaceRqst
	46, // 46: rbac.RbacService.GetSubjectAvailableSpace:input_type -> rbac.GetSubjectAvailableSpaceRqst
	44, // 47: rbac.RbacService.GetSubjectAllocatedSpace:input_type -> rbac.GetSubjectAllocatedSpaceRqst
	42, // 48: rbac.RbacService.SetSubjectAllocatedSpace:input_type -> rbac.SetSubjectAllocatedSpaceRqst
	36, // 49: rbac.RbacService.GetSharedResource:input_type -> rbac.GetSharedResourceRqst
	38, // 50: rbac.RbacService.RemoveSubjectFromShare:input_type -> rbac.RemoveSubjectFromShareRqst
	40, // 51: rbac.RbacService.DeleteSubjectShare:input_type -> rbac.DeleteSubjectShareRqst
	14, // 52: rbac.RbacService.SetResourcePermissions:output_type -> rbac.SetResourcePermissionsRqst
	10, // 53: rbac.RbacService.DeleteResourcePermissions:output_type -> rbac.DeleteResourcePermissionsRqst
	12, // 54: rbac.RbacService.DeleteResourcePermission:output_type -> rbac.DeleteResourcePermissionRqst
	17, // 55: rbac.RbacService.GetResourcePermission:output_type -> rbac.GetResourcePermissionRsp
	19, // 56: rbac.RbacService.SetResourcePermission:output_type -> rbac.SetResourcePermissionRsp
	5,  // 57: rbac.RbacService.GetResourcePermissions:output_type -> rbac.GetResourcePermissionsRsp
	7,  // 58: rbac.RbacService.GetResourcePermissionsByResourceType:output_type -> rbac.GetResourcePermissionsByResourceTypeRsp
	9,  // 59: rbac.RbacService.GetResourcePermissionsBySubject:output_type -> rbac.GetResourcePermissionsBySubjectRsp
	21, // 60: rbac.RbacService.AddResourceOwner:output_type -> rbac.AddResourceOwnerRsp
	23, // 61: rbac.RbacService.RemoveResourceOwner:output_type -> rbac.RemoveResourceOwnerRsp
	25, // 62: rbac.RbacService.DeleteAllAccess:output_type -> rbac.DeleteAllAccessRsp
	27, // 63: rbac.RbacService.ValidateAccess:output_type -> rbac.ValidateAccessRsp
	34, // 64: rbac.RbacService.SetActionResourcesPermissions:output_type -> rbac.SetActionResourcesPermissionsRsp
	30, // 65: rbac.RbacService.GetActionResourceInfos:output_type -> rbac.GetActionResourceInfosRsp
	32, // 66: rbac.RbacService.ValidateAction:output_type -> rbac.ValidateActionRsp
	49, // 67: rbac.RbacService.ValidateSubjectSpace:output_type -> rbac.ValidateSubjectSpaceRsp
	47, // 68: rbac.RbacService.GetSubjectAvailableSpace:output_type -> rbac.GetSubjectAvailableSpaceRsp
	45, // 69: rbac.RbacService.GetSubjectAllocatedSpace:output_type -> rbac.GetSubjectAllocatedSpaceRsp
	43, // 70: rbac.RbacService.SetSubjectAllocatedSpace:output_type -> rbac.SetSubjectAllocatedSpaceRsp
	37, // 71: rbac.RbacService.GetSharedResource:output_type -> rbac.GetSharedResourceRsp
	39, // 72: rbac.RbacService.RemoveSubjectFromShare:output_type -> rbac.RemoveSubjectFromShareRsp
	41, // 73: rbac.RbacService.DeleteSubjectShare:output_type -> rbac.DeleteSubjectShareRsp
	52, // [52:74] is the sub-list for method output_type
	30, // [30:52] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_rbac_proto_init() }
func file_rbac_proto_init() {
	if File_rbac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rbac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcePermissionsRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcePermissionsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcePermissionsByResourceTypeRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcePermissionsByResourceTypeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcePermissionsBySubjectRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcePermissionsBySubjectRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourcePermissionsRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourcePermissionsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourcePermissionRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourcePermissionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResourcePermissionsRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResourcePermissionsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcePermissionRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcePermissionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResourcePermissionRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResourcePermissionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddResourceOwnerRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddResourceOwnerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveResourceOwnerRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveResourceOwnerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllAccessRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllAccessRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateAccessRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateAccessRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActionResourceInfosRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActionResourceInfosRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateActionRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateActionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActionResourcesPermissionsRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActionResourcesPermissionsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Share); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSharedResourceRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSharedResourceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSubjectFromShareRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSubjectFromShareRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectShareRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectShareRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSubjectAllocatedSpaceRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSubjectAllocatedSpaceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectAllocatedSpaceRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectAllocatedSpaceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectAvailableSpaceRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectAvailableSpaceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateSubjectSpaceRqst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbac_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateSubjectSpaceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rbac_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rbac_proto_goTypes,
		DependencyIndexes: file_rbac_proto_depIdxs,
		EnumInfos:         file_rbac_proto_enumTypes,
		MessageInfos:      file_rbac_proto_msgTypes,
	}.Build()
	File_rbac_proto = out.File
	file_rbac_proto_rawDesc = nil
	file_rbac_proto_goTypes = nil
	file_rbac_proto_depIdxs = nil
}
