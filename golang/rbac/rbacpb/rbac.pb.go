// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: rbac.proto

package rbacpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// PermissionType defines the types of permissions (e.g., allowed, denied).
type PermissionType int32

const (
	PermissionType_DENIED  PermissionType = 0
	PermissionType_ALLOWED PermissionType = 1
)

// Enum value maps for PermissionType.
var (
	PermissionType_name = map[int32]string{
		0: "DENIED",
		1: "ALLOWED",
	}
	PermissionType_value = map[string]int32{
		"DENIED":  0,
		"ALLOWED": 1,
	}
)

func (x PermissionType) Enum() *PermissionType {
	p := new(PermissionType)
	*p = x
	return p
}

func (x PermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_proto_enumTypes[0].Descriptor()
}

func (PermissionType) Type() protoreflect.EnumType {
	return &file_rbac_proto_enumTypes[0]
}

func (x PermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionType.Descriptor instead.
func (PermissionType) EnumDescriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{0}
}

// *
// SubjectType defines the types of subjects (e.g., user, group, organization).
type SubjectType int32

const (
	SubjectType_ACCOUNT      SubjectType = 0
	SubjectType_PEER         SubjectType = 1
	SubjectType_GROUP        SubjectType = 2
	SubjectType_ORGANIZATION SubjectType = 3
	SubjectType_APPLICATION  SubjectType = 4
	SubjectType_ROLE         SubjectType = 5
)

// Enum value maps for SubjectType.
var (
	SubjectType_name = map[int32]string{
		0: "ACCOUNT",
		1: "PEER",
		2: "GROUP",
		3: "ORGANIZATION",
		4: "APPLICATION",
		5: "ROLE",
	}
	SubjectType_value = map[string]int32{
		"ACCOUNT":      0,
		"PEER":         1,
		"GROUP":        2,
		"ORGANIZATION": 3,
		"APPLICATION":  4,
		"ROLE":         5,
	}
)

func (x SubjectType) Enum() *SubjectType {
	p := new(SubjectType)
	*p = x
	return p
}

func (x SubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_rbac_proto_enumTypes[1].Descriptor()
}

func (SubjectType) Type() protoreflect.EnumType {
	return &file_rbac_proto_enumTypes[1]
}

func (x SubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectType.Descriptor instead.
func (SubjectType) EnumDescriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{1}
}

// Permission defines the access level and scope for a resource.
type Permission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   // Specific permission type (e.g., read, write, delete).
	Applications  []string               `protobuf:"bytes,2,rep,name=applications,proto3" json:"applications,omitempty"`   // Applications associated with this permission.
	Peers         []string               `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`                 // Peers associated with this permission.
	Accounts      []string               `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`           // Accounts associated with this permission.
	Groups        []string               `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`               // Groups associated with this permission.
	Organizations []string               `protobuf:"bytes,6,rep,name=organizations,proto3" json:"organizations,omitempty"` // Organizations associated with this permission.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Permission) Reset() {
	*x = Permission{}
	mi := &file_rbac_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *Permission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Permission) GetApplications() []string {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *Permission) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *Permission) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *Permission) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Permission) GetOrganizations() []string {
	if x != nil {
		return x.Organizations
	}
	return nil
}

// Permissions aggregates all permission settings for a specific resource.
type Permissions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                                     // Resource identifier or path.
	ResourceType  string                 `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"` // Type of the resource (e.g., file, database).
	Owners        *Permission            `protobuf:"bytes,3,opt,name=owners,proto3" json:"owners,omitempty"`                                 // Permissions for resource owners.
	Allowed       []*Permission          `protobuf:"bytes,4,rep,name=allowed,proto3" json:"allowed,omitempty"`                               // List of allowed permissions.
	Denied        []*Permission          `protobuf:"bytes,5,rep,name=denied,proto3" json:"denied,omitempty"`                                 // List of denied permissions.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Permissions) Reset() {
	*x = Permissions{}
	mi := &file_rbac_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permissions) ProtoMessage() {}

func (x *Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permissions.ProtoReflect.Descriptor instead.
func (*Permissions) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *Permissions) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Permissions) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Permissions) GetOwners() *Permission {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Permissions) GetAllowed() []*Permission {
	if x != nil {
		return x.Allowed
	}
	return nil
}

func (x *Permissions) GetDenied() []*Permission {
	if x != nil {
		return x.Denied
	}
	return nil
}

// GetResourcePermissionsRqst is a request for permissions of a specific resource.
type GetResourcePermissionsRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Resource identifier or path.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourcePermissionsRqst) Reset() {
	*x = GetResourcePermissionsRqst{}
	mi := &file_rbac_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourcePermissionsRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsRqst) ProtoMessage() {}

func (x *GetResourcePermissionsRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsRqst.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *GetResourcePermissionsRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// GetResourcePermissionsRsp is a response containing resource permissions.
type GetResourcePermissionsRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permissions   *Permissions           `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"` // Permissions associated with the resource.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourcePermissionsRsp) Reset() {
	*x = GetResourcePermissionsRsp{}
	mi := &file_rbac_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourcePermissionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsRsp) ProtoMessage() {}

func (x *GetResourcePermissionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsRsp.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *GetResourcePermissionsRsp) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// GetResourcePermissionsByResourceTypeRqst requests permissions by resource type.
type GetResourcePermissionsByResourceTypeRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResourceType  string                 `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"` // Type of the resource.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourcePermissionsByResourceTypeRqst) Reset() {
	*x = GetResourcePermissionsByResourceTypeRqst{}
	mi := &file_rbac_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourcePermissionsByResourceTypeRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsByResourceTypeRqst) ProtoMessage() {}

func (x *GetResourcePermissionsByResourceTypeRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsByResourceTypeRqst.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsByResourceTypeRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{4}
}

func (x *GetResourcePermissionsByResourceTypeRqst) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

// GetResourcePermissionsByResourceTypeRsp provides permissions filtered by resource type.
type GetResourcePermissionsByResourceTypeRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permissions   []*Permissions         `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"` // List of permissions for the specified resource type.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourcePermissionsByResourceTypeRsp) Reset() {
	*x = GetResourcePermissionsByResourceTypeRsp{}
	mi := &file_rbac_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourcePermissionsByResourceTypeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsByResourceTypeRsp) ProtoMessage() {}

func (x *GetResourcePermissionsByResourceTypeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsByResourceTypeRsp.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsByResourceTypeRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{5}
}

func (x *GetResourcePermissionsByResourceTypeRsp) GetPermissions() []*Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// GetResourcePermissionsBySubjectRqst requests permissions based on subject.
type GetResourcePermissionsBySubjectRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                                                   // Subject identifier (e.g., user, group).
	SubjectType   SubjectType            `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=rbac.SubjectType" json:"subject_type,omitempty"` // Type of the subject (e.g., user, group).
	ResourceType  string                 `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`                     // Type of the resource.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourcePermissionsBySubjectRqst) Reset() {
	*x = GetResourcePermissionsBySubjectRqst{}
	mi := &file_rbac_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourcePermissionsBySubjectRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsBySubjectRqst) ProtoMessage() {}

func (x *GetResourcePermissionsBySubjectRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsBySubjectRqst.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsBySubjectRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{6}
}

func (x *GetResourcePermissionsBySubjectRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetResourcePermissionsBySubjectRqst) GetSubjectType() SubjectType {
	if x != nil {
		return x.SubjectType
	}
	return SubjectType_ACCOUNT
}

func (x *GetResourcePermissionsBySubjectRqst) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

// GetResourcePermissionsBySubjectRsp provides permissions filtered by subject.
type GetResourcePermissionsBySubjectRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permissions   []*Permissions         `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"` // List of permissions for the specified subject.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourcePermissionsBySubjectRsp) Reset() {
	*x = GetResourcePermissionsBySubjectRsp{}
	mi := &file_rbac_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourcePermissionsBySubjectRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionsBySubjectRsp) ProtoMessage() {}

func (x *GetResourcePermissionsBySubjectRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionsBySubjectRsp.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionsBySubjectRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{7}
}

func (x *GetResourcePermissionsBySubjectRsp) GetPermissions() []*Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// DeleteResourcePermissionsRqst is a request to delete permissions of a resource.
type DeleteResourcePermissionsRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Resource identifier or path.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResourcePermissionsRqst) Reset() {
	*x = DeleteResourcePermissionsRqst{}
	mi := &file_rbac_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResourcePermissionsRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcePermissionsRqst) ProtoMessage() {}

func (x *DeleteResourcePermissionsRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcePermissionsRqst.ProtoReflect.Descriptor instead.
func (*DeleteResourcePermissionsRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteResourcePermissionsRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// DeleteResourcePermissionsRsp is a response after deleting resource permissions.
type DeleteResourcePermissionsRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permissions   *Permissions           `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"` // Permissions that were deleted.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResourcePermissionsRsp) Reset() {
	*x = DeleteResourcePermissionsRsp{}
	mi := &file_rbac_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResourcePermissionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcePermissionsRsp) ProtoMessage() {}

func (x *DeleteResourcePermissionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcePermissionsRsp.ProtoReflect.Descriptor instead.
func (*DeleteResourcePermissionsRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteResourcePermissionsRsp) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// DeleteResourcePermissionRqst is a request to delete a specific permission.
type DeleteResourcePermissionRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                           // Resource identifier or path.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                           // Name of the permission to delete.
	Type          PermissionType         `protobuf:"varint,3,opt,name=type,proto3,enum=rbac.PermissionType" json:"type,omitempty"` // Type of the permission (e.g., allowed, denied).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResourcePermissionRqst) Reset() {
	*x = DeleteResourcePermissionRqst{}
	mi := &file_rbac_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResourcePermissionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcePermissionRqst) ProtoMessage() {}

func (x *DeleteResourcePermissionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcePermissionRqst.ProtoReflect.Descriptor instead.
func (*DeleteResourcePermissionRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteResourcePermissionRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DeleteResourcePermissionRqst) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteResourcePermissionRqst) GetType() PermissionType {
	if x != nil {
		return x.Type
	}
	return PermissionType_DENIED
}

// DeleteResourcePermissionRsp is a response after deleting a specific permission.
type DeleteResourcePermissionRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResourcePermissionRsp) Reset() {
	*x = DeleteResourcePermissionRsp{}
	mi := &file_rbac_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResourcePermissionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcePermissionRsp) ProtoMessage() {}

func (x *DeleteResourcePermissionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcePermissionRsp.ProtoReflect.Descriptor instead.
func (*DeleteResourcePermissionRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{11}
}

// *
// SetResourcePermissionsRqst is a request to set all permissions for a specific resource.
type SetResourcePermissionsRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                 // Resource identifier or path.
	ResourceType  string                 `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"` // Type of the resource.
	Permissions   *Permissions           `protobuf:"bytes,3,opt,name=permissions,proto3" json:"permissions,omitempty"`   // Permissions to be set for the resource.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetResourcePermissionsRqst) Reset() {
	*x = SetResourcePermissionsRqst{}
	mi := &file_rbac_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetResourcePermissionsRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResourcePermissionsRqst) ProtoMessage() {}

func (x *SetResourcePermissionsRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResourcePermissionsRqst.ProtoReflect.Descriptor instead.
func (*SetResourcePermissionsRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{12}
}

func (x *SetResourcePermissionsRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SetResourcePermissionsRqst) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *SetResourcePermissionsRqst) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// *
// SetResourcePermissionsRsp is a response to a set resource permissions request.
// This message is intentionally left empty.
type SetResourcePermissionsRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetResourcePermissionsRsp) Reset() {
	*x = SetResourcePermissionsRsp{}
	mi := &file_rbac_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetResourcePermissionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResourcePermissionsRsp) ProtoMessage() {}

func (x *SetResourcePermissionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResourcePermissionsRsp.ProtoReflect.Descriptor instead.
func (*SetResourcePermissionsRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{13}
}

// *
// GetResourcePermissionRqst is a request to retrieve a specific permission for a resource.
type GetResourcePermissionRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                           // Resource identifier or path.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                           // Name of the permission.
	Type          PermissionType         `protobuf:"varint,3,opt,name=type,proto3,enum=rbac.PermissionType" json:"type,omitempty"` // Type of the permission (ALLOWED or DENIED).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourcePermissionRqst) Reset() {
	*x = GetResourcePermissionRqst{}
	mi := &file_rbac_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourcePermissionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionRqst) ProtoMessage() {}

func (x *GetResourcePermissionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionRqst.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{14}
}

func (x *GetResourcePermissionRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetResourcePermissionRqst) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetResourcePermissionRqst) GetType() PermissionType {
	if x != nil {
		return x.Type
	}
	return PermissionType_DENIED
}

// *
// GetResourcePermissionRsp is a response containing a specific permission.
type GetResourcePermissionRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permission    *Permission            `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"` // The requested permission.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourcePermissionRsp) Reset() {
	*x = GetResourcePermissionRsp{}
	mi := &file_rbac_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourcePermissionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePermissionRsp) ProtoMessage() {}

func (x *GetResourcePermissionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePermissionRsp.ProtoReflect.Descriptor instead.
func (*GetResourcePermissionRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{15}
}

func (x *GetResourcePermissionRsp) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

// *
// SetResourcePermissionRqst is a request to set a specific permission for a resource.
type SetResourcePermissionRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                           // Resource identifier or path.
	ResourceType  string                 `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`           // Type of the resource.
	Permission    *Permission            `protobuf:"bytes,3,opt,name=permission,proto3" json:"permission,omitempty"`               // The permission to be set.
	Type          PermissionType         `protobuf:"varint,4,opt,name=type,proto3,enum=rbac.PermissionType" json:"type,omitempty"` // Type of the permission (ALLOWED or DENIED).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetResourcePermissionRqst) Reset() {
	*x = SetResourcePermissionRqst{}
	mi := &file_rbac_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetResourcePermissionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResourcePermissionRqst) ProtoMessage() {}

func (x *SetResourcePermissionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResourcePermissionRqst.ProtoReflect.Descriptor instead.
func (*SetResourcePermissionRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{16}
}

func (x *SetResourcePermissionRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SetResourcePermissionRqst) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *SetResourcePermissionRqst) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *SetResourcePermissionRqst) GetType() PermissionType {
	if x != nil {
		return x.Type
	}
	return PermissionType_DENIED
}

// *
// SetResourcePermissionRsp is a response to a set resource permission request.
// This message is intentionally left empty.
type SetResourcePermissionRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetResourcePermissionRsp) Reset() {
	*x = SetResourcePermissionRsp{}
	mi := &file_rbac_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetResourcePermissionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResourcePermissionRsp) ProtoMessage() {}

func (x *SetResourcePermissionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResourcePermissionRsp.ProtoReflect.Descriptor instead.
func (*SetResourcePermissionRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{17}
}

// *
// AddResourceOwnerRqst is a request to add an owner to a resource.
type AddResourceOwnerRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                        // Resource identifier or path.
	ResourceType  string                 `protobuf:"bytes,2,opt,name=resourceType,proto3" json:"resourceType,omitempty"`        // Type of the resource.
	Subject       string                 `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`                  // Identifier of the subject to be added as an owner.
	Type          SubjectType            `protobuf:"varint,4,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"` // Type of the subject (e.g., user, group).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddResourceOwnerRqst) Reset() {
	*x = AddResourceOwnerRqst{}
	mi := &file_rbac_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddResourceOwnerRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResourceOwnerRqst) ProtoMessage() {}

func (x *AddResourceOwnerRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResourceOwnerRqst.ProtoReflect.Descriptor instead.
func (*AddResourceOwnerRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{18}
}

func (x *AddResourceOwnerRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AddResourceOwnerRqst) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *AddResourceOwnerRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *AddResourceOwnerRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

// *
// AddResourceOwnerRsp is a response to an add resource owner request.
// This message is intentionally left empty.
type AddResourceOwnerRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddResourceOwnerRsp) Reset() {
	*x = AddResourceOwnerRsp{}
	mi := &file_rbac_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddResourceOwnerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResourceOwnerRsp) ProtoMessage() {}

func (x *AddResourceOwnerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResourceOwnerRsp.ProtoReflect.Descriptor instead.
func (*AddResourceOwnerRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{19}
}

// *
// RemoveResourceOwnerRqst is a request to remove an owner from a resource.
type RemoveResourceOwnerRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                        // Resource identifier or path.
	Subject       string                 `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`                  // Identifier of the subject to be removed as an owner.
	Type          SubjectType            `protobuf:"varint,3,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"` // Type of the subject (e.g., user, group).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveResourceOwnerRqst) Reset() {
	*x = RemoveResourceOwnerRqst{}
	mi := &file_rbac_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveResourceOwnerRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveResourceOwnerRqst) ProtoMessage() {}

func (x *RemoveResourceOwnerRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveResourceOwnerRqst.ProtoReflect.Descriptor instead.
func (*RemoveResourceOwnerRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{20}
}

func (x *RemoveResourceOwnerRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RemoveResourceOwnerRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *RemoveResourceOwnerRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

// *
// RemoveResourceOwnerRsp is a response to a remove resource owner request.
// This message is intentionally left empty.
type RemoveResourceOwnerRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveResourceOwnerRsp) Reset() {
	*x = RemoveResourceOwnerRsp{}
	mi := &file_rbac_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveResourceOwnerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveResourceOwnerRsp) ProtoMessage() {}

func (x *RemoveResourceOwnerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveResourceOwnerRsp.ProtoReflect.Descriptor instead.
func (*RemoveResourceOwnerRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{21}
}

// *
// DeleteAllAccessRqst is a request to delete all access permissions for a given subject.
type DeleteAllAccessRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                  // Identifier of the subject.
	Type          SubjectType            `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"` // Type of the subject (e.g., user, group).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAllAccessRqst) Reset() {
	*x = DeleteAllAccessRqst{}
	mi := &file_rbac_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAllAccessRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllAccessRqst) ProtoMessage() {}

func (x *DeleteAllAccessRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllAccessRqst.ProtoReflect.Descriptor instead.
func (*DeleteAllAccessRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteAllAccessRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *DeleteAllAccessRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

// *
// DeleteAllAccessRsp is a response to a delete all access request.
// This message is intentionally left empty.
type DeleteAllAccessRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAllAccessRsp) Reset() {
	*x = DeleteAllAccessRsp{}
	mi := &file_rbac_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAllAccessRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllAccessRsp) ProtoMessage() {}

func (x *DeleteAllAccessRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllAccessRsp.ProtoReflect.Descriptor instead.
func (*DeleteAllAccessRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{23}
}

// *
// ValidateAccessRqst is a request to validate if a subject has a specific permission for a resource.
type ValidateAccessRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                  // Identifier of the subject.
	Type          SubjectType            `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"` // Type of the subject (e.g., user, group).
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                        // The resource path for which access is being validated.
	Permission    string                 `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission,omitempty"`            // The name of the permission to validate (e.g., read, write, execute).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateAccessRqst) Reset() {
	*x = ValidateAccessRqst{}
	mi := &file_rbac_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateAccessRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAccessRqst) ProtoMessage() {}

func (x *ValidateAccessRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAccessRqst.ProtoReflect.Descriptor instead.
func (*ValidateAccessRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{24}
}

func (x *ValidateAccessRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ValidateAccessRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *ValidateAccessRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ValidateAccessRqst) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

// *
// ValidateAccessRsp is a response indicating whether access is granted or denied.
type ValidateAccessRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HasAccess     bool                   `protobuf:"varint,1,opt,name=hasAccess,proto3" json:"hasAccess,omitempty"`       // Indicates if the subject has access.
	AccessDenied  bool                   `protobuf:"varint,2,opt,name=accessDenied,proto3" json:"accessDenied,omitempty"` // Indicates if access is explicitly denied.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateAccessRsp) Reset() {
	*x = ValidateAccessRsp{}
	mi := &file_rbac_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateAccessRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAccessRsp) ProtoMessage() {}

func (x *ValidateAccessRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAccessRsp.ProtoReflect.Descriptor instead.
func (*ValidateAccessRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{25}
}

func (x *ValidateAccessRsp) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *ValidateAccessRsp) GetAccessDenied() bool {
	if x != nil {
		return x.AccessDenied
	}
	return false
}

// *
// GetActionResourceInfosRqst is a request to retrieve resource information related to an action.
type GetActionResourceInfosRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        string                 `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"` // The action for which resource information is requested.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActionResourceInfosRqst) Reset() {
	*x = GetActionResourceInfosRqst{}
	mi := &file_rbac_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActionResourceInfosRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionResourceInfosRqst) ProtoMessage() {}

func (x *GetActionResourceInfosRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionResourceInfosRqst.ProtoReflect.Descriptor instead.
func (*GetActionResourceInfosRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{26}
}

func (x *GetActionResourceInfosRqst) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// *
// ResourceInfos contains information about a resource in the context of an action.
type ResourceInfos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`          // The index of the parameter in the action.
	Permission    string                 `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"` // The permission required for the resource (e.g., read, write).
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`             // The path of the resource.
	Field         string                 `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`           // If the parameter is an object, this specifies the field name containing the resource path.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceInfos) Reset() {
	*x = ResourceInfos{}
	mi := &file_rbac_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInfos) ProtoMessage() {}

func (x *ResourceInfos) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInfos.ProtoReflect.Descriptor instead.
func (*ResourceInfos) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{27}
}

func (x *ResourceInfos) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ResourceInfos) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *ResourceInfos) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ResourceInfos) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

// *
// GetActionResourceInfosRsp is a response containing resource information for an action.
type GetActionResourceInfosRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Infos         []*ResourceInfos       `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"` // List of resource information.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActionResourceInfosRsp) Reset() {
	*x = GetActionResourceInfosRsp{}
	mi := &file_rbac_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActionResourceInfosRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionResourceInfosRsp) ProtoMessage() {}

func (x *GetActionResourceInfosRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionResourceInfosRsp.ProtoReflect.Descriptor instead.
func (*GetActionResourceInfosRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{28}
}

func (x *GetActionResourceInfosRsp) GetInfos() []*ResourceInfos {
	if x != nil {
		return x.Infos
	}
	return nil
}

// *
// ValidateActionRqst is a request to validate access for an action involving multiple resources.
type ValidateActionRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                  // Identifier of the subject.
	Type          SubjectType            `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"` // Type of the subject (e.g., user, group).
	Action        string                 `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`                    // The action path (e.g., gRPC path).
	Infos         []*ResourceInfos       `protobuf:"bytes,4,rep,name=infos,proto3" json:"infos,omitempty"`                      // Resource information associated with the action.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateActionRqst) Reset() {
	*x = ValidateActionRqst{}
	mi := &file_rbac_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateActionRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateActionRqst) ProtoMessage() {}

func (x *ValidateActionRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateActionRqst.ProtoReflect.Descriptor instead.
func (*ValidateActionRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{29}
}

func (x *ValidateActionRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ValidateActionRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *ValidateActionRqst) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ValidateActionRqst) GetInfos() []*ResourceInfos {
	if x != nil {
		return x.Infos
	}
	return nil
}

// *
// ValidateActionRsp is a response indicating whether the action is accessible.
type ValidateActionRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HasAccess     bool                   `protobuf:"varint,1,opt,name=hasAccess,proto3" json:"hasAccess,omitempty"`       // Indicates if the action can be performed by the user.
	AccessDenied  bool                   `protobuf:"varint,2,opt,name=accessDenied,proto3" json:"accessDenied,omitempty"` // Indicates if any resource path access is denied.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateActionRsp) Reset() {
	*x = ValidateActionRsp{}
	mi := &file_rbac_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateActionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateActionRsp) ProtoMessage() {}

func (x *ValidateActionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateActionRsp.ProtoReflect.Descriptor instead.
func (*ValidateActionRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{30}
}

func (x *ValidateActionRsp) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *ValidateActionRsp) GetAccessDenied() bool {
	if x != nil {
		return x.AccessDenied
	}
	return false
}

// *
// SetActionResourcesPermissionsRqst is a request to set permissions for resources involved in an action.
type SetActionResourcesPermissionsRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permissions   *structpb.Struct       `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"` // Struct containing the permissions configuration.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetActionResourcesPermissionsRqst) Reset() {
	*x = SetActionResourcesPermissionsRqst{}
	mi := &file_rbac_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetActionResourcesPermissionsRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActionResourcesPermissionsRqst) ProtoMessage() {}

func (x *SetActionResourcesPermissionsRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActionResourcesPermissionsRqst.ProtoReflect.Descriptor instead.
func (*SetActionResourcesPermissionsRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{31}
}

func (x *SetActionResourcesPermissionsRqst) GetPermissions() *structpb.Struct {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// *
// SetActionResourcesPermissionsRsp is a response to a set action resources permissions request.
// This message is intentionally left empty.
type SetActionResourcesPermissionsRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetActionResourcesPermissionsRsp) Reset() {
	*x = SetActionResourcesPermissionsRsp{}
	mi := &file_rbac_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetActionResourcesPermissionsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActionResourcesPermissionsRsp) ProtoMessage() {}

func (x *SetActionResourcesPermissionsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActionResourcesPermissionsRsp.ProtoReflect.Descriptor instead.
func (*SetActionResourcesPermissionsRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{32}
}

// *
// Share represents a shared resource within the system.
type Share struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                   // The unique resource path within the domain.
	Domain        string                 `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`               // The domain from where the share is located.
	Applications  []string               `protobuf:"bytes,3,rep,name=applications,proto3" json:"applications,omitempty"`   // Specific applications with which the resource is shared.
	Peers         []string               `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`                 // Specific peers with whom the resource is shared.
	Accounts      []string               `protobuf:"bytes,5,rep,name=accounts,proto3" json:"accounts,omitempty"`           // Specific accounts with whom the resource is shared.
	Groups        []string               `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty"`               // Specific groups with whom the resource is shared.
	Organizations []string               `protobuf:"bytes,7,rep,name=organizations,proto3" json:"organizations,omitempty"` // Specific organizations with whom the resource is shared.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Share) Reset() {
	*x = Share{}
	mi := &file_rbac_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Share) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Share) ProtoMessage() {}

func (x *Share) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Share.ProtoReflect.Descriptor instead.
func (*Share) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{33}
}

func (x *Share) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Share) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Share) GetApplications() []string {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *Share) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *Share) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *Share) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Share) GetOrganizations() []string {
	if x != nil {
		return x.Organizations
	}
	return nil
}

// *
// GetSharedResourceRqst is a request to retrieve a list of accessible shared resources for a subject.
type GetSharedResourceRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                  // Identifier of the subject.
	Type          SubjectType            `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"` // Type of the subject (e.g., user, group).
	Owner         string                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`                      // Optional filter to retrieve resources shared by a specific owner.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSharedResourceRqst) Reset() {
	*x = GetSharedResourceRqst{}
	mi := &file_rbac_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSharedResourceRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSharedResourceRqst) ProtoMessage() {}

func (x *GetSharedResourceRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSharedResourceRqst.ProtoReflect.Descriptor instead.
func (*GetSharedResourceRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{34}
}

func (x *GetSharedResourceRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetSharedResourceRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *GetSharedResourceRqst) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

// *
// GetSharedResourceRsp is a response containing a list of shared resources accessible to the subject.
type GetSharedResourceRsp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SharedResource []*Share               `protobuf:"bytes,1,rep,name=sharedResource,proto3" json:"sharedResource,omitempty"` // List of shared resources.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSharedResourceRsp) Reset() {
	*x = GetSharedResourceRsp{}
	mi := &file_rbac_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSharedResourceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSharedResourceRsp) ProtoMessage() {}

func (x *GetSharedResourceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSharedResourceRsp.ProtoReflect.Descriptor instead.
func (*GetSharedResourceRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{35}
}

func (x *GetSharedResourceRsp) GetSharedResource() []*Share {
	if x != nil {
		return x.SharedResource
	}
	return nil
}

// *
// RemoveSubjectFromShareRqst is a request to remove a subject from a shared resource.
type RemoveSubjectFromShareRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                  // Identifier of the subject to be removed.
	Type          SubjectType            `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"` // Type of the subject (e.g., user, group).
	Domain        string                 `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`                    // The domain of the shared resource.
	Path          string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`                        // The path of the shared resource.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveSubjectFromShareRqst) Reset() {
	*x = RemoveSubjectFromShareRqst{}
	mi := &file_rbac_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveSubjectFromShareRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubjectFromShareRqst) ProtoMessage() {}

func (x *RemoveSubjectFromShareRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubjectFromShareRqst.ProtoReflect.Descriptor instead.
func (*RemoveSubjectFromShareRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{36}
}

func (x *RemoveSubjectFromShareRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *RemoveSubjectFromShareRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *RemoveSubjectFromShareRqst) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RemoveSubjectFromShareRqst) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// *
// RemoveSubjectFromShareRsp is a response to a remove subject from share request.
// This message is intentionally left empty.
type RemoveSubjectFromShareRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveSubjectFromShareRsp) Reset() {
	*x = RemoveSubjectFromShareRsp{}
	mi := &file_rbac_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveSubjectFromShareRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubjectFromShareRsp) ProtoMessage() {}

func (x *RemoveSubjectFromShareRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubjectFromShareRsp.ProtoReflect.Descriptor instead.
func (*RemoveSubjectFromShareRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{37}
}

// *
// DeleteSubjectShareRqst is a request to delete all shares associated with a subject.
// This is commonly used when a subject is deleted from the system.
type DeleteSubjectShareRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                  // Identifier of the subject.
	Type          SubjectType            `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"` // Type of the subject (e.g., user, group).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSubjectShareRqst) Reset() {
	*x = DeleteSubjectShareRqst{}
	mi := &file_rbac_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSubjectShareRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectShareRqst) ProtoMessage() {}

func (x *DeleteSubjectShareRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectShareRqst.ProtoReflect.Descriptor instead.
func (*DeleteSubjectShareRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteSubjectShareRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *DeleteSubjectShareRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

// *
// DeleteSubjectShareRsp is a response to the delete subject share request.
// This message is intentionally left empty.
type DeleteSubjectShareRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSubjectShareRsp) Reset() {
	*x = DeleteSubjectShareRsp{}
	mi := &file_rbac_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSubjectShareRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectShareRsp) ProtoMessage() {}

func (x *DeleteSubjectShareRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectShareRsp.ProtoReflect.Descriptor instead.
func (*DeleteSubjectShareRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{39}
}

// *
// SetSubjectAllocatedSpaceRqst is a request to set the allocated space for a subject.
type SetSubjectAllocatedSpaceRqst struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Subject        string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                                      // Identifier of the subject.
	Type           SubjectType            `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`                     // Type of the subject (e.g., user, group).
	AllocatedSpace uint64                 `protobuf:"varint,3,opt,name=allocated_space,json=allocatedSpace,proto3" json:"allocated_space,omitempty"` // The amount of space to be allocated, in bytes.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SetSubjectAllocatedSpaceRqst) Reset() {
	*x = SetSubjectAllocatedSpaceRqst{}
	mi := &file_rbac_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSubjectAllocatedSpaceRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubjectAllocatedSpaceRqst) ProtoMessage() {}

func (x *SetSubjectAllocatedSpaceRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubjectAllocatedSpaceRqst.ProtoReflect.Descriptor instead.
func (*SetSubjectAllocatedSpaceRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{40}
}

func (x *SetSubjectAllocatedSpaceRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SetSubjectAllocatedSpaceRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *SetSubjectAllocatedSpaceRqst) GetAllocatedSpace() uint64 {
	if x != nil {
		return x.AllocatedSpace
	}
	return 0
}

// *
// SetSubjectAllocatedSpaceRsp is a response to the set subject allocated space request.
// This message is intentionally left empty.
type SetSubjectAllocatedSpaceRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSubjectAllocatedSpaceRsp) Reset() {
	*x = SetSubjectAllocatedSpaceRsp{}
	mi := &file_rbac_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSubjectAllocatedSpaceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubjectAllocatedSpaceRsp) ProtoMessage() {}

func (x *SetSubjectAllocatedSpaceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubjectAllocatedSpaceRsp.ProtoReflect.Descriptor instead.
func (*SetSubjectAllocatedSpaceRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{41}
}

// *
// GetSubjectAllocatedSpaceRqst is a request to retrieve the allocated space for a subject.
type GetSubjectAllocatedSpaceRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                  // Identifier of the subject.
	Type          SubjectType            `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"` // Type of the subject (e.g., user, group).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubjectAllocatedSpaceRqst) Reset() {
	*x = GetSubjectAllocatedSpaceRqst{}
	mi := &file_rbac_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubjectAllocatedSpaceRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectAllocatedSpaceRqst) ProtoMessage() {}

func (x *GetSubjectAllocatedSpaceRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectAllocatedSpaceRqst.ProtoReflect.Descriptor instead.
func (*GetSubjectAllocatedSpaceRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{42}
}

func (x *GetSubjectAllocatedSpaceRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetSubjectAllocatedSpaceRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

// *
// GetSubjectAllocatedSpaceRsp is a response containing the allocated space for a subject.
type GetSubjectAllocatedSpaceRsp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AllocatedSpace uint64                 `protobuf:"varint,1,opt,name=allocated_space,json=allocatedSpace,proto3" json:"allocated_space,omitempty"` // The amount of space allocated to the subject, in bytes.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSubjectAllocatedSpaceRsp) Reset() {
	*x = GetSubjectAllocatedSpaceRsp{}
	mi := &file_rbac_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubjectAllocatedSpaceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectAllocatedSpaceRsp) ProtoMessage() {}

func (x *GetSubjectAllocatedSpaceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectAllocatedSpaceRsp.ProtoReflect.Descriptor instead.
func (*GetSubjectAllocatedSpaceRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{43}
}

func (x *GetSubjectAllocatedSpaceRsp) GetAllocatedSpace() uint64 {
	if x != nil {
		return x.AllocatedSpace
	}
	return 0
}

// *
// GetSubjectAvailableSpaceRqst is a request to retrieve the available space for a subject.
type GetSubjectAvailableSpaceRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                  // Identifier of the subject.
	Type          SubjectType            `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"` // Type of the subject (e.g., user, group).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubjectAvailableSpaceRqst) Reset() {
	*x = GetSubjectAvailableSpaceRqst{}
	mi := &file_rbac_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubjectAvailableSpaceRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectAvailableSpaceRqst) ProtoMessage() {}

func (x *GetSubjectAvailableSpaceRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectAvailableSpaceRqst.ProtoReflect.Descriptor instead.
func (*GetSubjectAvailableSpaceRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{44}
}

func (x *GetSubjectAvailableSpaceRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetSubjectAvailableSpaceRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

// *
// GetSubjectAvailableSpaceRsp is a response containing the available space for a subject.
type GetSubjectAvailableSpaceRsp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AvailableSpace uint64                 `protobuf:"varint,1,opt,name=available_space,json=availableSpace,proto3" json:"available_space,omitempty"` // The amount of available space for the subject, in bytes.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSubjectAvailableSpaceRsp) Reset() {
	*x = GetSubjectAvailableSpaceRsp{}
	mi := &file_rbac_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubjectAvailableSpaceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectAvailableSpaceRsp) ProtoMessage() {}

func (x *GetSubjectAvailableSpaceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectAvailableSpaceRsp.ProtoReflect.Descriptor instead.
func (*GetSubjectAvailableSpaceRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{45}
}

func (x *GetSubjectAvailableSpaceRsp) GetAvailableSpace() uint64 {
	if x != nil {
		return x.AvailableSpace
	}
	return 0
}

// *
// ValidateSubjectSpaceRqst is a request to validate if a subject has enough space for a given requirement.
type ValidateSubjectSpaceRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`                                   // Identifier of the subject.
	Type          SubjectType            `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.SubjectType" json:"type,omitempty"`                  // Type of the subject (e.g., user, group).
	RequiredSpace uint64                 `protobuf:"varint,3,opt,name=required_space,json=requiredSpace,proto3" json:"required_space,omitempty"` // The required space to validate, in bytes.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateSubjectSpaceRqst) Reset() {
	*x = ValidateSubjectSpaceRqst{}
	mi := &file_rbac_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSubjectSpaceRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSubjectSpaceRqst) ProtoMessage() {}

func (x *ValidateSubjectSpaceRqst) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSubjectSpaceRqst.ProtoReflect.Descriptor instead.
func (*ValidateSubjectSpaceRqst) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{46}
}

func (x *ValidateSubjectSpaceRqst) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ValidateSubjectSpaceRqst) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_ACCOUNT
}

func (x *ValidateSubjectSpaceRqst) GetRequiredSpace() uint64 {
	if x != nil {
		return x.RequiredSpace
	}
	return 0
}

// *
// ValidateSubjectSpaceRsp is a response indicating whether the subject has sufficient space.
type ValidateSubjectSpaceRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HasSpace      bool                   `protobuf:"varint,1,opt,name=hasSpace,proto3" json:"hasSpace,omitempty"` // Indicates if the subject has enough space.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateSubjectSpaceRsp) Reset() {
	*x = ValidateSubjectSpaceRsp{}
	mi := &file_rbac_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateSubjectSpaceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSubjectSpaceRsp) ProtoMessage() {}

func (x *ValidateSubjectSpaceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rbac_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSubjectSpaceRsp.ProtoReflect.Descriptor instead.
func (*ValidateSubjectSpaceRsp) Descriptor() ([]byte, []int) {
	return file_rbac_proto_rawDescGZIP(), []int{47}
}

func (x *ValidateSubjectSpaceRsp) GetHasSpace() bool {
	if x != nil {
		return x.HasSpace
	}
	return false
}

var File_rbac_proto protoreflect.FileDescriptor

const file_rbac_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"rbac.proto\x12\x04rbac\x1a\x1cgoogle/protobuf/struct.proto\"\xb4\x01\n" +
	"\n" +
	"Permission\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\"\n" +
	"\fapplications\x18\x02 \x03(\tR\fapplications\x12\x14\n" +
	"\x05peers\x18\x03 \x03(\tR\x05peers\x12\x1a\n" +
	"\baccounts\x18\x04 \x03(\tR\baccounts\x12\x16\n" +
	"\x06groups\x18\x05 \x03(\tR\x06groups\x12$\n" +
	"\rorganizations\x18\x06 \x03(\tR\rorganizations\"\xc6\x01\n" +
	"\vPermissions\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12#\n" +
	"\rresource_type\x18\x02 \x01(\tR\fresourceType\x12(\n" +
	"\x06owners\x18\x03 \x01(\v2\x10.rbac.PermissionR\x06owners\x12*\n" +
	"\aallowed\x18\x04 \x03(\v2\x10.rbac.PermissionR\aallowed\x12(\n" +
	"\x06denied\x18\x05 \x03(\v2\x10.rbac.PermissionR\x06denied\"0\n" +
	"\x1aGetResourcePermissionsRqst\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"P\n" +
	"\x19GetResourcePermissionsRsp\x123\n" +
	"\vpermissions\x18\x01 \x01(\v2\x11.rbac.PermissionsR\vpermissions\"N\n" +
	"(GetResourcePermissionsByResourceTypeRqst\x12\"\n" +
	"\fresourceType\x18\x01 \x01(\tR\fresourceType\"^\n" +
	"'GetResourcePermissionsByResourceTypeRsp\x123\n" +
	"\vpermissions\x18\x01 \x03(\v2\x11.rbac.PermissionsR\vpermissions\"\x9a\x01\n" +
	"#GetResourcePermissionsBySubjectRqst\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x124\n" +
	"\fsubject_type\x18\x02 \x01(\x0e2\x11.rbac.SubjectTypeR\vsubjectType\x12#\n" +
	"\rresource_type\x18\x03 \x01(\tR\fresourceType\"Y\n" +
	"\"GetResourcePermissionsBySubjectRsp\x123\n" +
	"\vpermissions\x18\x01 \x03(\v2\x11.rbac.PermissionsR\vpermissions\"3\n" +
	"\x1dDeleteResourcePermissionsRqst\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"S\n" +
	"\x1cDeleteResourcePermissionsRsp\x123\n" +
	"\vpermissions\x18\x01 \x01(\v2\x11.rbac.PermissionsR\vpermissions\"p\n" +
	"\x1cDeleteResourcePermissionRqst\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12(\n" +
	"\x04type\x18\x03 \x01(\x0e2\x14.rbac.PermissionTypeR\x04type\"\x1d\n" +
	"\x1bDeleteResourcePermissionRsp\"\x89\x01\n" +
	"\x1aSetResourcePermissionsRqst\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\"\n" +
	"\fresourceType\x18\x02 \x01(\tR\fresourceType\x123\n" +
	"\vpermissions\x18\x03 \x01(\v2\x11.rbac.PermissionsR\vpermissions\"\x1b\n" +
	"\x19SetResourcePermissionsRsp\"m\n" +
	"\x19GetResourcePermissionRqst\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12(\n" +
	"\x04type\x18\x03 \x01(\x0e2\x14.rbac.PermissionTypeR\x04type\"L\n" +
	"\x18GetResourcePermissionRsp\x120\n" +
	"\n" +
	"permission\x18\x01 \x01(\v2\x10.rbac.PermissionR\n" +
	"permission\"\xaf\x01\n" +
	"\x19SetResourcePermissionRqst\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\"\n" +
	"\fresourceType\x18\x02 \x01(\tR\fresourceType\x120\n" +
	"\n" +
	"permission\x18\x03 \x01(\v2\x10.rbac.PermissionR\n" +
	"permission\x12(\n" +
	"\x04type\x18\x04 \x01(\x0e2\x14.rbac.PermissionTypeR\x04type\"\x1a\n" +
	"\x18SetResourcePermissionRsp\"\x8f\x01\n" +
	"\x14AddResourceOwnerRqst\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\"\n" +
	"\fresourceType\x18\x02 \x01(\tR\fresourceType\x12\x18\n" +
	"\asubject\x18\x03 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x04 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\"\x15\n" +
	"\x13AddResourceOwnerRsp\"n\n" +
	"\x17RemoveResourceOwnerRqst\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x18\n" +
	"\asubject\x18\x02 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x03 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\"\x18\n" +
	"\x16RemoveResourceOwnerRsp\"V\n" +
	"\x13DeleteAllAccessRqst\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x02 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\"\x14\n" +
	"\x12DeleteAllAccessRsp\"\x89\x01\n" +
	"\x12ValidateAccessRqst\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x02 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\x12\x12\n" +
	"\x04path\x18\x03 \x01(\tR\x04path\x12\x1e\n" +
	"\n" +
	"permission\x18\x04 \x01(\tR\n" +
	"permission\"U\n" +
	"\x11ValidateAccessRsp\x12\x1c\n" +
	"\thasAccess\x18\x01 \x01(\bR\thasAccess\x12\"\n" +
	"\faccessDenied\x18\x02 \x01(\bR\faccessDenied\"4\n" +
	"\x1aGetActionResourceInfosRqst\x12\x16\n" +
	"\x06action\x18\x01 \x01(\tR\x06action\"o\n" +
	"\rResourceInfos\x12\x14\n" +
	"\x05index\x18\x01 \x01(\x05R\x05index\x12\x1e\n" +
	"\n" +
	"permission\x18\x02 \x01(\tR\n" +
	"permission\x12\x12\n" +
	"\x04path\x18\x03 \x01(\tR\x04path\x12\x14\n" +
	"\x05field\x18\x04 \x01(\tR\x05field\"F\n" +
	"\x19GetActionResourceInfosRsp\x12)\n" +
	"\x05infos\x18\x01 \x03(\v2\x13.rbac.ResourceInfosR\x05infos\"\x98\x01\n" +
	"\x12ValidateActionRqst\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x02 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\x12\x16\n" +
	"\x06action\x18\x03 \x01(\tR\x06action\x12)\n" +
	"\x05infos\x18\x04 \x03(\v2\x13.rbac.ResourceInfosR\x05infos\"U\n" +
	"\x11ValidateActionRsp\x12\x1c\n" +
	"\thasAccess\x18\x01 \x01(\bR\thasAccess\x12\"\n" +
	"\faccessDenied\x18\x02 \x01(\bR\faccessDenied\"^\n" +
	"!SetActionResourcesPermissionsRqst\x129\n" +
	"\vpermissions\x18\x01 \x01(\v2\x17.google.protobuf.StructR\vpermissions\"\"\n" +
	" SetActionResourcesPermissionsRsp\"\xc7\x01\n" +
	"\x05Share\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x16\n" +
	"\x06domain\x18\x02 \x01(\tR\x06domain\x12\"\n" +
	"\fapplications\x18\x03 \x03(\tR\fapplications\x12\x14\n" +
	"\x05peers\x18\x04 \x03(\tR\x05peers\x12\x1a\n" +
	"\baccounts\x18\x05 \x03(\tR\baccounts\x12\x16\n" +
	"\x06groups\x18\x06 \x03(\tR\x06groups\x12$\n" +
	"\rorganizations\x18\a \x03(\tR\rorganizations\"n\n" +
	"\x15GetSharedResourceRqst\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x02 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\x12\x14\n" +
	"\x05owner\x18\x03 \x01(\tR\x05owner\"K\n" +
	"\x14GetSharedResourceRsp\x123\n" +
	"\x0esharedResource\x18\x01 \x03(\v2\v.rbac.ShareR\x0esharedResource\"\x89\x01\n" +
	"\x1aRemoveSubjectFromShareRqst\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x02 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\x12\x16\n" +
	"\x06domain\x18\x03 \x01(\tR\x06domain\x12\x12\n" +
	"\x04path\x18\x04 \x01(\tR\x04path\"\x1b\n" +
	"\x19RemoveSubjectFromShareRsp\"Y\n" +
	"\x16DeleteSubjectShareRqst\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x02 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\"\x17\n" +
	"\x15DeleteSubjectShareRsp\"\x88\x01\n" +
	"\x1cSetSubjectAllocatedSpaceRqst\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x02 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\x12'\n" +
	"\x0fallocated_space\x18\x03 \x01(\x04R\x0eallocatedSpace\"\x1d\n" +
	"\x1bSetSubjectAllocatedSpaceRsp\"_\n" +
	"\x1cGetSubjectAllocatedSpaceRqst\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x02 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\"F\n" +
	"\x1bGetSubjectAllocatedSpaceRsp\x12'\n" +
	"\x0fallocated_space\x18\x01 \x01(\x04R\x0eallocatedSpace\"_\n" +
	"\x1cGetSubjectAvailableSpaceRqst\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x02 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\"F\n" +
	"\x1bGetSubjectAvailableSpaceRsp\x12'\n" +
	"\x0favailable_space\x18\x01 \x01(\x04R\x0eavailableSpace\"\x82\x01\n" +
	"\x18ValidateSubjectSpaceRqst\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12%\n" +
	"\x04type\x18\x02 \x01(\x0e2\x11.rbac.SubjectTypeR\x04type\x12%\n" +
	"\x0erequired_space\x18\x03 \x01(\x04R\rrequiredSpace\"5\n" +
	"\x17ValidateSubjectSpaceRsp\x12\x1a\n" +
	"\bhasSpace\x18\x01 \x01(\bR\bhasSpace*)\n" +
	"\x0ePermissionType\x12\n" +
	"\n" +
	"\x06DENIED\x10\x00\x12\v\n" +
	"\aALLOWED\x10\x01*\\\n" +
	"\vSubjectType\x12\v\n" +
	"\aACCOUNT\x10\x00\x12\b\n" +
	"\x04PEER\x10\x01\x12\t\n" +
	"\x05GROUP\x10\x02\x12\x10\n" +
	"\fORGANIZATION\x10\x03\x12\x0f\n" +
	"\vAPPLICATION\x10\x04\x12\b\n" +
	"\x04ROLE\x10\x052\x84\x10\n" +
	"\vRbacService\x12[\n" +
	"\x16SetResourcePermissions\x12 .rbac.SetResourcePermissionsRqst\x1a\x1f.rbac.SetResourcePermissionsRsp\x12d\n" +
	"\x19DeleteResourcePermissions\x12#.rbac.DeleteResourcePermissionsRqst\x1a\".rbac.DeleteResourcePermissionsRsp\x12a\n" +
	"\x18DeleteResourcePermission\x12\".rbac.DeleteResourcePermissionRqst\x1a!.rbac.DeleteResourcePermissionRsp\x12X\n" +
	"\x15GetResourcePermission\x12\x1f.rbac.GetResourcePermissionRqst\x1a\x1e.rbac.GetResourcePermissionRsp\x12X\n" +
	"\x15SetResourcePermission\x12\x1f.rbac.SetResourcePermissionRqst\x1a\x1e.rbac.SetResourcePermissionRsp\x12[\n" +
	"\x16GetResourcePermissions\x12 .rbac.GetResourcePermissionsRqst\x1a\x1f.rbac.GetResourcePermissionsRsp\x12\x87\x01\n" +
	"$GetResourcePermissionsByResourceType\x12..rbac.GetResourcePermissionsByResourceTypeRqst\x1a-.rbac.GetResourcePermissionsByResourceTypeRsp0\x01\x12x\n" +
	"\x1fGetResourcePermissionsBySubject\x12).rbac.GetResourcePermissionsBySubjectRqst\x1a(.rbac.GetResourcePermissionsBySubjectRsp0\x01\x12I\n" +
	"\x10AddResourceOwner\x12\x1a.rbac.AddResourceOwnerRqst\x1a\x19.rbac.AddResourceOwnerRsp\x12R\n" +
	"\x13RemoveResourceOwner\x12\x1d.rbac.RemoveResourceOwnerRqst\x1a\x1c.rbac.RemoveResourceOwnerRsp\x12F\n" +
	"\x0fDeleteAllAccess\x12\x19.rbac.DeleteAllAccessRqst\x1a\x18.rbac.DeleteAllAccessRsp\x12C\n" +
	"\x0eValidateAccess\x12\x18.rbac.ValidateAccessRqst\x1a\x17.rbac.ValidateAccessRsp\x12p\n" +
	"\x1dSetActionResourcesPermissions\x12'.rbac.SetActionResourcesPermissionsRqst\x1a&.rbac.SetActionResourcesPermissionsRsp\x12[\n" +
	"\x16GetActionResourceInfos\x12 .rbac.GetActionResourceInfosRqst\x1a\x1f.rbac.GetActionResourceInfosRsp\x12C\n" +
	"\x0eValidateAction\x12\x18.rbac.ValidateActionRqst\x1a\x17.rbac.ValidateActionRsp\x12U\n" +
	"\x14ValidateSubjectSpace\x12\x1e.rbac.ValidateSubjectSpaceRqst\x1a\x1d.rbac.ValidateSubjectSpaceRsp\x12a\n" +
	"\x18GetSubjectAvailableSpace\x12\".rbac.GetSubjectAvailableSpaceRqst\x1a!.rbac.GetSubjectAvailableSpaceRsp\x12a\n" +
	"\x18GetSubjectAllocatedSpace\x12\".rbac.GetSubjectAllocatedSpaceRqst\x1a!.rbac.GetSubjectAllocatedSpaceRsp\x12a\n" +
	"\x18SetSubjectAllocatedSpace\x12\".rbac.SetSubjectAllocatedSpaceRqst\x1a!.rbac.SetSubjectAllocatedSpaceRsp\x12L\n" +
	"\x11GetSharedResource\x12\x1b.rbac.GetSharedResourceRqst\x1a\x1a.rbac.GetSharedResourceRsp\x12[\n" +
	"\x16RemoveSubjectFromShare\x12 .rbac.RemoveSubjectFromShareRqst\x1a\x1f.rbac.RemoveSubjectFromShareRsp\x12O\n" +
	"\x12DeleteSubjectShare\x12\x1c.rbac.DeleteSubjectShareRqst\x1a\x1b.rbac.DeleteSubjectShareRspB3Z1github.com/globulario/services/golang/rbac/rbacpbb\x06proto3"

var (
	file_rbac_proto_rawDescOnce sync.Once
	file_rbac_proto_rawDescData []byte
)

func file_rbac_proto_rawDescGZIP() []byte {
	file_rbac_proto_rawDescOnce.Do(func() {
		file_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rbac_proto_rawDesc), len(file_rbac_proto_rawDesc)))
	})
	return file_rbac_proto_rawDescData
}

var file_rbac_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_rbac_proto_goTypes = []any{
	(PermissionType)(0),                              // 0: rbac.PermissionType
	(SubjectType)(0),                                 // 1: rbac.SubjectType
	(*Permission)(nil),                               // 2: rbac.Permission
	(*Permissions)(nil),                              // 3: rbac.Permissions
	(*GetResourcePermissionsRqst)(nil),               // 4: rbac.GetResourcePermissionsRqst
	(*GetResourcePermissionsRsp)(nil),                // 5: rbac.GetResourcePermissionsRsp
	(*GetResourcePermissionsByResourceTypeRqst)(nil), // 6: rbac.GetResourcePermissionsByResourceTypeRqst
	(*GetResourcePermissionsByResourceTypeRsp)(nil),  // 7: rbac.GetResourcePermissionsByResourceTypeRsp
	(*GetResourcePermissionsBySubjectRqst)(nil),      // 8: rbac.GetResourcePermissionsBySubjectRqst
	(*GetResourcePermissionsBySubjectRsp)(nil),       // 9: rbac.GetResourcePermissionsBySubjectRsp
	(*DeleteResourcePermissionsRqst)(nil),            // 10: rbac.DeleteResourcePermissionsRqst
	(*DeleteResourcePermissionsRsp)(nil),             // 11: rbac.DeleteResourcePermissionsRsp
	(*DeleteResourcePermissionRqst)(nil),             // 12: rbac.DeleteResourcePermissionRqst
	(*DeleteResourcePermissionRsp)(nil),              // 13: rbac.DeleteResourcePermissionRsp
	(*SetResourcePermissionsRqst)(nil),               // 14: rbac.SetResourcePermissionsRqst
	(*SetResourcePermissionsRsp)(nil),                // 15: rbac.SetResourcePermissionsRsp
	(*GetResourcePermissionRqst)(nil),                // 16: rbac.GetResourcePermissionRqst
	(*GetResourcePermissionRsp)(nil),                 // 17: rbac.GetResourcePermissionRsp
	(*SetResourcePermissionRqst)(nil),                // 18: rbac.SetResourcePermissionRqst
	(*SetResourcePermissionRsp)(nil),                 // 19: rbac.SetResourcePermissionRsp
	(*AddResourceOwnerRqst)(nil),                     // 20: rbac.AddResourceOwnerRqst
	(*AddResourceOwnerRsp)(nil),                      // 21: rbac.AddResourceOwnerRsp
	(*RemoveResourceOwnerRqst)(nil),                  // 22: rbac.RemoveResourceOwnerRqst
	(*RemoveResourceOwnerRsp)(nil),                   // 23: rbac.RemoveResourceOwnerRsp
	(*DeleteAllAccessRqst)(nil),                      // 24: rbac.DeleteAllAccessRqst
	(*DeleteAllAccessRsp)(nil),                       // 25: rbac.DeleteAllAccessRsp
	(*ValidateAccessRqst)(nil),                       // 26: rbac.ValidateAccessRqst
	(*ValidateAccessRsp)(nil),                        // 27: rbac.ValidateAccessRsp
	(*GetActionResourceInfosRqst)(nil),               // 28: rbac.GetActionResourceInfosRqst
	(*ResourceInfos)(nil),                            // 29: rbac.ResourceInfos
	(*GetActionResourceInfosRsp)(nil),                // 30: rbac.GetActionResourceInfosRsp
	(*ValidateActionRqst)(nil),                       // 31: rbac.ValidateActionRqst
	(*ValidateActionRsp)(nil),                        // 32: rbac.ValidateActionRsp
	(*SetActionResourcesPermissionsRqst)(nil),        // 33: rbac.SetActionResourcesPermissionsRqst
	(*SetActionResourcesPermissionsRsp)(nil),         // 34: rbac.SetActionResourcesPermissionsRsp
	(*Share)(nil),                                    // 35: rbac.Share
	(*GetSharedResourceRqst)(nil),                    // 36: rbac.GetSharedResourceRqst
	(*GetSharedResourceRsp)(nil),                     // 37: rbac.GetSharedResourceRsp
	(*RemoveSubjectFromShareRqst)(nil),               // 38: rbac.RemoveSubjectFromShareRqst
	(*RemoveSubjectFromShareRsp)(nil),                // 39: rbac.RemoveSubjectFromShareRsp
	(*DeleteSubjectShareRqst)(nil),                   // 40: rbac.DeleteSubjectShareRqst
	(*DeleteSubjectShareRsp)(nil),                    // 41: rbac.DeleteSubjectShareRsp
	(*SetSubjectAllocatedSpaceRqst)(nil),             // 42: rbac.SetSubjectAllocatedSpaceRqst
	(*SetSubjectAllocatedSpaceRsp)(nil),              // 43: rbac.SetSubjectAllocatedSpaceRsp
	(*GetSubjectAllocatedSpaceRqst)(nil),             // 44: rbac.GetSubjectAllocatedSpaceRqst
	(*GetSubjectAllocatedSpaceRsp)(nil),              // 45: rbac.GetSubjectAllocatedSpaceRsp
	(*GetSubjectAvailableSpaceRqst)(nil),             // 46: rbac.GetSubjectAvailableSpaceRqst
	(*GetSubjectAvailableSpaceRsp)(nil),              // 47: rbac.GetSubjectAvailableSpaceRsp
	(*ValidateSubjectSpaceRqst)(nil),                 // 48: rbac.ValidateSubjectSpaceRqst
	(*ValidateSubjectSpaceRsp)(nil),                  // 49: rbac.ValidateSubjectSpaceRsp
	(*structpb.Struct)(nil),                          // 50: google.protobuf.Struct
}
var file_rbac_proto_depIdxs = []int32{
	2,  // 0: rbac.Permissions.owners:type_name -> rbac.Permission
	2,  // 1: rbac.Permissions.allowed:type_name -> rbac.Permission
	2,  // 2: rbac.Permissions.denied:type_name -> rbac.Permission
	3,  // 3: rbac.GetResourcePermissionsRsp.permissions:type_name -> rbac.Permissions
	3,  // 4: rbac.GetResourcePermissionsByResourceTypeRsp.permissions:type_name -> rbac.Permissions
	1,  // 5: rbac.GetResourcePermissionsBySubjectRqst.subject_type:type_name -> rbac.SubjectType
	3,  // 6: rbac.GetResourcePermissionsBySubjectRsp.permissions:type_name -> rbac.Permissions
	3,  // 7: rbac.DeleteResourcePermissionsRsp.permissions:type_name -> rbac.Permissions
	0,  // 8: rbac.DeleteResourcePermissionRqst.type:type_name -> rbac.PermissionType
	3,  // 9: rbac.SetResourcePermissionsRqst.permissions:type_name -> rbac.Permissions
	0,  // 10: rbac.GetResourcePermissionRqst.type:type_name -> rbac.PermissionType
	2,  // 11: rbac.GetResourcePermissionRsp.permission:type_name -> rbac.Permission
	2,  // 12: rbac.SetResourcePermissionRqst.permission:type_name -> rbac.Permission
	0,  // 13: rbac.SetResourcePermissionRqst.type:type_name -> rbac.PermissionType
	1,  // 14: rbac.AddResourceOwnerRqst.type:type_name -> rbac.SubjectType
	1,  // 15: rbac.RemoveResourceOwnerRqst.type:type_name -> rbac.SubjectType
	1,  // 16: rbac.DeleteAllAccessRqst.type:type_name -> rbac.SubjectType
	1,  // 17: rbac.ValidateAccessRqst.type:type_name -> rbac.SubjectType
	29, // 18: rbac.GetActionResourceInfosRsp.infos:type_name -> rbac.ResourceInfos
	1,  // 19: rbac.ValidateActionRqst.type:type_name -> rbac.SubjectType
	29, // 20: rbac.ValidateActionRqst.infos:type_name -> rbac.ResourceInfos
	50, // 21: rbac.SetActionResourcesPermissionsRqst.permissions:type_name -> google.protobuf.Struct
	1,  // 22: rbac.GetSharedResourceRqst.type:type_name -> rbac.SubjectType
	35, // 23: rbac.GetSharedResourceRsp.sharedResource:type_name -> rbac.Share
	1,  // 24: rbac.RemoveSubjectFromShareRqst.type:type_name -> rbac.SubjectType
	1,  // 25: rbac.DeleteSubjectShareRqst.type:type_name -> rbac.SubjectType
	1,  // 26: rbac.SetSubjectAllocatedSpaceRqst.type:type_name -> rbac.SubjectType
	1,  // 27: rbac.GetSubjectAllocatedSpaceRqst.type:type_name -> rbac.SubjectType
	1,  // 28: rbac.GetSubjectAvailableSpaceRqst.type:type_name -> rbac.SubjectType
	1,  // 29: rbac.ValidateSubjectSpaceRqst.type:type_name -> rbac.SubjectType
	14, // 30: rbac.RbacService.SetResourcePermissions:input_type -> rbac.SetResourcePermissionsRqst
	10, // 31: rbac.RbacService.DeleteResourcePermissions:input_type -> rbac.DeleteResourcePermissionsRqst
	12, // 32: rbac.RbacService.DeleteResourcePermission:input_type -> rbac.DeleteResourcePermissionRqst
	16, // 33: rbac.RbacService.GetResourcePermission:input_type -> rbac.GetResourcePermissionRqst
	18, // 34: rbac.RbacService.SetResourcePermission:input_type -> rbac.SetResourcePermissionRqst
	4,  // 35: rbac.RbacService.GetResourcePermissions:input_type -> rbac.GetResourcePermissionsRqst
	6,  // 36: rbac.RbacService.GetResourcePermissionsByResourceType:input_type -> rbac.GetResourcePermissionsByResourceTypeRqst
	8,  // 37: rbac.RbacService.GetResourcePermissionsBySubject:input_type -> rbac.GetResourcePermissionsBySubjectRqst
	20, // 38: rbac.RbacService.AddResourceOwner:input_type -> rbac.AddResourceOwnerRqst
	22, // 39: rbac.RbacService.RemoveResourceOwner:input_type -> rbac.RemoveResourceOwnerRqst
	24, // 40: rbac.RbacService.DeleteAllAccess:input_type -> rbac.DeleteAllAccessRqst
	26, // 41: rbac.RbacService.ValidateAccess:input_type -> rbac.ValidateAccessRqst
	33, // 42: rbac.RbacService.SetActionResourcesPermissions:input_type -> rbac.SetActionResourcesPermissionsRqst
	28, // 43: rbac.RbacService.GetActionResourceInfos:input_type -> rbac.GetActionResourceInfosRqst
	31, // 44: rbac.RbacService.ValidateAction:input_type -> rbac.ValidateActionRqst
	48, // 45: rbac.RbacService.ValidateSubjectSpace:input_type -> rbac.ValidateSubjectSpaceRqst
	46, // 46: rbac.RbacService.GetSubjectAvailableSpace:input_type -> rbac.GetSubjectAvailableSpaceRqst
	44, // 47: rbac.RbacService.GetSubjectAllocatedSpace:input_type -> rbac.GetSubjectAllocatedSpaceRqst
	42, // 48: rbac.RbacService.SetSubjectAllocatedSpace:input_type -> rbac.SetSubjectAllocatedSpaceRqst
	36, // 49: rbac.RbacService.GetSharedResource:input_type -> rbac.GetSharedResourceRqst
	38, // 50: rbac.RbacService.RemoveSubjectFromShare:input_type -> rbac.RemoveSubjectFromShareRqst
	40, // 51: rbac.RbacService.DeleteSubjectShare:input_type -> rbac.DeleteSubjectShareRqst
	15, // 52: rbac.RbacService.SetResourcePermissions:output_type -> rbac.SetResourcePermissionsRsp
	11, // 53: rbac.RbacService.DeleteResourcePermissions:output_type -> rbac.DeleteResourcePermissionsRsp
	13, // 54: rbac.RbacService.DeleteResourcePermission:output_type -> rbac.DeleteResourcePermissionRsp
	17, // 55: rbac.RbacService.GetResourcePermission:output_type -> rbac.GetResourcePermissionRsp
	19, // 56: rbac.RbacService.SetResourcePermission:output_type -> rbac.SetResourcePermissionRsp
	5,  // 57: rbac.RbacService.GetResourcePermissions:output_type -> rbac.GetResourcePermissionsRsp
	7,  // 58: rbac.RbacService.GetResourcePermissionsByResourceType:output_type -> rbac.GetResourcePermissionsByResourceTypeRsp
	9,  // 59: rbac.RbacService.GetResourcePermissionsBySubject:output_type -> rbac.GetResourcePermissionsBySubjectRsp
	21, // 60: rbac.RbacService.AddResourceOwner:output_type -> rbac.AddResourceOwnerRsp
	23, // 61: rbac.RbacService.RemoveResourceOwner:output_type -> rbac.RemoveResourceOwnerRsp
	25, // 62: rbac.RbacService.DeleteAllAccess:output_type -> rbac.DeleteAllAccessRsp
	27, // 63: rbac.RbacService.ValidateAccess:output_type -> rbac.ValidateAccessRsp
	34, // 64: rbac.RbacService.SetActionResourcesPermissions:output_type -> rbac.SetActionResourcesPermissionsRsp
	30, // 65: rbac.RbacService.GetActionResourceInfos:output_type -> rbac.GetActionResourceInfosRsp
	32, // 66: rbac.RbacService.ValidateAction:output_type -> rbac.ValidateActionRsp
	49, // 67: rbac.RbacService.ValidateSubjectSpace:output_type -> rbac.ValidateSubjectSpaceRsp
	47, // 68: rbac.RbacService.GetSubjectAvailableSpace:output_type -> rbac.GetSubjectAvailableSpaceRsp
	45, // 69: rbac.RbacService.GetSubjectAllocatedSpace:output_type -> rbac.GetSubjectAllocatedSpaceRsp
	43, // 70: rbac.RbacService.SetSubjectAllocatedSpace:output_type -> rbac.SetSubjectAllocatedSpaceRsp
	37, // 71: rbac.RbacService.GetSharedResource:output_type -> rbac.GetSharedResourceRsp
	39, // 72: rbac.RbacService.RemoveSubjectFromShare:output_type -> rbac.RemoveSubjectFromShareRsp
	41, // 73: rbac.RbacService.DeleteSubjectShare:output_type -> rbac.DeleteSubjectShareRsp
	52, // [52:74] is the sub-list for method output_type
	30, // [30:52] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_rbac_proto_init() }
func file_rbac_proto_init() {
	if File_rbac_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rbac_proto_rawDesc), len(file_rbac_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rbac_proto_goTypes,
		DependencyIndexes: file_rbac_proto_depIdxs,
		EnumInfos:         file_rbac_proto_enumTypes,
		MessageInfos:      file_rbac_proto_msgTypes,
	}.Build()
	File_rbac_proto = out.File
	file_rbac_proto_goTypes = nil
	file_rbac_proto_depIdxs = nil
}
