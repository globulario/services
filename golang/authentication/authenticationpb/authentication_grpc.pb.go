//*
// Authentication service

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: authentication.proto

package authenticationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AuthenticationService_Authenticate_FullMethodName      = "/authentication.AuthenticationService/Authenticate"
	AuthenticationService_ValidateToken_FullMethodName     = "/authentication.AuthenticationService/ValidateToken"
	AuthenticationService_RefreshToken_FullMethodName      = "/authentication.AuthenticationService/RefreshToken"
	AuthenticationService_GeneratePeerToken_FullMethodName = "/authentication.AuthenticationService/GeneratePeerToken"
	AuthenticationService_SetPassword_FullMethodName       = "/authentication.AuthenticationService/SetPassword"
	AuthenticationService_SetRootPassword_FullMethodName   = "/authentication.AuthenticationService/SetRootPassword"
	AuthenticationService_SetRootEmail_FullMethodName      = "/authentication.AuthenticationService/SetRootEmail"
)

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AuthenticationService provides functionalities related to user authentication and token management.
type AuthenticationServiceClient interface {
	// Authenticate allows users to log in by validating their credentials and returning an authentication token.
	Authenticate(ctx context.Context, in *AuthenticateRqst, opts ...grpc.CallOption) (*AuthenticateRsp, error)
	// ValidateToken checks the validity of a provided authentication token, returning details like the associated client ID and expiration time.
	ValidateToken(ctx context.Context, in *ValidateTokenRqst, opts ...grpc.CallOption) (*ValidateTokenRsp, error)
	// RefreshToken renews an existing authentication token, issuing a new token for continued access.
	RefreshToken(ctx context.Context, in *RefreshTokenRqst, opts ...grpc.CallOption) (*RefreshTokenRsp, error)
	// GeneratePeerToken creates an authentication token for a peer device, identified by its MAC address.
	GeneratePeerToken(ctx context.Context, in *GeneratePeerTokenRequest, opts ...grpc.CallOption) (*GeneratePeerTokenResponse, error)
	// SetPassword allows users to set or update their account password.
	SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error)
	// SetRootPassword allows changing the root password, typically used by administrators for high-level access control.
	SetRootPassword(ctx context.Context, in *SetRootPasswordRequest, opts ...grpc.CallOption) (*SetRootPasswordResponse, error)
	// SetRootEmail allows changing the root email address, which is essential for receiving critical system notifications and for account recovery purposes.
	SetRootEmail(ctx context.Context, in *SetRootEmailRequest, opts ...grpc.CallOption) (*SetRootEmailResponse, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) Authenticate(ctx context.Context, in *AuthenticateRqst, opts ...grpc.CallOption) (*AuthenticateRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateRsp)
	err := c.cc.Invoke(ctx, AuthenticationService_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRqst, opts ...grpc.CallOption) (*ValidateTokenRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTokenRsp)
	err := c.cc.Invoke(ctx, AuthenticationService_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRqst, opts ...grpc.CallOption) (*RefreshTokenRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenRsp)
	err := c.cc.Invoke(ctx, AuthenticationService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) GeneratePeerToken(ctx context.Context, in *GeneratePeerTokenRequest, opts ...grpc.CallOption) (*GeneratePeerTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneratePeerTokenResponse)
	err := c.cc.Invoke(ctx, AuthenticationService_GeneratePeerToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPasswordResponse)
	err := c.cc.Invoke(ctx, AuthenticationService_SetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SetRootPassword(ctx context.Context, in *SetRootPasswordRequest, opts ...grpc.CallOption) (*SetRootPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRootPasswordResponse)
	err := c.cc.Invoke(ctx, AuthenticationService_SetRootPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SetRootEmail(ctx context.Context, in *SetRootEmailRequest, opts ...grpc.CallOption) (*SetRootEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRootEmailResponse)
	err := c.cc.Invoke(ctx, AuthenticationService_SetRootEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations should embed UnimplementedAuthenticationServiceServer
// for forward compatibility
//
// AuthenticationService provides functionalities related to user authentication and token management.
type AuthenticationServiceServer interface {
	// Authenticate allows users to log in by validating their credentials and returning an authentication token.
	Authenticate(context.Context, *AuthenticateRqst) (*AuthenticateRsp, error)
	// ValidateToken checks the validity of a provided authentication token, returning details like the associated client ID and expiration time.
	ValidateToken(context.Context, *ValidateTokenRqst) (*ValidateTokenRsp, error)
	// RefreshToken renews an existing authentication token, issuing a new token for continued access.
	RefreshToken(context.Context, *RefreshTokenRqst) (*RefreshTokenRsp, error)
	// GeneratePeerToken creates an authentication token for a peer device, identified by its MAC address.
	GeneratePeerToken(context.Context, *GeneratePeerTokenRequest) (*GeneratePeerTokenResponse, error)
	// SetPassword allows users to set or update their account password.
	SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error)
	// SetRootPassword allows changing the root password, typically used by administrators for high-level access control.
	SetRootPassword(context.Context, *SetRootPasswordRequest) (*SetRootPasswordResponse, error)
	// SetRootEmail allows changing the root email address, which is essential for receiving critical system notifications and for account recovery purposes.
	SetRootEmail(context.Context, *SetRootEmailRequest) (*SetRootEmailResponse, error)
}

// UnimplementedAuthenticationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) Authenticate(context.Context, *AuthenticateRqst) (*AuthenticateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthenticationServiceServer) ValidateToken(context.Context, *ValidateTokenRqst) (*ValidateTokenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) RefreshToken(context.Context, *RefreshTokenRqst) (*RefreshTokenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) GeneratePeerToken(context.Context, *GeneratePeerTokenRequest) (*GeneratePeerTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePeerToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedAuthenticationServiceServer) SetRootPassword(context.Context, *SetRootPasswordRequest) (*SetRootPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRootPassword not implemented")
}
func (UnimplementedAuthenticationServiceServer) SetRootEmail(context.Context, *SetRootEmailRequest) (*SetRootEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRootEmail not implemented")
}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Authenticate(ctx, req.(*AuthenticateRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).ValidateToken(ctx, req.(*ValidateTokenRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).RefreshToken(ctx, req.(*RefreshTokenRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_GeneratePeerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePeerTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GeneratePeerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_GeneratePeerToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GeneratePeerToken(ctx, req.(*GeneratePeerTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_SetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SetPassword(ctx, req.(*SetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SetRootPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRootPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SetRootPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_SetRootPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SetRootPassword(ctx, req.(*SetRootPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SetRootEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRootEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SetRootEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthenticationService_SetRootEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SetRootEmail(ctx, req.(*SetRootEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authentication.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthenticationService_Authenticate_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _AuthenticationService_ValidateToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthenticationService_RefreshToken_Handler,
		},
		{
			MethodName: "GeneratePeerToken",
			Handler:    _AuthenticationService_GeneratePeerToken_Handler,
		},
		{
			MethodName: "SetPassword",
			Handler:    _AuthenticationService_SetPassword_Handler,
		},
		{
			MethodName: "SetRootPassword",
			Handler:    _AuthenticationService_SetRootPassword_Handler,
		},
		{
			MethodName: "SetRootEmail",
			Handler:    _AuthenticationService_SetRootEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication.proto",
}
