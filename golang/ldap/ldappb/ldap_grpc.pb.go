// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ldap.proto

package ldappb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LdapService_Stop_FullMethodName               = "/ldap.LdapService/Stop"
	LdapService_CreateConnection_FullMethodName   = "/ldap.LdapService/CreateConnection"
	LdapService_DeleteConnection_FullMethodName   = "/ldap.LdapService/DeleteConnection"
	LdapService_Close_FullMethodName              = "/ldap.LdapService/Close"
	LdapService_Search_FullMethodName             = "/ldap.LdapService/Search"
	LdapService_Authenticate_FullMethodName       = "/ldap.LdapService/Authenticate"
	LdapService_Synchronize_FullMethodName        = "/ldap.LdapService/Synchronize"
	LdapService_SetLdapSyncInfo_FullMethodName    = "/ldap.LdapService/setLdapSyncInfo"
	LdapService_DeleteLdapSyncInfo_FullMethodName = "/ldap.LdapService/deleteLdapSyncInfo"
	LdapService_GetLdapSyncInfo_FullMethodName    = "/ldap.LdapService/getLdapSyncInfo"
)

// LdapServiceClient is the client API for LdapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TODO: Support TLS connection.
// LdapService defines the RPC methods available for interacting with an LDAP server.
type LdapServiceClient interface {
	// Stops the LDAP service. This method should be called to properly shut down the service.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Creates a new LDAP connection using the provided connection details.
	// This is typically the first step in interacting with an LDAP server.
	CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error)
	// Deletes an existing LDAP connection identified by its ID.
	// Use this method to remove connections that are no longer needed.
	DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error)
	// Closes an open LDAP connection. It's important to close connections that are no longer in use.
	// Unlike creating a connection, which is done automatically during a search, closing must be done explicitly.
	Close(ctx context.Context, in *CloseRqst, opts ...grpc.CallOption) (*CloseRsp, error)
	// Performs a search on the LDAP server using the specified parameters.
	// This method uses an existing connection to query the LDAP directory.
	Search(ctx context.Context, in *SearchRqst, opts ...grpc.CallOption) (*SearchResp, error)
	// Authenticates a user against the specified LDAP server (identified by the connection ID).
	// This is used for verifying user credentials.
	Authenticate(ctx context.Context, in *AuthenticateRqst, opts ...grpc.CallOption) (*AuthenticateRsp, error)
	// Synchronizes resources with the LDAP server.
	// This method can be used to ensure that local data is in sync with the LDAP directory.
	Synchronize(ctx context.Context, in *SynchronizeRequest, opts ...grpc.CallOption) (*SynchronizeResponse, error)
	// Adds or updates synchronization information in the LDAP service.
	// Use this method to configure or modify how data is synchronized.
	SetLdapSyncInfo(ctx context.Context, in *SetLdapSyncInfoRequest, opts ...grpc.CallOption) (*SetLdapSyncInfoResponse, error)
	// Deletes existing synchronization information from the LDAP service.
	// Use this when certain sync configurations are no longer required.
	DeleteLdapSyncInfo(ctx context.Context, in *DeleteLdapSyncInfoRequest, opts ...grpc.CallOption) (*DeleteLdapSyncInfoResponse, error)
	// Retrieves synchronization information from the LDAP service.
	// This can be used to audit or review current synchronization settings.
	GetLdapSyncInfo(ctx context.Context, in *GetLdapSyncInfoRequest, opts ...grpc.CallOption) (*GetLdapSyncInfoResponse, error)
}

type ldapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLdapServiceClient(cc grpc.ClientConnInterface) LdapServiceClient {
	return &ldapServiceClient{cc}
}

func (c *ldapServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, LdapService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldapServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionRsp)
	err := c.cc.Invoke(ctx, LdapService_CreateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldapServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConnectionRsp)
	err := c.cc.Invoke(ctx, LdapService_DeleteConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldapServiceClient) Close(ctx context.Context, in *CloseRqst, opts ...grpc.CallOption) (*CloseRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseRsp)
	err := c.cc.Invoke(ctx, LdapService_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldapServiceClient) Search(ctx context.Context, in *SearchRqst, opts ...grpc.CallOption) (*SearchResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, LdapService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldapServiceClient) Authenticate(ctx context.Context, in *AuthenticateRqst, opts ...grpc.CallOption) (*AuthenticateRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateRsp)
	err := c.cc.Invoke(ctx, LdapService_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldapServiceClient) Synchronize(ctx context.Context, in *SynchronizeRequest, opts ...grpc.CallOption) (*SynchronizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SynchronizeResponse)
	err := c.cc.Invoke(ctx, LdapService_Synchronize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldapServiceClient) SetLdapSyncInfo(ctx context.Context, in *SetLdapSyncInfoRequest, opts ...grpc.CallOption) (*SetLdapSyncInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLdapSyncInfoResponse)
	err := c.cc.Invoke(ctx, LdapService_SetLdapSyncInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldapServiceClient) DeleteLdapSyncInfo(ctx context.Context, in *DeleteLdapSyncInfoRequest, opts ...grpc.CallOption) (*DeleteLdapSyncInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLdapSyncInfoResponse)
	err := c.cc.Invoke(ctx, LdapService_DeleteLdapSyncInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldapServiceClient) GetLdapSyncInfo(ctx context.Context, in *GetLdapSyncInfoRequest, opts ...grpc.CallOption) (*GetLdapSyncInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLdapSyncInfoResponse)
	err := c.cc.Invoke(ctx, LdapService_GetLdapSyncInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LdapServiceServer is the server API for LdapService service.
// All implementations should embed UnimplementedLdapServiceServer
// for forward compatibility.
//
// TODO: Support TLS connection.
// LdapService defines the RPC methods available for interacting with an LDAP server.
type LdapServiceServer interface {
	// Stops the LDAP service. This method should be called to properly shut down the service.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Creates a new LDAP connection using the provided connection details.
	// This is typically the first step in interacting with an LDAP server.
	CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error)
	// Deletes an existing LDAP connection identified by its ID.
	// Use this method to remove connections that are no longer needed.
	DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error)
	// Closes an open LDAP connection. It's important to close connections that are no longer in use.
	// Unlike creating a connection, which is done automatically during a search, closing must be done explicitly.
	Close(context.Context, *CloseRqst) (*CloseRsp, error)
	// Performs a search on the LDAP server using the specified parameters.
	// This method uses an existing connection to query the LDAP directory.
	Search(context.Context, *SearchRqst) (*SearchResp, error)
	// Authenticates a user against the specified LDAP server (identified by the connection ID).
	// This is used for verifying user credentials.
	Authenticate(context.Context, *AuthenticateRqst) (*AuthenticateRsp, error)
	// Synchronizes resources with the LDAP server.
	// This method can be used to ensure that local data is in sync with the LDAP directory.
	Synchronize(context.Context, *SynchronizeRequest) (*SynchronizeResponse, error)
	// Adds or updates synchronization information in the LDAP service.
	// Use this method to configure or modify how data is synchronized.
	SetLdapSyncInfo(context.Context, *SetLdapSyncInfoRequest) (*SetLdapSyncInfoResponse, error)
	// Deletes existing synchronization information from the LDAP service.
	// Use this when certain sync configurations are no longer required.
	DeleteLdapSyncInfo(context.Context, *DeleteLdapSyncInfoRequest) (*DeleteLdapSyncInfoResponse, error)
	// Retrieves synchronization information from the LDAP service.
	// This can be used to audit or review current synchronization settings.
	GetLdapSyncInfo(context.Context, *GetLdapSyncInfoRequest) (*GetLdapSyncInfoResponse, error)
}

// UnimplementedLdapServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLdapServiceServer struct{}

func (UnimplementedLdapServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedLdapServiceServer) CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedLdapServiceServer) DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedLdapServiceServer) Close(context.Context, *CloseRqst) (*CloseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedLdapServiceServer) Search(context.Context, *SearchRqst) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedLdapServiceServer) Authenticate(context.Context, *AuthenticateRqst) (*AuthenticateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedLdapServiceServer) Synchronize(context.Context, *SynchronizeRequest) (*SynchronizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Synchronize not implemented")
}
func (UnimplementedLdapServiceServer) SetLdapSyncInfo(context.Context, *SetLdapSyncInfoRequest) (*SetLdapSyncInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLdapSyncInfo not implemented")
}
func (UnimplementedLdapServiceServer) DeleteLdapSyncInfo(context.Context, *DeleteLdapSyncInfoRequest) (*DeleteLdapSyncInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLdapSyncInfo not implemented")
}
func (UnimplementedLdapServiceServer) GetLdapSyncInfo(context.Context, *GetLdapSyncInfoRequest) (*GetLdapSyncInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLdapSyncInfo not implemented")
}
func (UnimplementedLdapServiceServer) testEmbeddedByValue() {}

// UnsafeLdapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LdapServiceServer will
// result in compilation errors.
type UnsafeLdapServiceServer interface {
	mustEmbedUnimplementedLdapServiceServer()
}

func RegisterLdapServiceServer(s grpc.ServiceRegistrar, srv LdapServiceServer) {
	// If the following call pancis, it indicates UnimplementedLdapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LdapService_ServiceDesc, srv)
}

func _LdapService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LdapService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdapService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LdapService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapServiceServer).CreateConnection(ctx, req.(*CreateConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdapService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LdapService_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdapService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LdapService_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapServiceServer).Close(ctx, req.(*CloseRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdapService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LdapService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapServiceServer).Search(ctx, req.(*SearchRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdapService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LdapService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapServiceServer).Authenticate(ctx, req.(*AuthenticateRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdapService_Synchronize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynchronizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapServiceServer).Synchronize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LdapService_Synchronize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapServiceServer).Synchronize(ctx, req.(*SynchronizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdapService_SetLdapSyncInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLdapSyncInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapServiceServer).SetLdapSyncInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LdapService_SetLdapSyncInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapServiceServer).SetLdapSyncInfo(ctx, req.(*SetLdapSyncInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdapService_DeleteLdapSyncInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLdapSyncInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapServiceServer).DeleteLdapSyncInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LdapService_DeleteLdapSyncInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapServiceServer).DeleteLdapSyncInfo(ctx, req.(*DeleteLdapSyncInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdapService_GetLdapSyncInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLdapSyncInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdapServiceServer).GetLdapSyncInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LdapService_GetLdapSyncInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdapServiceServer).GetLdapSyncInfo(ctx, req.(*GetLdapSyncInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LdapService_ServiceDesc is the grpc.ServiceDesc for LdapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LdapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ldap.LdapService",
	HandlerType: (*LdapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _LdapService_Stop_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _LdapService_CreateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _LdapService_DeleteConnection_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _LdapService_Close_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _LdapService_Search_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _LdapService_Authenticate_Handler,
		},
		{
			MethodName: "Synchronize",
			Handler:    _LdapService_Synchronize_Handler,
		},
		{
			MethodName: "setLdapSyncInfo",
			Handler:    _LdapService_SetLdapSyncInfo_Handler,
		},
		{
			MethodName: "deleteLdapSyncInfo",
			Handler:    _LdapService_DeleteLdapSyncInfo_Handler,
		},
		{
			MethodName: "getLdapSyncInfo",
			Handler:    _LdapService_GetLdapSyncInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ldap.proto",
}
