// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: discovery.proto

package discoverypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PackageDiscovery_PublishService_FullMethodName     = "/discovery.PackageDiscovery/PublishService"
	PackageDiscovery_PublishApplication_FullMethodName = "/discovery.PackageDiscovery/PublishApplication"
)

// PackageDiscoveryClient is the client API for PackageDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for package discovery and publishing.
type PackageDiscoveryClient interface {
	// Publishes a service to the globular repository.
	// Input: PublishServiceRequest with service details.
	// Output: PublishServiceResponse indicating the result of the publication.
	PublishService(ctx context.Context, in *PublishServiceRequest, opts ...grpc.CallOption) (*PublishServiceResponse, error)
	// Publishes a web application to globular discovery services.
	// Input: PublishApplicationRequest with application details.
	// Output: PublishApplicationResponse indicating the result of the publication.
	PublishApplication(ctx context.Context, in *PublishApplicationRequest, opts ...grpc.CallOption) (*PublishApplicationResponse, error)
}

type packageDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageDiscoveryClient(cc grpc.ClientConnInterface) PackageDiscoveryClient {
	return &packageDiscoveryClient{cc}
}

func (c *packageDiscoveryClient) PublishService(ctx context.Context, in *PublishServiceRequest, opts ...grpc.CallOption) (*PublishServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishServiceResponse)
	err := c.cc.Invoke(ctx, PackageDiscovery_PublishService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageDiscoveryClient) PublishApplication(ctx context.Context, in *PublishApplicationRequest, opts ...grpc.CallOption) (*PublishApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishApplicationResponse)
	err := c.cc.Invoke(ctx, PackageDiscovery_PublishApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageDiscoveryServer is the server API for PackageDiscovery service.
// All implementations should embed UnimplementedPackageDiscoveryServer
// for forward compatibility.
//
// Service for package discovery and publishing.
type PackageDiscoveryServer interface {
	// Publishes a service to the globular repository.
	// Input: PublishServiceRequest with service details.
	// Output: PublishServiceResponse indicating the result of the publication.
	PublishService(context.Context, *PublishServiceRequest) (*PublishServiceResponse, error)
	// Publishes a web application to globular discovery services.
	// Input: PublishApplicationRequest with application details.
	// Output: PublishApplicationResponse indicating the result of the publication.
	PublishApplication(context.Context, *PublishApplicationRequest) (*PublishApplicationResponse, error)
}

// UnimplementedPackageDiscoveryServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPackageDiscoveryServer struct{}

func (UnimplementedPackageDiscoveryServer) PublishService(context.Context, *PublishServiceRequest) (*PublishServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishService not implemented")
}
func (UnimplementedPackageDiscoveryServer) PublishApplication(context.Context, *PublishApplicationRequest) (*PublishApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishApplication not implemented")
}
func (UnimplementedPackageDiscoveryServer) testEmbeddedByValue() {}

// UnsafePackageDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageDiscoveryServer will
// result in compilation errors.
type UnsafePackageDiscoveryServer interface {
	mustEmbedUnimplementedPackageDiscoveryServer()
}

func RegisterPackageDiscoveryServer(s grpc.ServiceRegistrar, srv PackageDiscoveryServer) {
	// If the following call pancis, it indicates UnimplementedPackageDiscoveryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PackageDiscovery_ServiceDesc, srv)
}

func _PackageDiscovery_PublishService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageDiscoveryServer).PublishService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageDiscovery_PublishService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageDiscoveryServer).PublishService(ctx, req.(*PublishServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageDiscovery_PublishApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageDiscoveryServer).PublishApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageDiscovery_PublishApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageDiscoveryServer).PublishApplication(ctx, req.(*PublishApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageDiscovery_ServiceDesc is the grpc.ServiceDesc for PackageDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.PackageDiscovery",
	HandlerType: (*PackageDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishService",
			Handler:    _PackageDiscovery_PublishService_Handler,
		},
		{
			MethodName: "PublishApplication",
			Handler:    _PackageDiscovery_PublishApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discovery.proto",
}
