//*
// You can use echo as starter project.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: file.proto

package filepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_file_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{0}
}

// *
// FileInfo contains detailed information about a file or directory.
type FileInfo struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Name      string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                          // The name of the file or directory.
	Size      int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`                         // The size of the file in bytes.
	Mode      uint32                 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`                         // File mode (permissions).
	ModeTime  int64                  `protobuf:"varint,4,opt,name=mode_time,json=modeTime,proto3" json:"mode_time,omitempty"` // Last modification time of the file.
	IsDir     bool                   `protobuf:"varint,5,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`          // True if it's a directory.
	Path      string                 `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`                          // Full path of the file or directory.
	Mime      string                 `protobuf:"bytes,7,opt,name=mime,proto3" json:"mime,omitempty"`                          // MIME type of the file.
	Thumbnail string                 `protobuf:"bytes,8,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`                // Thumbnail image (if available).
	Checksum  string                 `protobuf:"bytes,9,opt,name=checksum,proto3" json:"checksum,omitempty"`                  // Checksum of the file for validation.
	// Metadata of the file, stored as a flexible struct.
	Metadata *structpb.Struct `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// List of files within a directory (used in recursive directory listings).
	Files         []*FileInfo `protobuf:"bytes,11,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_file_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{1}
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FileInfo) GetModeTime() int64 {
	if x != nil {
		return x.ModeTime
	}
	return 0
}

func (x *FileInfo) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

func (x *FileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileInfo) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

func (x *FileInfo) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *FileInfo) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *FileInfo) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FileInfo) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type ReadDirRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Path            string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                        // The path of the directory to read.
	Recursive       bool                   `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`             // Whether to list files recursively.
	ThumbnailWidth  int32                  `protobuf:"varint,3,opt,name=thumbnailWidth,proto3" json:"thumbnailWidth,omitempty"`   // Width for generated thumbnails.
	ThumbnailHeight int32                  `protobuf:"varint,4,opt,name=thumbnailHeight,proto3" json:"thumbnailHeight,omitempty"` // Height for generated thumbnails.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReadDirRequest) Reset() {
	*x = ReadDirRequest{}
	mi := &file_file_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirRequest) ProtoMessage() {}

func (x *ReadDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirRequest.ProtoReflect.Descriptor instead.
func (*ReadDirRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{2}
}

func (x *ReadDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadDirRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *ReadDirRequest) GetThumbnailWidth() int32 {
	if x != nil {
		return x.ThumbnailWidth
	}
	return 0
}

func (x *ReadDirRequest) GetThumbnailHeight() int32 {
	if x != nil {
		return x.ThumbnailHeight
	}
	return 0
}

type ReadDirResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          *FileInfo              `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"` // Information about the files in the requested directory.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDirResponse) Reset() {
	*x = ReadDirResponse{}
	mi := &file_file_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirResponse) ProtoMessage() {}

func (x *ReadDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirResponse.ProtoReflect.Descriptor instead.
func (*ReadDirResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{3}
}

func (x *ReadDirResponse) GetInfo() *FileInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateDirRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // The path where the new directory will be created.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // The name of the new directory.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDirRequest) Reset() {
	*x = CreateDirRequest{}
	mi := &file_file_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirRequest) ProtoMessage() {}

func (x *CreateDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirRequest.ProtoReflect.Descriptor instead.
func (*CreateDirRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateDirRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateDirResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates if the directory was created successfully.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDirResponse) Reset() {
	*x = CreateDirResponse{}
	mi := &file_file_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirResponse) ProtoMessage() {}

func (x *CreateDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirResponse.ProtoReflect.Descriptor instead.
func (*CreateDirResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDirResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DeleteDirRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // The path of the directory to be deleted.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDirRequest) Reset() {
	*x = DeleteDirRequest{}
	mi := &file_file_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDirRequest) ProtoMessage() {}

func (x *DeleteDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDirRequest.ProtoReflect.Descriptor instead.
func (*DeleteDirRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DeleteDirResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates if the directory was deleted successfully.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDirResponse) Reset() {
	*x = DeleteDirResponse{}
	mi := &file_file_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDirResponse) ProtoMessage() {}

func (x *DeleteDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDirResponse.ProtoReflect.Descriptor instead.
func (*DeleteDirResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDirResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type RenameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                      // The path of the file or directory.
	NewName       string                 `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"` // The new name for the file or directory.
	OldName       string                 `protobuf:"bytes,3,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"` // The current name of the file or directory.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameRequest) Reset() {
	*x = RenameRequest{}
	mi := &file_file_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRequest) ProtoMessage() {}

func (x *RenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRequest.ProtoReflect.Descriptor instead.
func (*RenameRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{8}
}

func (x *RenameRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RenameRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *RenameRequest) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

type RenameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates if the rename operation was successful.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenameResponse) Reset() {
	*x = RenameResponse{}
	mi := &file_file_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameResponse) ProtoMessage() {}

func (x *RenameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameResponse.ProtoReflect.Descriptor instead.
func (*RenameResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{9}
}

func (x *RenameResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CopyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`   // The destination path for the copied files/directories.
	Files         []string               `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"` // List of files/directories to be copied.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyRequest) Reset() {
	*x = CopyRequest{}
	mi := &file_file_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyRequest) ProtoMessage() {}

func (x *CopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyRequest.ProtoReflect.Descriptor instead.
func (*CopyRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{10}
}

func (x *CopyRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CopyRequest) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

type CopyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates if the copy operation was successful.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyResponse) Reset() {
	*x = CopyResponse{}
	mi := &file_file_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyResponse) ProtoMessage() {}

func (x *CopyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyResponse.ProtoReflect.Descriptor instead.
func (*CopyResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{11}
}

func (x *CopyResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type MoveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`   // The destination path for the moved files/directories.
	Files         []string               `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"` // List of files/directories to be moved.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveRequest) Reset() {
	*x = MoveRequest{}
	mi := &file_file_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRequest) ProtoMessage() {}

func (x *MoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRequest.ProtoReflect.Descriptor instead.
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{12}
}

func (x *MoveRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MoveRequest) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

type MoveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates if the move operation was successful.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveResponse) Reset() {
	*x = MoveResponse{}
	mi := &file_file_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveResponse) ProtoMessage() {}

func (x *MoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveResponse.ProtoReflect.Descriptor instead.
func (*MoveResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{13}
}

func (x *MoveResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetFileInfoRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Path            string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                        // The path of the file for which information is requested.
	ThumbnailWidth  int32                  `protobuf:"varint,2,opt,name=thumbnailWidth,proto3" json:"thumbnailWidth,omitempty"`   // Desired width of the thumbnail.
	ThumbnailHeight int32                  `protobuf:"varint,3,opt,name=thumbnailHeight,proto3" json:"thumbnailHeight,omitempty"` // Desired height of the thumbnail.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetFileInfoRequest) Reset() {
	*x = GetFileInfoRequest{}
	mi := &file_file_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileInfoRequest) ProtoMessage() {}

func (x *GetFileInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileInfoRequest.ProtoReflect.Descriptor instead.
func (*GetFileInfoRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{14}
}

func (x *GetFileInfoRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetFileInfoRequest) GetThumbnailWidth() int32 {
	if x != nil {
		return x.ThumbnailWidth
	}
	return 0
}

func (x *GetFileInfoRequest) GetThumbnailHeight() int32 {
	if x != nil {
		return x.ThumbnailHeight
	}
	return 0
}

type GetFileInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          *FileInfo              `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"` // Detailed information about the file.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileInfoResponse) Reset() {
	*x = GetFileInfoResponse{}
	mi := &file_file_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileInfoResponse) ProtoMessage() {}

func (x *GetFileInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileInfoResponse.ProtoReflect.Descriptor instead.
func (*GetFileInfoResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{15}
}

func (x *GetFileInfoResponse) GetInfo() *FileInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFileMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // The path of the file for which metadata is requested.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileMetadataRequest) Reset() {
	*x = GetFileMetadataRequest{}
	mi := &file_file_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileMetadataRequest) ProtoMessage() {}

func (x *GetFileMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetFileMetadataRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{16}
}

func (x *GetFileMetadataRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GetFileMetadataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *structpb.Struct       `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // Metadata of the file as a structured object.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileMetadataResponse) Reset() {
	*x = GetFileMetadataResponse{}
	mi := &file_file_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileMetadataResponse) ProtoMessage() {}

func (x *GetFileMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetFileMetadataResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{17}
}

func (x *GetFileMetadataResponse) GetResult() *structpb.Struct {
	if x != nil {
		return x.Result
	}
	return nil
}

// Request to read a file as binary data.
type ReadFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // The path of the file to read.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFileRequest) Reset() {
	*x = ReadFileRequest{}
	mi := &file_file_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileRequest) ProtoMessage() {}

func (x *ReadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileRequest.ProtoReflect.Descriptor instead.
func (*ReadFileRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{18}
}

func (x *ReadFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Response containing the file's binary data.
type ReadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // The binary content of the file.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFileResponse) Reset() {
	*x = ReadFileResponse{}
	mi := &file_file_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileResponse) ProtoMessage() {}

func (x *ReadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileResponse.ProtoReflect.Descriptor instead.
func (*ReadFileResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{19}
}

func (x *ReadFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to save a file. The file can be specified either by path or by binary data.
type SaveFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to File:
	//
	//	*SaveFileRequest_Path
	//	*SaveFileRequest_Data
	File          isSaveFileRequest_File `protobuf_oneof:"file"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveFileRequest) Reset() {
	*x = SaveFileRequest{}
	mi := &file_file_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveFileRequest) ProtoMessage() {}

func (x *SaveFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveFileRequest.ProtoReflect.Descriptor instead.
func (*SaveFileRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{20}
}

func (x *SaveFileRequest) GetFile() isSaveFileRequest_File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *SaveFileRequest) GetPath() string {
	if x != nil {
		if x, ok := x.File.(*SaveFileRequest_Path); ok {
			return x.Path
		}
	}
	return ""
}

func (x *SaveFileRequest) GetData() []byte {
	if x != nil {
		if x, ok := x.File.(*SaveFileRequest_Data); ok {
			return x.Data
		}
	}
	return nil
}

type isSaveFileRequest_File interface {
	isSaveFileRequest_File()
}

type SaveFileRequest_Path struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3,oneof"` // The path where the file will be saved.
}

type SaveFileRequest_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"` // The binary data of the file to save.
}

func (*SaveFileRequest_Path) isSaveFileRequest_File() {}

func (*SaveFileRequest_Data) isSaveFileRequest_File() {}

type SaveFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates if the file save operation was successful.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveFileResponse) Reset() {
	*x = SaveFileResponse{}
	mi := &file_file_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveFileResponse) ProtoMessage() {}

func (x *SaveFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveFileResponse.ProtoReflect.Descriptor instead.
func (*SaveFileResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{21}
}

func (x *SaveFileResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to delete a file.
type DeleteFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // The path of the file to be deleted.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileRequest) Reset() {
	*x = DeleteFileRequest{}
	mi := &file_file_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileRequest) ProtoMessage() {}

func (x *DeleteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DeleteFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates if the file was deleted successfully.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileResponse) Reset() {
	*x = DeleteFileResponse{}
	mi := &file_file_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileResponse) ProtoMessage() {}

func (x *DeleteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteFileResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request to get thumbnails for all images in a directory.
type GetThumbnailsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Path            string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                        // The path of the directory.
	Recursive       bool                   `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`             // Whether to search for images recursively.
	ThumbnailWidth  int32                  `protobuf:"varint,3,opt,name=thumbnailWidth,proto3" json:"thumbnailWidth,omitempty"`   // Desired width of the thumbnails.
	ThumbnailHeight int32                  `protobuf:"varint,4,opt,name=thumbnailHeight,proto3" json:"thumbnailHeight,omitempty"` // Desired height of the thumbnails.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetThumbnailsRequest) Reset() {
	*x = GetThumbnailsRequest{}
	mi := &file_file_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThumbnailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThumbnailsRequest) ProtoMessage() {}

func (x *GetThumbnailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThumbnailsRequest.ProtoReflect.Descriptor instead.
func (*GetThumbnailsRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{24}
}

func (x *GetThumbnailsRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetThumbnailsRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *GetThumbnailsRequest) GetThumbnailWidth() int32 {
	if x != nil {
		return x.ThumbnailWidth
	}
	return 0
}

func (x *GetThumbnailsRequest) GetThumbnailHeight() int32 {
	if x != nil {
		return x.ThumbnailHeight
	}
	return 0
}

// Response containing thumbnails data.
type GetThumbnailsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // JSON string containing the list of files with their thumbnail data.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThumbnailsResponse) Reset() {
	*x = GetThumbnailsResponse{}
	mi := &file_file_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThumbnailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThumbnailsResponse) ProtoMessage() {}

func (x *GetThumbnailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThumbnailsResponse.ProtoReflect.Descriptor instead.
func (*GetThumbnailsResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{25}
}

func (x *GetThumbnailsResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to create an archive (e.g., zip) of specified directories.
type CreateArchiveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Paths         []string               `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"` // List of directories to include in the archive.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`   // The desired name of the archive file.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateArchiveRequest) Reset() {
	*x = CreateArchiveRequest{}
	mi := &file_file_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateArchiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArchiveRequest) ProtoMessage() {}

func (x *CreateArchiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArchiveRequest.ProtoReflect.Descriptor instead.
func (*CreateArchiveRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{26}
}

func (x *CreateArchiveRequest) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *CreateArchiveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateArchiveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"` // Path or identifier of the created archive.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateArchiveResponse) Reset() {
	*x = CreateArchiveResponse{}
	mi := &file_file_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateArchiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArchiveResponse) ProtoMessage() {}

func (x *CreateArchiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArchiveResponse.ProtoReflect.Descriptor instead.
func (*CreateArchiveResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{27}
}

func (x *CreateArchiveResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// Request to create a shortcut link to a file.
type CreateLnkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // The directory where the link will be created.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // The name of the link file (must end with '.lnk').
	Lnk           string                 `protobuf:"bytes,3,opt,name=lnk,proto3" json:"lnk,omitempty"`   // JSON containing the information of the linked file.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLnkRequest) Reset() {
	*x = CreateLnkRequest{}
	mi := &file_file_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLnkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLnkRequest) ProtoMessage() {}

func (x *CreateLnkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLnkRequest.ProtoReflect.Descriptor instead.
func (*CreateLnkRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{28}
}

func (x *CreateLnkRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateLnkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateLnkRequest) GetLnk() string {
	if x != nil {
		return x.Lnk
	}
	return ""
}

type CreateLnkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLnkResponse) Reset() {
	*x = CreateLnkResponse{}
	mi := &file_file_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLnkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLnkResponse) ProtoMessage() {}

func (x *CreateLnkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLnkResponse.ProtoReflect.Descriptor instead.
func (*CreateLnkResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{29}
}

// Add a public directory.
type AddPublicDirRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Path of the directory to make public.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPublicDirRequest) Reset() {
	*x = AddPublicDirRequest{}
	mi := &file_file_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPublicDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPublicDirRequest) ProtoMessage() {}

func (x *AddPublicDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPublicDirRequest.ProtoReflect.Descriptor instead.
func (*AddPublicDirRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{30}
}

func (x *AddPublicDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type AddPublicDirResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPublicDirResponse) Reset() {
	*x = AddPublicDirResponse{}
	mi := &file_file_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPublicDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPublicDirResponse) ProtoMessage() {}

func (x *AddPublicDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPublicDirResponse.ProtoReflect.Descriptor instead.
func (*AddPublicDirResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{31}
}

// Remove a public directory.
type RemovePublicDirRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Path of the public directory to remove.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePublicDirRequest) Reset() {
	*x = RemovePublicDirRequest{}
	mi := &file_file_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePublicDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePublicDirRequest) ProtoMessage() {}

func (x *RemovePublicDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePublicDirRequest.ProtoReflect.Descriptor instead.
func (*RemovePublicDirRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{32}
}

func (x *RemovePublicDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RemovePublicDirResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePublicDirResponse) Reset() {
	*x = RemovePublicDirResponse{}
	mi := &file_file_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePublicDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePublicDirResponse) ProtoMessage() {}

func (x *RemovePublicDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePublicDirResponse.ProtoReflect.Descriptor instead.
func (*RemovePublicDirResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{33}
}

// Request to get the list of public directories.
type GetPublicDirsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPublicDirsRequest) Reset() {
	*x = GetPublicDirsRequest{}
	mi := &file_file_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicDirsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicDirsRequest) ProtoMessage() {}

func (x *GetPublicDirsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicDirsRequest.ProtoReflect.Descriptor instead.
func (*GetPublicDirsRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{34}
}

type GetPublicDirsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dirs          []string               `protobuf:"bytes,1,rep,name=dirs,proto3" json:"dirs,omitempty"` // List of paths of public directories.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPublicDirsResponse) Reset() {
	*x = GetPublicDirsResponse{}
	mi := &file_file_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicDirsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicDirsResponse) ProtoMessage() {}

func (x *GetPublicDirsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicDirsResponse.ProtoReflect.Descriptor instead.
func (*GetPublicDirsResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{35}
}

func (x *GetPublicDirsResponse) GetDirs() []string {
	if x != nil {
		return x.Dirs
	}
	return nil
}

// Request to write an Excel file on the server.
type WriteExcelFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // The path where the Excel file will be written.
	Data          string                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // JSON object containing Excel data (e.g., sheets, cells).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteExcelFileRequest) Reset() {
	*x = WriteExcelFileRequest{}
	mi := &file_file_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteExcelFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteExcelFileRequest) ProtoMessage() {}

func (x *WriteExcelFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteExcelFileRequest.ProtoReflect.Descriptor instead.
func (*WriteExcelFileRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{36}
}

func (x *WriteExcelFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WriteExcelFileRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type WriteExcelFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates if the Excel file write operation was successful.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteExcelFileResponse) Reset() {
	*x = WriteExcelFileResponse{}
	mi := &file_file_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteExcelFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteExcelFileResponse) ProtoMessage() {}

func (x *WriteExcelFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteExcelFileResponse.ProtoReflect.Descriptor instead.
func (*WriteExcelFileResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{37}
}

func (x *WriteExcelFileResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type HtmlToPdfRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Html          string                 `protobuf:"bytes,1,opt,name=html,proto3" json:"html,omitempty"` // The HTML content to be converted to PDF.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HtmlToPdfRqst) Reset() {
	*x = HtmlToPdfRqst{}
	mi := &file_file_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HtmlToPdfRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HtmlToPdfRqst) ProtoMessage() {}

func (x *HtmlToPdfRqst) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HtmlToPdfRqst.ProtoReflect.Descriptor instead.
func (*HtmlToPdfRqst) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{38}
}

func (x *HtmlToPdfRqst) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

type HtmlToPdfResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pdf           []byte                 `protobuf:"bytes,1,opt,name=pdf,proto3" json:"pdf,omitempty"` // The resulting PDF file data.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HtmlToPdfResponse) Reset() {
	*x = HtmlToPdfResponse{}
	mi := &file_file_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HtmlToPdfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HtmlToPdfResponse) ProtoMessage() {}

func (x *HtmlToPdfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HtmlToPdfResponse.ProtoReflect.Descriptor instead.
func (*HtmlToPdfResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{39}
}

func (x *HtmlToPdfResponse) GetPdf() []byte {
	if x != nil {
		return x.Pdf
	}
	return nil
}

// Request to upload a file.
type UploadFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`       // URL of the file to upload.
	Dest          string                 `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest,omitempty"`     // Destination path for the uploaded file.
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`     // Name of the file.
	Domain        string                 `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"` // Domain from which the file is being uploaded.
	IsDir         bool                   `protobuf:"varint,5,opt,name=isDir,proto3" json:"isDir,omitempty"`  // True if the upload is a directory (e.g., for a directory of streams).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadFileRequest) Reset() {
	*x = UploadFileRequest{}
	mi := &file_file_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileRequest) ProtoMessage() {}

func (x *UploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileRequest.ProtoReflect.Descriptor instead.
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{40}
}

func (x *UploadFileRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UploadFileRequest) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *UploadFileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadFileRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UploadFileRequest) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

type UploadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uploaded      int64                  `protobuf:"varint,1,opt,name=uploaded,proto3" json:"uploaded,omitempty"` // Amount of data uploaded.
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`       // Total size of the file.
	Info          string                 `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`          // Information about the upload status, errors, or completion.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadFileResponse) Reset() {
	*x = UploadFileResponse{}
	mi := &file_file_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileResponse) ProtoMessage() {}

func (x *UploadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileResponse.ProtoReflect.Descriptor instead.
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{41}
}

func (x *UploadFileResponse) GetUploaded() int64 {
	if x != nil {
		return x.Uploaded
	}
	return 0
}

func (x *UploadFileResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UploadFileResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// StopRequest is the request message to stop the server.
type StopRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	mi := &file_file_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{42}
}

// StopResponse is the response message when the server is stopped.
type StopResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	mi := &file_file_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{43}
}

var File_file_proto protoreflect.FileDescriptor

const file_file_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"file.proto\x12\x04file\x1a\x1cgoogle/protobuf/struct.proto\"\a\n" +
	"\x05Empty\"\xb7\x02\n" +
	"\bFileInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12\x12\n" +
	"\x04mode\x18\x03 \x01(\rR\x04mode\x12\x1b\n" +
	"\tmode_time\x18\x04 \x01(\x03R\bmodeTime\x12\x15\n" +
	"\x06is_dir\x18\x05 \x01(\bR\x05isDir\x12\x12\n" +
	"\x04path\x18\x06 \x01(\tR\x04path\x12\x12\n" +
	"\x04mime\x18\a \x01(\tR\x04mime\x12\x1c\n" +
	"\tthumbnail\x18\b \x01(\tR\tthumbnail\x12\x1a\n" +
	"\bchecksum\x18\t \x01(\tR\bchecksum\x123\n" +
	"\bmetadata\x18\n" +
	" \x01(\v2\x17.google.protobuf.StructR\bmetadata\x12$\n" +
	"\x05files\x18\v \x03(\v2\x0e.file.FileInfoR\x05files\"\x94\x01\n" +
	"\x0eReadDirRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1c\n" +
	"\trecursive\x18\x02 \x01(\bR\trecursive\x12&\n" +
	"\x0ethumbnailWidth\x18\x03 \x01(\x05R\x0ethumbnailWidth\x12(\n" +
	"\x0fthumbnailHeight\x18\x04 \x01(\x05R\x0fthumbnailHeight\"5\n" +
	"\x0fReadDirResponse\x12\"\n" +
	"\x04info\x18\x01 \x01(\v2\x0e.file.FileInfoR\x04info\":\n" +
	"\x10CreateDirRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"+\n" +
	"\x11CreateDirResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"&\n" +
	"\x10DeleteDirRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"+\n" +
	"\x11DeleteDirResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"Y\n" +
	"\rRenameRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x19\n" +
	"\bnew_name\x18\x02 \x01(\tR\anewName\x12\x19\n" +
	"\bold_name\x18\x03 \x01(\tR\aoldName\"(\n" +
	"\x0eRenameResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"7\n" +
	"\vCopyRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x14\n" +
	"\x05files\x18\x02 \x03(\tR\x05files\"&\n" +
	"\fCopyResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"7\n" +
	"\vMoveRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x14\n" +
	"\x05files\x18\x02 \x03(\tR\x05files\"&\n" +
	"\fMoveResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"z\n" +
	"\x12GetFileInfoRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12&\n" +
	"\x0ethumbnailWidth\x18\x02 \x01(\x05R\x0ethumbnailWidth\x12(\n" +
	"\x0fthumbnailHeight\x18\x03 \x01(\x05R\x0fthumbnailHeight\"9\n" +
	"\x13GetFileInfoResponse\x12\"\n" +
	"\x04info\x18\x01 \x01(\v2\x0e.file.FileInfoR\x04info\",\n" +
	"\x16GetFileMetadataRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"J\n" +
	"\x17GetFileMetadataResponse\x12/\n" +
	"\x06result\x18\x01 \x01(\v2\x17.google.protobuf.StructR\x06result\"%\n" +
	"\x0fReadFileRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"&\n" +
	"\x10ReadFileResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"E\n" +
	"\x0fSaveFileRequest\x12\x14\n" +
	"\x04path\x18\x01 \x01(\tH\x00R\x04path\x12\x14\n" +
	"\x04data\x18\x02 \x01(\fH\x00R\x04dataB\x06\n" +
	"\x04file\"*\n" +
	"\x10SaveFileResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"'\n" +
	"\x11DeleteFileRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\",\n" +
	"\x12DeleteFileResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"\x9a\x01\n" +
	"\x14GetThumbnailsRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1c\n" +
	"\trecursive\x18\x02 \x01(\bR\trecursive\x12&\n" +
	"\x0ethumbnailWidth\x18\x03 \x01(\x05R\x0ethumbnailWidth\x12(\n" +
	"\x0fthumbnailHeight\x18\x04 \x01(\x05R\x0fthumbnailHeight\"+\n" +
	"\x15GetThumbnailsResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"@\n" +
	"\x14CreateArchiveRequest\x12\x14\n" +
	"\x05paths\x18\x01 \x03(\tR\x05paths\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"/\n" +
	"\x15CreateArchiveResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\tR\x06result\"L\n" +
	"\x10CreateLnkRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03lnk\x18\x03 \x01(\tR\x03lnk\"\x13\n" +
	"\x11CreateLnkResponse\")\n" +
	"\x13AddPublicDirRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"\x16\n" +
	"\x14AddPublicDirResponse\",\n" +
	"\x16RemovePublicDirRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"\x19\n" +
	"\x17RemovePublicDirResponse\"\x16\n" +
	"\x14GetPublicDirsRequest\"+\n" +
	"\x15GetPublicDirsResponse\x12\x12\n" +
	"\x04dirs\x18\x01 \x03(\tR\x04dirs\"?\n" +
	"\x15WriteExcelFileRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04data\x18\x02 \x01(\tR\x04data\"0\n" +
	"\x16WriteExcelFileResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"#\n" +
	"\rHtmlToPdfRqst\x12\x12\n" +
	"\x04html\x18\x01 \x01(\tR\x04html\"%\n" +
	"\x11HtmlToPdfResponse\x12\x10\n" +
	"\x03pdf\x18\x01 \x01(\fR\x03pdf\"{\n" +
	"\x11UploadFileRequest\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x12\n" +
	"\x04dest\x18\x02 \x01(\tR\x04dest\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06domain\x18\x04 \x01(\tR\x06domain\x12\x14\n" +
	"\x05isDir\x18\x05 \x01(\bR\x05isDir\"Z\n" +
	"\x12UploadFileResponse\x12\x1a\n" +
	"\buploaded\x18\x01 \x01(\x03R\buploaded\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04info\x18\x03 \x01(\tR\x04info\"\r\n" +
	"\vStopRequest\"\x0e\n" +
	"\fStopResponse2\xd4\n" +
	"\n" +
	"\vFileService\x12-\n" +
	"\x04Stop\x12\x11.file.StopRequest\x1a\x12.file.StopResponse\x12E\n" +
	"\fAddPublicDir\x12\x19.file.AddPublicDirRequest\x1a\x1a.file.AddPublicDirResponse\x12N\n" +
	"\x0fRemovePublicDir\x12\x1c.file.RemovePublicDirRequest\x1a\x1d.file.RemovePublicDirResponse\x12H\n" +
	"\rGetPublicDirs\x12\x1a.file.GetPublicDirsRequest\x1a\x1b.file.GetPublicDirsResponse\x128\n" +
	"\aReadDir\x12\x14.file.ReadDirRequest\x1a\x15.file.ReadDirResponse0\x01\x12<\n" +
	"\tCreateDir\x12\x16.file.CreateDirRequest\x1a\x17.file.CreateDirResponse\x12<\n" +
	"\tCreateLnk\x12\x16.file.CreateLnkRequest\x1a\x17.file.CreateLnkResponse\x12<\n" +
	"\tDeleteDir\x12\x16.file.DeleteDirRequest\x1a\x17.file.DeleteDirResponse\x123\n" +
	"\x06Rename\x12\x13.file.RenameRequest\x1a\x14.file.RenameResponse\x12-\n" +
	"\x04Move\x12\x11.file.MoveRequest\x1a\x12.file.MoveResponse\x12-\n" +
	"\x04Copy\x12\x11.file.CopyRequest\x1a\x12.file.CopyResponse\x12H\n" +
	"\rCreateArchive\x12\x1a.file.CreateArchiveRequest\x1a\x1b.file.CreateArchiveResponse\x12B\n" +
	"\vGetFileInfo\x12\x18.file.GetFileInfoRequest\x1a\x19.file.GetFileInfoResponse\x12N\n" +
	"\x0fGetFileMetadata\x12\x1c.file.GetFileMetadataRequest\x1a\x1d.file.GetFileMetadataResponse\x12;\n" +
	"\bReadFile\x12\x15.file.ReadFileRequest\x1a\x16.file.ReadFileResponse0\x01\x12;\n" +
	"\bSaveFile\x12\x15.file.SaveFileRequest\x1a\x16.file.SaveFileResponse(\x01\x12?\n" +
	"\n" +
	"DeleteFile\x12\x17.file.DeleteFileRequest\x1a\x18.file.DeleteFileResponse\x12J\n" +
	"\rGetThumbnails\x12\x1a.file.GetThumbnailsRequest\x1a\x1b.file.GetThumbnailsResponse0\x01\x12A\n" +
	"\n" +
	"UploadFile\x12\x17.file.UploadFileRequest\x1a\x18.file.UploadFileResponse0\x01\x12K\n" +
	"\x0eWriteExcelFile\x12\x1b.file.WriteExcelFileRequest\x1a\x1c.file.WriteExcelFileResponse\x129\n" +
	"\tHtmlToPdf\x12\x13.file.HtmlToPdfRqst\x1a\x17.file.HtmlToPdfResponseB3Z1github.com/globulario/services/golang/file/filepbb\x06proto3"

var (
	file_file_proto_rawDescOnce sync.Once
	file_file_proto_rawDescData []byte
)

func file_file_proto_rawDescGZIP() []byte {
	file_file_proto_rawDescOnce.Do(func() {
		file_file_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_file_proto_rawDesc), len(file_file_proto_rawDesc)))
	})
	return file_file_proto_rawDescData
}

var file_file_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_file_proto_goTypes = []any{
	(*Empty)(nil),                   // 0: file.Empty
	(*FileInfo)(nil),                // 1: file.FileInfo
	(*ReadDirRequest)(nil),          // 2: file.ReadDirRequest
	(*ReadDirResponse)(nil),         // 3: file.ReadDirResponse
	(*CreateDirRequest)(nil),        // 4: file.CreateDirRequest
	(*CreateDirResponse)(nil),       // 5: file.CreateDirResponse
	(*DeleteDirRequest)(nil),        // 6: file.DeleteDirRequest
	(*DeleteDirResponse)(nil),       // 7: file.DeleteDirResponse
	(*RenameRequest)(nil),           // 8: file.RenameRequest
	(*RenameResponse)(nil),          // 9: file.RenameResponse
	(*CopyRequest)(nil),             // 10: file.CopyRequest
	(*CopyResponse)(nil),            // 11: file.CopyResponse
	(*MoveRequest)(nil),             // 12: file.MoveRequest
	(*MoveResponse)(nil),            // 13: file.MoveResponse
	(*GetFileInfoRequest)(nil),      // 14: file.GetFileInfoRequest
	(*GetFileInfoResponse)(nil),     // 15: file.GetFileInfoResponse
	(*GetFileMetadataRequest)(nil),  // 16: file.GetFileMetadataRequest
	(*GetFileMetadataResponse)(nil), // 17: file.GetFileMetadataResponse
	(*ReadFileRequest)(nil),         // 18: file.ReadFileRequest
	(*ReadFileResponse)(nil),        // 19: file.ReadFileResponse
	(*SaveFileRequest)(nil),         // 20: file.SaveFileRequest
	(*SaveFileResponse)(nil),        // 21: file.SaveFileResponse
	(*DeleteFileRequest)(nil),       // 22: file.DeleteFileRequest
	(*DeleteFileResponse)(nil),      // 23: file.DeleteFileResponse
	(*GetThumbnailsRequest)(nil),    // 24: file.GetThumbnailsRequest
	(*GetThumbnailsResponse)(nil),   // 25: file.GetThumbnailsResponse
	(*CreateArchiveRequest)(nil),    // 26: file.CreateArchiveRequest
	(*CreateArchiveResponse)(nil),   // 27: file.CreateArchiveResponse
	(*CreateLnkRequest)(nil),        // 28: file.CreateLnkRequest
	(*CreateLnkResponse)(nil),       // 29: file.CreateLnkResponse
	(*AddPublicDirRequest)(nil),     // 30: file.AddPublicDirRequest
	(*AddPublicDirResponse)(nil),    // 31: file.AddPublicDirResponse
	(*RemovePublicDirRequest)(nil),  // 32: file.RemovePublicDirRequest
	(*RemovePublicDirResponse)(nil), // 33: file.RemovePublicDirResponse
	(*GetPublicDirsRequest)(nil),    // 34: file.GetPublicDirsRequest
	(*GetPublicDirsResponse)(nil),   // 35: file.GetPublicDirsResponse
	(*WriteExcelFileRequest)(nil),   // 36: file.WriteExcelFileRequest
	(*WriteExcelFileResponse)(nil),  // 37: file.WriteExcelFileResponse
	(*HtmlToPdfRqst)(nil),           // 38: file.HtmlToPdfRqst
	(*HtmlToPdfResponse)(nil),       // 39: file.HtmlToPdfResponse
	(*UploadFileRequest)(nil),       // 40: file.UploadFileRequest
	(*UploadFileResponse)(nil),      // 41: file.UploadFileResponse
	(*StopRequest)(nil),             // 42: file.StopRequest
	(*StopResponse)(nil),            // 43: file.StopResponse
	(*structpb.Struct)(nil),         // 44: google.protobuf.Struct
}
var file_file_proto_depIdxs = []int32{
	44, // 0: file.FileInfo.metadata:type_name -> google.protobuf.Struct
	1,  // 1: file.FileInfo.files:type_name -> file.FileInfo
	1,  // 2: file.ReadDirResponse.info:type_name -> file.FileInfo
	1,  // 3: file.GetFileInfoResponse.info:type_name -> file.FileInfo
	44, // 4: file.GetFileMetadataResponse.result:type_name -> google.protobuf.Struct
	42, // 5: file.FileService.Stop:input_type -> file.StopRequest
	30, // 6: file.FileService.AddPublicDir:input_type -> file.AddPublicDirRequest
	32, // 7: file.FileService.RemovePublicDir:input_type -> file.RemovePublicDirRequest
	34, // 8: file.FileService.GetPublicDirs:input_type -> file.GetPublicDirsRequest
	2,  // 9: file.FileService.ReadDir:input_type -> file.ReadDirRequest
	4,  // 10: file.FileService.CreateDir:input_type -> file.CreateDirRequest
	28, // 11: file.FileService.CreateLnk:input_type -> file.CreateLnkRequest
	6,  // 12: file.FileService.DeleteDir:input_type -> file.DeleteDirRequest
	8,  // 13: file.FileService.Rename:input_type -> file.RenameRequest
	12, // 14: file.FileService.Move:input_type -> file.MoveRequest
	10, // 15: file.FileService.Copy:input_type -> file.CopyRequest
	26, // 16: file.FileService.CreateArchive:input_type -> file.CreateArchiveRequest
	14, // 17: file.FileService.GetFileInfo:input_type -> file.GetFileInfoRequest
	16, // 18: file.FileService.GetFileMetadata:input_type -> file.GetFileMetadataRequest
	18, // 19: file.FileService.ReadFile:input_type -> file.ReadFileRequest
	20, // 20: file.FileService.SaveFile:input_type -> file.SaveFileRequest
	22, // 21: file.FileService.DeleteFile:input_type -> file.DeleteFileRequest
	24, // 22: file.FileService.GetThumbnails:input_type -> file.GetThumbnailsRequest
	40, // 23: file.FileService.UploadFile:input_type -> file.UploadFileRequest
	36, // 24: file.FileService.WriteExcelFile:input_type -> file.WriteExcelFileRequest
	38, // 25: file.FileService.HtmlToPdf:input_type -> file.HtmlToPdfRqst
	43, // 26: file.FileService.Stop:output_type -> file.StopResponse
	31, // 27: file.FileService.AddPublicDir:output_type -> file.AddPublicDirResponse
	33, // 28: file.FileService.RemovePublicDir:output_type -> file.RemovePublicDirResponse
	35, // 29: file.FileService.GetPublicDirs:output_type -> file.GetPublicDirsResponse
	3,  // 30: file.FileService.ReadDir:output_type -> file.ReadDirResponse
	5,  // 31: file.FileService.CreateDir:output_type -> file.CreateDirResponse
	29, // 32: file.FileService.CreateLnk:output_type -> file.CreateLnkResponse
	7,  // 33: file.FileService.DeleteDir:output_type -> file.DeleteDirResponse
	9,  // 34: file.FileService.Rename:output_type -> file.RenameResponse
	13, // 35: file.FileService.Move:output_type -> file.MoveResponse
	11, // 36: file.FileService.Copy:output_type -> file.CopyResponse
	27, // 37: file.FileService.CreateArchive:output_type -> file.CreateArchiveResponse
	15, // 38: file.FileService.GetFileInfo:output_type -> file.GetFileInfoResponse
	17, // 39: file.FileService.GetFileMetadata:output_type -> file.GetFileMetadataResponse
	19, // 40: file.FileService.ReadFile:output_type -> file.ReadFileResponse
	21, // 41: file.FileService.SaveFile:output_type -> file.SaveFileResponse
	23, // 42: file.FileService.DeleteFile:output_type -> file.DeleteFileResponse
	25, // 43: file.FileService.GetThumbnails:output_type -> file.GetThumbnailsResponse
	41, // 44: file.FileService.UploadFile:output_type -> file.UploadFileResponse
	37, // 45: file.FileService.WriteExcelFile:output_type -> file.WriteExcelFileResponse
	39, // 46: file.FileService.HtmlToPdf:output_type -> file.HtmlToPdfResponse
	26, // [26:47] is the sub-list for method output_type
	5,  // [5:26] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_file_proto_init() }
func file_file_proto_init() {
	if File_file_proto != nil {
		return
	}
	file_file_proto_msgTypes[20].OneofWrappers = []any{
		(*SaveFileRequest_Path)(nil),
		(*SaveFileRequest_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_file_proto_rawDesc), len(file_file_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_file_proto_goTypes,
		DependencyIndexes: file_file_proto_depIdxs,
		MessageInfos:      file_file_proto_msgTypes,
	}.Build()
	File_file_proto = out.File
	file_file_proto_goTypes = nil
	file_file_proto_depIdxs = nil
}
