//*
// You can use echo as starter project.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: file.proto

package filepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileService_Stop_FullMethodName            = "/file.FileService/Stop"
	FileService_AddPublicDir_FullMethodName    = "/file.FileService/AddPublicDir"
	FileService_RemovePublicDir_FullMethodName = "/file.FileService/RemovePublicDir"
	FileService_GetPublicDirs_FullMethodName   = "/file.FileService/GetPublicDirs"
	FileService_ReadDir_FullMethodName         = "/file.FileService/ReadDir"
	FileService_CreateDir_FullMethodName       = "/file.FileService/CreateDir"
	FileService_CreateLnk_FullMethodName       = "/file.FileService/CreateLnk"
	FileService_DeleteDir_FullMethodName       = "/file.FileService/DeleteDir"
	FileService_Rename_FullMethodName          = "/file.FileService/Rename"
	FileService_Move_FullMethodName            = "/file.FileService/Move"
	FileService_Copy_FullMethodName            = "/file.FileService/Copy"
	FileService_CreateArchive_FullMethodName   = "/file.FileService/CreateArchive"
	FileService_GetFileInfo_FullMethodName     = "/file.FileService/GetFileInfo"
	FileService_GetFileMetadata_FullMethodName = "/file.FileService/GetFileMetadata"
	FileService_ReadFile_FullMethodName        = "/file.FileService/ReadFile"
	FileService_SaveFile_FullMethodName        = "/file.FileService/SaveFile"
	FileService_DeleteFile_FullMethodName      = "/file.FileService/DeleteFile"
	FileService_GetThumbnails_FullMethodName   = "/file.FileService/GetThumbnails"
	FileService_UploadFile_FullMethodName      = "/file.FileService/UploadFile"
	FileService_WriteExcelFile_FullMethodName  = "/file.FileService/WriteExcelFile"
	FileService_HtmlToPdf_FullMethodName       = "/file.FileService/HtmlToPdf"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FileService defines a set of RPCs for managing files and directories, including operations like
// creating, reading, updating, deleting, and managing conversions and metadata for various file types.
// It also includes services for video processing, thumbnail generation, and public directory management.
type FileServiceClient interface {
	// Stop the server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Add a directory to the list of public directories.
	AddPublicDir(ctx context.Context, in *AddPublicDirRequest, opts ...grpc.CallOption) (*AddPublicDirResponse, error)
	// Remove a directory from the list of public directories.
	RemovePublicDir(ctx context.Context, in *RemovePublicDirRequest, opts ...grpc.CallOption) (*RemovePublicDirResponse, error)
	// Return the list of public directories.
	GetPublicDirs(ctx context.Context, in *GetPublicDirsRequest, opts ...grpc.CallOption) (*GetPublicDirsResponse, error)
	// Return a JSON string containing the directory information, including thumbnails for images.
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadDirResponse], error)
	// Create a new directory.
	CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirResponse, error)
	// Create a link file.
	CreateLnk(ctx context.Context, in *CreateLnkRequest, opts ...grpc.CallOption) (*CreateLnkResponse, error)
	// Delete a directory.
	DeleteDir(ctx context.Context, in *DeleteDirRequest, opts ...grpc.CallOption) (*DeleteDirResponse, error)
	// Rename a file or directory.
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	// Move a file or directory.
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	// Copy a file or directory.
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error)
	// Create an archive from a given directory and set its name.
	CreateArchive(ctx context.Context, in *CreateArchiveRequest, opts ...grpc.CallOption) (*CreateArchiveResponse, error)
	// Get file information, including size, name, and thumbnail.
	GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error)
	// Return file metadata.
	GetFileMetadata(ctx context.Context, in *GetFileMetadataRequest, opts ...grpc.CallOption) (*GetFileMetadataResponse, error)
	// Read a file, suitable for small to medium-sized files.
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadFileResponse], error)
	// Save a file on the server.
	SaveFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SaveFileRequest, SaveFileResponse], error)
	// Delete a file.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	// Retrieve thumbnails for specific files.
	GetThumbnails(ctx context.Context, in *GetThumbnailsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetThumbnailsResponse], error)
	// Upload a file from a URL.
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UploadFileResponse], error)
	// Write an Excel file.
	WriteExcelFile(ctx context.Context, in *WriteExcelFileRequest, opts ...grpc.CallOption) (*WriteExcelFileResponse, error)
	// Convert HTML to PDF.
	HtmlToPdf(ctx context.Context, in *HtmlToPdfRqst, opts ...grpc.CallOption) (*HtmlToPdfResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, FileService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) AddPublicDir(ctx context.Context, in *AddPublicDirRequest, opts ...grpc.CallOption) (*AddPublicDirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPublicDirResponse)
	err := c.cc.Invoke(ctx, FileService_AddPublicDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) RemovePublicDir(ctx context.Context, in *RemovePublicDirRequest, opts ...grpc.CallOption) (*RemovePublicDirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePublicDirResponse)
	err := c.cc.Invoke(ctx, FileService_RemovePublicDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetPublicDirs(ctx context.Context, in *GetPublicDirsRequest, opts ...grpc.CallOption) (*GetPublicDirsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicDirsResponse)
	err := c.cc.Invoke(ctx, FileService_GetPublicDirs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadDirResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], FileService_ReadDir_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadDirRequest, ReadDirResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_ReadDirClient = grpc.ServerStreamingClient[ReadDirResponse]

func (c *fileServiceClient) CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDirResponse)
	err := c.cc.Invoke(ctx, FileService_CreateDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CreateLnk(ctx context.Context, in *CreateLnkRequest, opts ...grpc.CallOption) (*CreateLnkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLnkResponse)
	err := c.cc.Invoke(ctx, FileService_CreateLnk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteDir(ctx context.Context, in *DeleteDirRequest, opts ...grpc.CallOption) (*DeleteDirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDirResponse)
	err := c.cc.Invoke(ctx, FileService_DeleteDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameResponse)
	err := c.cc.Invoke(ctx, FileService_Rename_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, FileService_Move_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyResponse)
	err := c.cc.Invoke(ctx, FileService_Copy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CreateArchive(ctx context.Context, in *CreateArchiveRequest, opts ...grpc.CallOption) (*CreateArchiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateArchiveResponse)
	err := c.cc.Invoke(ctx, FileService_CreateArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileInfoResponse)
	err := c.cc.Invoke(ctx, FileService_GetFileInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileMetadata(ctx context.Context, in *GetFileMetadataRequest, opts ...grpc.CallOption) (*GetFileMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileMetadataResponse)
	err := c.cc.Invoke(ctx, FileService_GetFileMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], FileService_ReadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadFileRequest, ReadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_ReadFileClient = grpc.ServerStreamingClient[ReadFileResponse]

func (c *fileServiceClient) SaveFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SaveFileRequest, SaveFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[2], FileService_SaveFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SaveFileRequest, SaveFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_SaveFileClient = grpc.ClientStreamingClient[SaveFileRequest, SaveFileResponse]

func (c *fileServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, FileService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetThumbnails(ctx context.Context, in *GetThumbnailsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetThumbnailsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[3], FileService_GetThumbnails_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetThumbnailsRequest, GetThumbnailsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_GetThumbnailsClient = grpc.ServerStreamingClient[GetThumbnailsResponse]

func (c *fileServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[4], FileService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileRequest, UploadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_UploadFileClient = grpc.ServerStreamingClient[UploadFileResponse]

func (c *fileServiceClient) WriteExcelFile(ctx context.Context, in *WriteExcelFileRequest, opts ...grpc.CallOption) (*WriteExcelFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteExcelFileResponse)
	err := c.cc.Invoke(ctx, FileService_WriteExcelFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) HtmlToPdf(ctx context.Context, in *HtmlToPdfRqst, opts ...grpc.CallOption) (*HtmlToPdfResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HtmlToPdfResponse)
	err := c.cc.Invoke(ctx, FileService_HtmlToPdf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations should embed UnimplementedFileServiceServer
// for forward compatibility.
//
// FileService defines a set of RPCs for managing files and directories, including operations like
// creating, reading, updating, deleting, and managing conversions and metadata for various file types.
// It also includes services for video processing, thumbnail generation, and public directory management.
type FileServiceServer interface {
	// Stop the server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Add a directory to the list of public directories.
	AddPublicDir(context.Context, *AddPublicDirRequest) (*AddPublicDirResponse, error)
	// Remove a directory from the list of public directories.
	RemovePublicDir(context.Context, *RemovePublicDirRequest) (*RemovePublicDirResponse, error)
	// Return the list of public directories.
	GetPublicDirs(context.Context, *GetPublicDirsRequest) (*GetPublicDirsResponse, error)
	// Return a JSON string containing the directory information, including thumbnails for images.
	ReadDir(*ReadDirRequest, grpc.ServerStreamingServer[ReadDirResponse]) error
	// Create a new directory.
	CreateDir(context.Context, *CreateDirRequest) (*CreateDirResponse, error)
	// Create a link file.
	CreateLnk(context.Context, *CreateLnkRequest) (*CreateLnkResponse, error)
	// Delete a directory.
	DeleteDir(context.Context, *DeleteDirRequest) (*DeleteDirResponse, error)
	// Rename a file or directory.
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	// Move a file or directory.
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	// Copy a file or directory.
	Copy(context.Context, *CopyRequest) (*CopyResponse, error)
	// Create an archive from a given directory and set its name.
	CreateArchive(context.Context, *CreateArchiveRequest) (*CreateArchiveResponse, error)
	// Get file information, including size, name, and thumbnail.
	GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error)
	// Return file metadata.
	GetFileMetadata(context.Context, *GetFileMetadataRequest) (*GetFileMetadataResponse, error)
	// Read a file, suitable for small to medium-sized files.
	ReadFile(*ReadFileRequest, grpc.ServerStreamingServer[ReadFileResponse]) error
	// Save a file on the server.
	SaveFile(grpc.ClientStreamingServer[SaveFileRequest, SaveFileResponse]) error
	// Delete a file.
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	// Retrieve thumbnails for specific files.
	GetThumbnails(*GetThumbnailsRequest, grpc.ServerStreamingServer[GetThumbnailsResponse]) error
	// Upload a file from a URL.
	UploadFile(*UploadFileRequest, grpc.ServerStreamingServer[UploadFileResponse]) error
	// Write an Excel file.
	WriteExcelFile(context.Context, *WriteExcelFileRequest) (*WriteExcelFileResponse, error)
	// Convert HTML to PDF.
	HtmlToPdf(context.Context, *HtmlToPdfRqst) (*HtmlToPdfResponse, error)
}

// UnimplementedFileServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServiceServer struct{}

func (UnimplementedFileServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedFileServiceServer) AddPublicDir(context.Context, *AddPublicDirRequest) (*AddPublicDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPublicDir not implemented")
}
func (UnimplementedFileServiceServer) RemovePublicDir(context.Context, *RemovePublicDirRequest) (*RemovePublicDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePublicDir not implemented")
}
func (UnimplementedFileServiceServer) GetPublicDirs(context.Context, *GetPublicDirsRequest) (*GetPublicDirsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicDirs not implemented")
}
func (UnimplementedFileServiceServer) ReadDir(*ReadDirRequest, grpc.ServerStreamingServer[ReadDirResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadDir not implemented")
}
func (UnimplementedFileServiceServer) CreateDir(context.Context, *CreateDirRequest) (*CreateDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDir not implemented")
}
func (UnimplementedFileServiceServer) CreateLnk(context.Context, *CreateLnkRequest) (*CreateLnkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLnk not implemented")
}
func (UnimplementedFileServiceServer) DeleteDir(context.Context, *DeleteDirRequest) (*DeleteDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDir not implemented")
}
func (UnimplementedFileServiceServer) Rename(context.Context, *RenameRequest) (*RenameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedFileServiceServer) Move(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedFileServiceServer) Copy(context.Context, *CopyRequest) (*CopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedFileServiceServer) CreateArchive(context.Context, *CreateArchiveRequest) (*CreateArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArchive not implemented")
}
func (UnimplementedFileServiceServer) GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedFileServiceServer) GetFileMetadata(context.Context, *GetFileMetadataRequest) (*GetFileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMetadata not implemented")
}
func (UnimplementedFileServiceServer) ReadFile(*ReadFileRequest, grpc.ServerStreamingServer[ReadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedFileServiceServer) SaveFile(grpc.ClientStreamingServer[SaveFileRequest, SaveFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (UnimplementedFileServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileServiceServer) GetThumbnails(*GetThumbnailsRequest, grpc.ServerStreamingServer[GetThumbnailsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetThumbnails not implemented")
}
func (UnimplementedFileServiceServer) UploadFile(*UploadFileRequest, grpc.ServerStreamingServer[UploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileServiceServer) WriteExcelFile(context.Context, *WriteExcelFileRequest) (*WriteExcelFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteExcelFile not implemented")
}
func (UnimplementedFileServiceServer) HtmlToPdf(context.Context, *HtmlToPdfRqst) (*HtmlToPdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HtmlToPdf not implemented")
}
func (UnimplementedFileServiceServer) testEmbeddedByValue() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_AddPublicDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPublicDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).AddPublicDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_AddPublicDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).AddPublicDir(ctx, req.(*AddPublicDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_RemovePublicDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePublicDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).RemovePublicDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_RemovePublicDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).RemovePublicDir(ctx, req.(*RemovePublicDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetPublicDirs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicDirsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetPublicDirs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetPublicDirs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetPublicDirs(ctx, req.(*GetPublicDirsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ReadDir_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadDirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).ReadDir(m, &grpc.GenericServerStream[ReadDirRequest, ReadDirResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_ReadDirServer = grpc.ServerStreamingServer[ReadDirResponse]

func _FileService_CreateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_CreateDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateDir(ctx, req.(*CreateDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CreateLnk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLnkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateLnk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_CreateLnk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateLnk(ctx, req.(*CreateLnkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_DeleteDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteDir(ctx, req.(*DeleteDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_Rename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_Copy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CreateArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_CreateArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateArchive(ctx, req.(*CreateArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileInfo(ctx, req.(*GetFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetFileMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileMetadata(ctx, req.(*GetFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).ReadFile(m, &grpc.GenericServerStream[ReadFileRequest, ReadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_ReadFileServer = grpc.ServerStreamingServer[ReadFileResponse]

func _FileService_SaveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).SaveFile(&grpc.GenericServerStream[SaveFileRequest, SaveFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_SaveFileServer = grpc.ClientStreamingServer[SaveFileRequest, SaveFileResponse]

func _FileService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetThumbnails_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetThumbnailsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).GetThumbnails(m, &grpc.GenericServerStream[GetThumbnailsRequest, GetThumbnailsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_GetThumbnailsServer = grpc.ServerStreamingServer[GetThumbnailsResponse]

func _FileService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UploadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).UploadFile(m, &grpc.GenericServerStream[UploadFileRequest, UploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_UploadFileServer = grpc.ServerStreamingServer[UploadFileResponse]

func _FileService_WriteExcelFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteExcelFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).WriteExcelFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_WriteExcelFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).WriteExcelFile(ctx, req.(*WriteExcelFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_HtmlToPdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HtmlToPdfRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).HtmlToPdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_HtmlToPdf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).HtmlToPdf(ctx, req.(*HtmlToPdfRqst))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _FileService_Stop_Handler,
		},
		{
			MethodName: "AddPublicDir",
			Handler:    _FileService_AddPublicDir_Handler,
		},
		{
			MethodName: "RemovePublicDir",
			Handler:    _FileService_RemovePublicDir_Handler,
		},
		{
			MethodName: "GetPublicDirs",
			Handler:    _FileService_GetPublicDirs_Handler,
		},
		{
			MethodName: "CreateDir",
			Handler:    _FileService_CreateDir_Handler,
		},
		{
			MethodName: "CreateLnk",
			Handler:    _FileService_CreateLnk_Handler,
		},
		{
			MethodName: "DeleteDir",
			Handler:    _FileService_DeleteDir_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _FileService_Rename_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _FileService_Move_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _FileService_Copy_Handler,
		},
		{
			MethodName: "CreateArchive",
			Handler:    _FileService_CreateArchive_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _FileService_GetFileInfo_Handler,
		},
		{
			MethodName: "GetFileMetadata",
			Handler:    _FileService_GetFileMetadata_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileService_DeleteFile_Handler,
		},
		{
			MethodName: "WriteExcelFile",
			Handler:    _FileService_WriteExcelFile_Handler,
		},
		{
			MethodName: "HtmlToPdf",
			Handler:    _FileService_HtmlToPdf_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadDir",
			Handler:       _FileService_ReadDir_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadFile",
			Handler:       _FileService_ReadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveFile",
			Handler:       _FileService_SaveFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetThumbnails",
			Handler:       _FileService_GetThumbnails_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _FileService_UploadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file.proto",
}
