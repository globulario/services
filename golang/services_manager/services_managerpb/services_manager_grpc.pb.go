// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: services_manager.proto

package services_managerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServicesManagerService_InstallService_FullMethodName           = "/services_manager.ServicesManagerService/InstallService"
	ServicesManagerService_UninstallService_FullMethodName         = "/services_manager.ServicesManagerService/UninstallService"
	ServicesManagerService_StopServiceInstance_FullMethodName      = "/services_manager.ServicesManagerService/StopServiceInstance"
	ServicesManagerService_StartServiceInstance_FullMethodName     = "/services_manager.ServicesManagerService/StartServiceInstance"
	ServicesManagerService_RestartAllServices_FullMethodName       = "/services_manager.ServicesManagerService/RestartAllServices"
	ServicesManagerService_GetServicesConfiguration_FullMethodName = "/services_manager.ServicesManagerService/GetServicesConfiguration"
	ServicesManagerService_GetAllActions_FullMethodName            = "/services_manager.ServicesManagerService/GetAllActions"
	ServicesManagerService_SaveServiceConfig_FullMethodName        = "/services_manager.ServicesManagerService/SaveServiceConfig"
)

// ServicesManagerServiceClient is the client API for ServicesManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for managing services.
type ServicesManagerServiceClient interface {
	// Install a new service.
	InstallService(ctx context.Context, in *InstallServiceRequest, opts ...grpc.CallOption) (*InstallServiceResponse, error)
	// Uninstall an existing service.
	UninstallService(ctx context.Context, in *UninstallServiceRequest, opts ...grpc.CallOption) (*UninstallServiceResponse, error)
	// Stop a running service instance.
	StopServiceInstance(ctx context.Context, in *StopServiceInstanceRequest, opts ...grpc.CallOption) (*StopServiceInstanceResponse, error)
	// Start a service instance.
	StartServiceInstance(ctx context.Context, in *StartServiceInstanceRequest, opts ...grpc.CallOption) (*StartServiceInstanceResponse, error)
	// Restart all the services.
	RestartAllServices(ctx context.Context, in *RestartAllServicesRequest, opts ...grpc.CallOption) (*RestartAllServicesResponse, error)
	// Retrieve configuration for all services.
	GetServicesConfiguration(ctx context.Context, in *GetServicesConfigurationRequest, opts ...grpc.CallOption) (*GetServicesConfigurationResponse, error)
	// Get the list of all available actions on the server.
	GetAllActions(ctx context.Context, in *GetAllActionsRequest, opts ...grpc.CallOption) (*GetAllActionsResponse, error)
	// Save configuration for a specific service.
	SaveServiceConfig(ctx context.Context, in *SaveServiceConfigRequest, opts ...grpc.CallOption) (*SaveServiceConfigResponse, error)
}

type servicesManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesManagerServiceClient(cc grpc.ClientConnInterface) ServicesManagerServiceClient {
	return &servicesManagerServiceClient{cc}
}

func (c *servicesManagerServiceClient) InstallService(ctx context.Context, in *InstallServiceRequest, opts ...grpc.CallOption) (*InstallServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallServiceResponse)
	err := c.cc.Invoke(ctx, ServicesManagerService_InstallService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesManagerServiceClient) UninstallService(ctx context.Context, in *UninstallServiceRequest, opts ...grpc.CallOption) (*UninstallServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UninstallServiceResponse)
	err := c.cc.Invoke(ctx, ServicesManagerService_UninstallService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesManagerServiceClient) StopServiceInstance(ctx context.Context, in *StopServiceInstanceRequest, opts ...grpc.CallOption) (*StopServiceInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopServiceInstanceResponse)
	err := c.cc.Invoke(ctx, ServicesManagerService_StopServiceInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesManagerServiceClient) StartServiceInstance(ctx context.Context, in *StartServiceInstanceRequest, opts ...grpc.CallOption) (*StartServiceInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartServiceInstanceResponse)
	err := c.cc.Invoke(ctx, ServicesManagerService_StartServiceInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesManagerServiceClient) RestartAllServices(ctx context.Context, in *RestartAllServicesRequest, opts ...grpc.CallOption) (*RestartAllServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartAllServicesResponse)
	err := c.cc.Invoke(ctx, ServicesManagerService_RestartAllServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesManagerServiceClient) GetServicesConfiguration(ctx context.Context, in *GetServicesConfigurationRequest, opts ...grpc.CallOption) (*GetServicesConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServicesConfigurationResponse)
	err := c.cc.Invoke(ctx, ServicesManagerService_GetServicesConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesManagerServiceClient) GetAllActions(ctx context.Context, in *GetAllActionsRequest, opts ...grpc.CallOption) (*GetAllActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllActionsResponse)
	err := c.cc.Invoke(ctx, ServicesManagerService_GetAllActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesManagerServiceClient) SaveServiceConfig(ctx context.Context, in *SaveServiceConfigRequest, opts ...grpc.CallOption) (*SaveServiceConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveServiceConfigResponse)
	err := c.cc.Invoke(ctx, ServicesManagerService_SaveServiceConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesManagerServiceServer is the server API for ServicesManagerService service.
// All implementations should embed UnimplementedServicesManagerServiceServer
// for forward compatibility.
//
// Service definition for managing services.
type ServicesManagerServiceServer interface {
	// Install a new service.
	InstallService(context.Context, *InstallServiceRequest) (*InstallServiceResponse, error)
	// Uninstall an existing service.
	UninstallService(context.Context, *UninstallServiceRequest) (*UninstallServiceResponse, error)
	// Stop a running service instance.
	StopServiceInstance(context.Context, *StopServiceInstanceRequest) (*StopServiceInstanceResponse, error)
	// Start a service instance.
	StartServiceInstance(context.Context, *StartServiceInstanceRequest) (*StartServiceInstanceResponse, error)
	// Restart all the services.
	RestartAllServices(context.Context, *RestartAllServicesRequest) (*RestartAllServicesResponse, error)
	// Retrieve configuration for all services.
	GetServicesConfiguration(context.Context, *GetServicesConfigurationRequest) (*GetServicesConfigurationResponse, error)
	// Get the list of all available actions on the server.
	GetAllActions(context.Context, *GetAllActionsRequest) (*GetAllActionsResponse, error)
	// Save configuration for a specific service.
	SaveServiceConfig(context.Context, *SaveServiceConfigRequest) (*SaveServiceConfigResponse, error)
}

// UnimplementedServicesManagerServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServicesManagerServiceServer struct{}

func (UnimplementedServicesManagerServiceServer) InstallService(context.Context, *InstallServiceRequest) (*InstallServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallService not implemented")
}
func (UnimplementedServicesManagerServiceServer) UninstallService(context.Context, *UninstallServiceRequest) (*UninstallServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallService not implemented")
}
func (UnimplementedServicesManagerServiceServer) StopServiceInstance(context.Context, *StopServiceInstanceRequest) (*StopServiceInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServiceInstance not implemented")
}
func (UnimplementedServicesManagerServiceServer) StartServiceInstance(context.Context, *StartServiceInstanceRequest) (*StartServiceInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServiceInstance not implemented")
}
func (UnimplementedServicesManagerServiceServer) RestartAllServices(context.Context, *RestartAllServicesRequest) (*RestartAllServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartAllServices not implemented")
}
func (UnimplementedServicesManagerServiceServer) GetServicesConfiguration(context.Context, *GetServicesConfigurationRequest) (*GetServicesConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesConfiguration not implemented")
}
func (UnimplementedServicesManagerServiceServer) GetAllActions(context.Context, *GetAllActionsRequest) (*GetAllActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActions not implemented")
}
func (UnimplementedServicesManagerServiceServer) SaveServiceConfig(context.Context, *SaveServiceConfigRequest) (*SaveServiceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveServiceConfig not implemented")
}
func (UnimplementedServicesManagerServiceServer) testEmbeddedByValue() {}

// UnsafeServicesManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesManagerServiceServer will
// result in compilation errors.
type UnsafeServicesManagerServiceServer interface {
	mustEmbedUnimplementedServicesManagerServiceServer()
}

func RegisterServicesManagerServiceServer(s grpc.ServiceRegistrar, srv ServicesManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedServicesManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServicesManagerService_ServiceDesc, srv)
}

func _ServicesManagerService_InstallService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesManagerServiceServer).InstallService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesManagerService_InstallService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesManagerServiceServer).InstallService(ctx, req.(*InstallServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesManagerService_UninstallService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesManagerServiceServer).UninstallService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesManagerService_UninstallService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesManagerServiceServer).UninstallService(ctx, req.(*UninstallServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesManagerService_StopServiceInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServiceInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesManagerServiceServer).StopServiceInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesManagerService_StopServiceInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesManagerServiceServer).StopServiceInstance(ctx, req.(*StopServiceInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesManagerService_StartServiceInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServiceInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesManagerServiceServer).StartServiceInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesManagerService_StartServiceInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesManagerServiceServer).StartServiceInstance(ctx, req.(*StartServiceInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesManagerService_RestartAllServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartAllServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesManagerServiceServer).RestartAllServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesManagerService_RestartAllServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesManagerServiceServer).RestartAllServices(ctx, req.(*RestartAllServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesManagerService_GetServicesConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesManagerServiceServer).GetServicesConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesManagerService_GetServicesConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesManagerServiceServer).GetServicesConfiguration(ctx, req.(*GetServicesConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesManagerService_GetAllActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesManagerServiceServer).GetAllActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesManagerService_GetAllActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesManagerServiceServer).GetAllActions(ctx, req.(*GetAllActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesManagerService_SaveServiceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveServiceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesManagerServiceServer).SaveServiceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesManagerService_SaveServiceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesManagerServiceServer).SaveServiceConfig(ctx, req.(*SaveServiceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesManagerService_ServiceDesc is the grpc.ServiceDesc for ServicesManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services_manager.ServicesManagerService",
	HandlerType: (*ServicesManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallService",
			Handler:    _ServicesManagerService_InstallService_Handler,
		},
		{
			MethodName: "UninstallService",
			Handler:    _ServicesManagerService_UninstallService_Handler,
		},
		{
			MethodName: "StopServiceInstance",
			Handler:    _ServicesManagerService_StopServiceInstance_Handler,
		},
		{
			MethodName: "StartServiceInstance",
			Handler:    _ServicesManagerService_StartServiceInstance_Handler,
		},
		{
			MethodName: "RestartAllServices",
			Handler:    _ServicesManagerService_RestartAllServices_Handler,
		},
		{
			MethodName: "GetServicesConfiguration",
			Handler:    _ServicesManagerService_GetServicesConfiguration_Handler,
		},
		{
			MethodName: "GetAllActions",
			Handler:    _ServicesManagerService_GetAllActions_Handler,
		},
		{
			MethodName: "SaveServiceConfig",
			Handler:    _ServicesManagerService_SaveServiceConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services_manager.proto",
}
