// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: media.proto

package mediapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to create a video preview.
type CreateVideoPreviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`      // The path of the video file.
	Nb            int32                  `protobuf:"varint,2,opt,name=nb,proto3" json:"nb,omitempty"`         // Number of preview images to generate.
	Height        int32                  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // Height of the preview images.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVideoPreviewRequest) Reset() {
	*x = CreateVideoPreviewRequest{}
	mi := &file_media_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVideoPreviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoPreviewRequest) ProtoMessage() {}

func (x *CreateVideoPreviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoPreviewRequest.ProtoReflect.Descriptor instead.
func (*CreateVideoPreviewRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVideoPreviewRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateVideoPreviewRequest) GetNb() int32 {
	if x != nil {
		return x.Nb
	}
	return 0
}

func (x *CreateVideoPreviewRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type CreateVideoPreviewResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVideoPreviewResponse) Reset() {
	*x = CreateVideoPreviewResponse{}
	mi := &file_media_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVideoPreviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoPreviewResponse) ProtoMessage() {}

func (x *CreateVideoPreviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoPreviewResponse.ProtoReflect.Descriptor instead.
func (*CreateVideoPreviewResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{1}
}

type CreateVideoTimeLineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`    // The path of the video file.
	Width         int32                  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"` // Width of the timeline images.
	Fps           float32                `protobuf:"fixed32,3,opt,name=fps,proto3" json:"fps,omitempty"`    // Frames per second for the timeline.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVideoTimeLineRequest) Reset() {
	*x = CreateVideoTimeLineRequest{}
	mi := &file_media_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVideoTimeLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoTimeLineRequest) ProtoMessage() {}

func (x *CreateVideoTimeLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoTimeLineRequest.ProtoReflect.Descriptor instead.
func (*CreateVideoTimeLineRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{2}
}

func (x *CreateVideoTimeLineRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateVideoTimeLineRequest) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CreateVideoTimeLineRequest) GetFps() float32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

type CreateVideoTimeLineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVideoTimeLineResponse) Reset() {
	*x = CreateVideoTimeLineResponse{}
	mi := &file_media_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVideoTimeLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoTimeLineResponse) ProtoMessage() {}

func (x *CreateVideoTimeLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoTimeLineResponse.ProtoReflect.Descriptor instead.
func (*CreateVideoTimeLineResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{3}
}

type ConvertVideoToMpeg4H264Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // The path of the video file to convert.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConvertVideoToMpeg4H264Request) Reset() {
	*x = ConvertVideoToMpeg4H264Request{}
	mi := &file_media_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertVideoToMpeg4H264Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertVideoToMpeg4H264Request) ProtoMessage() {}

func (x *ConvertVideoToMpeg4H264Request) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertVideoToMpeg4H264Request.ProtoReflect.Descriptor instead.
func (*ConvertVideoToMpeg4H264Request) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{4}
}

func (x *ConvertVideoToMpeg4H264Request) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ConvertVideoToMpeg4H264Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        string                 `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"` // Information about the conversion process.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConvertVideoToMpeg4H264Response) Reset() {
	*x = ConvertVideoToMpeg4H264Response{}
	mi := &file_media_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertVideoToMpeg4H264Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertVideoToMpeg4H264Response) ProtoMessage() {}

func (x *ConvertVideoToMpeg4H264Response) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertVideoToMpeg4H264Response.ProtoReflect.Descriptor instead.
func (*ConvertVideoToMpeg4H264Response) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{5}
}

func (x *ConvertVideoToMpeg4H264Response) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type ConvertVideoToHlsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // The path of the video file to convert.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConvertVideoToHlsRequest) Reset() {
	*x = ConvertVideoToHlsRequest{}
	mi := &file_media_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertVideoToHlsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertVideoToHlsRequest) ProtoMessage() {}

func (x *ConvertVideoToHlsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertVideoToHlsRequest.ProtoReflect.Descriptor instead.
func (*ConvertVideoToHlsRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{6}
}

func (x *ConvertVideoToHlsRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ConvertVideoToHlsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        string                 `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"` // Information about the conversion process.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConvertVideoToHlsResponse) Reset() {
	*x = ConvertVideoToHlsResponse{}
	mi := &file_media_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertVideoToHlsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertVideoToHlsResponse) ProtoMessage() {}

func (x *ConvertVideoToHlsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertVideoToHlsResponse.ProtoReflect.Descriptor instead.
func (*ConvertVideoToHlsResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{7}
}

func (x *ConvertVideoToHlsResponse) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

// Request to start processing a video.
type StartProcessVideoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Path of the video to process. If empty, processes all videos.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartProcessVideoRequest) Reset() {
	*x = StartProcessVideoRequest{}
	mi := &file_media_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartProcessVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProcessVideoRequest) ProtoMessage() {}

func (x *StartProcessVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProcessVideoRequest.ProtoReflect.Descriptor instead.
func (*StartProcessVideoRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{8}
}

func (x *StartProcessVideoRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type StartProcessVideoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartProcessVideoResponse) Reset() {
	*x = StartProcessVideoResponse{}
	mi := &file_media_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartProcessVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProcessVideoResponse) ProtoMessage() {}

func (x *StartProcessVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProcessVideoResponse.ProtoReflect.Descriptor instead.
func (*StartProcessVideoResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{9}
}

// Request to start processing audio.
type StartProcessAudioRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Path of the audio to process. If empty, processes all audio.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartProcessAudioRequest) Reset() {
	*x = StartProcessAudioRequest{}
	mi := &file_media_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartProcessAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProcessAudioRequest) ProtoMessage() {}

func (x *StartProcessAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProcessAudioRequest.ProtoReflect.Descriptor instead.
func (*StartProcessAudioRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{10}
}

func (x *StartProcessAudioRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type StartProcessAudioResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartProcessAudioResponse) Reset() {
	*x = StartProcessAudioResponse{}
	mi := &file_media_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartProcessAudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProcessAudioResponse) ProtoMessage() {}

func (x *StartProcessAudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProcessAudioResponse.ProtoReflect.Descriptor instead.
func (*StartProcessAudioResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{11}
}

// Request to check if video processing is ongoing.
type IsProcessVideoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsProcessVideoRequest) Reset() {
	*x = IsProcessVideoRequest{}
	mi := &file_media_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsProcessVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsProcessVideoRequest) ProtoMessage() {}

func (x *IsProcessVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsProcessVideoRequest.ProtoReflect.Descriptor instead.
func (*IsProcessVideoRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{12}
}

// Response to indicate if video processing is ongoing.
type IsProcessVideoResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IsProcessVideo bool                   `protobuf:"varint,1,opt,name=isProcessVideo,proto3" json:"isProcessVideo,omitempty"` // True if video processing is currently running.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IsProcessVideoResponse) Reset() {
	*x = IsProcessVideoResponse{}
	mi := &file_media_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsProcessVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsProcessVideoResponse) ProtoMessage() {}

func (x *IsProcessVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsProcessVideoResponse.ProtoReflect.Descriptor instead.
func (*IsProcessVideoResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{13}
}

func (x *IsProcessVideoResponse) GetIsProcessVideo() bool {
	if x != nil {
		return x.IsProcessVideo
	}
	return false
}

// Request to upload a video.
type UploadVideoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`       // URL of the video to upload.
	Dest          string                 `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest,omitempty"`     // Destination path for the uploaded video.
	Format        string                 `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"` // Desired format of the video (e.g., mp3, mp4).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadVideoRequest) Reset() {
	*x = UploadVideoRequest{}
	mi := &file_media_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadVideoRequest) ProtoMessage() {}

func (x *UploadVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadVideoRequest.ProtoReflect.Descriptor instead.
func (*UploadVideoRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{14}
}

func (x *UploadVideoRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UploadVideoRequest) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *UploadVideoRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

// Response to video upload request.
type UploadVideoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           int32                  `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`      // Process ID of the upload task.
	Result        string                 `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"` // Result of the upload process.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadVideoResponse) Reset() {
	*x = UploadVideoResponse{}
	mi := &file_media_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadVideoResponse) ProtoMessage() {}

func (x *UploadVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadVideoResponse.ProtoReflect.Descriptor instead.
func (*UploadVideoResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{15}
}

func (x *UploadVideoResponse) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *UploadVideoResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// / Stop process video.
type StopProcessVideoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopProcessVideoRequest) Reset() {
	*x = StopProcessVideoRequest{}
	mi := &file_media_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopProcessVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopProcessVideoRequest) ProtoMessage() {}

func (x *StopProcessVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopProcessVideoRequest.ProtoReflect.Descriptor instead.
func (*StopProcessVideoRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{16}
}

type StopProcessVideoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopProcessVideoResponse) Reset() {
	*x = StopProcessVideoResponse{}
	mi := &file_media_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopProcessVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopProcessVideoResponse) ProtoMessage() {}

func (x *StopProcessVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopProcessVideoResponse.ProtoReflect.Descriptor instead.
func (*StopProcessVideoResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{17}
}

type SetVideoConversionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         bool                   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"` // Boolean to enable or disable video conversion.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetVideoConversionRequest) Reset() {
	*x = SetVideoConversionRequest{}
	mi := &file_media_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetVideoConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVideoConversionRequest) ProtoMessage() {}

func (x *SetVideoConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVideoConversionRequest.ProtoReflect.Descriptor instead.
func (*SetVideoConversionRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{18}
}

func (x *SetVideoConversionRequest) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type SetVideoConversionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetVideoConversionResponse) Reset() {
	*x = SetVideoConversionResponse{}
	mi := &file_media_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetVideoConversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVideoConversionResponse) ProtoMessage() {}

func (x *SetVideoConversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVideoConversionResponse.ProtoReflect.Descriptor instead.
func (*SetVideoConversionResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{19}
}

type SetVideoStreamConversionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         bool                   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"` // Boolean to enable or disable video stream conversion.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetVideoStreamConversionRequest) Reset() {
	*x = SetVideoStreamConversionRequest{}
	mi := &file_media_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetVideoStreamConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVideoStreamConversionRequest) ProtoMessage() {}

func (x *SetVideoStreamConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVideoStreamConversionRequest.ProtoReflect.Descriptor instead.
func (*SetVideoStreamConversionRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{20}
}

func (x *SetVideoStreamConversionRequest) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type SetVideoStreamConversionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetVideoStreamConversionResponse) Reset() {
	*x = SetVideoStreamConversionResponse{}
	mi := &file_media_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetVideoStreamConversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVideoStreamConversionResponse) ProtoMessage() {}

func (x *SetVideoStreamConversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVideoStreamConversionResponse.ProtoReflect.Descriptor instead.
func (*SetVideoStreamConversionResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{21}
}

type SetStartVideoConversionHourRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // The start hour for video conversion.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetStartVideoConversionHourRequest) Reset() {
	*x = SetStartVideoConversionHourRequest{}
	mi := &file_media_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetStartVideoConversionHourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStartVideoConversionHourRequest) ProtoMessage() {}

func (x *SetStartVideoConversionHourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStartVideoConversionHourRequest.ProtoReflect.Descriptor instead.
func (*SetStartVideoConversionHourRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{22}
}

func (x *SetStartVideoConversionHourRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetStartVideoConversionHourResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetStartVideoConversionHourResponse) Reset() {
	*x = SetStartVideoConversionHourResponse{}
	mi := &file_media_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetStartVideoConversionHourResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStartVideoConversionHourResponse) ProtoMessage() {}

func (x *SetStartVideoConversionHourResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStartVideoConversionHourResponse.ProtoReflect.Descriptor instead.
func (*SetStartVideoConversionHourResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{23}
}

type SetMaximumVideoConversionDelayRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // The maximum delay for video conversion.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetMaximumVideoConversionDelayRequest) Reset() {
	*x = SetMaximumVideoConversionDelayRequest{}
	mi := &file_media_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMaximumVideoConversionDelayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMaximumVideoConversionDelayRequest) ProtoMessage() {}

func (x *SetMaximumVideoConversionDelayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMaximumVideoConversionDelayRequest.ProtoReflect.Descriptor instead.
func (*SetMaximumVideoConversionDelayRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{24}
}

func (x *SetMaximumVideoConversionDelayRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetMaximumVideoConversionDelayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetMaximumVideoConversionDelayResponse) Reset() {
	*x = SetMaximumVideoConversionDelayResponse{}
	mi := &file_media_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMaximumVideoConversionDelayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMaximumVideoConversionDelayResponse) ProtoMessage() {}

func (x *SetMaximumVideoConversionDelayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMaximumVideoConversionDelayResponse.ProtoReflect.Descriptor instead.
func (*SetMaximumVideoConversionDelayResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{25}
}

type VideoConversionError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`   // Path of the video file.
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` // Error message encountered during conversion.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoConversionError) Reset() {
	*x = VideoConversionError{}
	mi := &file_media_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoConversionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConversionError) ProtoMessage() {}

func (x *VideoConversionError) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConversionError.ProtoReflect.Descriptor instead.
func (*VideoConversionError) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{26}
}

func (x *VideoConversionError) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VideoConversionError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetVideoConversionErrorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoConversionErrorsRequest) Reset() {
	*x = GetVideoConversionErrorsRequest{}
	mi := &file_media_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoConversionErrorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoConversionErrorsRequest) ProtoMessage() {}

func (x *GetVideoConversionErrorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoConversionErrorsRequest.ProtoReflect.Descriptor instead.
func (*GetVideoConversionErrorsRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{27}
}

type GetVideoConversionErrorsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Errors        []*VideoConversionError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"` // List of video conversion errors.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoConversionErrorsResponse) Reset() {
	*x = GetVideoConversionErrorsResponse{}
	mi := &file_media_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoConversionErrorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoConversionErrorsResponse) ProtoMessage() {}

func (x *GetVideoConversionErrorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoConversionErrorsResponse.ProtoReflect.Descriptor instead.
func (*GetVideoConversionErrorsResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{28}
}

func (x *GetVideoConversionErrorsResponse) GetErrors() []*VideoConversionError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ClearVideoConversionErrorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearVideoConversionErrorsRequest) Reset() {
	*x = ClearVideoConversionErrorsRequest{}
	mi := &file_media_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearVideoConversionErrorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearVideoConversionErrorsRequest) ProtoMessage() {}

func (x *ClearVideoConversionErrorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearVideoConversionErrorsRequest.ProtoReflect.Descriptor instead.
func (*ClearVideoConversionErrorsRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{29}
}

type ClearVideoConversionErrorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearVideoConversionErrorsResponse) Reset() {
	*x = ClearVideoConversionErrorsResponse{}
	mi := &file_media_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearVideoConversionErrorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearVideoConversionErrorsResponse) ProtoMessage() {}

func (x *ClearVideoConversionErrorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearVideoConversionErrorsResponse.ProtoReflect.Descriptor instead.
func (*ClearVideoConversionErrorsResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{30}
}

type ClearVideoConversionErrorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Path of the video file for which to clear the error.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearVideoConversionErrorRequest) Reset() {
	*x = ClearVideoConversionErrorRequest{}
	mi := &file_media_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearVideoConversionErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearVideoConversionErrorRequest) ProtoMessage() {}

func (x *ClearVideoConversionErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearVideoConversionErrorRequest.ProtoReflect.Descriptor instead.
func (*ClearVideoConversionErrorRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{31}
}

func (x *ClearVideoConversionErrorRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ClearVideoConversionErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearVideoConversionErrorResponse) Reset() {
	*x = ClearVideoConversionErrorResponse{}
	mi := &file_media_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearVideoConversionErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearVideoConversionErrorResponse) ProtoMessage() {}

func (x *ClearVideoConversionErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearVideoConversionErrorResponse.ProtoReflect.Descriptor instead.
func (*ClearVideoConversionErrorResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{32}
}

type ClearVideoConversionLogsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearVideoConversionLogsRequest) Reset() {
	*x = ClearVideoConversionLogsRequest{}
	mi := &file_media_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearVideoConversionLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearVideoConversionLogsRequest) ProtoMessage() {}

func (x *ClearVideoConversionLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearVideoConversionLogsRequest.ProtoReflect.Descriptor instead.
func (*ClearVideoConversionLogsRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{33}
}

type ClearVideoConversionLogsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearVideoConversionLogsResponse) Reset() {
	*x = ClearVideoConversionLogsResponse{}
	mi := &file_media_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearVideoConversionLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearVideoConversionLogsResponse) ProtoMessage() {}

func (x *ClearVideoConversionLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearVideoConversionLogsResponse.ProtoReflect.Descriptor instead.
func (*ClearVideoConversionLogsResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{34}
}

type VideoConversionLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                       // Path of the video file.
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                         // Log message.
	LogTime       int64                  `protobuf:"varint,3,opt,name=log_time,json=logTime,proto3" json:"log_time,omitempty"` // Timestamp of the log entry.
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                   // Status of the conversion process.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoConversionLog) Reset() {
	*x = VideoConversionLog{}
	mi := &file_media_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoConversionLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConversionLog) ProtoMessage() {}

func (x *VideoConversionLog) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConversionLog.ProtoReflect.Descriptor instead.
func (*VideoConversionLog) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{35}
}

func (x *VideoConversionLog) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VideoConversionLog) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *VideoConversionLog) GetLogTime() int64 {
	if x != nil {
		return x.LogTime
	}
	return 0
}

func (x *VideoConversionLog) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetVideoConversionLogsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoConversionLogsRequest) Reset() {
	*x = GetVideoConversionLogsRequest{}
	mi := &file_media_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoConversionLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoConversionLogsRequest) ProtoMessage() {}

func (x *GetVideoConversionLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoConversionLogsRequest.ProtoReflect.Descriptor instead.
func (*GetVideoConversionLogsRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{36}
}

type GetVideoConversionLogsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Logs          []*VideoConversionLog  `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"` // List of video conversion logs.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoConversionLogsResponse) Reset() {
	*x = GetVideoConversionLogsResponse{}
	mi := &file_media_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoConversionLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoConversionLogsResponse) ProtoMessage() {}

func (x *GetVideoConversionLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoConversionLogsResponse.ProtoReflect.Descriptor instead.
func (*GetVideoConversionLogsResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{37}
}

func (x *GetVideoConversionLogsResponse) GetLogs() []*VideoConversionLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

// Request to generate a playlist for a given directory.
type GeneratePlaylistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dir           string                 `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"` // Directory for which to generate the playlist.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneratePlaylistRequest) Reset() {
	*x = GeneratePlaylistRequest{}
	mi := &file_media_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneratePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePlaylistRequest) ProtoMessage() {}

func (x *GeneratePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePlaylistRequest.ProtoReflect.Descriptor instead.
func (*GeneratePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{38}
}

func (x *GeneratePlaylistRequest) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

type GeneratePlaylistResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneratePlaylistResponse) Reset() {
	*x = GeneratePlaylistResponse{}
	mi := &file_media_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneratePlaylistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePlaylistResponse) ProtoMessage() {}

func (x *GeneratePlaylistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePlaylistResponse.ProtoReflect.Descriptor instead.
func (*GeneratePlaylistResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{39}
}

type CreateVttFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Path of the video file.
	Fps           float32                `protobuf:"fixed32,2,opt,name=fps,proto3" json:"fps,omitempty"` // Frames per second for the timeline.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVttFileRequest) Reset() {
	*x = CreateVttFileRequest{}
	mi := &file_media_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVttFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVttFileRequest) ProtoMessage() {}

func (x *CreateVttFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVttFileRequest.ProtoReflect.Descriptor instead.
func (*CreateVttFileRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{40}
}

func (x *CreateVttFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateVttFileRequest) GetFps() float32 {
	if x != nil {
		return x.Fps
	}
	return 0
}

type CreateVttFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVttFileResponse) Reset() {
	*x = CreateVttFileResponse{}
	mi := &file_media_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVttFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVttFileResponse) ProtoMessage() {}

func (x *CreateVttFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVttFileResponse.ProtoReflect.Descriptor instead.
func (*CreateVttFileResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{41}
}

type StopRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	mi := &file_media_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{42}
}

type StopResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	mi := &file_media_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{43}
}

var File_media_proto protoreflect.FileDescriptor

const file_media_proto_rawDesc = "" +
	"\n" +
	"\vmedia.proto\x12\x05media\"W\n" +
	"\x19CreateVideoPreviewRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x0e\n" +
	"\x02nb\x18\x02 \x01(\x05R\x02nb\x12\x16\n" +
	"\x06height\x18\x03 \x01(\x05R\x06height\"\x1c\n" +
	"\x1aCreateVideoPreviewResponse\"X\n" +
	"\x1aCreateVideoTimeLineRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x14\n" +
	"\x05width\x18\x02 \x01(\x05R\x05width\x12\x10\n" +
	"\x03fps\x18\x03 \x01(\x02R\x03fps\"\x1d\n" +
	"\x1bCreateVideoTimeLineResponse\"4\n" +
	"\x1eConvertVideoToMpeg4H264Request\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"9\n" +
	"\x1fConvertVideoToMpeg4H264Response\x12\x16\n" +
	"\x06output\x18\x01 \x01(\tR\x06output\".\n" +
	"\x18ConvertVideoToHlsRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"3\n" +
	"\x19ConvertVideoToHlsResponse\x12\x16\n" +
	"\x06output\x18\x01 \x01(\tR\x06output\".\n" +
	"\x18StartProcessVideoRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"\x1b\n" +
	"\x19StartProcessVideoResponse\".\n" +
	"\x18StartProcessAudioRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"\x1b\n" +
	"\x19StartProcessAudioResponse\"\x17\n" +
	"\x15IsProcessVideoRequest\"@\n" +
	"\x16IsProcessVideoResponse\x12&\n" +
	"\x0eisProcessVideo\x18\x01 \x01(\bR\x0eisProcessVideo\"R\n" +
	"\x12UploadVideoRequest\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x12\n" +
	"\x04dest\x18\x02 \x01(\tR\x04dest\x12\x16\n" +
	"\x06format\x18\x03 \x01(\tR\x06format\"?\n" +
	"\x13UploadVideoResponse\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\x05R\x03pid\x12\x16\n" +
	"\x06result\x18\x02 \x01(\tR\x06result\"\x19\n" +
	"\x17StopProcessVideoRequest\"\x1a\n" +
	"\x18StopProcessVideoResponse\"1\n" +
	"\x19SetVideoConversionRequest\x12\x14\n" +
	"\x05value\x18\x01 \x01(\bR\x05value\"\x1c\n" +
	"\x1aSetVideoConversionResponse\"7\n" +
	"\x1fSetVideoStreamConversionRequest\x12\x14\n" +
	"\x05value\x18\x01 \x01(\bR\x05value\"\"\n" +
	" SetVideoStreamConversionResponse\":\n" +
	"\"SetStartVideoConversionHourRequest\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"%\n" +
	"#SetStartVideoConversionHourResponse\"=\n" +
	"%SetMaximumVideoConversionDelayRequest\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"(\n" +
	"&SetMaximumVideoConversionDelayResponse\"@\n" +
	"\x14VideoConversionError\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"!\n" +
	"\x1fGetVideoConversionErrorsRequest\"W\n" +
	" GetVideoConversionErrorsResponse\x123\n" +
	"\x06errors\x18\x01 \x03(\v2\x1b.media.VideoConversionErrorR\x06errors\"#\n" +
	"!ClearVideoConversionErrorsRequest\"$\n" +
	"\"ClearVideoConversionErrorsResponse\"6\n" +
	" ClearVideoConversionErrorRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"#\n" +
	"!ClearVideoConversionErrorResponse\"!\n" +
	"\x1fClearVideoConversionLogsRequest\"\"\n" +
	" ClearVideoConversionLogsResponse\"m\n" +
	"\x12VideoConversionLog\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x19\n" +
	"\blog_time\x18\x03 \x01(\x03R\alogTime\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status\"\x1f\n" +
	"\x1dGetVideoConversionLogsRequest\"O\n" +
	"\x1eGetVideoConversionLogsResponse\x12-\n" +
	"\x04logs\x18\x01 \x03(\v2\x19.media.VideoConversionLogR\x04logs\"+\n" +
	"\x17GeneratePlaylistRequest\x12\x10\n" +
	"\x03dir\x18\x01 \x01(\tR\x03dir\"\x1a\n" +
	"\x18GeneratePlaylistResponse\"<\n" +
	"\x14CreateVttFileRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x10\n" +
	"\x03fps\x18\x02 \x01(\x02R\x03fps\"\x17\n" +
	"\x15CreateVttFileResponse\"\r\n" +
	"\vStopRequest\"\x0e\n" +
	"\fStopResponse2\xd8\x0f\n" +
	"\fMediaService\x12/\n" +
	"\x04Stop\x12\x12.media.StopRequest\x1a\x13.media.StopResponse\x12F\n" +
	"\vUploadVideo\x12\x19.media.UploadVideoRequest\x1a\x1a.media.UploadVideoResponse0\x01\x12Y\n" +
	"\x12CreateVideoPreview\x12 .media.CreateVideoPreviewRequest\x1a!.media.CreateVideoPreviewResponse\x12\\\n" +
	"\x13CreateVideoTimeLine\x12!.media.CreateVideoTimeLineRequest\x1a\".media.CreateVideoTimeLineResponse\x12h\n" +
	"\x17ConvertVideoToMpeg4H264\x12%.media.ConvertVideoToMpeg4H264Request\x1a&.media.ConvertVideoToMpeg4H264Response\x12V\n" +
	"\x11ConvertVideoToHls\x12\x1f.media.ConvertVideoToHlsRequest\x1a .media.ConvertVideoToHlsResponse\x12V\n" +
	"\x11StartProcessVideo\x12\x1f.media.StartProcessVideoRequest\x1a .media.StartProcessVideoResponse\x12V\n" +
	"\x11StartProcessAudio\x12\x1f.media.StartProcessAudioRequest\x1a .media.StartProcessAudioResponse\x12S\n" +
	"\x10StopProcessVideo\x12\x1e.media.StopProcessVideoRequest\x1a\x1f.media.StopProcessVideoResponse\x12M\n" +
	"\x0eIsProcessVideo\x12\x1c.media.IsProcessVideoRequest\x1a\x1d.media.IsProcessVideoResponse\x12Y\n" +
	"\x12SetVideoConversion\x12 .media.SetVideoConversionRequest\x1a!.media.SetVideoConversionResponse\x12k\n" +
	"\x18SetVideoStreamConversion\x12&.media.SetVideoStreamConversionRequest\x1a'.media.SetVideoStreamConversionResponse\x12t\n" +
	"\x1bSetStartVideoConversionHour\x12).media.SetStartVideoConversionHourRequest\x1a*.media.SetStartVideoConversionHourResponse\x12}\n" +
	"\x1eSetMaximumVideoConversionDelay\x12,.media.SetMaximumVideoConversionDelayRequest\x1a-.media.SetMaximumVideoConversionDelayResponse\x12k\n" +
	"\x18GetVideoConversionErrors\x12&.media.GetVideoConversionErrorsRequest\x1a'.media.GetVideoConversionErrorsResponse\x12q\n" +
	"\x1aClearVideoConversionErrors\x12(.media.ClearVideoConversionErrorsRequest\x1a).media.ClearVideoConversionErrorsResponse\x12n\n" +
	"\x19ClearVideoConversionError\x12'.media.ClearVideoConversionErrorRequest\x1a(.media.ClearVideoConversionErrorResponse\x12k\n" +
	"\x18ClearVideoConversionLogs\x12&.media.ClearVideoConversionLogsRequest\x1a'.media.ClearVideoConversionLogsResponse\x12e\n" +
	"\x16GetVideoConversionLogs\x12$.media.GetVideoConversionLogsRequest\x1a%.media.GetVideoConversionLogsResponse\x12S\n" +
	"\x10GeneratePlaylist\x12\x1e.media.GeneratePlaylistRequest\x1a\x1f.media.GeneratePlaylistResponse\x12J\n" +
	"\rCreateVttFile\x12\x1b.media.CreateVttFileRequest\x1a\x1c.media.CreateVttFileResponseB5Z3github.com/globulario/services/golang/media/mediapbb\x06proto3"

var (
	file_media_proto_rawDescOnce sync.Once
	file_media_proto_rawDescData []byte
)

func file_media_proto_rawDescGZIP() []byte {
	file_media_proto_rawDescOnce.Do(func() {
		file_media_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_media_proto_rawDesc), len(file_media_proto_rawDesc)))
	})
	return file_media_proto_rawDescData
}

var file_media_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_media_proto_goTypes = []any{
	(*CreateVideoPreviewRequest)(nil),              // 0: media.CreateVideoPreviewRequest
	(*CreateVideoPreviewResponse)(nil),             // 1: media.CreateVideoPreviewResponse
	(*CreateVideoTimeLineRequest)(nil),             // 2: media.CreateVideoTimeLineRequest
	(*CreateVideoTimeLineResponse)(nil),            // 3: media.CreateVideoTimeLineResponse
	(*ConvertVideoToMpeg4H264Request)(nil),         // 4: media.ConvertVideoToMpeg4H264Request
	(*ConvertVideoToMpeg4H264Response)(nil),        // 5: media.ConvertVideoToMpeg4H264Response
	(*ConvertVideoToHlsRequest)(nil),               // 6: media.ConvertVideoToHlsRequest
	(*ConvertVideoToHlsResponse)(nil),              // 7: media.ConvertVideoToHlsResponse
	(*StartProcessVideoRequest)(nil),               // 8: media.StartProcessVideoRequest
	(*StartProcessVideoResponse)(nil),              // 9: media.StartProcessVideoResponse
	(*StartProcessAudioRequest)(nil),               // 10: media.StartProcessAudioRequest
	(*StartProcessAudioResponse)(nil),              // 11: media.StartProcessAudioResponse
	(*IsProcessVideoRequest)(nil),                  // 12: media.IsProcessVideoRequest
	(*IsProcessVideoResponse)(nil),                 // 13: media.IsProcessVideoResponse
	(*UploadVideoRequest)(nil),                     // 14: media.UploadVideoRequest
	(*UploadVideoResponse)(nil),                    // 15: media.UploadVideoResponse
	(*StopProcessVideoRequest)(nil),                // 16: media.StopProcessVideoRequest
	(*StopProcessVideoResponse)(nil),               // 17: media.StopProcessVideoResponse
	(*SetVideoConversionRequest)(nil),              // 18: media.SetVideoConversionRequest
	(*SetVideoConversionResponse)(nil),             // 19: media.SetVideoConversionResponse
	(*SetVideoStreamConversionRequest)(nil),        // 20: media.SetVideoStreamConversionRequest
	(*SetVideoStreamConversionResponse)(nil),       // 21: media.SetVideoStreamConversionResponse
	(*SetStartVideoConversionHourRequest)(nil),     // 22: media.SetStartVideoConversionHourRequest
	(*SetStartVideoConversionHourResponse)(nil),    // 23: media.SetStartVideoConversionHourResponse
	(*SetMaximumVideoConversionDelayRequest)(nil),  // 24: media.SetMaximumVideoConversionDelayRequest
	(*SetMaximumVideoConversionDelayResponse)(nil), // 25: media.SetMaximumVideoConversionDelayResponse
	(*VideoConversionError)(nil),                   // 26: media.VideoConversionError
	(*GetVideoConversionErrorsRequest)(nil),        // 27: media.GetVideoConversionErrorsRequest
	(*GetVideoConversionErrorsResponse)(nil),       // 28: media.GetVideoConversionErrorsResponse
	(*ClearVideoConversionErrorsRequest)(nil),      // 29: media.ClearVideoConversionErrorsRequest
	(*ClearVideoConversionErrorsResponse)(nil),     // 30: media.ClearVideoConversionErrorsResponse
	(*ClearVideoConversionErrorRequest)(nil),       // 31: media.ClearVideoConversionErrorRequest
	(*ClearVideoConversionErrorResponse)(nil),      // 32: media.ClearVideoConversionErrorResponse
	(*ClearVideoConversionLogsRequest)(nil),        // 33: media.ClearVideoConversionLogsRequest
	(*ClearVideoConversionLogsResponse)(nil),       // 34: media.ClearVideoConversionLogsResponse
	(*VideoConversionLog)(nil),                     // 35: media.VideoConversionLog
	(*GetVideoConversionLogsRequest)(nil),          // 36: media.GetVideoConversionLogsRequest
	(*GetVideoConversionLogsResponse)(nil),         // 37: media.GetVideoConversionLogsResponse
	(*GeneratePlaylistRequest)(nil),                // 38: media.GeneratePlaylistRequest
	(*GeneratePlaylistResponse)(nil),               // 39: media.GeneratePlaylistResponse
	(*CreateVttFileRequest)(nil),                   // 40: media.CreateVttFileRequest
	(*CreateVttFileResponse)(nil),                  // 41: media.CreateVttFileResponse
	(*StopRequest)(nil),                            // 42: media.StopRequest
	(*StopResponse)(nil),                           // 43: media.StopResponse
}
var file_media_proto_depIdxs = []int32{
	26, // 0: media.GetVideoConversionErrorsResponse.errors:type_name -> media.VideoConversionError
	35, // 1: media.GetVideoConversionLogsResponse.logs:type_name -> media.VideoConversionLog
	42, // 2: media.MediaService.Stop:input_type -> media.StopRequest
	14, // 3: media.MediaService.UploadVideo:input_type -> media.UploadVideoRequest
	0,  // 4: media.MediaService.CreateVideoPreview:input_type -> media.CreateVideoPreviewRequest
	2,  // 5: media.MediaService.CreateVideoTimeLine:input_type -> media.CreateVideoTimeLineRequest
	4,  // 6: media.MediaService.ConvertVideoToMpeg4H264:input_type -> media.ConvertVideoToMpeg4H264Request
	6,  // 7: media.MediaService.ConvertVideoToHls:input_type -> media.ConvertVideoToHlsRequest
	8,  // 8: media.MediaService.StartProcessVideo:input_type -> media.StartProcessVideoRequest
	10, // 9: media.MediaService.StartProcessAudio:input_type -> media.StartProcessAudioRequest
	16, // 10: media.MediaService.StopProcessVideo:input_type -> media.StopProcessVideoRequest
	12, // 11: media.MediaService.IsProcessVideo:input_type -> media.IsProcessVideoRequest
	18, // 12: media.MediaService.SetVideoConversion:input_type -> media.SetVideoConversionRequest
	20, // 13: media.MediaService.SetVideoStreamConversion:input_type -> media.SetVideoStreamConversionRequest
	22, // 14: media.MediaService.SetStartVideoConversionHour:input_type -> media.SetStartVideoConversionHourRequest
	24, // 15: media.MediaService.SetMaximumVideoConversionDelay:input_type -> media.SetMaximumVideoConversionDelayRequest
	27, // 16: media.MediaService.GetVideoConversionErrors:input_type -> media.GetVideoConversionErrorsRequest
	29, // 17: media.MediaService.ClearVideoConversionErrors:input_type -> media.ClearVideoConversionErrorsRequest
	31, // 18: media.MediaService.ClearVideoConversionError:input_type -> media.ClearVideoConversionErrorRequest
	33, // 19: media.MediaService.ClearVideoConversionLogs:input_type -> media.ClearVideoConversionLogsRequest
	36, // 20: media.MediaService.GetVideoConversionLogs:input_type -> media.GetVideoConversionLogsRequest
	38, // 21: media.MediaService.GeneratePlaylist:input_type -> media.GeneratePlaylistRequest
	40, // 22: media.MediaService.CreateVttFile:input_type -> media.CreateVttFileRequest
	43, // 23: media.MediaService.Stop:output_type -> media.StopResponse
	15, // 24: media.MediaService.UploadVideo:output_type -> media.UploadVideoResponse
	1,  // 25: media.MediaService.CreateVideoPreview:output_type -> media.CreateVideoPreviewResponse
	3,  // 26: media.MediaService.CreateVideoTimeLine:output_type -> media.CreateVideoTimeLineResponse
	5,  // 27: media.MediaService.ConvertVideoToMpeg4H264:output_type -> media.ConvertVideoToMpeg4H264Response
	7,  // 28: media.MediaService.ConvertVideoToHls:output_type -> media.ConvertVideoToHlsResponse
	9,  // 29: media.MediaService.StartProcessVideo:output_type -> media.StartProcessVideoResponse
	11, // 30: media.MediaService.StartProcessAudio:output_type -> media.StartProcessAudioResponse
	17, // 31: media.MediaService.StopProcessVideo:output_type -> media.StopProcessVideoResponse
	13, // 32: media.MediaService.IsProcessVideo:output_type -> media.IsProcessVideoResponse
	19, // 33: media.MediaService.SetVideoConversion:output_type -> media.SetVideoConversionResponse
	21, // 34: media.MediaService.SetVideoStreamConversion:output_type -> media.SetVideoStreamConversionResponse
	23, // 35: media.MediaService.SetStartVideoConversionHour:output_type -> media.SetStartVideoConversionHourResponse
	25, // 36: media.MediaService.SetMaximumVideoConversionDelay:output_type -> media.SetMaximumVideoConversionDelayResponse
	28, // 37: media.MediaService.GetVideoConversionErrors:output_type -> media.GetVideoConversionErrorsResponse
	30, // 38: media.MediaService.ClearVideoConversionErrors:output_type -> media.ClearVideoConversionErrorsResponse
	32, // 39: media.MediaService.ClearVideoConversionError:output_type -> media.ClearVideoConversionErrorResponse
	34, // 40: media.MediaService.ClearVideoConversionLogs:output_type -> media.ClearVideoConversionLogsResponse
	37, // 41: media.MediaService.GetVideoConversionLogs:output_type -> media.GetVideoConversionLogsResponse
	39, // 42: media.MediaService.GeneratePlaylist:output_type -> media.GeneratePlaylistResponse
	41, // 43: media.MediaService.CreateVttFile:output_type -> media.CreateVttFileResponse
	23, // [23:44] is the sub-list for method output_type
	2,  // [2:23] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_media_proto_init() }
func file_media_proto_init() {
	if File_media_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_media_proto_rawDesc), len(file_media_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_media_proto_goTypes,
		DependencyIndexes: file_media_proto_depIdxs,
		MessageInfos:      file_media_proto_msgTypes,
	}.Build()
	File_media_proto = out.File
	file_media_proto_goTypes = nil
	file_media_proto_depIdxs = nil
}
