// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: storage.proto

package storagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StorageService_Stop_FullMethodName             = "/storage.StorageService/Stop"
	StorageService_Open_FullMethodName             = "/storage.StorageService/Open"
	StorageService_Close_FullMethodName            = "/storage.StorageService/Close"
	StorageService_CreateConnection_FullMethodName = "/storage.StorageService/CreateConnection"
	StorageService_DeleteConnection_FullMethodName = "/storage.StorageService/DeleteConnection"
	StorageService_SetItem_FullMethodName          = "/storage.StorageService/SetItem"
	StorageService_SetLargeItem_FullMethodName     = "/storage.StorageService/SetLargeItem"
	StorageService_GetItem_FullMethodName          = "/storage.StorageService/GetItem"
	StorageService_RemoveItem_FullMethodName       = "/storage.StorageService/RemoveItem"
	StorageService_Clear_FullMethodName            = "/storage.StorageService/Clear"
	StorageService_Drop_FullMethodName             = "/storage.StorageService/Drop"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for storage operations.
type StorageServiceClient interface {
	// Stops the storage server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Opens a storage and sets options.
	Open(ctx context.Context, in *OpenRqst, opts ...grpc.CallOption) (*OpenRsp, error)
	// Closes the data store.
	Close(ctx context.Context, in *CloseRqst, opts ...grpc.CallOption) (*CloseRsp, error)
	// Creates a new storage connection.
	CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error)
	// Deletes an existing storage connection.
	DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error)
	// Saves an item in the key-value store.
	SetItem(ctx context.Context, in *SetItemRequest, opts ...grpc.CallOption) (*SetItemResponse, error)
	// Saves a large item in the key-value store.
	SetLargeItem(ctx context.Context, opts ...grpc.CallOption) (StorageService_SetLargeItemClient, error)
	// Retrieves a value with a given key.
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (StorageService_GetItemClient, error)
	// Removes an item with a given key.
	RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*RemoveItemResponse, error)
	// Removes all items from the store.
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
	// Deletes a store.
	Drop(ctx context.Context, in *DropRequest, opts ...grpc.CallOption) (*DropResponse, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, StorageService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) Open(ctx context.Context, in *OpenRqst, opts ...grpc.CallOption) (*OpenRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenRsp)
	err := c.cc.Invoke(ctx, StorageService_Open_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) Close(ctx context.Context, in *CloseRqst, opts ...grpc.CallOption) (*CloseRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseRsp)
	err := c.cc.Invoke(ctx, StorageService_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionRsp)
	err := c.cc.Invoke(ctx, StorageService_CreateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConnectionRsp)
	err := c.cc.Invoke(ctx, StorageService_DeleteConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) SetItem(ctx context.Context, in *SetItemRequest, opts ...grpc.CallOption) (*SetItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetItemResponse)
	err := c.cc.Invoke(ctx, StorageService_SetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) SetLargeItem(ctx context.Context, opts ...grpc.CallOption) (StorageService_SetLargeItemClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[0], StorageService_SetLargeItem_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceSetLargeItemClient{ClientStream: stream}
	return x, nil
}

type StorageService_SetLargeItemClient interface {
	Send(*SetLargeItemRequest) error
	CloseAndRecv() (*SetLargeItemResponse, error)
	grpc.ClientStream
}

type storageServiceSetLargeItemClient struct {
	grpc.ClientStream
}

func (x *storageServiceSetLargeItemClient) Send(m *SetLargeItemRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceSetLargeItemClient) CloseAndRecv() (*SetLargeItemResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetLargeItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (StorageService_GetItemClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[1], StorageService_GetItem_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceGetItemClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_GetItemClient interface {
	Recv() (*GetItemResponse, error)
	grpc.ClientStream
}

type storageServiceGetItemClient struct {
	grpc.ClientStream
}

func (x *storageServiceGetItemClient) Recv() (*GetItemResponse, error) {
	m := new(GetItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*RemoveItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveItemResponse)
	err := c.cc.Invoke(ctx, StorageService_RemoveItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, StorageService_Clear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) Drop(ctx context.Context, in *DropRequest, opts ...grpc.CallOption) (*DropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DropResponse)
	err := c.cc.Invoke(ctx, StorageService_Drop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations should embed UnimplementedStorageServiceServer
// for forward compatibility
//
// Service definition for storage operations.
type StorageServiceServer interface {
	// Stops the storage server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Opens a storage and sets options.
	Open(context.Context, *OpenRqst) (*OpenRsp, error)
	// Closes the data store.
	Close(context.Context, *CloseRqst) (*CloseRsp, error)
	// Creates a new storage connection.
	CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error)
	// Deletes an existing storage connection.
	DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error)
	// Saves an item in the key-value store.
	SetItem(context.Context, *SetItemRequest) (*SetItemResponse, error)
	// Saves a large item in the key-value store.
	SetLargeItem(StorageService_SetLargeItemServer) error
	// Retrieves a value with a given key.
	GetItem(*GetItemRequest, StorageService_GetItemServer) error
	// Removes an item with a given key.
	RemoveItem(context.Context, *RemoveItemRequest) (*RemoveItemResponse, error)
	// Removes all items from the store.
	Clear(context.Context, *ClearRequest) (*ClearResponse, error)
	// Deletes a store.
	Drop(context.Context, *DropRequest) (*DropResponse, error)
}

// UnimplementedStorageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedStorageServiceServer) Open(context.Context, *OpenRqst) (*OpenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedStorageServiceServer) Close(context.Context, *CloseRqst) (*CloseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedStorageServiceServer) CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedStorageServiceServer) DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedStorageServiceServer) SetItem(context.Context, *SetItemRequest) (*SetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetItem not implemented")
}
func (UnimplementedStorageServiceServer) SetLargeItem(StorageService_SetLargeItemServer) error {
	return status.Errorf(codes.Unimplemented, "method SetLargeItem not implemented")
}
func (UnimplementedStorageServiceServer) GetItem(*GetItemRequest, StorageService_GetItemServer) error {
	return status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedStorageServiceServer) RemoveItem(context.Context, *RemoveItemRequest) (*RemoveItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedStorageServiceServer) Clear(context.Context, *ClearRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedStorageServiceServer) Drop(context.Context, *DropRequest) (*DropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Drop not implemented")
}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_Open_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).Open(ctx, req.(*OpenRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).Close(ctx, req.(*CloseRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CreateConnection(ctx, req.(*CreateConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_SetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).SetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_SetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).SetItem(ctx, req.(*SetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_SetLargeItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).SetLargeItem(&storageServiceSetLargeItemServer{ServerStream: stream})
}

type StorageService_SetLargeItemServer interface {
	SendAndClose(*SetLargeItemResponse) error
	Recv() (*SetLargeItemRequest, error)
	grpc.ServerStream
}

type storageServiceSetLargeItemServer struct {
	grpc.ServerStream
}

func (x *storageServiceSetLargeItemServer) SendAndClose(m *SetLargeItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceSetLargeItemServer) Recv() (*SetLargeItemRequest, error) {
	m := new(SetLargeItemRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StorageService_GetItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetItemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).GetItem(m, &storageServiceGetItemServer{ServerStream: stream})
}

type StorageService_GetItemServer interface {
	Send(*GetItemResponse) error
	grpc.ServerStream
}

type storageServiceGetItemServer struct {
	grpc.ServerStream
}

func (x *storageServiceGetItemServer) Send(m *GetItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageService_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_RemoveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).RemoveItem(ctx, req.(*RemoveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_Drop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).Drop(ctx, req.(*DropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _StorageService_Stop_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _StorageService_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _StorageService_Close_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _StorageService_CreateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _StorageService_DeleteConnection_Handler,
		},
		{
			MethodName: "SetItem",
			Handler:    _StorageService_SetItem_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _StorageService_RemoveItem_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _StorageService_Clear_Handler,
		},
		{
			MethodName: "Drop",
			Handler:    _StorageService_Drop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetLargeItem",
			Handler:       _StorageService_SetLargeItem_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetItem",
			Handler:       _StorageService_GetItem_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage.proto",
}
