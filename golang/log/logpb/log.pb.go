// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: log.proto

package logpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LogLevel defines the severity of a log message.
type LogLevel int32

const (
	LogLevel_FATAL_MESSAGE LogLevel = 0 // Critical errors causing premature termination.
	LogLevel_ERROR_MESSAGE LogLevel = 1 // Errors that might still allow the application to continue running.
	LogLevel_WARN_MESSAGE  LogLevel = 2 // Potentially harmful situations.
	LogLevel_INFO_MESSAGE  LogLevel = 3 // Informational messages that highlight progress.
	LogLevel_DEBUG_MESSAGE LogLevel = 4 // Detailed information typically of interest only when diagnosing problems.
	LogLevel_TRACE_MESSAGE LogLevel = 5 // Finer-grained informational events than the DEBUG.
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "FATAL_MESSAGE",
		1: "ERROR_MESSAGE",
		2: "WARN_MESSAGE",
		3: "INFO_MESSAGE",
		4: "DEBUG_MESSAGE",
		5: "TRACE_MESSAGE",
	}
	LogLevel_value = map[string]int32{
		"FATAL_MESSAGE": 0,
		"ERROR_MESSAGE": 1,
		"WARN_MESSAGE":  2,
		"INFO_MESSAGE":  3,
		"DEBUG_MESSAGE": 4,
		"TRACE_MESSAGE": 5,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_log_proto_enumTypes[0].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_log_proto_enumTypes[0]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

// LogInfo represents a single log entry.
type LogInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                          // Unique identifier of the log entry.
	Level         LogLevel               `protobuf:"varint,2,opt,name=level,proto3,enum=log.LogLevel" json:"level,omitempty"` // Severity level of the log.
	Application   string                 `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`        // Name of the application generating the log.
	Method        string                 `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`                  // The method where the log was generated.
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`                // Descriptive message of the log.
	Line          string                 `protobuf:"bytes,6,opt,name=line,proto3" json:"line,omitempty"`                      // Line number where the log was generated.
	Occurences    int64                  `protobuf:"varint,7,opt,name=occurences,proto3" json:"occurences,omitempty"`         // Number of occurrences of the log event.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogInfo) Reset() {
	*x = LogInfo{}
	mi := &file_log_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogInfo) ProtoMessage() {}

func (x *LogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogInfo.ProtoReflect.Descriptor instead.
func (*LogInfo) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

func (x *LogInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogInfo) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_FATAL_MESSAGE
}

func (x *LogInfo) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *LogInfo) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *LogInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogInfo) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *LogInfo) GetOccurences() int64 {
	if x != nil {
		return x.Occurences
	}
	return 0
}

// LogRqst is the request format for logging a new message.
type LogRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          *LogInfo               `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"` // Log information to be recorded.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRqst) Reset() {
	*x = LogRqst{}
	mi := &file_log_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRqst) ProtoMessage() {}

func (x *LogRqst) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRqst.ProtoReflect.Descriptor instead.
func (*LogRqst) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{1}
}

func (x *LogRqst) GetInfo() *LogInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// LogRsp is the response format for a log request.
type LogRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates success or failure of the logging operation.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRsp) Reset() {
	*x = LogRsp{}
	mi := &file_log_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRsp) ProtoMessage() {}

func (x *LogRsp) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRsp.ProtoReflect.Descriptor instead.
func (*LogRsp) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{2}
}

func (x *LogRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// DeleteLogRqst is the request format for deleting a log entry.
type DeleteLogRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Log           *LogInfo               `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"` // Specifies the log entry to be deleted.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLogRqst) Reset() {
	*x = DeleteLogRqst{}
	mi := &file_log_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLogRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLogRqst) ProtoMessage() {}

func (x *DeleteLogRqst) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLogRqst.ProtoReflect.Descriptor instead.
func (*DeleteLogRqst) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteLogRqst) GetLog() *LogInfo {
	if x != nil {
		return x.Log
	}
	return nil
}

// DeleteLogRsp is the response format for a delete log request.
type DeleteLogRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates success or failure of the delete operation.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLogRsp) Reset() {
	*x = DeleteLogRsp{}
	mi := &file_log_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLogRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLogRsp) ProtoMessage() {}

func (x *DeleteLogRsp) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLogRsp.ProtoReflect.Descriptor instead.
func (*DeleteLogRsp) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteLogRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// GetLogRqst is the request format for retrieving log entries.
type GetLogRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"` // Query to filter the logs.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLogRqst) Reset() {
	*x = GetLogRqst{}
	mi := &file_log_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogRqst) ProtoMessage() {}

func (x *GetLogRqst) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogRqst.ProtoReflect.Descriptor instead.
func (*GetLogRqst) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{5}
}

func (x *GetLogRqst) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// GetLogRsp is the response format for a get log request.
type GetLogRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Infos         []*LogInfo             `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"` // List of log entries matching the query.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLogRsp) Reset() {
	*x = GetLogRsp{}
	mi := &file_log_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogRsp) ProtoMessage() {}

func (x *GetLogRsp) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogRsp.ProtoReflect.Descriptor instead.
func (*GetLogRsp) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{6}
}

func (x *GetLogRsp) GetInfos() []*LogInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

// ClearAllLogRqst is the request format for clearing log entries.
type ClearAllLogRqst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"` // Query to filter which logs to clear.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearAllLogRqst) Reset() {
	*x = ClearAllLogRqst{}
	mi := &file_log_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearAllLogRqst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearAllLogRqst) ProtoMessage() {}

func (x *ClearAllLogRqst) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearAllLogRqst.ProtoReflect.Descriptor instead.
func (*ClearAllLogRqst) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{7}
}

func (x *ClearAllLogRqst) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// ClearAllLogRsp is the response format for a clear all logs request.
type ClearAllLogRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates success or failure of the clear operation.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearAllLogRsp) Reset() {
	*x = ClearAllLogRsp{}
	mi := &file_log_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearAllLogRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearAllLogRsp) ProtoMessage() {}

func (x *ClearAllLogRsp) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearAllLogRsp.ProtoReflect.Descriptor instead.
func (*ClearAllLogRsp) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{8}
}

func (x *ClearAllLogRsp) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_log_proto protoreflect.FileDescriptor

const file_log_proto_rawDesc = "" +
	"\n" +
	"\tlog.proto\x12\x03log\"\xc6\x01\n" +
	"\aLogInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12#\n" +
	"\x05level\x18\x02 \x01(\x0e2\r.log.LogLevelR\x05level\x12 \n" +
	"\vapplication\x18\x03 \x01(\tR\vapplication\x12\x16\n" +
	"\x06method\x18\x04 \x01(\tR\x06method\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\x12\x12\n" +
	"\x04line\x18\x06 \x01(\tR\x04line\x12\x1e\n" +
	"\n" +
	"occurences\x18\a \x01(\x03R\n" +
	"occurences\"+\n" +
	"\aLogRqst\x12 \n" +
	"\x04info\x18\x01 \x01(\v2\f.log.LogInfoR\x04info\" \n" +
	"\x06LogRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"/\n" +
	"\rDeleteLogRqst\x12\x1e\n" +
	"\x03log\x18\x01 \x01(\v2\f.log.LogInfoR\x03log\"&\n" +
	"\fDeleteLogRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"\"\n" +
	"\n" +
	"GetLogRqst\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\"/\n" +
	"\tGetLogRsp\x12\"\n" +
	"\x05infos\x18\x01 \x03(\v2\f.log.LogInfoR\x05infos\"'\n" +
	"\x0fClearAllLogRqst\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\"(\n" +
	"\x0eClearAllLogRsp\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result*z\n" +
	"\bLogLevel\x12\x11\n" +
	"\rFATAL_MESSAGE\x10\x00\x12\x11\n" +
	"\rERROR_MESSAGE\x10\x01\x12\x10\n" +
	"\fWARN_MESSAGE\x10\x02\x12\x10\n" +
	"\fINFO_MESSAGE\x10\x03\x12\x11\n" +
	"\rDEBUG_MESSAGE\x10\x04\x12\x11\n" +
	"\rTRACE_MESSAGE\x10\x052\xc9\x01\n" +
	"\n" +
	"LogService\x12 \n" +
	"\x03Log\x12\f.log.LogRqst\x1a\v.log.LogRsp\x12+\n" +
	"\x06GetLog\x12\x0f.log.GetLogRqst\x1a\x0e.log.GetLogRsp0\x01\x122\n" +
	"\tDeleteLog\x12\x12.log.DeleteLogRqst\x1a\x11.log.DeleteLogRsp\x128\n" +
	"\vClearAllLog\x12\x14.log.ClearAllLogRqst\x1a\x13.log.ClearAllLogRspB1Z/github.com/globulario/services/golang/log/logpbb\x06proto3"

var (
	file_log_proto_rawDescOnce sync.Once
	file_log_proto_rawDescData []byte
)

func file_log_proto_rawDescGZIP() []byte {
	file_log_proto_rawDescOnce.Do(func() {
		file_log_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)))
	})
	return file_log_proto_rawDescData
}

var file_log_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_log_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_log_proto_goTypes = []any{
	(LogLevel)(0),           // 0: log.LogLevel
	(*LogInfo)(nil),         // 1: log.LogInfo
	(*LogRqst)(nil),         // 2: log.LogRqst
	(*LogRsp)(nil),          // 3: log.LogRsp
	(*DeleteLogRqst)(nil),   // 4: log.DeleteLogRqst
	(*DeleteLogRsp)(nil),    // 5: log.DeleteLogRsp
	(*GetLogRqst)(nil),      // 6: log.GetLogRqst
	(*GetLogRsp)(nil),       // 7: log.GetLogRsp
	(*ClearAllLogRqst)(nil), // 8: log.ClearAllLogRqst
	(*ClearAllLogRsp)(nil),  // 9: log.ClearAllLogRsp
}
var file_log_proto_depIdxs = []int32{
	0, // 0: log.LogInfo.level:type_name -> log.LogLevel
	1, // 1: log.LogRqst.info:type_name -> log.LogInfo
	1, // 2: log.DeleteLogRqst.log:type_name -> log.LogInfo
	1, // 3: log.GetLogRsp.infos:type_name -> log.LogInfo
	2, // 4: log.LogService.Log:input_type -> log.LogRqst
	6, // 5: log.LogService.GetLog:input_type -> log.GetLogRqst
	4, // 6: log.LogService.DeleteLog:input_type -> log.DeleteLogRqst
	8, // 7: log.LogService.ClearAllLog:input_type -> log.ClearAllLogRqst
	3, // 8: log.LogService.Log:output_type -> log.LogRsp
	7, // 9: log.LogService.GetLog:output_type -> log.GetLogRsp
	5, // 10: log.LogService.DeleteLog:output_type -> log.DeleteLogRsp
	9, // 11: log.LogService.ClearAllLog:output_type -> log.ClearAllLogRsp
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_log_proto_init() }
func file_log_proto_init() {
	if File_log_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_log_proto_goTypes,
		DependencyIndexes: file_log_proto_depIdxs,
		EnumInfos:         file_log_proto_enumTypes,
		MessageInfos:      file_log_proto_msgTypes,
	}.Build()
	File_log_proto = out.File
	file_log_proto_goTypes = nil
	file_log_proto_depIdxs = nil
}
