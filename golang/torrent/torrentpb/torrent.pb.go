//*
// Defines the protocol for a torrent management service, including
// operations for downloading, tracking, and removing torrents.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: torrent.proto

package torrentpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a link to a torrent file.
type TorrentLnk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lnk           string                 `protobuf:"bytes,1,opt,name=Lnk,proto3" json:"Lnk,omitempty"`     // The link to the torrent file
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`   // Name of the torrent
	Dest          string                 `protobuf:"bytes,3,opt,name=Dest,proto3" json:"Dest,omitempty"`   // Destination where the torrent will be downloaded
	Seed          bool                   `protobuf:"varint,4,opt,name=Seed,proto3" json:"Seed,omitempty"`  // Indicates if the torrent will be seeded
	Owner         string                 `protobuf:"bytes,5,opt,name=Owner,proto3" json:"Owner,omitempty"` // Owner of the torrent
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TorrentLnk) Reset() {
	*x = TorrentLnk{}
	mi := &file_torrent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TorrentLnk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TorrentLnk) ProtoMessage() {}

func (x *TorrentLnk) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TorrentLnk.ProtoReflect.Descriptor instead.
func (*TorrentLnk) Descriptor() ([]byte, []int) {
	return file_torrent_proto_rawDescGZIP(), []int{0}
}

func (x *TorrentLnk) GetLnk() string {
	if x != nil {
		return x.Lnk
	}
	return ""
}

func (x *TorrentLnk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TorrentLnk) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *TorrentLnk) GetSeed() bool {
	if x != nil {
		return x.Seed
	}
	return false
}

func (x *TorrentLnk) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

// Request to retrieve torrent links.
type GetTorrentLnksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTorrentLnksRequest) Reset() {
	*x = GetTorrentLnksRequest{}
	mi := &file_torrent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTorrentLnksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTorrentLnksRequest) ProtoMessage() {}

func (x *GetTorrentLnksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTorrentLnksRequest.ProtoReflect.Descriptor instead.
func (*GetTorrentLnksRequest) Descriptor() ([]byte, []int) {
	return file_torrent_proto_rawDescGZIP(), []int{1}
}

// Response containing a list of torrent links.
type GetTorrentLnksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lnks          []*TorrentLnk          `protobuf:"bytes,1,rep,name=lnks,proto3" json:"lnks,omitempty"` // List of torrent links
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTorrentLnksResponse) Reset() {
	*x = GetTorrentLnksResponse{}
	mi := &file_torrent_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTorrentLnksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTorrentLnksResponse) ProtoMessage() {}

func (x *GetTorrentLnksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTorrentLnksResponse.ProtoReflect.Descriptor instead.
func (*GetTorrentLnksResponse) Descriptor() ([]byte, []int) {
	return file_torrent_proto_rawDescGZIP(), []int{2}
}

func (x *GetTorrentLnksResponse) GetLnks() []*TorrentLnk {
	if x != nil {
		return x.Lnks
	}
	return nil
}

// Information about a specific file within a torrent.
type TorrentFileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`            // Path of the file within the torrent
	Size          int64                  `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`           // Size of the file
	Chunks        int64                  `protobuf:"varint,3,opt,name=Chunks,proto3" json:"Chunks,omitempty"`       // Total number of chunks in the file
	Completed     int64                  `protobuf:"varint,4,opt,name=Completed,proto3" json:"Completed,omitempty"` // Number of completed chunks
	Percent       float64                `protobuf:"fixed64,5,opt,name=Percent,proto3" json:"Percent,omitempty"`    // Percentage of the file that has been downloaded
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TorrentFileInfo) Reset() {
	*x = TorrentFileInfo{}
	mi := &file_torrent_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TorrentFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TorrentFileInfo) ProtoMessage() {}

func (x *TorrentFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TorrentFileInfo.ProtoReflect.Descriptor instead.
func (*TorrentFileInfo) Descriptor() ([]byte, []int) {
	return file_torrent_proto_rawDescGZIP(), []int{3}
}

func (x *TorrentFileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TorrentFileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TorrentFileInfo) GetChunks() int64 {
	if x != nil {
		return x.Chunks
	}
	return 0
}

func (x *TorrentFileInfo) GetCompleted() int64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *TorrentFileInfo) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

// Information about a torrent.
type TorrentInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                      // Name of the torrent
	Loaded         bool                   `protobuf:"varint,2,opt,name=Loaded,proto3" json:"Loaded,omitempty"`                 // Indicates if the torrent is loaded
	Size           int64                  `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`                     // Total size of the torrent
	TotalChunks    int64                  `protobuf:"varint,4,opt,name=TotalChunks,proto3" json:"TotalChunks,omitempty"`       // Total number of chunks in the torrent
	TotalCompleted int64                  `protobuf:"varint,5,opt,name=TotalCompleted,proto3" json:"TotalCompleted,omitempty"` // Number of completed chunks
	Downloaded     int64                  `protobuf:"varint,6,opt,name=Downloaded,proto3" json:"Downloaded,omitempty"`         // Amount downloaded
	DownloadRate   float32                `protobuf:"fixed32,7,opt,name=DownloadRate,proto3" json:"DownloadRate,omitempty"`    // Download rate
	Percent        float64                `protobuf:"fixed64,8,opt,name=Percent,proto3" json:"Percent,omitempty"`              // Overall download progress as a percentage
	UpdatedAt      int64                  `protobuf:"varint,9,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`           // Timestamp of the last update
	Files          []*TorrentFileInfo     `protobuf:"bytes,10,rep,name=Files,proto3" json:"Files,omitempty"`                   // List of files in the torrent
	Destination    string                 `protobuf:"bytes,11,opt,name=Destination,proto3" json:"Destination,omitempty"`       // Destination for the downloaded files
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TorrentInfo) Reset() {
	*x = TorrentInfo{}
	mi := &file_torrent_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TorrentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TorrentInfo) ProtoMessage() {}

func (x *TorrentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TorrentInfo.ProtoReflect.Descriptor instead.
func (*TorrentInfo) Descriptor() ([]byte, []int) {
	return file_torrent_proto_rawDescGZIP(), []int{4}
}

func (x *TorrentInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TorrentInfo) GetLoaded() bool {
	if x != nil {
		return x.Loaded
	}
	return false
}

func (x *TorrentInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TorrentInfo) GetTotalChunks() int64 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *TorrentInfo) GetTotalCompleted() int64 {
	if x != nil {
		return x.TotalCompleted
	}
	return 0
}

func (x *TorrentInfo) GetDownloaded() int64 {
	if x != nil {
		return x.Downloaded
	}
	return 0
}

func (x *TorrentInfo) GetDownloadRate() float32 {
	if x != nil {
		return x.DownloadRate
	}
	return 0
}

func (x *TorrentInfo) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *TorrentInfo) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TorrentInfo) GetFiles() []*TorrentFileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *TorrentInfo) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

// Request to retrieve information about torrents.
type GetTorrentInfosRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTorrentInfosRequest) Reset() {
	*x = GetTorrentInfosRequest{}
	mi := &file_torrent_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTorrentInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTorrentInfosRequest) ProtoMessage() {}

func (x *GetTorrentInfosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTorrentInfosRequest.ProtoReflect.Descriptor instead.
func (*GetTorrentInfosRequest) Descriptor() ([]byte, []int) {
	return file_torrent_proto_rawDescGZIP(), []int{5}
}

// Response containing information about multiple torrents.
type GetTorrentInfosResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Infos         []*TorrentInfo         `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"` // List of torrent information
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTorrentInfosResponse) Reset() {
	*x = GetTorrentInfosResponse{}
	mi := &file_torrent_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTorrentInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTorrentInfosResponse) ProtoMessage() {}

func (x *GetTorrentInfosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTorrentInfosResponse.ProtoReflect.Descriptor instead.
func (*GetTorrentInfosResponse) Descriptor() ([]byte, []int) {
	return file_torrent_proto_rawDescGZIP(), []int{6}
}

func (x *GetTorrentInfosResponse) GetInfos() []*TorrentInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

// Request to download a new torrent.
type DownloadTorrentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Link          string                 `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`  // The torrent link or magnet URL
	Dest          string                 `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest,omitempty"`  // Destination for the downloaded files
	Seed          bool                   `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"` // Whether to seed the torrent after downloading
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadTorrentRequest) Reset() {
	*x = DownloadTorrentRequest{}
	mi := &file_torrent_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadTorrentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadTorrentRequest) ProtoMessage() {}

func (x *DownloadTorrentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadTorrentRequest.ProtoReflect.Descriptor instead.
func (*DownloadTorrentRequest) Descriptor() ([]byte, []int) {
	return file_torrent_proto_rawDescGZIP(), []int{7}
}

func (x *DownloadTorrentRequest) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *DownloadTorrentRequest) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *DownloadTorrentRequest) GetSeed() bool {
	if x != nil {
		return x.Seed
	}
	return false
}

// Response for the download torrent request, possibly containing a UUID.
type DownloadTorrentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadTorrentResponse) Reset() {
	*x = DownloadTorrentResponse{}
	mi := &file_torrent_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadTorrentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadTorrentResponse) ProtoMessage() {}

func (x *DownloadTorrentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadTorrentResponse.ProtoReflect.Descriptor instead.
func (*DownloadTorrentResponse) Descriptor() ([]byte, []int) {
	return file_torrent_proto_rawDescGZIP(), []int{8}
}

// Request to drop or remove a torrent.
type DropTorrentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Name of the torrent to be dropped
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropTorrentRequest) Reset() {
	*x = DropTorrentRequest{}
	mi := &file_torrent_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropTorrentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTorrentRequest) ProtoMessage() {}

func (x *DropTorrentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTorrentRequest.ProtoReflect.Descriptor instead.
func (*DropTorrentRequest) Descriptor() ([]byte, []int) {
	return file_torrent_proto_rawDescGZIP(), []int{9}
}

func (x *DropTorrentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response for dropping a torrent.
type DropTorrentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropTorrentResponse) Reset() {
	*x = DropTorrentResponse{}
	mi := &file_torrent_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropTorrentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTorrentResponse) ProtoMessage() {}

func (x *DropTorrentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTorrentResponse.ProtoReflect.Descriptor instead.
func (*DropTorrentResponse) Descriptor() ([]byte, []int) {
	return file_torrent_proto_rawDescGZIP(), []int{10}
}

var File_torrent_proto protoreflect.FileDescriptor

const file_torrent_proto_rawDesc = "" +
	"\n" +
	"\rtorrent.proto\x12\atorrent\"p\n" +
	"\n" +
	"TorrentLnk\x12\x10\n" +
	"\x03Lnk\x18\x01 \x01(\tR\x03Lnk\x12\x12\n" +
	"\x04Name\x18\x02 \x01(\tR\x04Name\x12\x12\n" +
	"\x04Dest\x18\x03 \x01(\tR\x04Dest\x12\x12\n" +
	"\x04Seed\x18\x04 \x01(\bR\x04Seed\x12\x14\n" +
	"\x05Owner\x18\x05 \x01(\tR\x05Owner\"\x17\n" +
	"\x15GetTorrentLnksRequest\"A\n" +
	"\x16GetTorrentLnksResponse\x12'\n" +
	"\x04lnks\x18\x01 \x03(\v2\x13.torrent.TorrentLnkR\x04lnks\"\x89\x01\n" +
	"\x0fTorrentFileInfo\x12\x12\n" +
	"\x04Path\x18\x01 \x01(\tR\x04Path\x12\x12\n" +
	"\x04Size\x18\x02 \x01(\x03R\x04Size\x12\x16\n" +
	"\x06Chunks\x18\x03 \x01(\x03R\x06Chunks\x12\x1c\n" +
	"\tCompleted\x18\x04 \x01(\x03R\tCompleted\x12\x18\n" +
	"\aPercent\x18\x05 \x01(\x01R\aPercent\"\xe5\x02\n" +
	"\vTorrentInfo\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x16\n" +
	"\x06Loaded\x18\x02 \x01(\bR\x06Loaded\x12\x12\n" +
	"\x04Size\x18\x03 \x01(\x03R\x04Size\x12 \n" +
	"\vTotalChunks\x18\x04 \x01(\x03R\vTotalChunks\x12&\n" +
	"\x0eTotalCompleted\x18\x05 \x01(\x03R\x0eTotalCompleted\x12\x1e\n" +
	"\n" +
	"Downloaded\x18\x06 \x01(\x03R\n" +
	"Downloaded\x12\"\n" +
	"\fDownloadRate\x18\a \x01(\x02R\fDownloadRate\x12\x18\n" +
	"\aPercent\x18\b \x01(\x01R\aPercent\x12\x1c\n" +
	"\tUpdatedAt\x18\t \x01(\x03R\tUpdatedAt\x12.\n" +
	"\x05Files\x18\n" +
	" \x03(\v2\x18.torrent.TorrentFileInfoR\x05Files\x12 \n" +
	"\vDestination\x18\v \x01(\tR\vDestination\"\x18\n" +
	"\x16GetTorrentInfosRequest\"E\n" +
	"\x17GetTorrentInfosResponse\x12*\n" +
	"\x05infos\x18\x01 \x03(\v2\x14.torrent.TorrentInfoR\x05infos\"T\n" +
	"\x16DownloadTorrentRequest\x12\x12\n" +
	"\x04link\x18\x01 \x01(\tR\x04link\x12\x12\n" +
	"\x04dest\x18\x02 \x01(\tR\x04dest\x12\x12\n" +
	"\x04seed\x18\x03 \x01(\bR\x04seed\"\x19\n" +
	"\x17DownloadTorrentResponse\"(\n" +
	"\x12DropTorrentRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\x15\n" +
	"\x13DropTorrentResponse2\xdb\x02\n" +
	"\x0eTorrentService\x12T\n" +
	"\x0fDownloadTorrent\x12\x1f.torrent.DownloadTorrentRequest\x1a .torrent.DownloadTorrentResponse\x12V\n" +
	"\x0fGetTorrentInfos\x12\x1f.torrent.GetTorrentInfosRequest\x1a .torrent.GetTorrentInfosResponse0\x01\x12H\n" +
	"\vDropTorrent\x12\x1b.torrent.DropTorrentRequest\x1a\x1c.torrent.DropTorrentResponse\x12Q\n" +
	"\x0eGetTorrentLnks\x12\x1e.torrent.GetTorrentLnksRequest\x1a\x1f.torrent.GetTorrentLnksResponseB9Z7github.com/globulario/services/golang/torrent/torrentpbb\x06proto3"

var (
	file_torrent_proto_rawDescOnce sync.Once
	file_torrent_proto_rawDescData []byte
)

func file_torrent_proto_rawDescGZIP() []byte {
	file_torrent_proto_rawDescOnce.Do(func() {
		file_torrent_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_torrent_proto_rawDesc), len(file_torrent_proto_rawDesc)))
	})
	return file_torrent_proto_rawDescData
}

var file_torrent_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_torrent_proto_goTypes = []any{
	(*TorrentLnk)(nil),              // 0: torrent.TorrentLnk
	(*GetTorrentLnksRequest)(nil),   // 1: torrent.GetTorrentLnksRequest
	(*GetTorrentLnksResponse)(nil),  // 2: torrent.GetTorrentLnksResponse
	(*TorrentFileInfo)(nil),         // 3: torrent.TorrentFileInfo
	(*TorrentInfo)(nil),             // 4: torrent.TorrentInfo
	(*GetTorrentInfosRequest)(nil),  // 5: torrent.GetTorrentInfosRequest
	(*GetTorrentInfosResponse)(nil), // 6: torrent.GetTorrentInfosResponse
	(*DownloadTorrentRequest)(nil),  // 7: torrent.DownloadTorrentRequest
	(*DownloadTorrentResponse)(nil), // 8: torrent.DownloadTorrentResponse
	(*DropTorrentRequest)(nil),      // 9: torrent.DropTorrentRequest
	(*DropTorrentResponse)(nil),     // 10: torrent.DropTorrentResponse
}
var file_torrent_proto_depIdxs = []int32{
	0,  // 0: torrent.GetTorrentLnksResponse.lnks:type_name -> torrent.TorrentLnk
	3,  // 1: torrent.TorrentInfo.Files:type_name -> torrent.TorrentFileInfo
	4,  // 2: torrent.GetTorrentInfosResponse.infos:type_name -> torrent.TorrentInfo
	7,  // 3: torrent.TorrentService.DownloadTorrent:input_type -> torrent.DownloadTorrentRequest
	5,  // 4: torrent.TorrentService.GetTorrentInfos:input_type -> torrent.GetTorrentInfosRequest
	9,  // 5: torrent.TorrentService.DropTorrent:input_type -> torrent.DropTorrentRequest
	1,  // 6: torrent.TorrentService.GetTorrentLnks:input_type -> torrent.GetTorrentLnksRequest
	8,  // 7: torrent.TorrentService.DownloadTorrent:output_type -> torrent.DownloadTorrentResponse
	6,  // 8: torrent.TorrentService.GetTorrentInfos:output_type -> torrent.GetTorrentInfosResponse
	10, // 9: torrent.TorrentService.DropTorrent:output_type -> torrent.DropTorrentResponse
	2,  // 10: torrent.TorrentService.GetTorrentLnks:output_type -> torrent.GetTorrentLnksResponse
	7,  // [7:11] is the sub-list for method output_type
	3,  // [3:7] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_torrent_proto_init() }
func file_torrent_proto_init() {
	if File_torrent_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_torrent_proto_rawDesc), len(file_torrent_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_torrent_proto_goTypes,
		DependencyIndexes: file_torrent_proto_depIdxs,
		MessageInfos:      file_torrent_proto_msgTypes,
	}.Build()
	File_torrent_proto = out.File
	file_torrent_proto_goTypes = nil
	file_torrent_proto_depIdxs = nil
}
