//*
// Defines the protocol for a torrent management service, including
// operations for downloading, tracking, and removing torrents.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: torrent.proto

package torrentpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TorrentService_DownloadTorrent_FullMethodName = "/torrent.TorrentService/DownloadTorrent"
	TorrentService_GetTorrentInfos_FullMethodName = "/torrent.TorrentService/GetTorrentInfos"
	TorrentService_DropTorrent_FullMethodName     = "/torrent.TorrentService/DropTorrent"
	TorrentService_GetTorrentLnks_FullMethodName  = "/torrent.TorrentService/GetTorrentLnks"
)

// TorrentServiceClient is the client API for TorrentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for managing torrents.
type TorrentServiceClient interface {
	// Initiates the download of a torrent.
	DownloadTorrent(ctx context.Context, in *DownloadTorrentRequest, opts ...grpc.CallOption) (*DownloadTorrentResponse, error)
	// Retrieves information about current torrents.
	GetTorrentInfos(ctx context.Context, in *GetTorrentInfosRequest, opts ...grpc.CallOption) (TorrentService_GetTorrentInfosClient, error)
	// Drops a specific torrent from the service.
	DropTorrent(ctx context.Context, in *DropTorrentRequest, opts ...grpc.CallOption) (*DropTorrentResponse, error)
	// Retrieves links to torrents.
	GetTorrentLnks(ctx context.Context, in *GetTorrentLnksRequest, opts ...grpc.CallOption) (*GetTorrentLnksResponse, error)
}

type torrentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentServiceClient(cc grpc.ClientConnInterface) TorrentServiceClient {
	return &torrentServiceClient{cc}
}

func (c *torrentServiceClient) DownloadTorrent(ctx context.Context, in *DownloadTorrentRequest, opts ...grpc.CallOption) (*DownloadTorrentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadTorrentResponse)
	err := c.cc.Invoke(ctx, TorrentService_DownloadTorrent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentServiceClient) GetTorrentInfos(ctx context.Context, in *GetTorrentInfosRequest, opts ...grpc.CallOption) (TorrentService_GetTorrentInfosClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TorrentService_ServiceDesc.Streams[0], TorrentService_GetTorrentInfos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &torrentServiceGetTorrentInfosClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TorrentService_GetTorrentInfosClient interface {
	Recv() (*GetTorrentInfosResponse, error)
	grpc.ClientStream
}

type torrentServiceGetTorrentInfosClient struct {
	grpc.ClientStream
}

func (x *torrentServiceGetTorrentInfosClient) Recv() (*GetTorrentInfosResponse, error) {
	m := new(GetTorrentInfosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *torrentServiceClient) DropTorrent(ctx context.Context, in *DropTorrentRequest, opts ...grpc.CallOption) (*DropTorrentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DropTorrentResponse)
	err := c.cc.Invoke(ctx, TorrentService_DropTorrent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentServiceClient) GetTorrentLnks(ctx context.Context, in *GetTorrentLnksRequest, opts ...grpc.CallOption) (*GetTorrentLnksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTorrentLnksResponse)
	err := c.cc.Invoke(ctx, TorrentService_GetTorrentLnks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentServiceServer is the server API for TorrentService service.
// All implementations should embed UnimplementedTorrentServiceServer
// for forward compatibility
//
// Service definition for managing torrents.
type TorrentServiceServer interface {
	// Initiates the download of a torrent.
	DownloadTorrent(context.Context, *DownloadTorrentRequest) (*DownloadTorrentResponse, error)
	// Retrieves information about current torrents.
	GetTorrentInfos(*GetTorrentInfosRequest, TorrentService_GetTorrentInfosServer) error
	// Drops a specific torrent from the service.
	DropTorrent(context.Context, *DropTorrentRequest) (*DropTorrentResponse, error)
	// Retrieves links to torrents.
	GetTorrentLnks(context.Context, *GetTorrentLnksRequest) (*GetTorrentLnksResponse, error)
}

// UnimplementedTorrentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTorrentServiceServer struct {
}

func (UnimplementedTorrentServiceServer) DownloadTorrent(context.Context, *DownloadTorrentRequest) (*DownloadTorrentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadTorrent not implemented")
}
func (UnimplementedTorrentServiceServer) GetTorrentInfos(*GetTorrentInfosRequest, TorrentService_GetTorrentInfosServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTorrentInfos not implemented")
}
func (UnimplementedTorrentServiceServer) DropTorrent(context.Context, *DropTorrentRequest) (*DropTorrentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTorrent not implemented")
}
func (UnimplementedTorrentServiceServer) GetTorrentLnks(context.Context, *GetTorrentLnksRequest) (*GetTorrentLnksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTorrentLnks not implemented")
}

// UnsafeTorrentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentServiceServer will
// result in compilation errors.
type UnsafeTorrentServiceServer interface {
	mustEmbedUnimplementedTorrentServiceServer()
}

func RegisterTorrentServiceServer(s grpc.ServiceRegistrar, srv TorrentServiceServer) {
	s.RegisterService(&TorrentService_ServiceDesc, srv)
}

func _TorrentService_DownloadTorrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTorrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).DownloadTorrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentService_DownloadTorrent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).DownloadTorrent(ctx, req.(*DownloadTorrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentService_GetTorrentInfos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTorrentInfosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TorrentServiceServer).GetTorrentInfos(m, &torrentServiceGetTorrentInfosServer{ServerStream: stream})
}

type TorrentService_GetTorrentInfosServer interface {
	Send(*GetTorrentInfosResponse) error
	grpc.ServerStream
}

type torrentServiceGetTorrentInfosServer struct {
	grpc.ServerStream
}

func (x *torrentServiceGetTorrentInfosServer) Send(m *GetTorrentInfosResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TorrentService_DropTorrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTorrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).DropTorrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentService_DropTorrent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).DropTorrent(ctx, req.(*DropTorrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentService_GetTorrentLnks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTorrentLnksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).GetTorrentLnks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentService_GetTorrentLnks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).GetTorrentLnks(ctx, req.(*GetTorrentLnksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TorrentService_ServiceDesc is the grpc.ServiceDesc for TorrentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TorrentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "torrent.TorrentService",
	HandlerType: (*TorrentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadTorrent",
			Handler:    _TorrentService_DownloadTorrent_Handler,
		},
		{
			MethodName: "DropTorrent",
			Handler:    _TorrentService_DropTorrent_Handler,
		},
		{
			MethodName: "GetTorrentLnks",
			Handler:    _TorrentService_GetTorrentLnks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTorrentInfos",
			Handler:       _TorrentService_GetTorrentInfos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "torrent.proto",
}
