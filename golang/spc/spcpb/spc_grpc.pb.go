//*
// You can use  as starter project.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: spc.proto

package spcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpcService_Stop_FullMethodName          = "/spc.SpcService/Stop"
	SpcService_CreateAnalyse_FullMethodName = "/spc.SpcService/CreateAnalyse"
)

// SpcServiceClient is the client API for SpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpcServiceClient interface {
	// Stop the server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Send analyse results message.
	CreateAnalyse(ctx context.Context, in *CreateAnalyseRqst, opts ...grpc.CallOption) (*CreateAnalyseRsp, error)
}

type spcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpcServiceClient(cc grpc.ClientConnInterface) SpcServiceClient {
	return &spcServiceClient{cc}
}

func (c *spcServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, SpcService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spcServiceClient) CreateAnalyse(ctx context.Context, in *CreateAnalyseRqst, opts ...grpc.CallOption) (*CreateAnalyseRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAnalyseRsp)
	err := c.cc.Invoke(ctx, SpcService_CreateAnalyse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpcServiceServer is the server API for SpcService service.
// All implementations should embed UnimplementedSpcServiceServer
// for forward compatibility.
type SpcServiceServer interface {
	// Stop the server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Send analyse results message.
	CreateAnalyse(context.Context, *CreateAnalyseRqst) (*CreateAnalyseRsp, error)
}

// UnimplementedSpcServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpcServiceServer struct{}

func (UnimplementedSpcServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedSpcServiceServer) CreateAnalyse(context.Context, *CreateAnalyseRqst) (*CreateAnalyseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnalyse not implemented")
}
func (UnimplementedSpcServiceServer) testEmbeddedByValue() {}

// UnsafeSpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpcServiceServer will
// result in compilation errors.
type UnsafeSpcServiceServer interface {
	mustEmbedUnimplementedSpcServiceServer()
}

func RegisterSpcServiceServer(s grpc.ServiceRegistrar, srv SpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpcService_ServiceDesc, srv)
}

func _SpcService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpcServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpcService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpcServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpcService_CreateAnalyse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnalyseRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpcServiceServer).CreateAnalyse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpcService_CreateAnalyse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpcServiceServer).CreateAnalyse(ctx, req.(*CreateAnalyseRqst))
	}
	return interceptor(ctx, in, info, handler)
}

// SpcService_ServiceDesc is the grpc.ServiceDesc for SpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spc.SpcService",
	HandlerType: (*SpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _SpcService_Stop_Handler,
		},
		{
			MethodName: "CreateAnalyse",
			Handler:    _SpcService_CreateAnalyse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spc.proto",
}
