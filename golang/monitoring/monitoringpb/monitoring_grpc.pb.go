// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: monitoring.proto

package monitoringpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MonitoringService_Stop_FullMethodName             = "/monitoring.MonitoringService/Stop"
	MonitoringService_CreateConnection_FullMethodName = "/monitoring.MonitoringService/CreateConnection"
	MonitoringService_DeleteConnection_FullMethodName = "/monitoring.MonitoringService/DeleteConnection"
	MonitoringService_Alerts_FullMethodName           = "/monitoring.MonitoringService/Alerts"
	MonitoringService_AlertManagers_FullMethodName    = "/monitoring.MonitoringService/AlertManagers"
	MonitoringService_CleanTombstones_FullMethodName  = "/monitoring.MonitoringService/CleanTombstones"
	MonitoringService_Config_FullMethodName           = "/monitoring.MonitoringService/Config"
	MonitoringService_DeleteSeries_FullMethodName     = "/monitoring.MonitoringService/DeleteSeries"
	MonitoringService_Flags_FullMethodName            = "/monitoring.MonitoringService/Flags"
	MonitoringService_LabelNames_FullMethodName       = "/monitoring.MonitoringService/LabelNames"
	MonitoringService_LabelValues_FullMethodName      = "/monitoring.MonitoringService/LabelValues"
	MonitoringService_Query_FullMethodName            = "/monitoring.MonitoringService/Query"
	MonitoringService_QueryRange_FullMethodName       = "/monitoring.MonitoringService/QueryRange"
	MonitoringService_Series_FullMethodName           = "/monitoring.MonitoringService/Series"
	MonitoringService_Snapshot_FullMethodName         = "/monitoring.MonitoringService/Snapshot"
	MonitoringService_Rules_FullMethodName            = "/monitoring.MonitoringService/Rules"
	MonitoringService_Targets_FullMethodName          = "/monitoring.MonitoringService/Targets"
	MonitoringService_TargetsMetadata_FullMethodName  = "/monitoring.MonitoringService/TargetsMetadata"
)

// MonitoringServiceClient is the client API for MonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MonitoringService defines a service for interaction with a monitoring system,
// typically for operations related to time-series data management, querying, and configuration.
type MonitoringServiceClient interface {
	// Stops the server or service gracefully.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Creates a new connection to the monitoring system or database.
	CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error)
	// Deletes an existing connection to the monitoring system or database.
	DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error)
	// Retrieves all active alerts from the monitoring system.
	Alerts(ctx context.Context, in *AlertsRequest, opts ...grpc.CallOption) (*AlertsResponse, error)
	// Provides an overview of the current state of the alert manager discovery in Prometheus.
	AlertManagers(ctx context.Context, in *AlertManagersRequest, opts ...grpc.CallOption) (*AlertManagersResponse, error)
	// Removes deleted data from the disk and cleans up tombstones (data marked for deletion).
	CleanTombstones(ctx context.Context, in *CleanTombstonesRequest, opts ...grpc.CallOption) (*CleanTombstonesResponse, error)
	// Fetches the current configuration of the Prometheus server.
	Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	// Deletes a selection of series within a specified time range.
	DeleteSeries(ctx context.Context, in *DeleteSeriesRequest, opts ...grpc.CallOption) (*DeleteSeriesResponse, error)
	// Returns the flags used to launch the Prometheus server.
	Flags(ctx context.Context, in *FlagsRequest, opts ...grpc.CallOption) (*FlagsResponse, error)
	// Retrieves all unique label names in the data block, in sorted order.
	LabelNames(ctx context.Context, in *LabelNamesRequest, opts ...grpc.CallOption) (*LabelNamesResponse, error)
	// Executes a query for the values associated with a specific label.
	LabelValues(ctx context.Context, in *LabelValuesRequest, opts ...grpc.CallOption) (*LabelValuesResponse, error)
	// Performs a query at a specific point in time.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Executes a query over a range of time.
	QueryRange(ctx context.Context, in *QueryRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryRangeResponse], error)
	// Finds and returns series that match specified label criteria.
	Series(ctx context.Context, in *SeriesRequest, opts ...grpc.CallOption) (*SeriesResponse, error)
	// Creates a snapshot of all current data and returns the directory of the snapshot.
	Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
	// Retrieves the list of currently loaded alerting and recording rules.
	Rules(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error)
	// Provides an overview of the current state of target discovery in Prometheus.
	Targets(ctx context.Context, in *TargetsRequest, opts ...grpc.CallOption) (*TargetsResponse, error)
	// Returns metadata about metrics currently being scraped by a specified target.
	TargetsMetadata(ctx context.Context, in *TargetsMetadataRequest, opts ...grpc.CallOption) (*TargetsMetadataResponse, error)
}

type monitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringServiceClient(cc grpc.ClientConnInterface) MonitoringServiceClient {
	return &monitoringServiceClient{cc}
}

func (c *monitoringServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, MonitoringService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionRsp)
	err := c.cc.Invoke(ctx, MonitoringService_CreateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConnectionRsp)
	err := c.cc.Invoke(ctx, MonitoringService_DeleteConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) Alerts(ctx context.Context, in *AlertsRequest, opts ...grpc.CallOption) (*AlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_Alerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) AlertManagers(ctx context.Context, in *AlertManagersRequest, opts ...grpc.CallOption) (*AlertManagersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertManagersResponse)
	err := c.cc.Invoke(ctx, MonitoringService_AlertManagers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) CleanTombstones(ctx context.Context, in *CleanTombstonesRequest, opts ...grpc.CallOption) (*CleanTombstonesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanTombstonesResponse)
	err := c.cc.Invoke(ctx, MonitoringService_CleanTombstones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, MonitoringService_Config_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) DeleteSeries(ctx context.Context, in *DeleteSeriesRequest, opts ...grpc.CallOption) (*DeleteSeriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSeriesResponse)
	err := c.cc.Invoke(ctx, MonitoringService_DeleteSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) Flags(ctx context.Context, in *FlagsRequest, opts ...grpc.CallOption) (*FlagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlagsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_Flags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) LabelNames(ctx context.Context, in *LabelNamesRequest, opts ...grpc.CallOption) (*LabelNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabelNamesResponse)
	err := c.cc.Invoke(ctx, MonitoringService_LabelNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) LabelValues(ctx context.Context, in *LabelValuesRequest, opts ...grpc.CallOption) (*LabelValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabelValuesResponse)
	err := c.cc.Invoke(ctx, MonitoringService_LabelValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, MonitoringService_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) QueryRange(ctx context.Context, in *QueryRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryRangeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MonitoringService_ServiceDesc.Streams[0], MonitoringService_QueryRange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryRangeRequest, QueryRangeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoringService_QueryRangeClient = grpc.ServerStreamingClient[QueryRangeResponse]

func (c *monitoringServiceClient) Series(ctx context.Context, in *SeriesRequest, opts ...grpc.CallOption) (*SeriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeriesResponse)
	err := c.cc.Invoke(ctx, MonitoringService_Series_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SnapshotResponse)
	err := c.cc.Invoke(ctx, MonitoringService_Snapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) Rules(ctx context.Context, in *RulesRequest, opts ...grpc.CallOption) (*RulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RulesResponse)
	err := c.cc.Invoke(ctx, MonitoringService_Rules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) Targets(ctx context.Context, in *TargetsRequest, opts ...grpc.CallOption) (*TargetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TargetsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_Targets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) TargetsMetadata(ctx context.Context, in *TargetsMetadataRequest, opts ...grpc.CallOption) (*TargetsMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TargetsMetadataResponse)
	err := c.cc.Invoke(ctx, MonitoringService_TargetsMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringServiceServer is the server API for MonitoringService service.
// All implementations should embed UnimplementedMonitoringServiceServer
// for forward compatibility.
//
// MonitoringService defines a service for interaction with a monitoring system,
// typically for operations related to time-series data management, querying, and configuration.
type MonitoringServiceServer interface {
	// Stops the server or service gracefully.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Creates a new connection to the monitoring system or database.
	CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error)
	// Deletes an existing connection to the monitoring system or database.
	DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error)
	// Retrieves all active alerts from the monitoring system.
	Alerts(context.Context, *AlertsRequest) (*AlertsResponse, error)
	// Provides an overview of the current state of the alert manager discovery in Prometheus.
	AlertManagers(context.Context, *AlertManagersRequest) (*AlertManagersResponse, error)
	// Removes deleted data from the disk and cleans up tombstones (data marked for deletion).
	CleanTombstones(context.Context, *CleanTombstonesRequest) (*CleanTombstonesResponse, error)
	// Fetches the current configuration of the Prometheus server.
	Config(context.Context, *ConfigRequest) (*ConfigResponse, error)
	// Deletes a selection of series within a specified time range.
	DeleteSeries(context.Context, *DeleteSeriesRequest) (*DeleteSeriesResponse, error)
	// Returns the flags used to launch the Prometheus server.
	Flags(context.Context, *FlagsRequest) (*FlagsResponse, error)
	// Retrieves all unique label names in the data block, in sorted order.
	LabelNames(context.Context, *LabelNamesRequest) (*LabelNamesResponse, error)
	// Executes a query for the values associated with a specific label.
	LabelValues(context.Context, *LabelValuesRequest) (*LabelValuesResponse, error)
	// Performs a query at a specific point in time.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// Executes a query over a range of time.
	QueryRange(*QueryRangeRequest, grpc.ServerStreamingServer[QueryRangeResponse]) error
	// Finds and returns series that match specified label criteria.
	Series(context.Context, *SeriesRequest) (*SeriesResponse, error)
	// Creates a snapshot of all current data and returns the directory of the snapshot.
	Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
	// Retrieves the list of currently loaded alerting and recording rules.
	Rules(context.Context, *RulesRequest) (*RulesResponse, error)
	// Provides an overview of the current state of target discovery in Prometheus.
	Targets(context.Context, *TargetsRequest) (*TargetsResponse, error)
	// Returns metadata about metrics currently being scraped by a specified target.
	TargetsMetadata(context.Context, *TargetsMetadataRequest) (*TargetsMetadataResponse, error)
}

// UnimplementedMonitoringServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoringServiceServer struct{}

func (UnimplementedMonitoringServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedMonitoringServiceServer) CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedMonitoringServiceServer) DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedMonitoringServiceServer) Alerts(context.Context, *AlertsRequest) (*AlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alerts not implemented")
}
func (UnimplementedMonitoringServiceServer) AlertManagers(context.Context, *AlertManagersRequest) (*AlertManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertManagers not implemented")
}
func (UnimplementedMonitoringServiceServer) CleanTombstones(context.Context, *CleanTombstonesRequest) (*CleanTombstonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanTombstones not implemented")
}
func (UnimplementedMonitoringServiceServer) Config(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedMonitoringServiceServer) DeleteSeries(context.Context, *DeleteSeriesRequest) (*DeleteSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeries not implemented")
}
func (UnimplementedMonitoringServiceServer) Flags(context.Context, *FlagsRequest) (*FlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flags not implemented")
}
func (UnimplementedMonitoringServiceServer) LabelNames(context.Context, *LabelNamesRequest) (*LabelNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelNames not implemented")
}
func (UnimplementedMonitoringServiceServer) LabelValues(context.Context, *LabelValuesRequest) (*LabelValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelValues not implemented")
}
func (UnimplementedMonitoringServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedMonitoringServiceServer) QueryRange(*QueryRangeRequest, grpc.ServerStreamingServer[QueryRangeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method QueryRange not implemented")
}
func (UnimplementedMonitoringServiceServer) Series(context.Context, *SeriesRequest) (*SeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Series not implemented")
}
func (UnimplementedMonitoringServiceServer) Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedMonitoringServiceServer) Rules(context.Context, *RulesRequest) (*RulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rules not implemented")
}
func (UnimplementedMonitoringServiceServer) Targets(context.Context, *TargetsRequest) (*TargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Targets not implemented")
}
func (UnimplementedMonitoringServiceServer) TargetsMetadata(context.Context, *TargetsMetadataRequest) (*TargetsMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TargetsMetadata not implemented")
}
func (UnimplementedMonitoringServiceServer) testEmbeddedByValue() {}

// UnsafeMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringServiceServer will
// result in compilation errors.
type UnsafeMonitoringServiceServer interface {
	mustEmbedUnimplementedMonitoringServiceServer()
}

func RegisterMonitoringServiceServer(s grpc.ServiceRegistrar, srv MonitoringServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonitoringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonitoringService_ServiceDesc, srv)
}

func _MonitoringService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).CreateConnection(ctx, req.(*CreateConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_Alerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).Alerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_Alerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).Alerts(ctx, req.(*AlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_AlertManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).AlertManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_AlertManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).AlertManagers(ctx, req.(*AlertManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_CleanTombstones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanTombstonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).CleanTombstones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_CleanTombstones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).CleanTombstones(ctx, req.(*CleanTombstonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).Config(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_DeleteSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).DeleteSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_DeleteSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).DeleteSeries(ctx, req.(*DeleteSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_Flags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).Flags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_Flags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).Flags(ctx, req.(*FlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_LabelNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).LabelNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_LabelNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).LabelNames(ctx, req.(*LabelNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_LabelValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).LabelValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_LabelValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).LabelValues(ctx, req.(*LabelValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_QueryRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServiceServer).QueryRange(m, &grpc.GenericServerStream[QueryRangeRequest, QueryRangeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoringService_QueryRangeServer = grpc.ServerStreamingServer[QueryRangeResponse]

func _MonitoringService_Series_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).Series(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_Series_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).Series(ctx, req.(*SeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_Snapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).Snapshot(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_Rules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).Rules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_Rules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).Rules(ctx, req.(*RulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_Targets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).Targets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_Targets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).Targets(ctx, req.(*TargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_TargetsMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetsMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).TargetsMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_TargetsMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).TargetsMetadata(ctx, req.(*TargetsMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitoringService_ServiceDesc is the grpc.ServiceDesc for MonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.MonitoringService",
	HandlerType: (*MonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _MonitoringService_Stop_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _MonitoringService_CreateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _MonitoringService_DeleteConnection_Handler,
		},
		{
			MethodName: "Alerts",
			Handler:    _MonitoringService_Alerts_Handler,
		},
		{
			MethodName: "AlertManagers",
			Handler:    _MonitoringService_AlertManagers_Handler,
		},
		{
			MethodName: "CleanTombstones",
			Handler:    _MonitoringService_CleanTombstones_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _MonitoringService_Config_Handler,
		},
		{
			MethodName: "DeleteSeries",
			Handler:    _MonitoringService_DeleteSeries_Handler,
		},
		{
			MethodName: "Flags",
			Handler:    _MonitoringService_Flags_Handler,
		},
		{
			MethodName: "LabelNames",
			Handler:    _MonitoringService_LabelNames_Handler,
		},
		{
			MethodName: "LabelValues",
			Handler:    _MonitoringService_LabelValues_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _MonitoringService_Query_Handler,
		},
		{
			MethodName: "Series",
			Handler:    _MonitoringService_Series_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _MonitoringService_Snapshot_Handler,
		},
		{
			MethodName: "Rules",
			Handler:    _MonitoringService_Rules_Handler,
		},
		{
			MethodName: "Targets",
			Handler:    _MonitoringService_Targets_Handler,
		},
		{
			MethodName: "TargetsMetadata",
			Handler:    _MonitoringService_TargetsMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryRange",
			Handler:       _MonitoringService_QueryRange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "monitoring.proto",
}
