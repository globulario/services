// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: dns.proto

package dnspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DnsService_Stop_FullMethodName        = "/dns.DnsService/Stop"
	DnsService_SetA_FullMethodName        = "/dns.DnsService/SetA"
	DnsService_RemoveA_FullMethodName     = "/dns.DnsService/RemoveA"
	DnsService_GetA_FullMethodName        = "/dns.DnsService/GetA"
	DnsService_SetAAAA_FullMethodName     = "/dns.DnsService/SetAAAA"
	DnsService_RemoveAAAA_FullMethodName  = "/dns.DnsService/RemoveAAAA"
	DnsService_GetAAAA_FullMethodName     = "/dns.DnsService/GetAAAA"
	DnsService_SetText_FullMethodName     = "/dns.DnsService/SetText"
	DnsService_GetText_FullMethodName     = "/dns.DnsService/GetText"
	DnsService_RemoveText_FullMethodName  = "/dns.DnsService/RemoveText"
	DnsService_SetNs_FullMethodName       = "/dns.DnsService/SetNs"
	DnsService_GetNs_FullMethodName       = "/dns.DnsService/GetNs"
	DnsService_RemoveNs_FullMethodName    = "/dns.DnsService/RemoveNs"
	DnsService_SetCName_FullMethodName    = "/dns.DnsService/SetCName"
	DnsService_GetCName_FullMethodName    = "/dns.DnsService/GetCName"
	DnsService_RemoveCName_FullMethodName = "/dns.DnsService/RemoveCName"
	DnsService_SetMx_FullMethodName       = "/dns.DnsService/SetMx"
	DnsService_GetMx_FullMethodName       = "/dns.DnsService/GetMx"
	DnsService_RemoveMx_FullMethodName    = "/dns.DnsService/RemoveMx"
	DnsService_SetSoa_FullMethodName      = "/dns.DnsService/SetSoa"
	DnsService_GetSoa_FullMethodName      = "/dns.DnsService/GetSoa"
	DnsService_RemoveSoa_FullMethodName   = "/dns.DnsService/RemoveSoa"
	DnsService_SetUri_FullMethodName      = "/dns.DnsService/SetUri"
	DnsService_GetUri_FullMethodName      = "/dns.DnsService/GetUri"
	DnsService_RemoveUri_FullMethodName   = "/dns.DnsService/RemoveUri"
	DnsService_SetCaa_FullMethodName      = "/dns.DnsService/SetCaa"
	DnsService_GetCaa_FullMethodName      = "/dns.DnsService/GetCaa"
	DnsService_RemoveCaa_FullMethodName   = "/dns.DnsService/RemoveCaa"
	DnsService_SetAfsdb_FullMethodName    = "/dns.DnsService/SetAfsdb"
	DnsService_GetAfsdb_FullMethodName    = "/dns.DnsService/GetAfsdb"
	DnsService_RemoveAfsdb_FullMethodName = "/dns.DnsService/RemoveAfsdb"
)

// DnsServiceClient is the client API for DnsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DnsService defines a service for managing DNS records.
type DnsServiceClient interface {
	// Stop the server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Set an A record (IPv4 address).
	SetA(ctx context.Context, in *SetARequest, opts ...grpc.CallOption) (*SetAResponse, error)
	// Remove an A record.
	RemoveA(ctx context.Context, in *RemoveARequest, opts ...grpc.CallOption) (*RemoveAResponse, error)
	// Get the A record (IPv4 address) for a given domain name.
	GetA(ctx context.Context, in *GetARequest, opts ...grpc.CallOption) (*GetAResponse, error)
	// Set an AAAA record (IPv6 address).
	SetAAAA(ctx context.Context, in *SetAAAARequest, opts ...grpc.CallOption) (*SetAAAAResponse, error)
	// Remove an AAAA record.
	RemoveAAAA(ctx context.Context, in *RemoveAAAARequest, opts ...grpc.CallOption) (*RemoveAAAAResponse, error)
	// Get the AAAA record (IPv6 address) for a given domain name.
	GetAAAA(ctx context.Context, in *GetAAAARequest, opts ...grpc.CallOption) (*GetAAAAResponse, error)
	// Set a TXT record.
	SetText(ctx context.Context, in *SetTextRequest, opts ...grpc.CallOption) (*SetTextResponse, error)
	// Retrieve a TXT record.
	GetText(ctx context.Context, in *GetTextRequest, opts ...grpc.CallOption) (*GetTextResponse, error)
	// Remove a TXT record.
	RemoveText(ctx context.Context, in *RemoveTextRequest, opts ...grpc.CallOption) (*RemoveTextResponse, error)
	// Set an NS record.
	SetNs(ctx context.Context, in *SetNsRequest, opts ...grpc.CallOption) (*SetNsResponse, error)
	// Retrieve an NS record.
	GetNs(ctx context.Context, in *GetNsRequest, opts ...grpc.CallOption) (*GetNsResponse, error)
	// Remove an NS record.
	RemoveNs(ctx context.Context, in *RemoveNsRequest, opts ...grpc.CallOption) (*RemoveNsResponse, error)
	// Set a CNAME record.
	SetCName(ctx context.Context, in *SetCNameRequest, opts ...grpc.CallOption) (*SetCNameResponse, error)
	// Retrieve a CNAME record.
	GetCName(ctx context.Context, in *GetCNameRequest, opts ...grpc.CallOption) (*GetCNameResponse, error)
	// Remove a CNAME record.
	RemoveCName(ctx context.Context, in *RemoveCNameRequest, opts ...grpc.CallOption) (*RemoveCNameResponse, error)
	// Set an MX record.
	SetMx(ctx context.Context, in *SetMxRequest, opts ...grpc.CallOption) (*SetMxResponse, error)
	// Retrieve an MX record.
	GetMx(ctx context.Context, in *GetMxRequest, opts ...grpc.CallOption) (*GetMxResponse, error)
	// Remove an MX record.
	RemoveMx(ctx context.Context, in *RemoveMxRequest, opts ...grpc.CallOption) (*RemoveMxResponse, error)
	// Set an SOA record.
	SetSoa(ctx context.Context, in *SetSoaRequest, opts ...grpc.CallOption) (*SetSoaResponse, error)
	// Retrieve an SOA record.
	GetSoa(ctx context.Context, in *GetSoaRequest, opts ...grpc.CallOption) (*GetSoaResponse, error)
	// Remove an SOA record.
	RemoveSoa(ctx context.Context, in *RemoveSoaRequest, opts ...grpc.CallOption) (*RemoveSoaResponse, error)
	// Set a URI record.
	SetUri(ctx context.Context, in *SetUriRequest, opts ...grpc.CallOption) (*SetUriResponse, error)
	// Retrieve a URI record.
	GetUri(ctx context.Context, in *GetUriRequest, opts ...grpc.CallOption) (*GetUriResponse, error)
	// Remove a URI record.
	RemoveUri(ctx context.Context, in *RemoveUriRequest, opts ...grpc.CallOption) (*RemoveUriResponse, error)
	// Set a CAA record.
	SetCaa(ctx context.Context, in *SetCaaRequest, opts ...grpc.CallOption) (*SetCaaResponse, error)
	// Retrieve a CAA record.
	GetCaa(ctx context.Context, in *GetCaaRequest, opts ...grpc.CallOption) (*GetCaaResponse, error)
	// Remove a CAA record.
	RemoveCaa(ctx context.Context, in *RemoveCaaRequest, opts ...grpc.CallOption) (*RemoveCaaResponse, error)
	// Set an AFSDB record.
	SetAfsdb(ctx context.Context, in *SetAfsdbRequest, opts ...grpc.CallOption) (*SetAfsdbResponse, error)
	// Retrieve an AFSDB record.
	GetAfsdb(ctx context.Context, in *GetAfsdbRequest, opts ...grpc.CallOption) (*GetAfsdbResponse, error)
	// Remove an AFSDB record.
	RemoveAfsdb(ctx context.Context, in *RemoveAfsdbRequest, opts ...grpc.CallOption) (*RemoveAfsdbResponse, error)
}

type dnsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDnsServiceClient(cc grpc.ClientConnInterface) DnsServiceClient {
	return &dnsServiceClient{cc}
}

func (c *dnsServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, DnsService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) SetA(ctx context.Context, in *SetARequest, opts ...grpc.CallOption) (*SetAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAResponse)
	err := c.cc.Invoke(ctx, DnsService_SetA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) RemoveA(ctx context.Context, in *RemoveARequest, opts ...grpc.CallOption) (*RemoveAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAResponse)
	err := c.cc.Invoke(ctx, DnsService_RemoveA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetA(ctx context.Context, in *GetARequest, opts ...grpc.CallOption) (*GetAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAResponse)
	err := c.cc.Invoke(ctx, DnsService_GetA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) SetAAAA(ctx context.Context, in *SetAAAARequest, opts ...grpc.CallOption) (*SetAAAAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAAAAResponse)
	err := c.cc.Invoke(ctx, DnsService_SetAAAA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) RemoveAAAA(ctx context.Context, in *RemoveAAAARequest, opts ...grpc.CallOption) (*RemoveAAAAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAAAAResponse)
	err := c.cc.Invoke(ctx, DnsService_RemoveAAAA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetAAAA(ctx context.Context, in *GetAAAARequest, opts ...grpc.CallOption) (*GetAAAAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAAAAResponse)
	err := c.cc.Invoke(ctx, DnsService_GetAAAA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) SetText(ctx context.Context, in *SetTextRequest, opts ...grpc.CallOption) (*SetTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTextResponse)
	err := c.cc.Invoke(ctx, DnsService_SetText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetText(ctx context.Context, in *GetTextRequest, opts ...grpc.CallOption) (*GetTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTextResponse)
	err := c.cc.Invoke(ctx, DnsService_GetText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) RemoveText(ctx context.Context, in *RemoveTextRequest, opts ...grpc.CallOption) (*RemoveTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTextResponse)
	err := c.cc.Invoke(ctx, DnsService_RemoveText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) SetNs(ctx context.Context, in *SetNsRequest, opts ...grpc.CallOption) (*SetNsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNsResponse)
	err := c.cc.Invoke(ctx, DnsService_SetNs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetNs(ctx context.Context, in *GetNsRequest, opts ...grpc.CallOption) (*GetNsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNsResponse)
	err := c.cc.Invoke(ctx, DnsService_GetNs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) RemoveNs(ctx context.Context, in *RemoveNsRequest, opts ...grpc.CallOption) (*RemoveNsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNsResponse)
	err := c.cc.Invoke(ctx, DnsService_RemoveNs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) SetCName(ctx context.Context, in *SetCNameRequest, opts ...grpc.CallOption) (*SetCNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCNameResponse)
	err := c.cc.Invoke(ctx, DnsService_SetCName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetCName(ctx context.Context, in *GetCNameRequest, opts ...grpc.CallOption) (*GetCNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCNameResponse)
	err := c.cc.Invoke(ctx, DnsService_GetCName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) RemoveCName(ctx context.Context, in *RemoveCNameRequest, opts ...grpc.CallOption) (*RemoveCNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveCNameResponse)
	err := c.cc.Invoke(ctx, DnsService_RemoveCName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) SetMx(ctx context.Context, in *SetMxRequest, opts ...grpc.CallOption) (*SetMxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMxResponse)
	err := c.cc.Invoke(ctx, DnsService_SetMx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetMx(ctx context.Context, in *GetMxRequest, opts ...grpc.CallOption) (*GetMxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMxResponse)
	err := c.cc.Invoke(ctx, DnsService_GetMx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) RemoveMx(ctx context.Context, in *RemoveMxRequest, opts ...grpc.CallOption) (*RemoveMxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMxResponse)
	err := c.cc.Invoke(ctx, DnsService_RemoveMx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) SetSoa(ctx context.Context, in *SetSoaRequest, opts ...grpc.CallOption) (*SetSoaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSoaResponse)
	err := c.cc.Invoke(ctx, DnsService_SetSoa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetSoa(ctx context.Context, in *GetSoaRequest, opts ...grpc.CallOption) (*GetSoaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSoaResponse)
	err := c.cc.Invoke(ctx, DnsService_GetSoa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) RemoveSoa(ctx context.Context, in *RemoveSoaRequest, opts ...grpc.CallOption) (*RemoveSoaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSoaResponse)
	err := c.cc.Invoke(ctx, DnsService_RemoveSoa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) SetUri(ctx context.Context, in *SetUriRequest, opts ...grpc.CallOption) (*SetUriResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUriResponse)
	err := c.cc.Invoke(ctx, DnsService_SetUri_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetUri(ctx context.Context, in *GetUriRequest, opts ...grpc.CallOption) (*GetUriResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUriResponse)
	err := c.cc.Invoke(ctx, DnsService_GetUri_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) RemoveUri(ctx context.Context, in *RemoveUriRequest, opts ...grpc.CallOption) (*RemoveUriResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUriResponse)
	err := c.cc.Invoke(ctx, DnsService_RemoveUri_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) SetCaa(ctx context.Context, in *SetCaaRequest, opts ...grpc.CallOption) (*SetCaaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCaaResponse)
	err := c.cc.Invoke(ctx, DnsService_SetCaa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetCaa(ctx context.Context, in *GetCaaRequest, opts ...grpc.CallOption) (*GetCaaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCaaResponse)
	err := c.cc.Invoke(ctx, DnsService_GetCaa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) RemoveCaa(ctx context.Context, in *RemoveCaaRequest, opts ...grpc.CallOption) (*RemoveCaaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveCaaResponse)
	err := c.cc.Invoke(ctx, DnsService_RemoveCaa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) SetAfsdb(ctx context.Context, in *SetAfsdbRequest, opts ...grpc.CallOption) (*SetAfsdbResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAfsdbResponse)
	err := c.cc.Invoke(ctx, DnsService_SetAfsdb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetAfsdb(ctx context.Context, in *GetAfsdbRequest, opts ...grpc.CallOption) (*GetAfsdbResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAfsdbResponse)
	err := c.cc.Invoke(ctx, DnsService_GetAfsdb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) RemoveAfsdb(ctx context.Context, in *RemoveAfsdbRequest, opts ...grpc.CallOption) (*RemoveAfsdbResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAfsdbResponse)
	err := c.cc.Invoke(ctx, DnsService_RemoveAfsdb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnsServiceServer is the server API for DnsService service.
// All implementations should embed UnimplementedDnsServiceServer
// for forward compatibility
//
// DnsService defines a service for managing DNS records.
type DnsServiceServer interface {
	// Stop the server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Set an A record (IPv4 address).
	SetA(context.Context, *SetARequest) (*SetAResponse, error)
	// Remove an A record.
	RemoveA(context.Context, *RemoveARequest) (*RemoveAResponse, error)
	// Get the A record (IPv4 address) for a given domain name.
	GetA(context.Context, *GetARequest) (*GetAResponse, error)
	// Set an AAAA record (IPv6 address).
	SetAAAA(context.Context, *SetAAAARequest) (*SetAAAAResponse, error)
	// Remove an AAAA record.
	RemoveAAAA(context.Context, *RemoveAAAARequest) (*RemoveAAAAResponse, error)
	// Get the AAAA record (IPv6 address) for a given domain name.
	GetAAAA(context.Context, *GetAAAARequest) (*GetAAAAResponse, error)
	// Set a TXT record.
	SetText(context.Context, *SetTextRequest) (*SetTextResponse, error)
	// Retrieve a TXT record.
	GetText(context.Context, *GetTextRequest) (*GetTextResponse, error)
	// Remove a TXT record.
	RemoveText(context.Context, *RemoveTextRequest) (*RemoveTextResponse, error)
	// Set an NS record.
	SetNs(context.Context, *SetNsRequest) (*SetNsResponse, error)
	// Retrieve an NS record.
	GetNs(context.Context, *GetNsRequest) (*GetNsResponse, error)
	// Remove an NS record.
	RemoveNs(context.Context, *RemoveNsRequest) (*RemoveNsResponse, error)
	// Set a CNAME record.
	SetCName(context.Context, *SetCNameRequest) (*SetCNameResponse, error)
	// Retrieve a CNAME record.
	GetCName(context.Context, *GetCNameRequest) (*GetCNameResponse, error)
	// Remove a CNAME record.
	RemoveCName(context.Context, *RemoveCNameRequest) (*RemoveCNameResponse, error)
	// Set an MX record.
	SetMx(context.Context, *SetMxRequest) (*SetMxResponse, error)
	// Retrieve an MX record.
	GetMx(context.Context, *GetMxRequest) (*GetMxResponse, error)
	// Remove an MX record.
	RemoveMx(context.Context, *RemoveMxRequest) (*RemoveMxResponse, error)
	// Set an SOA record.
	SetSoa(context.Context, *SetSoaRequest) (*SetSoaResponse, error)
	// Retrieve an SOA record.
	GetSoa(context.Context, *GetSoaRequest) (*GetSoaResponse, error)
	// Remove an SOA record.
	RemoveSoa(context.Context, *RemoveSoaRequest) (*RemoveSoaResponse, error)
	// Set a URI record.
	SetUri(context.Context, *SetUriRequest) (*SetUriResponse, error)
	// Retrieve a URI record.
	GetUri(context.Context, *GetUriRequest) (*GetUriResponse, error)
	// Remove a URI record.
	RemoveUri(context.Context, *RemoveUriRequest) (*RemoveUriResponse, error)
	// Set a CAA record.
	SetCaa(context.Context, *SetCaaRequest) (*SetCaaResponse, error)
	// Retrieve a CAA record.
	GetCaa(context.Context, *GetCaaRequest) (*GetCaaResponse, error)
	// Remove a CAA record.
	RemoveCaa(context.Context, *RemoveCaaRequest) (*RemoveCaaResponse, error)
	// Set an AFSDB record.
	SetAfsdb(context.Context, *SetAfsdbRequest) (*SetAfsdbResponse, error)
	// Retrieve an AFSDB record.
	GetAfsdb(context.Context, *GetAfsdbRequest) (*GetAfsdbResponse, error)
	// Remove an AFSDB record.
	RemoveAfsdb(context.Context, *RemoveAfsdbRequest) (*RemoveAfsdbResponse, error)
}

// UnimplementedDnsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDnsServiceServer struct {
}

func (UnimplementedDnsServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedDnsServiceServer) SetA(context.Context, *SetARequest) (*SetAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetA not implemented")
}
func (UnimplementedDnsServiceServer) RemoveA(context.Context, *RemoveARequest) (*RemoveAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveA not implemented")
}
func (UnimplementedDnsServiceServer) GetA(context.Context, *GetARequest) (*GetAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetA not implemented")
}
func (UnimplementedDnsServiceServer) SetAAAA(context.Context, *SetAAAARequest) (*SetAAAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAAAA not implemented")
}
func (UnimplementedDnsServiceServer) RemoveAAAA(context.Context, *RemoveAAAARequest) (*RemoveAAAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAAAA not implemented")
}
func (UnimplementedDnsServiceServer) GetAAAA(context.Context, *GetAAAARequest) (*GetAAAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAAAA not implemented")
}
func (UnimplementedDnsServiceServer) SetText(context.Context, *SetTextRequest) (*SetTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetText not implemented")
}
func (UnimplementedDnsServiceServer) GetText(context.Context, *GetTextRequest) (*GetTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText not implemented")
}
func (UnimplementedDnsServiceServer) RemoveText(context.Context, *RemoveTextRequest) (*RemoveTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveText not implemented")
}
func (UnimplementedDnsServiceServer) SetNs(context.Context, *SetNsRequest) (*SetNsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNs not implemented")
}
func (UnimplementedDnsServiceServer) GetNs(context.Context, *GetNsRequest) (*GetNsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNs not implemented")
}
func (UnimplementedDnsServiceServer) RemoveNs(context.Context, *RemoveNsRequest) (*RemoveNsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNs not implemented")
}
func (UnimplementedDnsServiceServer) SetCName(context.Context, *SetCNameRequest) (*SetCNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCName not implemented")
}
func (UnimplementedDnsServiceServer) GetCName(context.Context, *GetCNameRequest) (*GetCNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCName not implemented")
}
func (UnimplementedDnsServiceServer) RemoveCName(context.Context, *RemoveCNameRequest) (*RemoveCNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCName not implemented")
}
func (UnimplementedDnsServiceServer) SetMx(context.Context, *SetMxRequest) (*SetMxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMx not implemented")
}
func (UnimplementedDnsServiceServer) GetMx(context.Context, *GetMxRequest) (*GetMxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMx not implemented")
}
func (UnimplementedDnsServiceServer) RemoveMx(context.Context, *RemoveMxRequest) (*RemoveMxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMx not implemented")
}
func (UnimplementedDnsServiceServer) SetSoa(context.Context, *SetSoaRequest) (*SetSoaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSoa not implemented")
}
func (UnimplementedDnsServiceServer) GetSoa(context.Context, *GetSoaRequest) (*GetSoaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoa not implemented")
}
func (UnimplementedDnsServiceServer) RemoveSoa(context.Context, *RemoveSoaRequest) (*RemoveSoaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSoa not implemented")
}
func (UnimplementedDnsServiceServer) SetUri(context.Context, *SetUriRequest) (*SetUriResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUri not implemented")
}
func (UnimplementedDnsServiceServer) GetUri(context.Context, *GetUriRequest) (*GetUriResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUri not implemented")
}
func (UnimplementedDnsServiceServer) RemoveUri(context.Context, *RemoveUriRequest) (*RemoveUriResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUri not implemented")
}
func (UnimplementedDnsServiceServer) SetCaa(context.Context, *SetCaaRequest) (*SetCaaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCaa not implemented")
}
func (UnimplementedDnsServiceServer) GetCaa(context.Context, *GetCaaRequest) (*GetCaaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaa not implemented")
}
func (UnimplementedDnsServiceServer) RemoveCaa(context.Context, *RemoveCaaRequest) (*RemoveCaaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCaa not implemented")
}
func (UnimplementedDnsServiceServer) SetAfsdb(context.Context, *SetAfsdbRequest) (*SetAfsdbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAfsdb not implemented")
}
func (UnimplementedDnsServiceServer) GetAfsdb(context.Context, *GetAfsdbRequest) (*GetAfsdbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAfsdb not implemented")
}
func (UnimplementedDnsServiceServer) RemoveAfsdb(context.Context, *RemoveAfsdbRequest) (*RemoveAfsdbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAfsdb not implemented")
}

// UnsafeDnsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnsServiceServer will
// result in compilation errors.
type UnsafeDnsServiceServer interface {
	mustEmbedUnimplementedDnsServiceServer()
}

func RegisterDnsServiceServer(s grpc.ServiceRegistrar, srv DnsServiceServer) {
	s.RegisterService(&DnsService_ServiceDesc, srv)
}

func _DnsService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_SetA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SetA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_SetA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SetA(ctx, req.(*SetARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_RemoveA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).RemoveA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_RemoveA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).RemoveA(ctx, req.(*RemoveARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetA(ctx, req.(*GetARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_SetAAAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAAAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SetAAAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_SetAAAA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SetAAAA(ctx, req.(*SetAAAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_RemoveAAAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAAAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).RemoveAAAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_RemoveAAAA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).RemoveAAAA(ctx, req.(*RemoveAAAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetAAAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAAAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetAAAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetAAAA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetAAAA(ctx, req.(*GetAAAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_SetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_SetText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SetText(ctx, req.(*SetTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetText(ctx, req.(*GetTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_RemoveText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).RemoveText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_RemoveText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).RemoveText(ctx, req.(*RemoveTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_SetNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SetNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_SetNs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SetNs(ctx, req.(*SetNsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetNs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetNs(ctx, req.(*GetNsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_RemoveNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).RemoveNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_RemoveNs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).RemoveNs(ctx, req.(*RemoveNsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_SetCName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SetCName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_SetCName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SetCName(ctx, req.(*SetCNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetCName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetCName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetCName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetCName(ctx, req.(*GetCNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_RemoveCName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).RemoveCName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_RemoveCName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).RemoveCName(ctx, req.(*RemoveCNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_SetMx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SetMx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_SetMx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SetMx(ctx, req.(*SetMxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetMx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetMx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetMx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetMx(ctx, req.(*GetMxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_RemoveMx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).RemoveMx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_RemoveMx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).RemoveMx(ctx, req.(*RemoveMxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_SetSoa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSoaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SetSoa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_SetSoa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SetSoa(ctx, req.(*SetSoaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetSoa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetSoa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetSoa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetSoa(ctx, req.(*GetSoaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_RemoveSoa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSoaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).RemoveSoa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_RemoveSoa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).RemoveSoa(ctx, req.(*RemoveSoaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_SetUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUriRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SetUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_SetUri_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SetUri(ctx, req.(*SetUriRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUriRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetUri_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetUri(ctx, req.(*GetUriRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_RemoveUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUriRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).RemoveUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_RemoveUri_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).RemoveUri(ctx, req.(*RemoveUriRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_SetCaa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCaaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SetCaa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_SetCaa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SetCaa(ctx, req.(*SetCaaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetCaa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetCaa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetCaa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetCaa(ctx, req.(*GetCaaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_RemoveCaa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCaaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).RemoveCaa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_RemoveCaa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).RemoveCaa(ctx, req.(*RemoveCaaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_SetAfsdb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAfsdbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SetAfsdb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_SetAfsdb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SetAfsdb(ctx, req.(*SetAfsdbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetAfsdb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAfsdbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetAfsdb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_GetAfsdb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetAfsdb(ctx, req.(*GetAfsdbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_RemoveAfsdb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAfsdbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).RemoveAfsdb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DnsService_RemoveAfsdb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).RemoveAfsdb(ctx, req.(*RemoveAfsdbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DnsService_ServiceDesc is the grpc.ServiceDesc for DnsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DnsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dns.DnsService",
	HandlerType: (*DnsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _DnsService_Stop_Handler,
		},
		{
			MethodName: "SetA",
			Handler:    _DnsService_SetA_Handler,
		},
		{
			MethodName: "RemoveA",
			Handler:    _DnsService_RemoveA_Handler,
		},
		{
			MethodName: "GetA",
			Handler:    _DnsService_GetA_Handler,
		},
		{
			MethodName: "SetAAAA",
			Handler:    _DnsService_SetAAAA_Handler,
		},
		{
			MethodName: "RemoveAAAA",
			Handler:    _DnsService_RemoveAAAA_Handler,
		},
		{
			MethodName: "GetAAAA",
			Handler:    _DnsService_GetAAAA_Handler,
		},
		{
			MethodName: "SetText",
			Handler:    _DnsService_SetText_Handler,
		},
		{
			MethodName: "GetText",
			Handler:    _DnsService_GetText_Handler,
		},
		{
			MethodName: "RemoveText",
			Handler:    _DnsService_RemoveText_Handler,
		},
		{
			MethodName: "SetNs",
			Handler:    _DnsService_SetNs_Handler,
		},
		{
			MethodName: "GetNs",
			Handler:    _DnsService_GetNs_Handler,
		},
		{
			MethodName: "RemoveNs",
			Handler:    _DnsService_RemoveNs_Handler,
		},
		{
			MethodName: "SetCName",
			Handler:    _DnsService_SetCName_Handler,
		},
		{
			MethodName: "GetCName",
			Handler:    _DnsService_GetCName_Handler,
		},
		{
			MethodName: "RemoveCName",
			Handler:    _DnsService_RemoveCName_Handler,
		},
		{
			MethodName: "SetMx",
			Handler:    _DnsService_SetMx_Handler,
		},
		{
			MethodName: "GetMx",
			Handler:    _DnsService_GetMx_Handler,
		},
		{
			MethodName: "RemoveMx",
			Handler:    _DnsService_RemoveMx_Handler,
		},
		{
			MethodName: "SetSoa",
			Handler:    _DnsService_SetSoa_Handler,
		},
		{
			MethodName: "GetSoa",
			Handler:    _DnsService_GetSoa_Handler,
		},
		{
			MethodName: "RemoveSoa",
			Handler:    _DnsService_RemoveSoa_Handler,
		},
		{
			MethodName: "SetUri",
			Handler:    _DnsService_SetUri_Handler,
		},
		{
			MethodName: "GetUri",
			Handler:    _DnsService_GetUri_Handler,
		},
		{
			MethodName: "RemoveUri",
			Handler:    _DnsService_RemoveUri_Handler,
		},
		{
			MethodName: "SetCaa",
			Handler:    _DnsService_SetCaa_Handler,
		},
		{
			MethodName: "GetCaa",
			Handler:    _DnsService_GetCaa_Handler,
		},
		{
			MethodName: "RemoveCaa",
			Handler:    _DnsService_RemoveCaa_Handler,
		},
		{
			MethodName: "SetAfsdb",
			Handler:    _DnsService_SetAfsdb_Handler,
		},
		{
			MethodName: "GetAfsdb",
			Handler:    _DnsService_GetAfsdb_Handler,
		},
		{
			MethodName: "RemoveAfsdb",
			Handler:    _DnsService_RemoveAfsdb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns.proto",
}
