// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: sql.proto

package sqlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SqlService_Stop_FullMethodName             = "/sql.SqlService/Stop"
	SqlService_CreateConnection_FullMethodName = "/sql.SqlService/CreateConnection"
	SqlService_DeleteConnection_FullMethodName = "/sql.SqlService/DeleteConnection"
	SqlService_Ping_FullMethodName             = "/sql.SqlService/Ping"
	SqlService_QueryContext_FullMethodName     = "/sql.SqlService/QueryContext"
	SqlService_ExecContext_FullMethodName      = "/sql.SqlService/ExecContext"
)

// SqlServiceClient is the client API for SqlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for SQL operations.
type SqlServiceClient interface {
	// Stops the SQL server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Creates a new database connection.
	CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error)
	// Deletes an existing database connection.
	DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error)
	// Pings an existing database connection.
	Ping(ctx context.Context, in *PingConnectionRqst, opts ...grpc.CallOption) (*PingConnectionRsp, error)
	// Executes a query and returns zero or more rows, typically used for SQL SELECT.
	QueryContext(ctx context.Context, in *QueryContextRqst, opts ...grpc.CallOption) (SqlService_QueryContextClient, error)
	// Executes an SQL statement like CREATE, INSERT, UPDATE, and DELETE.
	// Returns the number of affected rows and the last inserted ID, if applicable.
	ExecContext(ctx context.Context, in *ExecContextRqst, opts ...grpc.CallOption) (*ExecContextRsp, error)
}

type sqlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlServiceClient(cc grpc.ClientConnInterface) SqlServiceClient {
	return &sqlServiceClient{cc}
}

func (c *sqlServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, SqlService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionRsp)
	err := c.cc.Invoke(ctx, SqlService_CreateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConnectionRsp)
	err := c.cc.Invoke(ctx, SqlService_DeleteConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlServiceClient) Ping(ctx context.Context, in *PingConnectionRqst, opts ...grpc.CallOption) (*PingConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingConnectionRsp)
	err := c.cc.Invoke(ctx, SqlService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlServiceClient) QueryContext(ctx context.Context, in *QueryContextRqst, opts ...grpc.CallOption) (SqlService_QueryContextClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SqlService_ServiceDesc.Streams[0], SqlService_QueryContext_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &sqlServiceQueryContextClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SqlService_QueryContextClient interface {
	Recv() (*QueryContextRsp, error)
	grpc.ClientStream
}

type sqlServiceQueryContextClient struct {
	grpc.ClientStream
}

func (x *sqlServiceQueryContextClient) Recv() (*QueryContextRsp, error) {
	m := new(QueryContextRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sqlServiceClient) ExecContext(ctx context.Context, in *ExecContextRqst, opts ...grpc.CallOption) (*ExecContextRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecContextRsp)
	err := c.cc.Invoke(ctx, SqlService_ExecContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlServiceServer is the server API for SqlService service.
// All implementations should embed UnimplementedSqlServiceServer
// for forward compatibility
//
// Service definition for SQL operations.
type SqlServiceServer interface {
	// Stops the SQL server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Creates a new database connection.
	CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error)
	// Deletes an existing database connection.
	DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error)
	// Pings an existing database connection.
	Ping(context.Context, *PingConnectionRqst) (*PingConnectionRsp, error)
	// Executes a query and returns zero or more rows, typically used for SQL SELECT.
	QueryContext(*QueryContextRqst, SqlService_QueryContextServer) error
	// Executes an SQL statement like CREATE, INSERT, UPDATE, and DELETE.
	// Returns the number of affected rows and the last inserted ID, if applicable.
	ExecContext(context.Context, *ExecContextRqst) (*ExecContextRsp, error)
}

// UnimplementedSqlServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSqlServiceServer struct {
}

func (UnimplementedSqlServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedSqlServiceServer) CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedSqlServiceServer) DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedSqlServiceServer) Ping(context.Context, *PingConnectionRqst) (*PingConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSqlServiceServer) QueryContext(*QueryContextRqst, SqlService_QueryContextServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryContext not implemented")
}
func (UnimplementedSqlServiceServer) ExecContext(context.Context, *ExecContextRqst) (*ExecContextRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecContext not implemented")
}

// UnsafeSqlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlServiceServer will
// result in compilation errors.
type UnsafeSqlServiceServer interface {
	mustEmbedUnimplementedSqlServiceServer()
}

func RegisterSqlServiceServer(s grpc.ServiceRegistrar, srv SqlServiceServer) {
	s.RegisterService(&SqlService_ServiceDesc, srv)
}

func _SqlService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SqlService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SqlService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlServiceServer).CreateConnection(ctx, req.(*CreateConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SqlService_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SqlService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlServiceServer).Ping(ctx, req.(*PingConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlService_QueryContext_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryContextRqst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SqlServiceServer).QueryContext(m, &sqlServiceQueryContextServer{ServerStream: stream})
}

type SqlService_QueryContextServer interface {
	Send(*QueryContextRsp) error
	grpc.ServerStream
}

type sqlServiceQueryContextServer struct {
	grpc.ServerStream
}

func (x *sqlServiceQueryContextServer) Send(m *QueryContextRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _SqlService_ExecContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecContextRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlServiceServer).ExecContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SqlService_ExecContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlServiceServer).ExecContext(ctx, req.(*ExecContextRqst))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlService_ServiceDesc is the grpc.ServiceDesc for SqlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sql.SqlService",
	HandlerType: (*SqlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _SqlService_Stop_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _SqlService_CreateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _SqlService_DeleteConnection_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SqlService_Ping_Handler,
		},
		{
			MethodName: "ExecContext",
			Handler:    _SqlService_ExecContext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryContext",
			Handler:       _SqlService_QueryContext_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sql.proto",
}
