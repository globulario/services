// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: resource.proto

package resourcepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResourceService_CreateReference_FullMethodName               = "/resource.ResourceService/CreateReference"
	ResourceService_DeleteReference_FullMethodName               = "/resource.ResourceService/DeleteReference"
	ResourceService_CreateOrganization_FullMethodName            = "/resource.ResourceService/CreateOrganization"
	ResourceService_UpdateOrganization_FullMethodName            = "/resource.ResourceService/UpdateOrganization"
	ResourceService_GetOrganizations_FullMethodName              = "/resource.ResourceService/GetOrganizations"
	ResourceService_DeleteOrganization_FullMethodName            = "/resource.ResourceService/DeleteOrganization"
	ResourceService_AddOrganizationAccount_FullMethodName        = "/resource.ResourceService/AddOrganizationAccount"
	ResourceService_AddOrganizationGroup_FullMethodName          = "/resource.ResourceService/AddOrganizationGroup"
	ResourceService_AddOrganizationRole_FullMethodName           = "/resource.ResourceService/AddOrganizationRole"
	ResourceService_AddOrganizationApplication_FullMethodName    = "/resource.ResourceService/AddOrganizationApplication"
	ResourceService_RemoveOrganizationAccount_FullMethodName     = "/resource.ResourceService/RemoveOrganizationAccount"
	ResourceService_RemoveOrganizationGroup_FullMethodName       = "/resource.ResourceService/RemoveOrganizationGroup"
	ResourceService_RemoveOrganizationRole_FullMethodName        = "/resource.ResourceService/RemoveOrganizationRole"
	ResourceService_RemoveOrganizationApplication_FullMethodName = "/resource.ResourceService/RemoveOrganizationApplication"
	ResourceService_CreateGroup_FullMethodName                   = "/resource.ResourceService/CreateGroup"
	ResourceService_UpdateGroup_FullMethodName                   = "/resource.ResourceService/UpdateGroup"
	ResourceService_GetGroups_FullMethodName                     = "/resource.ResourceService/GetGroups"
	ResourceService_DeleteGroup_FullMethodName                   = "/resource.ResourceService/DeleteGroup"
	ResourceService_AddGroupMemberAccount_FullMethodName         = "/resource.ResourceService/AddGroupMemberAccount"
	ResourceService_RemoveGroupMemberAccount_FullMethodName      = "/resource.ResourceService/RemoveGroupMemberAccount"
	ResourceService_RegisterAccount_FullMethodName               = "/resource.ResourceService/RegisterAccount"
	ResourceService_DeleteAccount_FullMethodName                 = "/resource.ResourceService/DeleteAccount"
	ResourceService_GetAccount_FullMethodName                    = "/resource.ResourceService/GetAccount"
	ResourceService_SetAccount_FullMethodName                    = "/resource.ResourceService/SetAccount"
	ResourceService_SetAccountPassword_FullMethodName            = "/resource.ResourceService/SetAccountPassword"
	ResourceService_GetAccounts_FullMethodName                   = "/resource.ResourceService/GetAccounts"
	ResourceService_AddAccountRole_FullMethodName                = "/resource.ResourceService/AddAccountRole"
	ResourceService_RemoveAccountRole_FullMethodName             = "/resource.ResourceService/RemoveAccountRole"
	ResourceService_SetAccountContact_FullMethodName             = "/resource.ResourceService/SetAccountContact"
	ResourceService_SetEmail_FullMethodName                      = "/resource.ResourceService/SetEmail"
	ResourceService_IsOrgnanizationMember_FullMethodName         = "/resource.ResourceService/IsOrgnanizationMember"
	ResourceService_CreateRole_FullMethodName                    = "/resource.ResourceService/CreateRole"
	ResourceService_UpdateRole_FullMethodName                    = "/resource.ResourceService/UpdateRole"
	ResourceService_GetRoles_FullMethodName                      = "/resource.ResourceService/GetRoles"
	ResourceService_DeleteRole_FullMethodName                    = "/resource.ResourceService/DeleteRole"
	ResourceService_AddRoleActions_FullMethodName                = "/resource.ResourceService/AddRoleActions"
	ResourceService_RemoveRoleAction_FullMethodName              = "/resource.ResourceService/RemoveRoleAction"
	ResourceService_RemoveRolesAction_FullMethodName             = "/resource.ResourceService/RemoveRolesAction"
	ResourceService_CreateApplication_FullMethodName             = "/resource.ResourceService/CreateApplication"
	ResourceService_UpdateApplication_FullMethodName             = "/resource.ResourceService/UpdateApplication"
	ResourceService_GetApplications_FullMethodName               = "/resource.ResourceService/GetApplications"
	ResourceService_DeleteApplication_FullMethodName             = "/resource.ResourceService/DeleteApplication"
	ResourceService_AddApplicationActions_FullMethodName         = "/resource.ResourceService/AddApplicationActions"
	ResourceService_RemoveApplicationAction_FullMethodName       = "/resource.ResourceService/RemoveApplicationAction"
	ResourceService_RemoveApplicationsAction_FullMethodName      = "/resource.ResourceService/RemoveApplicationsAction"
	ResourceService_GetApplicationVersion_FullMethodName         = "/resource.ResourceService/GetApplicationVersion"
	ResourceService_GetApplicationAlias_FullMethodName           = "/resource.ResourceService/GetApplicationAlias"
	ResourceService_GetApplicationIcon_FullMethodName            = "/resource.ResourceService/GetApplicationIcon"
	ResourceService_RegisterPeer_FullMethodName                  = "/resource.ResourceService/RegisterPeer"
	ResourceService_GetPeers_FullMethodName                      = "/resource.ResourceService/GetPeers"
	ResourceService_GetPeerApprovalState_FullMethodName          = "/resource.ResourceService/GetPeerApprovalState"
	ResourceService_DeletePeer_FullMethodName                    = "/resource.ResourceService/DeletePeer"
	ResourceService_UpdatePeer_FullMethodName                    = "/resource.ResourceService/UpdatePeer"
	ResourceService_AddPeerActions_FullMethodName                = "/resource.ResourceService/AddPeerActions"
	ResourceService_RemovePeerAction_FullMethodName              = "/resource.ResourceService/RemovePeerAction"
	ResourceService_RemovePeersAction_FullMethodName             = "/resource.ResourceService/RemovePeersAction"
	ResourceService_AcceptPeer_FullMethodName                    = "/resource.ResourceService/AcceptPeer"
	ResourceService_RejectPeer_FullMethodName                    = "/resource.ResourceService/RejectPeer"
	ResourceService_GetPeerPublicKey_FullMethodName              = "/resource.ResourceService/GetPeerPublicKey"
	ResourceService_CreateNotification_FullMethodName            = "/resource.ResourceService/CreateNotification"
	ResourceService_GetNotifications_FullMethodName              = "/resource.ResourceService/GetNotifications"
	ResourceService_DeleteNotification_FullMethodName            = "/resource.ResourceService/DeleteNotification"
	ResourceService_ClearAllNotifications_FullMethodName         = "/resource.ResourceService/ClearAllNotifications"
	ResourceService_ClearNotificationsByType_FullMethodName      = "/resource.ResourceService/ClearNotificationsByType"
	ResourceService_FindPackages_FullMethodName                  = "/resource.ResourceService/FindPackages"
	ResourceService_GetPackageDescriptor_FullMethodName          = "/resource.ResourceService/GetPackageDescriptor"
	ResourceService_GetPackagesDescriptor_FullMethodName         = "/resource.ResourceService/GetPackagesDescriptor"
	ResourceService_SetPackageDescriptor_FullMethodName          = "/resource.ResourceService/SetPackageDescriptor"
	ResourceService_SetPackageBundle_FullMethodName              = "/resource.ResourceService/SetPackageBundle"
	ResourceService_GetPackageBundleChecksum_FullMethodName      = "/resource.ResourceService/GetPackageBundleChecksum"
	ResourceService_UpdateSession_FullMethodName                 = "/resource.ResourceService/UpdateSession"
	ResourceService_GetSessions_FullMethodName                   = "/resource.ResourceService/GetSessions"
	ResourceService_RemoveSession_FullMethodName                 = "/resource.ResourceService/RemoveSession"
	ResourceService_GetSession_FullMethodName                    = "/resource.ResourceService/GetSession"
	ResourceService_GetCallHistory_FullMethodName                = "/resource.ResourceService/GetCallHistory"
	ResourceService_SetCall_FullMethodName                       = "/resource.ResourceService/SetCall"
	ResourceService_DeleteCall_FullMethodName                    = "/resource.ResourceService/DeleteCall"
	ResourceService_ClearCalls_FullMethodName                    = "/resource.ResourceService/ClearCalls"
)

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Service for managing Globular resources like permissions, accounts,
// organizations, roles, etc., using Persistence service for data storage.
type ResourceServiceClient interface {
	// Creates an object reference inside another object. For example, add a reference to an account in a group's 'members' field.
	CreateReference(ctx context.Context, in *CreateReferenceRqst, opts ...grpc.CallOption) (*CreateReferenceRsp, error)
	// Deletes a reference from an object.
	DeleteReference(ctx context.Context, in *DeleteReferenceRqst, opts ...grpc.CallOption) (*DeleteReferenceRsp, error)
	// Registers a new organization.
	CreateOrganization(ctx context.Context, in *CreateOrganizationRqst, opts ...grpc.CallOption) (*CreateOrganizationRsp, error)
	// Updates an existing organization.
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRqst, opts ...grpc.CallOption) (*UpdateOrganizationRsp, error)
	// Retrieves a list of organizations.
	GetOrganizations(ctx context.Context, in *GetOrganizationsRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetOrganizationsRsp], error)
	// Deletes an organization.
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRqst, opts ...grpc.CallOption) (*DeleteOrganizationRsp, error)
	// Adds an account to an organization.
	AddOrganizationAccount(ctx context.Context, in *AddOrganizationAccountRqst, opts ...grpc.CallOption) (*AddOrganizationAccountRsp, error)
	// Adds a group to an organization.
	AddOrganizationGroup(ctx context.Context, in *AddOrganizationGroupRqst, opts ...grpc.CallOption) (*AddOrganizationGroupRsp, error)
	// Adds a role to an organization.
	AddOrganizationRole(ctx context.Context, in *AddOrganizationRoleRqst, opts ...grpc.CallOption) (*AddOrganizationRoleRsp, error)
	// Adds an application to an organization.
	AddOrganizationApplication(ctx context.Context, in *AddOrganizationApplicationRqst, opts ...grpc.CallOption) (*AddOrganizationApplicationRsp, error)
	// Removes an account from an organization.
	RemoveOrganizationAccount(ctx context.Context, in *RemoveOrganizationAccountRqst, opts ...grpc.CallOption) (*RemoveOrganizationAccountRsp, error)
	// Removes a group from an organization.
	RemoveOrganizationGroup(ctx context.Context, in *RemoveOrganizationGroupRqst, opts ...grpc.CallOption) (*RemoveOrganizationGroupRsp, error)
	// Removes a role from an organization.
	RemoveOrganizationRole(ctx context.Context, in *RemoveOrganizationRoleRqst, opts ...grpc.CallOption) (*RemoveOrganizationRoleRsp, error)
	// Removes an application from an organization.
	RemoveOrganizationApplication(ctx context.Context, in *RemoveOrganizationApplicationRqst, opts ...grpc.CallOption) (*RemoveOrganizationApplicationRsp, error)
	// Registers a new group.
	CreateGroup(ctx context.Context, in *CreateGroupRqst, opts ...grpc.CallOption) (*CreateGroupRsp, error)
	// Updates an existing group.
	UpdateGroup(ctx context.Context, in *UpdateGroupRqst, opts ...grpc.CallOption) (*UpdateGroupRsp, error)
	// Retrieves a list of groups.
	GetGroups(ctx context.Context, in *GetGroupsRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetGroupsRsp], error)
	// Deletes a group.
	DeleteGroup(ctx context.Context, in *DeleteGroupRqst, opts ...grpc.CallOption) (*DeleteGroupRsp, error)
	// Adds a member account to a group.
	AddGroupMemberAccount(ctx context.Context, in *AddGroupMemberAccountRqst, opts ...grpc.CallOption) (*AddGroupMemberAccountRsp, error)
	// Removes a member account from a group.
	RemoveGroupMemberAccount(ctx context.Context, in *RemoveGroupMemberAccountRqst, opts ...grpc.CallOption) (*RemoveGroupMemberAccountRsp, error)
	// Registers a new account.
	RegisterAccount(ctx context.Context, in *RegisterAccountRqst, opts ...grpc.CallOption) (*RegisterAccountRsp, error)
	// Deletes an account.
	DeleteAccount(ctx context.Context, in *DeleteAccountRqst, opts ...grpc.CallOption) (*DeleteAccountRsp, error)
	// Retrieves a single account.
	GetAccount(ctx context.Context, in *GetAccountRqst, opts ...grpc.CallOption) (*GetAccountRsp, error)
	// Saves an account.
	SetAccount(ctx context.Context, in *SetAccountRqst, opts ...grpc.CallOption) (*SetAccountRsp, error)
	// Sets or changes an account's password.
	SetAccountPassword(ctx context.Context, in *SetAccountPasswordRqst, opts ...grpc.CallOption) (*SetAccountPasswordRsp, error)
	// Retrieves a list of accounts.
	GetAccounts(ctx context.Context, in *GetAccountsRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAccountsRsp], error)
	// Adds a role to an account.
	AddAccountRole(ctx context.Context, in *AddAccountRoleRqst, opts ...grpc.CallOption) (*AddAccountRoleRsp, error)
	// Removes a role from an account.
	RemoveAccountRole(ctx context.Context, in *RemoveAccountRoleRqst, opts ...grpc.CallOption) (*RemoveAccountRoleRsp, error)
	// Appends or updates a contact for an account.
	SetAccountContact(ctx context.Context, in *SetAccountContactRqst, opts ...grpc.CallOption) (*SetAccountContactRsp, error)
	// Sets or changes the email address for an account.
	SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error)
	// Checks if an account is a member of a given organization.
	IsOrgnanizationMember(ctx context.Context, in *IsOrgnanizationMemberRqst, opts ...grpc.CallOption) (*IsOrgnanizationMemberRsp, error)
	// Creates or updates a role with a specified list of actions.
	CreateRole(ctx context.Context, in *CreateRoleRqst, opts ...grpc.CallOption) (*CreateRoleRsp, error)
	// Updates an existing role.
	UpdateRole(ctx context.Context, in *UpdateRoleRqst, opts ...grpc.CallOption) (*UpdateRoleRsp, error)
	// Retrieves a list of roles.
	GetRoles(ctx context.Context, in *GetRolesRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRolesRsp], error)
	// Deletes a role by its ID.
	DeleteRole(ctx context.Context, in *DeleteRoleRqst, opts ...grpc.CallOption) (*DeleteRoleRsp, error)
	// Appends actions to an existing role.
	AddRoleActions(ctx context.Context, in *AddRoleActionsRqst, opts ...grpc.CallOption) (*AddRoleActionsRsp, error)
	// Removes an action from an existing role.
	RemoveRoleAction(ctx context.Context, in *RemoveRoleActionRqst, opts ...grpc.CallOption) (*RemoveRoleActionRsp, error)
	// Removes an action from all roles.
	RemoveRolesAction(ctx context.Context, in *RemoveRolesActionRqst, opts ...grpc.CallOption) (*RemoveRolesActionRsp, error)
	// Creates a new application.
	CreateApplication(ctx context.Context, in *CreateApplicationRqst, opts ...grpc.CallOption) (*CreateApplicationRsp, error)
	// Updates an existing application.
	UpdateApplication(ctx context.Context, in *UpdateApplicationRqst, opts ...grpc.CallOption) (*UpdateApplicationRsp, error)
	// Retrieves information about all applications in a JSON format.
	GetApplications(ctx context.Context, in *GetApplicationsRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetApplicationsRsp], error)
	// Deletes an application from the server.
	DeleteApplication(ctx context.Context, in *DeleteApplicationRqst, opts ...grpc.CallOption) (*DeleteApplicationRsp, error)
	// Appends actions to existing applications.
	AddApplicationActions(ctx context.Context, in *AddApplicationActionsRqst, opts ...grpc.CallOption) (*AddApplicationActionsRsp, error)
	// Removes an action from an existing application.
	RemoveApplicationAction(ctx context.Context, in *RemoveApplicationActionRqst, opts ...grpc.CallOption) (*RemoveApplicationActionRsp, error)
	// Removes an action from all applications.
	RemoveApplicationsAction(ctx context.Context, in *RemoveApplicationsActionRqst, opts ...grpc.CallOption) (*RemoveApplicationsActionRsp, error)
	// Retrieves the version of a specified application.
	GetApplicationVersion(ctx context.Context, in *GetApplicationVersionRqst, opts ...grpc.CallOption) (*GetApplicationVersionRsp, error)
	// Obtains the alias (a user-friendly name) for a specific application.
	GetApplicationAlias(ctx context.Context, in *GetApplicationAliasRqst, opts ...grpc.CallOption) (*GetApplicationAliasRsp, error)
	// Fetches the icon associated with a particular application.
	GetApplicationIcon(ctx context.Context, in *GetApplicationIconRqst, opts ...grpc.CallOption) (*GetApplicationIconRsp, error)
	// Registers a new peer in the network.
	RegisterPeer(ctx context.Context, in *RegisterPeerRqst, opts ...grpc.CallOption) (*RegisterPeerRsp, error)
	// Retrieves a list of all peers in the network.
	GetPeers(ctx context.Context, in *GetPeersRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPeersRsp], error)
	// Gets the approval state of a peer from another peer's perspective.
	GetPeerApprovalState(ctx context.Context, in *GetPeerApprovalStateRqst, opts ...grpc.CallOption) (*GetPeerApprovalStateRsp, error)
	// Removes a peer from the network.
	DeletePeer(ctx context.Context, in *DeletePeerRqst, opts ...grpc.CallOption) (*DeletePeerRsp, error)
	// Updates the information of an existing peer.
	UpdatePeer(ctx context.Context, in *UpdatePeerRqst, opts ...grpc.CallOption) (*UpdatePeerRsp, error)
	// Adds actions to a peer.
	AddPeerActions(ctx context.Context, in *AddPeerActionsRqst, opts ...grpc.CallOption) (*AddPeerActionsRsp, error)
	// Removes a specific action permission from a peer.
	RemovePeerAction(ctx context.Context, in *RemovePeerActionRqst, opts ...grpc.CallOption) (*RemovePeerActionRsp, error)
	// Removes a specific action permission from multiple peers.
	RemovePeersAction(ctx context.Context, in *RemovePeersActionRqst, opts ...grpc.CallOption) (*RemovePeersActionRsp, error)
	// Accepts a peer into the network.
	AcceptPeer(ctx context.Context, in *AcceptPeerRqst, opts ...grpc.CallOption) (*AcceptPeerRsp, error)
	// Rejects a peer and prevents further connection attempts.
	RejectPeer(ctx context.Context, in *RejectPeerRqst, opts ...grpc.CallOption) (*RejectPeerRsp, error)
	// Retrieves the public key of a specified peer.
	GetPeerPublicKey(ctx context.Context, in *GetPeerPublicKeyRqst, opts ...grpc.CallOption) (*GetPeerPublicKeyRsp, error)
	// Creates a new notification.
	CreateNotification(ctx context.Context, in *CreateNotificationRqst, opts ...grpc.CallOption) (*CreateNotificationRsp, error)
	// Retrieves a stream of notifications.
	GetNotifications(ctx context.Context, in *GetNotificationsRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetNotificationsRsp], error)
	// Deletes a specific notification.
	DeleteNotification(ctx context.Context, in *DeleteNotificationRqst, opts ...grpc.CallOption) (*DeleteNotificationRsp, error)
	// Clears all notifications.
	ClearAllNotifications(ctx context.Context, in *ClearAllNotificationsRqst, opts ...grpc.CallOption) (*ClearAllNotificationsRsp, error)
	// Clears all notifications of a specified type.
	ClearNotificationsByType(ctx context.Context, in *ClearNotificationsByTypeRqst, opts ...grpc.CallOption) (*ClearNotificationsByTypeRsp, error)
	// Searches for service packages by keywords.
	FindPackages(ctx context.Context, in *FindPackagesDescriptorRequest, opts ...grpc.CallOption) (*FindPackagesDescriptorResponse, error)
	// Retrieves the descriptor of a specific package.
	GetPackageDescriptor(ctx context.Context, in *GetPackageDescriptorRequest, opts ...grpc.CallOption) (*GetPackageDescriptorResponse, error)
	// Retrieves descriptors for all packages.
	GetPackagesDescriptor(ctx context.Context, in *GetPackagesDescriptorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPackagesDescriptorResponse], error)
	// Saves or updates a service package descriptor.
	SetPackageDescriptor(ctx context.Context, in *SetPackageDescriptorRequest, opts ...grpc.CallOption) (*SetPackageDescriptorResponse, error)
	// Retrieves a package bundle.
	SetPackageBundle(ctx context.Context, in *SetPackageBundleRequest, opts ...grpc.CallOption) (*SetPackageBundleResponse, error)
	// Gets the checksum for a specified package bundle.
	GetPackageBundleChecksum(ctx context.Context, in *GetPackageBundleChecksumRequest, opts ...grpc.CallOption) (*GetPackageBundleChecksumResponse, error)
	// Updates user session information.
	UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error)
	// Retrieves a list of all user sessions.
	GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsResponse, error)
	// Removes a specific user session.
	RemoveSession(ctx context.Context, in *RemoveSessionRequest, opts ...grpc.CallOption) (*RemoveSessionResponse, error)
	// Retrieves a session for a specific user.
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	// Retrieves the call history for a given account.
	GetCallHistory(ctx context.Context, in *GetCallHistoryRqst, opts ...grpc.CallOption) (*GetCallHistoryRsp, error)
	// Sets calling information.
	SetCall(ctx context.Context, in *SetCallRqst, opts ...grpc.CallOption) (*SetCallRsp, error)
	// Deletes calling information.
	DeleteCall(ctx context.Context, in *DeleteCallRqst, opts ...grpc.CallOption) (*DeleteCallRsp, error)
	// Clears all call records.
	ClearCalls(ctx context.Context, in *ClearCallsRqst, opts ...grpc.CallOption) (*ClearCallsRsp, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) CreateReference(ctx context.Context, in *CreateReferenceRqst, opts ...grpc.CallOption) (*CreateReferenceRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReferenceRsp)
	err := c.cc.Invoke(ctx, ResourceService_CreateReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteReference(ctx context.Context, in *DeleteReferenceRqst, opts ...grpc.CallOption) (*DeleteReferenceRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReferenceRsp)
	err := c.cc.Invoke(ctx, ResourceService_DeleteReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRqst, opts ...grpc.CallOption) (*CreateOrganizationRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationRsp)
	err := c.cc.Invoke(ctx, ResourceService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRqst, opts ...grpc.CallOption) (*UpdateOrganizationRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationRsp)
	err := c.cc.Invoke(ctx, ResourceService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetOrganizations(ctx context.Context, in *GetOrganizationsRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetOrganizationsRsp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[0], ResourceService_GetOrganizations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetOrganizationsRqst, GetOrganizationsRsp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetOrganizationsClient = grpc.ServerStreamingClient[GetOrganizationsRsp]

func (c *resourceServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRqst, opts ...grpc.CallOption) (*DeleteOrganizationRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationRsp)
	err := c.cc.Invoke(ctx, ResourceService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) AddOrganizationAccount(ctx context.Context, in *AddOrganizationAccountRqst, opts ...grpc.CallOption) (*AddOrganizationAccountRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrganizationAccountRsp)
	err := c.cc.Invoke(ctx, ResourceService_AddOrganizationAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) AddOrganizationGroup(ctx context.Context, in *AddOrganizationGroupRqst, opts ...grpc.CallOption) (*AddOrganizationGroupRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrganizationGroupRsp)
	err := c.cc.Invoke(ctx, ResourceService_AddOrganizationGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) AddOrganizationRole(ctx context.Context, in *AddOrganizationRoleRqst, opts ...grpc.CallOption) (*AddOrganizationRoleRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrganizationRoleRsp)
	err := c.cc.Invoke(ctx, ResourceService_AddOrganizationRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) AddOrganizationApplication(ctx context.Context, in *AddOrganizationApplicationRqst, opts ...grpc.CallOption) (*AddOrganizationApplicationRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrganizationApplicationRsp)
	err := c.cc.Invoke(ctx, ResourceService_AddOrganizationApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveOrganizationAccount(ctx context.Context, in *RemoveOrganizationAccountRqst, opts ...grpc.CallOption) (*RemoveOrganizationAccountRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveOrganizationAccountRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemoveOrganizationAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveOrganizationGroup(ctx context.Context, in *RemoveOrganizationGroupRqst, opts ...grpc.CallOption) (*RemoveOrganizationGroupRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveOrganizationGroupRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemoveOrganizationGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveOrganizationRole(ctx context.Context, in *RemoveOrganizationRoleRqst, opts ...grpc.CallOption) (*RemoveOrganizationRoleRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveOrganizationRoleRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemoveOrganizationRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveOrganizationApplication(ctx context.Context, in *RemoveOrganizationApplicationRqst, opts ...grpc.CallOption) (*RemoveOrganizationApplicationRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveOrganizationApplicationRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemoveOrganizationApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRqst, opts ...grpc.CallOption) (*CreateGroupRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGroupRsp)
	err := c.cc.Invoke(ctx, ResourceService_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupRqst, opts ...grpc.CallOption) (*UpdateGroupRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGroupRsp)
	err := c.cc.Invoke(ctx, ResourceService_UpdateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetGroups(ctx context.Context, in *GetGroupsRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetGroupsRsp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[1], ResourceService_GetGroups_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetGroupsRqst, GetGroupsRsp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetGroupsClient = grpc.ServerStreamingClient[GetGroupsRsp]

func (c *resourceServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRqst, opts ...grpc.CallOption) (*DeleteGroupRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGroupRsp)
	err := c.cc.Invoke(ctx, ResourceService_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) AddGroupMemberAccount(ctx context.Context, in *AddGroupMemberAccountRqst, opts ...grpc.CallOption) (*AddGroupMemberAccountRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGroupMemberAccountRsp)
	err := c.cc.Invoke(ctx, ResourceService_AddGroupMemberAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveGroupMemberAccount(ctx context.Context, in *RemoveGroupMemberAccountRqst, opts ...grpc.CallOption) (*RemoveGroupMemberAccountRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveGroupMemberAccountRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemoveGroupMemberAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RegisterAccount(ctx context.Context, in *RegisterAccountRqst, opts ...grpc.CallOption) (*RegisterAccountRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAccountRsp)
	err := c.cc.Invoke(ctx, ResourceService_RegisterAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRqst, opts ...grpc.CallOption) (*DeleteAccountRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountRsp)
	err := c.cc.Invoke(ctx, ResourceService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetAccount(ctx context.Context, in *GetAccountRqst, opts ...grpc.CallOption) (*GetAccountRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountRsp)
	err := c.cc.Invoke(ctx, ResourceService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) SetAccount(ctx context.Context, in *SetAccountRqst, opts ...grpc.CallOption) (*SetAccountRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAccountRsp)
	err := c.cc.Invoke(ctx, ResourceService_SetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) SetAccountPassword(ctx context.Context, in *SetAccountPasswordRqst, opts ...grpc.CallOption) (*SetAccountPasswordRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAccountPasswordRsp)
	err := c.cc.Invoke(ctx, ResourceService_SetAccountPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetAccounts(ctx context.Context, in *GetAccountsRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAccountsRsp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[2], ResourceService_GetAccounts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAccountsRqst, GetAccountsRsp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetAccountsClient = grpc.ServerStreamingClient[GetAccountsRsp]

func (c *resourceServiceClient) AddAccountRole(ctx context.Context, in *AddAccountRoleRqst, opts ...grpc.CallOption) (*AddAccountRoleRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAccountRoleRsp)
	err := c.cc.Invoke(ctx, ResourceService_AddAccountRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveAccountRole(ctx context.Context, in *RemoveAccountRoleRqst, opts ...grpc.CallOption) (*RemoveAccountRoleRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAccountRoleRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemoveAccountRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) SetAccountContact(ctx context.Context, in *SetAccountContactRqst, opts ...grpc.CallOption) (*SetAccountContactRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAccountContactRsp)
	err := c.cc.Invoke(ctx, ResourceService_SetAccountContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetEmailResponse)
	err := c.cc.Invoke(ctx, ResourceService_SetEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) IsOrgnanizationMember(ctx context.Context, in *IsOrgnanizationMemberRqst, opts ...grpc.CallOption) (*IsOrgnanizationMemberRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsOrgnanizationMemberRsp)
	err := c.cc.Invoke(ctx, ResourceService_IsOrgnanizationMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CreateRole(ctx context.Context, in *CreateRoleRqst, opts ...grpc.CallOption) (*CreateRoleRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleRsp)
	err := c.cc.Invoke(ctx, ResourceService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRqst, opts ...grpc.CallOption) (*UpdateRoleRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoleRsp)
	err := c.cc.Invoke(ctx, ResourceService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetRoles(ctx context.Context, in *GetRolesRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetRolesRsp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[3], ResourceService_GetRoles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRolesRqst, GetRolesRsp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetRolesClient = grpc.ServerStreamingClient[GetRolesRsp]

func (c *resourceServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRqst, opts ...grpc.CallOption) (*DeleteRoleRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleRsp)
	err := c.cc.Invoke(ctx, ResourceService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) AddRoleActions(ctx context.Context, in *AddRoleActionsRqst, opts ...grpc.CallOption) (*AddRoleActionsRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRoleActionsRsp)
	err := c.cc.Invoke(ctx, ResourceService_AddRoleActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveRoleAction(ctx context.Context, in *RemoveRoleActionRqst, opts ...grpc.CallOption) (*RemoveRoleActionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRoleActionRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemoveRoleAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveRolesAction(ctx context.Context, in *RemoveRolesActionRqst, opts ...grpc.CallOption) (*RemoveRolesActionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRolesActionRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemoveRolesAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CreateApplication(ctx context.Context, in *CreateApplicationRqst, opts ...grpc.CallOption) (*CreateApplicationRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateApplicationRsp)
	err := c.cc.Invoke(ctx, ResourceService_CreateApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRqst, opts ...grpc.CallOption) (*UpdateApplicationRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateApplicationRsp)
	err := c.cc.Invoke(ctx, ResourceService_UpdateApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetApplications(ctx context.Context, in *GetApplicationsRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetApplicationsRsp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[4], ResourceService_GetApplications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetApplicationsRqst, GetApplicationsRsp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetApplicationsClient = grpc.ServerStreamingClient[GetApplicationsRsp]

func (c *resourceServiceClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRqst, opts ...grpc.CallOption) (*DeleteApplicationRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApplicationRsp)
	err := c.cc.Invoke(ctx, ResourceService_DeleteApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) AddApplicationActions(ctx context.Context, in *AddApplicationActionsRqst, opts ...grpc.CallOption) (*AddApplicationActionsRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddApplicationActionsRsp)
	err := c.cc.Invoke(ctx, ResourceService_AddApplicationActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveApplicationAction(ctx context.Context, in *RemoveApplicationActionRqst, opts ...grpc.CallOption) (*RemoveApplicationActionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveApplicationActionRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemoveApplicationAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveApplicationsAction(ctx context.Context, in *RemoveApplicationsActionRqst, opts ...grpc.CallOption) (*RemoveApplicationsActionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveApplicationsActionRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemoveApplicationsAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetApplicationVersion(ctx context.Context, in *GetApplicationVersionRqst, opts ...grpc.CallOption) (*GetApplicationVersionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApplicationVersionRsp)
	err := c.cc.Invoke(ctx, ResourceService_GetApplicationVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetApplicationAlias(ctx context.Context, in *GetApplicationAliasRqst, opts ...grpc.CallOption) (*GetApplicationAliasRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApplicationAliasRsp)
	err := c.cc.Invoke(ctx, ResourceService_GetApplicationAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetApplicationIcon(ctx context.Context, in *GetApplicationIconRqst, opts ...grpc.CallOption) (*GetApplicationIconRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApplicationIconRsp)
	err := c.cc.Invoke(ctx, ResourceService_GetApplicationIcon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RegisterPeer(ctx context.Context, in *RegisterPeerRqst, opts ...grpc.CallOption) (*RegisterPeerRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPeerRsp)
	err := c.cc.Invoke(ctx, ResourceService_RegisterPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetPeers(ctx context.Context, in *GetPeersRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPeersRsp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[5], ResourceService_GetPeers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPeersRqst, GetPeersRsp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetPeersClient = grpc.ServerStreamingClient[GetPeersRsp]

func (c *resourceServiceClient) GetPeerApprovalState(ctx context.Context, in *GetPeerApprovalStateRqst, opts ...grpc.CallOption) (*GetPeerApprovalStateRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPeerApprovalStateRsp)
	err := c.cc.Invoke(ctx, ResourceService_GetPeerApprovalState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeletePeer(ctx context.Context, in *DeletePeerRqst, opts ...grpc.CallOption) (*DeletePeerRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePeerRsp)
	err := c.cc.Invoke(ctx, ResourceService_DeletePeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdatePeer(ctx context.Context, in *UpdatePeerRqst, opts ...grpc.CallOption) (*UpdatePeerRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePeerRsp)
	err := c.cc.Invoke(ctx, ResourceService_UpdatePeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) AddPeerActions(ctx context.Context, in *AddPeerActionsRqst, opts ...grpc.CallOption) (*AddPeerActionsRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPeerActionsRsp)
	err := c.cc.Invoke(ctx, ResourceService_AddPeerActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemovePeerAction(ctx context.Context, in *RemovePeerActionRqst, opts ...grpc.CallOption) (*RemovePeerActionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePeerActionRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemovePeerAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemovePeersAction(ctx context.Context, in *RemovePeersActionRqst, opts ...grpc.CallOption) (*RemovePeersActionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePeersActionRsp)
	err := c.cc.Invoke(ctx, ResourceService_RemovePeersAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) AcceptPeer(ctx context.Context, in *AcceptPeerRqst, opts ...grpc.CallOption) (*AcceptPeerRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptPeerRsp)
	err := c.cc.Invoke(ctx, ResourceService_AcceptPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RejectPeer(ctx context.Context, in *RejectPeerRqst, opts ...grpc.CallOption) (*RejectPeerRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectPeerRsp)
	err := c.cc.Invoke(ctx, ResourceService_RejectPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetPeerPublicKey(ctx context.Context, in *GetPeerPublicKeyRqst, opts ...grpc.CallOption) (*GetPeerPublicKeyRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPeerPublicKeyRsp)
	err := c.cc.Invoke(ctx, ResourceService_GetPeerPublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CreateNotification(ctx context.Context, in *CreateNotificationRqst, opts ...grpc.CallOption) (*CreateNotificationRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNotificationRsp)
	err := c.cc.Invoke(ctx, ResourceService_CreateNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsRqst, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetNotificationsRsp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[6], ResourceService_GetNotifications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetNotificationsRqst, GetNotificationsRsp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetNotificationsClient = grpc.ServerStreamingClient[GetNotificationsRsp]

func (c *resourceServiceClient) DeleteNotification(ctx context.Context, in *DeleteNotificationRqst, opts ...grpc.CallOption) (*DeleteNotificationRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNotificationRsp)
	err := c.cc.Invoke(ctx, ResourceService_DeleteNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ClearAllNotifications(ctx context.Context, in *ClearAllNotificationsRqst, opts ...grpc.CallOption) (*ClearAllNotificationsRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearAllNotificationsRsp)
	err := c.cc.Invoke(ctx, ResourceService_ClearAllNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ClearNotificationsByType(ctx context.Context, in *ClearNotificationsByTypeRqst, opts ...grpc.CallOption) (*ClearNotificationsByTypeRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearNotificationsByTypeRsp)
	err := c.cc.Invoke(ctx, ResourceService_ClearNotificationsByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) FindPackages(ctx context.Context, in *FindPackagesDescriptorRequest, opts ...grpc.CallOption) (*FindPackagesDescriptorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPackagesDescriptorResponse)
	err := c.cc.Invoke(ctx, ResourceService_FindPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetPackageDescriptor(ctx context.Context, in *GetPackageDescriptorRequest, opts ...grpc.CallOption) (*GetPackageDescriptorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPackageDescriptorResponse)
	err := c.cc.Invoke(ctx, ResourceService_GetPackageDescriptor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetPackagesDescriptor(ctx context.Context, in *GetPackagesDescriptorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPackagesDescriptorResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResourceService_ServiceDesc.Streams[7], ResourceService_GetPackagesDescriptor_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPackagesDescriptorRequest, GetPackagesDescriptorResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetPackagesDescriptorClient = grpc.ServerStreamingClient[GetPackagesDescriptorResponse]

func (c *resourceServiceClient) SetPackageDescriptor(ctx context.Context, in *SetPackageDescriptorRequest, opts ...grpc.CallOption) (*SetPackageDescriptorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPackageDescriptorResponse)
	err := c.cc.Invoke(ctx, ResourceService_SetPackageDescriptor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) SetPackageBundle(ctx context.Context, in *SetPackageBundleRequest, opts ...grpc.CallOption) (*SetPackageBundleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPackageBundleResponse)
	err := c.cc.Invoke(ctx, ResourceService_SetPackageBundle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetPackageBundleChecksum(ctx context.Context, in *GetPackageBundleChecksumRequest, opts ...grpc.CallOption) (*GetPackageBundleChecksumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPackageBundleChecksumResponse)
	err := c.cc.Invoke(ctx, ResourceService_GetPackageBundleChecksum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSessionResponse)
	err := c.cc.Invoke(ctx, ResourceService_UpdateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionsResponse)
	err := c.cc.Invoke(ctx, ResourceService_GetSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveSession(ctx context.Context, in *RemoveSessionRequest, opts ...grpc.CallOption) (*RemoveSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSessionResponse)
	err := c.cc.Invoke(ctx, ResourceService_RemoveSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, ResourceService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetCallHistory(ctx context.Context, in *GetCallHistoryRqst, opts ...grpc.CallOption) (*GetCallHistoryRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCallHistoryRsp)
	err := c.cc.Invoke(ctx, ResourceService_GetCallHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) SetCall(ctx context.Context, in *SetCallRqst, opts ...grpc.CallOption) (*SetCallRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCallRsp)
	err := c.cc.Invoke(ctx, ResourceService_SetCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteCall(ctx context.Context, in *DeleteCallRqst, opts ...grpc.CallOption) (*DeleteCallRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCallRsp)
	err := c.cc.Invoke(ctx, ResourceService_DeleteCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ClearCalls(ctx context.Context, in *ClearCallsRqst, opts ...grpc.CallOption) (*ClearCallsRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearCallsRsp)
	err := c.cc.Invoke(ctx, ResourceService_ClearCalls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations should embed UnimplementedResourceServiceServer
// for forward compatibility.
//
// *
// Service for managing Globular resources like permissions, accounts,
// organizations, roles, etc., using Persistence service for data storage.
type ResourceServiceServer interface {
	// Creates an object reference inside another object. For example, add a reference to an account in a group's 'members' field.
	CreateReference(context.Context, *CreateReferenceRqst) (*CreateReferenceRsp, error)
	// Deletes a reference from an object.
	DeleteReference(context.Context, *DeleteReferenceRqst) (*DeleteReferenceRsp, error)
	// Registers a new organization.
	CreateOrganization(context.Context, *CreateOrganizationRqst) (*CreateOrganizationRsp, error)
	// Updates an existing organization.
	UpdateOrganization(context.Context, *UpdateOrganizationRqst) (*UpdateOrganizationRsp, error)
	// Retrieves a list of organizations.
	GetOrganizations(*GetOrganizationsRqst, grpc.ServerStreamingServer[GetOrganizationsRsp]) error
	// Deletes an organization.
	DeleteOrganization(context.Context, *DeleteOrganizationRqst) (*DeleteOrganizationRsp, error)
	// Adds an account to an organization.
	AddOrganizationAccount(context.Context, *AddOrganizationAccountRqst) (*AddOrganizationAccountRsp, error)
	// Adds a group to an organization.
	AddOrganizationGroup(context.Context, *AddOrganizationGroupRqst) (*AddOrganizationGroupRsp, error)
	// Adds a role to an organization.
	AddOrganizationRole(context.Context, *AddOrganizationRoleRqst) (*AddOrganizationRoleRsp, error)
	// Adds an application to an organization.
	AddOrganizationApplication(context.Context, *AddOrganizationApplicationRqst) (*AddOrganizationApplicationRsp, error)
	// Removes an account from an organization.
	RemoveOrganizationAccount(context.Context, *RemoveOrganizationAccountRqst) (*RemoveOrganizationAccountRsp, error)
	// Removes a group from an organization.
	RemoveOrganizationGroup(context.Context, *RemoveOrganizationGroupRqst) (*RemoveOrganizationGroupRsp, error)
	// Removes a role from an organization.
	RemoveOrganizationRole(context.Context, *RemoveOrganizationRoleRqst) (*RemoveOrganizationRoleRsp, error)
	// Removes an application from an organization.
	RemoveOrganizationApplication(context.Context, *RemoveOrganizationApplicationRqst) (*RemoveOrganizationApplicationRsp, error)
	// Registers a new group.
	CreateGroup(context.Context, *CreateGroupRqst) (*CreateGroupRsp, error)
	// Updates an existing group.
	UpdateGroup(context.Context, *UpdateGroupRqst) (*UpdateGroupRsp, error)
	// Retrieves a list of groups.
	GetGroups(*GetGroupsRqst, grpc.ServerStreamingServer[GetGroupsRsp]) error
	// Deletes a group.
	DeleteGroup(context.Context, *DeleteGroupRqst) (*DeleteGroupRsp, error)
	// Adds a member account to a group.
	AddGroupMemberAccount(context.Context, *AddGroupMemberAccountRqst) (*AddGroupMemberAccountRsp, error)
	// Removes a member account from a group.
	RemoveGroupMemberAccount(context.Context, *RemoveGroupMemberAccountRqst) (*RemoveGroupMemberAccountRsp, error)
	// Registers a new account.
	RegisterAccount(context.Context, *RegisterAccountRqst) (*RegisterAccountRsp, error)
	// Deletes an account.
	DeleteAccount(context.Context, *DeleteAccountRqst) (*DeleteAccountRsp, error)
	// Retrieves a single account.
	GetAccount(context.Context, *GetAccountRqst) (*GetAccountRsp, error)
	// Saves an account.
	SetAccount(context.Context, *SetAccountRqst) (*SetAccountRsp, error)
	// Sets or changes an account's password.
	SetAccountPassword(context.Context, *SetAccountPasswordRqst) (*SetAccountPasswordRsp, error)
	// Retrieves a list of accounts.
	GetAccounts(*GetAccountsRqst, grpc.ServerStreamingServer[GetAccountsRsp]) error
	// Adds a role to an account.
	AddAccountRole(context.Context, *AddAccountRoleRqst) (*AddAccountRoleRsp, error)
	// Removes a role from an account.
	RemoveAccountRole(context.Context, *RemoveAccountRoleRqst) (*RemoveAccountRoleRsp, error)
	// Appends or updates a contact for an account.
	SetAccountContact(context.Context, *SetAccountContactRqst) (*SetAccountContactRsp, error)
	// Sets or changes the email address for an account.
	SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error)
	// Checks if an account is a member of a given organization.
	IsOrgnanizationMember(context.Context, *IsOrgnanizationMemberRqst) (*IsOrgnanizationMemberRsp, error)
	// Creates or updates a role with a specified list of actions.
	CreateRole(context.Context, *CreateRoleRqst) (*CreateRoleRsp, error)
	// Updates an existing role.
	UpdateRole(context.Context, *UpdateRoleRqst) (*UpdateRoleRsp, error)
	// Retrieves a list of roles.
	GetRoles(*GetRolesRqst, grpc.ServerStreamingServer[GetRolesRsp]) error
	// Deletes a role by its ID.
	DeleteRole(context.Context, *DeleteRoleRqst) (*DeleteRoleRsp, error)
	// Appends actions to an existing role.
	AddRoleActions(context.Context, *AddRoleActionsRqst) (*AddRoleActionsRsp, error)
	// Removes an action from an existing role.
	RemoveRoleAction(context.Context, *RemoveRoleActionRqst) (*RemoveRoleActionRsp, error)
	// Removes an action from all roles.
	RemoveRolesAction(context.Context, *RemoveRolesActionRqst) (*RemoveRolesActionRsp, error)
	// Creates a new application.
	CreateApplication(context.Context, *CreateApplicationRqst) (*CreateApplicationRsp, error)
	// Updates an existing application.
	UpdateApplication(context.Context, *UpdateApplicationRqst) (*UpdateApplicationRsp, error)
	// Retrieves information about all applications in a JSON format.
	GetApplications(*GetApplicationsRqst, grpc.ServerStreamingServer[GetApplicationsRsp]) error
	// Deletes an application from the server.
	DeleteApplication(context.Context, *DeleteApplicationRqst) (*DeleteApplicationRsp, error)
	// Appends actions to existing applications.
	AddApplicationActions(context.Context, *AddApplicationActionsRqst) (*AddApplicationActionsRsp, error)
	// Removes an action from an existing application.
	RemoveApplicationAction(context.Context, *RemoveApplicationActionRqst) (*RemoveApplicationActionRsp, error)
	// Removes an action from all applications.
	RemoveApplicationsAction(context.Context, *RemoveApplicationsActionRqst) (*RemoveApplicationsActionRsp, error)
	// Retrieves the version of a specified application.
	GetApplicationVersion(context.Context, *GetApplicationVersionRqst) (*GetApplicationVersionRsp, error)
	// Obtains the alias (a user-friendly name) for a specific application.
	GetApplicationAlias(context.Context, *GetApplicationAliasRqst) (*GetApplicationAliasRsp, error)
	// Fetches the icon associated with a particular application.
	GetApplicationIcon(context.Context, *GetApplicationIconRqst) (*GetApplicationIconRsp, error)
	// Registers a new peer in the network.
	RegisterPeer(context.Context, *RegisterPeerRqst) (*RegisterPeerRsp, error)
	// Retrieves a list of all peers in the network.
	GetPeers(*GetPeersRqst, grpc.ServerStreamingServer[GetPeersRsp]) error
	// Gets the approval state of a peer from another peer's perspective.
	GetPeerApprovalState(context.Context, *GetPeerApprovalStateRqst) (*GetPeerApprovalStateRsp, error)
	// Removes a peer from the network.
	DeletePeer(context.Context, *DeletePeerRqst) (*DeletePeerRsp, error)
	// Updates the information of an existing peer.
	UpdatePeer(context.Context, *UpdatePeerRqst) (*UpdatePeerRsp, error)
	// Adds actions to a peer.
	AddPeerActions(context.Context, *AddPeerActionsRqst) (*AddPeerActionsRsp, error)
	// Removes a specific action permission from a peer.
	RemovePeerAction(context.Context, *RemovePeerActionRqst) (*RemovePeerActionRsp, error)
	// Removes a specific action permission from multiple peers.
	RemovePeersAction(context.Context, *RemovePeersActionRqst) (*RemovePeersActionRsp, error)
	// Accepts a peer into the network.
	AcceptPeer(context.Context, *AcceptPeerRqst) (*AcceptPeerRsp, error)
	// Rejects a peer and prevents further connection attempts.
	RejectPeer(context.Context, *RejectPeerRqst) (*RejectPeerRsp, error)
	// Retrieves the public key of a specified peer.
	GetPeerPublicKey(context.Context, *GetPeerPublicKeyRqst) (*GetPeerPublicKeyRsp, error)
	// Creates a new notification.
	CreateNotification(context.Context, *CreateNotificationRqst) (*CreateNotificationRsp, error)
	// Retrieves a stream of notifications.
	GetNotifications(*GetNotificationsRqst, grpc.ServerStreamingServer[GetNotificationsRsp]) error
	// Deletes a specific notification.
	DeleteNotification(context.Context, *DeleteNotificationRqst) (*DeleteNotificationRsp, error)
	// Clears all notifications.
	ClearAllNotifications(context.Context, *ClearAllNotificationsRqst) (*ClearAllNotificationsRsp, error)
	// Clears all notifications of a specified type.
	ClearNotificationsByType(context.Context, *ClearNotificationsByTypeRqst) (*ClearNotificationsByTypeRsp, error)
	// Searches for service packages by keywords.
	FindPackages(context.Context, *FindPackagesDescriptorRequest) (*FindPackagesDescriptorResponse, error)
	// Retrieves the descriptor of a specific package.
	GetPackageDescriptor(context.Context, *GetPackageDescriptorRequest) (*GetPackageDescriptorResponse, error)
	// Retrieves descriptors for all packages.
	GetPackagesDescriptor(*GetPackagesDescriptorRequest, grpc.ServerStreamingServer[GetPackagesDescriptorResponse]) error
	// Saves or updates a service package descriptor.
	SetPackageDescriptor(context.Context, *SetPackageDescriptorRequest) (*SetPackageDescriptorResponse, error)
	// Retrieves a package bundle.
	SetPackageBundle(context.Context, *SetPackageBundleRequest) (*SetPackageBundleResponse, error)
	// Gets the checksum for a specified package bundle.
	GetPackageBundleChecksum(context.Context, *GetPackageBundleChecksumRequest) (*GetPackageBundleChecksumResponse, error)
	// Updates user session information.
	UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error)
	// Retrieves a list of all user sessions.
	GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsResponse, error)
	// Removes a specific user session.
	RemoveSession(context.Context, *RemoveSessionRequest) (*RemoveSessionResponse, error)
	// Retrieves a session for a specific user.
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	// Retrieves the call history for a given account.
	GetCallHistory(context.Context, *GetCallHistoryRqst) (*GetCallHistoryRsp, error)
	// Sets calling information.
	SetCall(context.Context, *SetCallRqst) (*SetCallRsp, error)
	// Deletes calling information.
	DeleteCall(context.Context, *DeleteCallRqst) (*DeleteCallRsp, error)
	// Clears all call records.
	ClearCalls(context.Context, *ClearCallsRqst) (*ClearCallsRsp, error)
}

// UnimplementedResourceServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceServiceServer struct{}

func (UnimplementedResourceServiceServer) CreateReference(context.Context, *CreateReferenceRqst) (*CreateReferenceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReference not implemented")
}
func (UnimplementedResourceServiceServer) DeleteReference(context.Context, *DeleteReferenceRqst) (*DeleteReferenceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReference not implemented")
}
func (UnimplementedResourceServiceServer) CreateOrganization(context.Context, *CreateOrganizationRqst) (*CreateOrganizationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedResourceServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRqst) (*UpdateOrganizationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedResourceServiceServer) GetOrganizations(*GetOrganizationsRqst, grpc.ServerStreamingServer[GetOrganizationsRsp]) error {
	return status.Errorf(codes.Unimplemented, "method GetOrganizations not implemented")
}
func (UnimplementedResourceServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRqst) (*DeleteOrganizationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedResourceServiceServer) AddOrganizationAccount(context.Context, *AddOrganizationAccountRqst) (*AddOrganizationAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationAccount not implemented")
}
func (UnimplementedResourceServiceServer) AddOrganizationGroup(context.Context, *AddOrganizationGroupRqst) (*AddOrganizationGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationGroup not implemented")
}
func (UnimplementedResourceServiceServer) AddOrganizationRole(context.Context, *AddOrganizationRoleRqst) (*AddOrganizationRoleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationRole not implemented")
}
func (UnimplementedResourceServiceServer) AddOrganizationApplication(context.Context, *AddOrganizationApplicationRqst) (*AddOrganizationApplicationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationApplication not implemented")
}
func (UnimplementedResourceServiceServer) RemoveOrganizationAccount(context.Context, *RemoveOrganizationAccountRqst) (*RemoveOrganizationAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganizationAccount not implemented")
}
func (UnimplementedResourceServiceServer) RemoveOrganizationGroup(context.Context, *RemoveOrganizationGroupRqst) (*RemoveOrganizationGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganizationGroup not implemented")
}
func (UnimplementedResourceServiceServer) RemoveOrganizationRole(context.Context, *RemoveOrganizationRoleRqst) (*RemoveOrganizationRoleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganizationRole not implemented")
}
func (UnimplementedResourceServiceServer) RemoveOrganizationApplication(context.Context, *RemoveOrganizationApplicationRqst) (*RemoveOrganizationApplicationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganizationApplication not implemented")
}
func (UnimplementedResourceServiceServer) CreateGroup(context.Context, *CreateGroupRqst) (*CreateGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedResourceServiceServer) UpdateGroup(context.Context, *UpdateGroupRqst) (*UpdateGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedResourceServiceServer) GetGroups(*GetGroupsRqst, grpc.ServerStreamingServer[GetGroupsRsp]) error {
	return status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedResourceServiceServer) DeleteGroup(context.Context, *DeleteGroupRqst) (*DeleteGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedResourceServiceServer) AddGroupMemberAccount(context.Context, *AddGroupMemberAccountRqst) (*AddGroupMemberAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupMemberAccount not implemented")
}
func (UnimplementedResourceServiceServer) RemoveGroupMemberAccount(context.Context, *RemoveGroupMemberAccountRqst) (*RemoveGroupMemberAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupMemberAccount not implemented")
}
func (UnimplementedResourceServiceServer) RegisterAccount(context.Context, *RegisterAccountRqst) (*RegisterAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (UnimplementedResourceServiceServer) DeleteAccount(context.Context, *DeleteAccountRqst) (*DeleteAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedResourceServiceServer) GetAccount(context.Context, *GetAccountRqst) (*GetAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedResourceServiceServer) SetAccount(context.Context, *SetAccountRqst) (*SetAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccount not implemented")
}
func (UnimplementedResourceServiceServer) SetAccountPassword(context.Context, *SetAccountPasswordRqst) (*SetAccountPasswordRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountPassword not implemented")
}
func (UnimplementedResourceServiceServer) GetAccounts(*GetAccountsRqst, grpc.ServerStreamingServer[GetAccountsRsp]) error {
	return status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedResourceServiceServer) AddAccountRole(context.Context, *AddAccountRoleRqst) (*AddAccountRoleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccountRole not implemented")
}
func (UnimplementedResourceServiceServer) RemoveAccountRole(context.Context, *RemoveAccountRoleRqst) (*RemoveAccountRoleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAccountRole not implemented")
}
func (UnimplementedResourceServiceServer) SetAccountContact(context.Context, *SetAccountContactRqst) (*SetAccountContactRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountContact not implemented")
}
func (UnimplementedResourceServiceServer) SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmail not implemented")
}
func (UnimplementedResourceServiceServer) IsOrgnanizationMember(context.Context, *IsOrgnanizationMemberRqst) (*IsOrgnanizationMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOrgnanizationMember not implemented")
}
func (UnimplementedResourceServiceServer) CreateRole(context.Context, *CreateRoleRqst) (*CreateRoleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedResourceServiceServer) UpdateRole(context.Context, *UpdateRoleRqst) (*UpdateRoleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedResourceServiceServer) GetRoles(*GetRolesRqst, grpc.ServerStreamingServer[GetRolesRsp]) error {
	return status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedResourceServiceServer) DeleteRole(context.Context, *DeleteRoleRqst) (*DeleteRoleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedResourceServiceServer) AddRoleActions(context.Context, *AddRoleActionsRqst) (*AddRoleActionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleActions not implemented")
}
func (UnimplementedResourceServiceServer) RemoveRoleAction(context.Context, *RemoveRoleActionRqst) (*RemoveRoleActionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleAction not implemented")
}
func (UnimplementedResourceServiceServer) RemoveRolesAction(context.Context, *RemoveRolesActionRqst) (*RemoveRolesActionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRolesAction not implemented")
}
func (UnimplementedResourceServiceServer) CreateApplication(context.Context, *CreateApplicationRqst) (*CreateApplicationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedResourceServiceServer) UpdateApplication(context.Context, *UpdateApplicationRqst) (*UpdateApplicationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedResourceServiceServer) GetApplications(*GetApplicationsRqst, grpc.ServerStreamingServer[GetApplicationsRsp]) error {
	return status.Errorf(codes.Unimplemented, "method GetApplications not implemented")
}
func (UnimplementedResourceServiceServer) DeleteApplication(context.Context, *DeleteApplicationRqst) (*DeleteApplicationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedResourceServiceServer) AddApplicationActions(context.Context, *AddApplicationActionsRqst) (*AddApplicationActionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApplicationActions not implemented")
}
func (UnimplementedResourceServiceServer) RemoveApplicationAction(context.Context, *RemoveApplicationActionRqst) (*RemoveApplicationActionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveApplicationAction not implemented")
}
func (UnimplementedResourceServiceServer) RemoveApplicationsAction(context.Context, *RemoveApplicationsActionRqst) (*RemoveApplicationsActionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveApplicationsAction not implemented")
}
func (UnimplementedResourceServiceServer) GetApplicationVersion(context.Context, *GetApplicationVersionRqst) (*GetApplicationVersionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationVersion not implemented")
}
func (UnimplementedResourceServiceServer) GetApplicationAlias(context.Context, *GetApplicationAliasRqst) (*GetApplicationAliasRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationAlias not implemented")
}
func (UnimplementedResourceServiceServer) GetApplicationIcon(context.Context, *GetApplicationIconRqst) (*GetApplicationIconRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationIcon not implemented")
}
func (UnimplementedResourceServiceServer) RegisterPeer(context.Context, *RegisterPeerRqst) (*RegisterPeerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPeer not implemented")
}
func (UnimplementedResourceServiceServer) GetPeers(*GetPeersRqst, grpc.ServerStreamingServer[GetPeersRsp]) error {
	return status.Errorf(codes.Unimplemented, "method GetPeers not implemented")
}
func (UnimplementedResourceServiceServer) GetPeerApprovalState(context.Context, *GetPeerApprovalStateRqst) (*GetPeerApprovalStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerApprovalState not implemented")
}
func (UnimplementedResourceServiceServer) DeletePeer(context.Context, *DeletePeerRqst) (*DeletePeerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePeer not implemented")
}
func (UnimplementedResourceServiceServer) UpdatePeer(context.Context, *UpdatePeerRqst) (*UpdatePeerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePeer not implemented")
}
func (UnimplementedResourceServiceServer) AddPeerActions(context.Context, *AddPeerActionsRqst) (*AddPeerActionsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeerActions not implemented")
}
func (UnimplementedResourceServiceServer) RemovePeerAction(context.Context, *RemovePeerActionRqst) (*RemovePeerActionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePeerAction not implemented")
}
func (UnimplementedResourceServiceServer) RemovePeersAction(context.Context, *RemovePeersActionRqst) (*RemovePeersActionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePeersAction not implemented")
}
func (UnimplementedResourceServiceServer) AcceptPeer(context.Context, *AcceptPeerRqst) (*AcceptPeerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptPeer not implemented")
}
func (UnimplementedResourceServiceServer) RejectPeer(context.Context, *RejectPeerRqst) (*RejectPeerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectPeer not implemented")
}
func (UnimplementedResourceServiceServer) GetPeerPublicKey(context.Context, *GetPeerPublicKeyRqst) (*GetPeerPublicKeyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerPublicKey not implemented")
}
func (UnimplementedResourceServiceServer) CreateNotification(context.Context, *CreateNotificationRqst) (*CreateNotificationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedResourceServiceServer) GetNotifications(*GetNotificationsRqst, grpc.ServerStreamingServer[GetNotificationsRsp]) error {
	return status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedResourceServiceServer) DeleteNotification(context.Context, *DeleteNotificationRqst) (*DeleteNotificationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (UnimplementedResourceServiceServer) ClearAllNotifications(context.Context, *ClearAllNotificationsRqst) (*ClearAllNotificationsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAllNotifications not implemented")
}
func (UnimplementedResourceServiceServer) ClearNotificationsByType(context.Context, *ClearNotificationsByTypeRqst) (*ClearNotificationsByTypeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearNotificationsByType not implemented")
}
func (UnimplementedResourceServiceServer) FindPackages(context.Context, *FindPackagesDescriptorRequest) (*FindPackagesDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPackages not implemented")
}
func (UnimplementedResourceServiceServer) GetPackageDescriptor(context.Context, *GetPackageDescriptorRequest) (*GetPackageDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageDescriptor not implemented")
}
func (UnimplementedResourceServiceServer) GetPackagesDescriptor(*GetPackagesDescriptorRequest, grpc.ServerStreamingServer[GetPackagesDescriptorResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetPackagesDescriptor not implemented")
}
func (UnimplementedResourceServiceServer) SetPackageDescriptor(context.Context, *SetPackageDescriptorRequest) (*SetPackageDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPackageDescriptor not implemented")
}
func (UnimplementedResourceServiceServer) SetPackageBundle(context.Context, *SetPackageBundleRequest) (*SetPackageBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPackageBundle not implemented")
}
func (UnimplementedResourceServiceServer) GetPackageBundleChecksum(context.Context, *GetPackageBundleChecksumRequest) (*GetPackageBundleChecksumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageBundleChecksum not implemented")
}
func (UnimplementedResourceServiceServer) UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedResourceServiceServer) GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedResourceServiceServer) RemoveSession(context.Context, *RemoveSessionRequest) (*RemoveSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSession not implemented")
}
func (UnimplementedResourceServiceServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedResourceServiceServer) GetCallHistory(context.Context, *GetCallHistoryRqst) (*GetCallHistoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallHistory not implemented")
}
func (UnimplementedResourceServiceServer) SetCall(context.Context, *SetCallRqst) (*SetCallRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCall not implemented")
}
func (UnimplementedResourceServiceServer) DeleteCall(context.Context, *DeleteCallRqst) (*DeleteCallRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCall not implemented")
}
func (UnimplementedResourceServiceServer) ClearCalls(context.Context, *ClearCallsRqst) (*ClearCallsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCalls not implemented")
}
func (UnimplementedResourceServiceServer) testEmbeddedByValue() {}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_CreateReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReferenceRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateReference(ctx, req.(*CreateReferenceRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReferenceRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteReference(ctx, req.(*DeleteReferenceRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetOrganizations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrganizationsRqst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).GetOrganizations(m, &grpc.GenericServerStream[GetOrganizationsRqst, GetOrganizationsRsp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetOrganizationsServer = grpc.ServerStreamingServer[GetOrganizationsRsp]

func _ResourceService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_AddOrganizationAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationAccountRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddOrganizationAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_AddOrganizationAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddOrganizationAccount(ctx, req.(*AddOrganizationAccountRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_AddOrganizationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationGroupRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddOrganizationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_AddOrganizationGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddOrganizationGroup(ctx, req.(*AddOrganizationGroupRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_AddOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationRoleRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_AddOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddOrganizationRole(ctx, req.(*AddOrganizationRoleRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_AddOrganizationApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationApplicationRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddOrganizationApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_AddOrganizationApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddOrganizationApplication(ctx, req.(*AddOrganizationApplicationRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveOrganizationAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationAccountRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveOrganizationAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemoveOrganizationAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveOrganizationAccount(ctx, req.(*RemoveOrganizationAccountRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveOrganizationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationGroupRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveOrganizationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemoveOrganizationGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveOrganizationGroup(ctx, req.(*RemoveOrganizationGroupRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationRoleRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemoveOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveOrganizationRole(ctx, req.(*RemoveOrganizationRoleRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveOrganizationApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationApplicationRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveOrganizationApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemoveOrganizationApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveOrganizationApplication(ctx, req.(*RemoveOrganizationApplicationRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateGroup(ctx, req.(*CreateGroupRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateGroup(ctx, req.(*UpdateGroupRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetGroupsRqst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).GetGroups(m, &grpc.GenericServerStream[GetGroupsRqst, GetGroupsRsp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetGroupsServer = grpc.ServerStreamingServer[GetGroupsRsp]

func _ResourceService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_AddGroupMemberAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupMemberAccountRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddGroupMemberAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_AddGroupMemberAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddGroupMemberAccount(ctx, req.(*AddGroupMemberAccountRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveGroupMemberAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupMemberAccountRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveGroupMemberAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemoveGroupMemberAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveGroupMemberAccount(ctx, req.(*RemoveGroupMemberAccountRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAccountRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RegisterAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RegisterAccount(ctx, req.(*RegisterAccountRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetAccount(ctx, req.(*GetAccountRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_SetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).SetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_SetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).SetAccount(ctx, req.(*SetAccountRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_SetAccountPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountPasswordRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).SetAccountPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_SetAccountPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).SetAccountPassword(ctx, req.(*SetAccountPasswordRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAccountsRqst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).GetAccounts(m, &grpc.GenericServerStream[GetAccountsRqst, GetAccountsRsp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetAccountsServer = grpc.ServerStreamingServer[GetAccountsRsp]

func _ResourceService_AddAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountRoleRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_AddAccountRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddAccountRole(ctx, req.(*AddAccountRoleRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAccountRoleRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemoveAccountRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveAccountRole(ctx, req.(*RemoveAccountRoleRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_SetAccountContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountContactRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).SetAccountContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_SetAccountContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).SetAccountContact(ctx, req.(*SetAccountContactRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_SetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).SetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_SetEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).SetEmail(ctx, req.(*SetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_IsOrgnanizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsOrgnanizationMemberRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).IsOrgnanizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_IsOrgnanizationMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).IsOrgnanizationMember(ctx, req.(*IsOrgnanizationMemberRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateRole(ctx, req.(*CreateRoleRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateRole(ctx, req.(*UpdateRoleRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetRoles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRolesRqst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).GetRoles(m, &grpc.GenericServerStream[GetRolesRqst, GetRolesRsp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetRolesServer = grpc.ServerStreamingServer[GetRolesRsp]

func _ResourceService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteRole(ctx, req.(*DeleteRoleRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_AddRoleActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleActionsRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddRoleActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_AddRoleActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddRoleActions(ctx, req.(*AddRoleActionsRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveRoleAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleActionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveRoleAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemoveRoleAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveRoleAction(ctx, req.(*RemoveRoleActionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveRolesAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRolesActionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveRolesAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemoveRolesAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveRolesAction(ctx, req.(*RemoveRolesActionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateApplication(ctx, req.(*CreateApplicationRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateApplication(ctx, req.(*UpdateApplicationRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetApplicationsRqst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).GetApplications(m, &grpc.GenericServerStream[GetApplicationsRqst, GetApplicationsRsp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetApplicationsServer = grpc.ServerStreamingServer[GetApplicationsRsp]

func _ResourceService_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteApplication(ctx, req.(*DeleteApplicationRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_AddApplicationActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddApplicationActionsRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddApplicationActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_AddApplicationActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddApplicationActions(ctx, req.(*AddApplicationActionsRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveApplicationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveApplicationActionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveApplicationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemoveApplicationAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveApplicationAction(ctx, req.(*RemoveApplicationActionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveApplicationsAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveApplicationsActionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveApplicationsAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemoveApplicationsAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveApplicationsAction(ctx, req.(*RemoveApplicationsActionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetApplicationVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationVersionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetApplicationVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetApplicationVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetApplicationVersion(ctx, req.(*GetApplicationVersionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetApplicationAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationAliasRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetApplicationAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetApplicationAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetApplicationAlias(ctx, req.(*GetApplicationAliasRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetApplicationIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationIconRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetApplicationIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetApplicationIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetApplicationIcon(ctx, req.(*GetApplicationIconRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RegisterPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPeerRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RegisterPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RegisterPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RegisterPeer(ctx, req.(*RegisterPeerRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPeersRqst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).GetPeers(m, &grpc.GenericServerStream[GetPeersRqst, GetPeersRsp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetPeersServer = grpc.ServerStreamingServer[GetPeersRsp]

func _ResourceService_GetPeerApprovalState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerApprovalStateRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetPeerApprovalState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetPeerApprovalState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetPeerApprovalState(ctx, req.(*GetPeerApprovalStateRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeletePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePeerRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeletePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeletePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeletePeer(ctx, req.(*DeletePeerRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdatePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePeerRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdatePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdatePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdatePeer(ctx, req.(*UpdatePeerRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_AddPeerActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeerActionsRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddPeerActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_AddPeerActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddPeerActions(ctx, req.(*AddPeerActionsRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemovePeerAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePeerActionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemovePeerAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemovePeerAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemovePeerAction(ctx, req.(*RemovePeerActionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemovePeersAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePeersActionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemovePeersAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemovePeersAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemovePeersAction(ctx, req.(*RemovePeersActionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_AcceptPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptPeerRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AcceptPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_AcceptPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AcceptPeer(ctx, req.(*AcceptPeerRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RejectPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectPeerRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RejectPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RejectPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RejectPeer(ctx, req.(*RejectPeerRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetPeerPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerPublicKeyRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetPeerPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetPeerPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetPeerPublicKey(ctx, req.(*GetPeerPublicKeyRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_CreateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateNotification(ctx, req.(*CreateNotificationRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNotificationsRqst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).GetNotifications(m, &grpc.GenericServerStream[GetNotificationsRqst, GetNotificationsRsp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetNotificationsServer = grpc.ServerStreamingServer[GetNotificationsRsp]

func _ResourceService_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteNotification(ctx, req.(*DeleteNotificationRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ClearAllNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearAllNotificationsRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ClearAllNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ClearAllNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ClearAllNotifications(ctx, req.(*ClearAllNotificationsRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ClearNotificationsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearNotificationsByTypeRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ClearNotificationsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ClearNotificationsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ClearNotificationsByType(ctx, req.(*ClearNotificationsByTypeRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_FindPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPackagesDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).FindPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_FindPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).FindPackages(ctx, req.(*FindPackagesDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetPackageDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetPackageDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetPackageDescriptor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetPackageDescriptor(ctx, req.(*GetPackageDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetPackagesDescriptor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPackagesDescriptorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceServiceServer).GetPackagesDescriptor(m, &grpc.GenericServerStream[GetPackagesDescriptorRequest, GetPackagesDescriptorResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResourceService_GetPackagesDescriptorServer = grpc.ServerStreamingServer[GetPackagesDescriptorResponse]

func _ResourceService_SetPackageDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPackageDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).SetPackageDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_SetPackageDescriptor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).SetPackageDescriptor(ctx, req.(*SetPackageDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_SetPackageBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPackageBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).SetPackageBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_SetPackageBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).SetPackageBundle(ctx, req.(*SetPackageBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetPackageBundleChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageBundleChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetPackageBundleChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetPackageBundleChecksum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetPackageBundleChecksum(ctx, req.(*GetPackageBundleChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_UpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateSession(ctx, req.(*UpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetSessions(ctx, req.(*GetSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_RemoveSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveSession(ctx, req.(*RemoveSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetCallHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallHistoryRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetCallHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_GetCallHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetCallHistory(ctx, req.(*GetCallHistoryRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_SetCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCallRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).SetCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_SetCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).SetCall(ctx, req.(*SetCallRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCallRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_DeleteCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteCall(ctx, req.(*DeleteCallRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ClearCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCallsRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ClearCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceService_ClearCalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ClearCalls(ctx, req.(*ClearCallsRqst))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReference",
			Handler:    _ResourceService_CreateReference_Handler,
		},
		{
			MethodName: "DeleteReference",
			Handler:    _ResourceService_DeleteReference_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _ResourceService_CreateOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _ResourceService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _ResourceService_DeleteOrganization_Handler,
		},
		{
			MethodName: "AddOrganizationAccount",
			Handler:    _ResourceService_AddOrganizationAccount_Handler,
		},
		{
			MethodName: "AddOrganizationGroup",
			Handler:    _ResourceService_AddOrganizationGroup_Handler,
		},
		{
			MethodName: "AddOrganizationRole",
			Handler:    _ResourceService_AddOrganizationRole_Handler,
		},
		{
			MethodName: "AddOrganizationApplication",
			Handler:    _ResourceService_AddOrganizationApplication_Handler,
		},
		{
			MethodName: "RemoveOrganizationAccount",
			Handler:    _ResourceService_RemoveOrganizationAccount_Handler,
		},
		{
			MethodName: "RemoveOrganizationGroup",
			Handler:    _ResourceService_RemoveOrganizationGroup_Handler,
		},
		{
			MethodName: "RemoveOrganizationRole",
			Handler:    _ResourceService_RemoveOrganizationRole_Handler,
		},
		{
			MethodName: "RemoveOrganizationApplication",
			Handler:    _ResourceService_RemoveOrganizationApplication_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ResourceService_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ResourceService_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ResourceService_DeleteGroup_Handler,
		},
		{
			MethodName: "AddGroupMemberAccount",
			Handler:    _ResourceService_AddGroupMemberAccount_Handler,
		},
		{
			MethodName: "RemoveGroupMemberAccount",
			Handler:    _ResourceService_RemoveGroupMemberAccount_Handler,
		},
		{
			MethodName: "RegisterAccount",
			Handler:    _ResourceService_RegisterAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _ResourceService_DeleteAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _ResourceService_GetAccount_Handler,
		},
		{
			MethodName: "SetAccount",
			Handler:    _ResourceService_SetAccount_Handler,
		},
		{
			MethodName: "SetAccountPassword",
			Handler:    _ResourceService_SetAccountPassword_Handler,
		},
		{
			MethodName: "AddAccountRole",
			Handler:    _ResourceService_AddAccountRole_Handler,
		},
		{
			MethodName: "RemoveAccountRole",
			Handler:    _ResourceService_RemoveAccountRole_Handler,
		},
		{
			MethodName: "SetAccountContact",
			Handler:    _ResourceService_SetAccountContact_Handler,
		},
		{
			MethodName: "SetEmail",
			Handler:    _ResourceService_SetEmail_Handler,
		},
		{
			MethodName: "IsOrgnanizationMember",
			Handler:    _ResourceService_IsOrgnanizationMember_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _ResourceService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _ResourceService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _ResourceService_DeleteRole_Handler,
		},
		{
			MethodName: "AddRoleActions",
			Handler:    _ResourceService_AddRoleActions_Handler,
		},
		{
			MethodName: "RemoveRoleAction",
			Handler:    _ResourceService_RemoveRoleAction_Handler,
		},
		{
			MethodName: "RemoveRolesAction",
			Handler:    _ResourceService_RemoveRolesAction_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _ResourceService_CreateApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _ResourceService_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _ResourceService_DeleteApplication_Handler,
		},
		{
			MethodName: "AddApplicationActions",
			Handler:    _ResourceService_AddApplicationActions_Handler,
		},
		{
			MethodName: "RemoveApplicationAction",
			Handler:    _ResourceService_RemoveApplicationAction_Handler,
		},
		{
			MethodName: "RemoveApplicationsAction",
			Handler:    _ResourceService_RemoveApplicationsAction_Handler,
		},
		{
			MethodName: "GetApplicationVersion",
			Handler:    _ResourceService_GetApplicationVersion_Handler,
		},
		{
			MethodName: "GetApplicationAlias",
			Handler:    _ResourceService_GetApplicationAlias_Handler,
		},
		{
			MethodName: "GetApplicationIcon",
			Handler:    _ResourceService_GetApplicationIcon_Handler,
		},
		{
			MethodName: "RegisterPeer",
			Handler:    _ResourceService_RegisterPeer_Handler,
		},
		{
			MethodName: "GetPeerApprovalState",
			Handler:    _ResourceService_GetPeerApprovalState_Handler,
		},
		{
			MethodName: "DeletePeer",
			Handler:    _ResourceService_DeletePeer_Handler,
		},
		{
			MethodName: "UpdatePeer",
			Handler:    _ResourceService_UpdatePeer_Handler,
		},
		{
			MethodName: "AddPeerActions",
			Handler:    _ResourceService_AddPeerActions_Handler,
		},
		{
			MethodName: "RemovePeerAction",
			Handler:    _ResourceService_RemovePeerAction_Handler,
		},
		{
			MethodName: "RemovePeersAction",
			Handler:    _ResourceService_RemovePeersAction_Handler,
		},
		{
			MethodName: "AcceptPeer",
			Handler:    _ResourceService_AcceptPeer_Handler,
		},
		{
			MethodName: "RejectPeer",
			Handler:    _ResourceService_RejectPeer_Handler,
		},
		{
			MethodName: "GetPeerPublicKey",
			Handler:    _ResourceService_GetPeerPublicKey_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _ResourceService_CreateNotification_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _ResourceService_DeleteNotification_Handler,
		},
		{
			MethodName: "ClearAllNotifications",
			Handler:    _ResourceService_ClearAllNotifications_Handler,
		},
		{
			MethodName: "ClearNotificationsByType",
			Handler:    _ResourceService_ClearNotificationsByType_Handler,
		},
		{
			MethodName: "FindPackages",
			Handler:    _ResourceService_FindPackages_Handler,
		},
		{
			MethodName: "GetPackageDescriptor",
			Handler:    _ResourceService_GetPackageDescriptor_Handler,
		},
		{
			MethodName: "SetPackageDescriptor",
			Handler:    _ResourceService_SetPackageDescriptor_Handler,
		},
		{
			MethodName: "SetPackageBundle",
			Handler:    _ResourceService_SetPackageBundle_Handler,
		},
		{
			MethodName: "GetPackageBundleChecksum",
			Handler:    _ResourceService_GetPackageBundleChecksum_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _ResourceService_UpdateSession_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _ResourceService_GetSessions_Handler,
		},
		{
			MethodName: "RemoveSession",
			Handler:    _ResourceService_RemoveSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _ResourceService_GetSession_Handler,
		},
		{
			MethodName: "GetCallHistory",
			Handler:    _ResourceService_GetCallHistory_Handler,
		},
		{
			MethodName: "SetCall",
			Handler:    _ResourceService_SetCall_Handler,
		},
		{
			MethodName: "DeleteCall",
			Handler:    _ResourceService_DeleteCall_Handler,
		},
		{
			MethodName: "ClearCalls",
			Handler:    _ResourceService_ClearCalls_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOrganizations",
			Handler:       _ResourceService_GetOrganizations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetGroups",
			Handler:       _ResourceService_GetGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAccounts",
			Handler:       _ResourceService_GetAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRoles",
			Handler:       _ResourceService_GetRoles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetApplications",
			Handler:       _ResourceService_GetApplications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPeers",
			Handler:       _ResourceService_GetPeers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetNotifications",
			Handler:       _ResourceService_GetNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPackagesDescriptor",
			Handler:       _ResourceService_GetPackagesDescriptor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "resource.proto",
}
