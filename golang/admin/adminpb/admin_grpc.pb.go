//*
// AdminService: Provides administrative functionalities for managing Globular clusters.
// This includes managing processes, environment variables, certificates, and system updates.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: admin.proto

package adminpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_Update_FullMethodName                   = "/admin.AdminService/Update"
	AdminService_DownloadGlobular_FullMethodName         = "/admin.AdminService/DownloadGlobular"
	AdminService_GetCertificates_FullMethodName          = "/admin.AdminService/GetCertificates"
	AdminService_HasRunningProcess_FullMethodName        = "/admin.AdminService/HasRunningProcess"
	AdminService_GetProcessInfos_FullMethodName          = "/admin.AdminService/GetProcessInfos"
	AdminService_RunCmd_FullMethodName                   = "/admin.AdminService/RunCmd"
	AdminService_SetEnvironmentVariable_FullMethodName   = "/admin.AdminService/SetEnvironmentVariable"
	AdminService_GetEnvironmentVariable_FullMethodName   = "/admin.AdminService/GetEnvironmentVariable"
	AdminService_UnsetEnvironmentVariable_FullMethodName = "/admin.AdminService/UnsetEnvironmentVariable"
	AdminService_KillProcess_FullMethodName              = "/admin.AdminService/KillProcess"
	AdminService_KillProcesses_FullMethodName            = "/admin.AdminService/KillProcesses"
	AdminService_GetPids_FullMethodName                  = "/admin.AdminService/GetPids"
	AdminService_SaveConfig_FullMethodName               = "/admin.AdminService/SaveConfig"
	AdminService_GetFileInfo_FullMethodName              = "/admin.AdminService/GetFileInfo"
	AdminService_GetAvailableHosts_FullMethodName        = "/admin.AdminService/GetAvailableHosts"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// AdminService: Provides administrative functionalities for managing Globular clusters.
// This includes managing processes, environment variables, certificates, and system updates.
type AdminServiceClient interface {
	// Updates a specific Globular server. Typically used via command line interface.
	Update(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateRequest, UpdateResponse], error)
	// Downloads the Globular executable file for specified platform.
	DownloadGlobular(ctx context.Context, in *DownloadGlobularRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadGlobularResponse], error)
	// Retrieves public SSL/TLS certificates for a given domain from a server.
	GetCertificates(ctx context.Context, in *GetCertificatesRequest, opts ...grpc.CallOption) (*GetCertificatesResponse, error)
	// Checks if a process with the specified name is currently running.
	HasRunningProcess(ctx context.Context, in *HasRunningProcessRequest, opts ...grpc.CallOption) (*HasRunningProcessResponse, error)
	// Fetches detailed information about processes, either all or filtered by name or PID.
	GetProcessInfos(ctx context.Context, in *GetProcessInfosRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetProcessInfosResponse], error)
	// Executes an external command on the server and returns its output.
	RunCmd(ctx context.Context, in *RunCmdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunCmdResponse], error)
	// Sets an environment variable on the server with the specified name and value.
	SetEnvironmentVariable(ctx context.Context, in *SetEnvironmentVariableRequest, opts ...grpc.CallOption) (*SetEnvironmentVariableResponse, error)
	// Retrieves the value of a specified environment variable from the server.
	GetEnvironmentVariable(ctx context.Context, in *GetEnvironmentVariableRequest, opts ...grpc.CallOption) (*GetEnvironmentVariableResponse, error)
	// Removes a specified environment variable from the server's environment.
	UnsetEnvironmentVariable(ctx context.Context, in *UnsetEnvironmentVariableRequest, opts ...grpc.CallOption) (*UnsetEnvironmentVariableResponse, error)
	// Terminates a process on the server using its PID.
	KillProcess(ctx context.Context, in *KillProcessRequest, opts ...grpc.CallOption) (*KillProcessResponse, error)
	// Terminates all processes on the server that match a given name.
	KillProcesses(ctx context.Context, in *KillProcessesRequest, opts ...grpc.CallOption) (*KillProcessesResponse, error)
	// Retrieves a list of Process IDs (PIDs) for processes matching a given name.
	GetPids(ctx context.Context, in *GetPidsRequest, opts ...grpc.CallOption) (*GetPidsResponse, error)
	// Saves the current configuration settings of Globular on the server.
	SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigRequest, error)
	// Retrieves information about a specific file located on the server using an absolute path.
	GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error)
	// Lists all available hosts within the network.
	GetAvailableHosts(ctx context.Context, in *GetAvailableHostsRequest, opts ...grpc.CallOption) (*GetAvailableHostsResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Update(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateRequest, UpdateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[0], AdminService_Update_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateRequest, UpdateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_UpdateClient = grpc.ClientStreamingClient[UpdateRequest, UpdateResponse]

func (c *adminServiceClient) DownloadGlobular(ctx context.Context, in *DownloadGlobularRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadGlobularResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[1], AdminService_DownloadGlobular_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadGlobularRequest, DownloadGlobularResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_DownloadGlobularClient = grpc.ServerStreamingClient[DownloadGlobularResponse]

func (c *adminServiceClient) GetCertificates(ctx context.Context, in *GetCertificatesRequest, opts ...grpc.CallOption) (*GetCertificatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCertificatesResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCertificates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) HasRunningProcess(ctx context.Context, in *HasRunningProcessRequest, opts ...grpc.CallOption) (*HasRunningProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasRunningProcessResponse)
	err := c.cc.Invoke(ctx, AdminService_HasRunningProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetProcessInfos(ctx context.Context, in *GetProcessInfosRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetProcessInfosResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[2], AdminService_GetProcessInfos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetProcessInfosRequest, GetProcessInfosResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_GetProcessInfosClient = grpc.ServerStreamingClient[GetProcessInfosResponse]

func (c *adminServiceClient) RunCmd(ctx context.Context, in *RunCmdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunCmdResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[3], AdminService_RunCmd_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunCmdRequest, RunCmdResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_RunCmdClient = grpc.ServerStreamingClient[RunCmdResponse]

func (c *adminServiceClient) SetEnvironmentVariable(ctx context.Context, in *SetEnvironmentVariableRequest, opts ...grpc.CallOption) (*SetEnvironmentVariableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetEnvironmentVariableResponse)
	err := c.cc.Invoke(ctx, AdminService_SetEnvironmentVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetEnvironmentVariable(ctx context.Context, in *GetEnvironmentVariableRequest, opts ...grpc.CallOption) (*GetEnvironmentVariableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnvironmentVariableResponse)
	err := c.cc.Invoke(ctx, AdminService_GetEnvironmentVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnsetEnvironmentVariable(ctx context.Context, in *UnsetEnvironmentVariableRequest, opts ...grpc.CallOption) (*UnsetEnvironmentVariableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsetEnvironmentVariableResponse)
	err := c.cc.Invoke(ctx, AdminService_UnsetEnvironmentVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) KillProcess(ctx context.Context, in *KillProcessRequest, opts ...grpc.CallOption) (*KillProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KillProcessResponse)
	err := c.cc.Invoke(ctx, AdminService_KillProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) KillProcesses(ctx context.Context, in *KillProcessesRequest, opts ...grpc.CallOption) (*KillProcessesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KillProcessesResponse)
	err := c.cc.Invoke(ctx, AdminService_KillProcesses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPids(ctx context.Context, in *GetPidsRequest, opts ...grpc.CallOption) (*GetPidsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPidsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetPids_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveConfigRequest)
	err := c.cc.Invoke(ctx, AdminService_SaveConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileInfoResponse)
	err := c.cc.Invoke(ctx, AdminService_GetFileInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAvailableHosts(ctx context.Context, in *GetAvailableHostsRequest, opts ...grpc.CallOption) (*GetAvailableHostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableHostsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetAvailableHosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations should embed UnimplementedAdminServiceServer
// for forward compatibility.
//
// *
// AdminService: Provides administrative functionalities for managing Globular clusters.
// This includes managing processes, environment variables, certificates, and system updates.
type AdminServiceServer interface {
	// Updates a specific Globular server. Typically used via command line interface.
	Update(grpc.ClientStreamingServer[UpdateRequest, UpdateResponse]) error
	// Downloads the Globular executable file for specified platform.
	DownloadGlobular(*DownloadGlobularRequest, grpc.ServerStreamingServer[DownloadGlobularResponse]) error
	// Retrieves public SSL/TLS certificates for a given domain from a server.
	GetCertificates(context.Context, *GetCertificatesRequest) (*GetCertificatesResponse, error)
	// Checks if a process with the specified name is currently running.
	HasRunningProcess(context.Context, *HasRunningProcessRequest) (*HasRunningProcessResponse, error)
	// Fetches detailed information about processes, either all or filtered by name or PID.
	GetProcessInfos(*GetProcessInfosRequest, grpc.ServerStreamingServer[GetProcessInfosResponse]) error
	// Executes an external command on the server and returns its output.
	RunCmd(*RunCmdRequest, grpc.ServerStreamingServer[RunCmdResponse]) error
	// Sets an environment variable on the server with the specified name and value.
	SetEnvironmentVariable(context.Context, *SetEnvironmentVariableRequest) (*SetEnvironmentVariableResponse, error)
	// Retrieves the value of a specified environment variable from the server.
	GetEnvironmentVariable(context.Context, *GetEnvironmentVariableRequest) (*GetEnvironmentVariableResponse, error)
	// Removes a specified environment variable from the server's environment.
	UnsetEnvironmentVariable(context.Context, *UnsetEnvironmentVariableRequest) (*UnsetEnvironmentVariableResponse, error)
	// Terminates a process on the server using its PID.
	KillProcess(context.Context, *KillProcessRequest) (*KillProcessResponse, error)
	// Terminates all processes on the server that match a given name.
	KillProcesses(context.Context, *KillProcessesRequest) (*KillProcessesResponse, error)
	// Retrieves a list of Process IDs (PIDs) for processes matching a given name.
	GetPids(context.Context, *GetPidsRequest) (*GetPidsResponse, error)
	// Saves the current configuration settings of Globular on the server.
	SaveConfig(context.Context, *SaveConfigRequest) (*SaveConfigRequest, error)
	// Retrieves information about a specific file located on the server using an absolute path.
	GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error)
	// Lists all available hosts within the network.
	GetAvailableHosts(context.Context, *GetAvailableHostsRequest) (*GetAvailableHostsResponse, error)
}

// UnimplementedAdminServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) Update(grpc.ClientStreamingServer[UpdateRequest, UpdateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdminServiceServer) DownloadGlobular(*DownloadGlobularRequest, grpc.ServerStreamingServer[DownloadGlobularResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadGlobular not implemented")
}
func (UnimplementedAdminServiceServer) GetCertificates(context.Context, *GetCertificatesRequest) (*GetCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificates not implemented")
}
func (UnimplementedAdminServiceServer) HasRunningProcess(context.Context, *HasRunningProcessRequest) (*HasRunningProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasRunningProcess not implemented")
}
func (UnimplementedAdminServiceServer) GetProcessInfos(*GetProcessInfosRequest, grpc.ServerStreamingServer[GetProcessInfosResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetProcessInfos not implemented")
}
func (UnimplementedAdminServiceServer) RunCmd(*RunCmdRequest, grpc.ServerStreamingServer[RunCmdResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RunCmd not implemented")
}
func (UnimplementedAdminServiceServer) SetEnvironmentVariable(context.Context, *SetEnvironmentVariableRequest) (*SetEnvironmentVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnvironmentVariable not implemented")
}
func (UnimplementedAdminServiceServer) GetEnvironmentVariable(context.Context, *GetEnvironmentVariableRequest) (*GetEnvironmentVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironmentVariable not implemented")
}
func (UnimplementedAdminServiceServer) UnsetEnvironmentVariable(context.Context, *UnsetEnvironmentVariableRequest) (*UnsetEnvironmentVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetEnvironmentVariable not implemented")
}
func (UnimplementedAdminServiceServer) KillProcess(context.Context, *KillProcessRequest) (*KillProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillProcess not implemented")
}
func (UnimplementedAdminServiceServer) KillProcesses(context.Context, *KillProcessesRequest) (*KillProcessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillProcesses not implemented")
}
func (UnimplementedAdminServiceServer) GetPids(context.Context, *GetPidsRequest) (*GetPidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPids not implemented")
}
func (UnimplementedAdminServiceServer) SaveConfig(context.Context, *SaveConfigRequest) (*SaveConfigRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfig not implemented")
}
func (UnimplementedAdminServiceServer) GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedAdminServiceServer) GetAvailableHosts(context.Context, *GetAvailableHostsRequest) (*GetAvailableHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableHosts not implemented")
}
func (UnimplementedAdminServiceServer) testEmbeddedByValue() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdminServiceServer).Update(&grpc.GenericServerStream[UpdateRequest, UpdateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_UpdateServer = grpc.ClientStreamingServer[UpdateRequest, UpdateResponse]

func _AdminService_DownloadGlobular_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadGlobularRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).DownloadGlobular(m, &grpc.GenericServerStream[DownloadGlobularRequest, DownloadGlobularResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_DownloadGlobularServer = grpc.ServerStreamingServer[DownloadGlobularResponse]

func _AdminService_GetCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCertificates(ctx, req.(*GetCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_HasRunningProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRunningProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).HasRunningProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_HasRunningProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).HasRunningProcess(ctx, req.(*HasRunningProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetProcessInfos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProcessInfosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).GetProcessInfos(m, &grpc.GenericServerStream[GetProcessInfosRequest, GetProcessInfosResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_GetProcessInfosServer = grpc.ServerStreamingServer[GetProcessInfosResponse]

func _AdminService_RunCmd_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunCmdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).RunCmd(m, &grpc.GenericServerStream[RunCmdRequest, RunCmdResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdminService_RunCmdServer = grpc.ServerStreamingServer[RunCmdResponse]

func _AdminService_SetEnvironmentVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnvironmentVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetEnvironmentVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetEnvironmentVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetEnvironmentVariable(ctx, req.(*SetEnvironmentVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetEnvironmentVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetEnvironmentVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetEnvironmentVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetEnvironmentVariable(ctx, req.(*GetEnvironmentVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnsetEnvironmentVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsetEnvironmentVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnsetEnvironmentVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UnsetEnvironmentVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnsetEnvironmentVariable(ctx, req.(*UnsetEnvironmentVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_KillProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).KillProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_KillProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).KillProcess(ctx, req.(*KillProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_KillProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillProcessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).KillProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_KillProcesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).KillProcesses(ctx, req.(*KillProcessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPids(ctx, req.(*GetPidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SaveConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SaveConfig(ctx, req.(*SaveConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetFileInfo(ctx, req.(*GetFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAvailableHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAvailableHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAvailableHosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAvailableHosts(ctx, req.(*GetAvailableHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertificates",
			Handler:    _AdminService_GetCertificates_Handler,
		},
		{
			MethodName: "HasRunningProcess",
			Handler:    _AdminService_HasRunningProcess_Handler,
		},
		{
			MethodName: "SetEnvironmentVariable",
			Handler:    _AdminService_SetEnvironmentVariable_Handler,
		},
		{
			MethodName: "GetEnvironmentVariable",
			Handler:    _AdminService_GetEnvironmentVariable_Handler,
		},
		{
			MethodName: "UnsetEnvironmentVariable",
			Handler:    _AdminService_UnsetEnvironmentVariable_Handler,
		},
		{
			MethodName: "KillProcess",
			Handler:    _AdminService_KillProcess_Handler,
		},
		{
			MethodName: "KillProcesses",
			Handler:    _AdminService_KillProcesses_Handler,
		},
		{
			MethodName: "GetPids",
			Handler:    _AdminService_GetPids_Handler,
		},
		{
			MethodName: "SaveConfig",
			Handler:    _AdminService_SaveConfig_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _AdminService_GetFileInfo_Handler,
		},
		{
			MethodName: "GetAvailableHosts",
			Handler:    _AdminService_GetAvailableHosts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _AdminService_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadGlobular",
			Handler:       _AdminService_DownloadGlobular_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProcessInfos",
			Handler:       _AdminService_GetProcessInfos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RunCmd",
			Handler:       _AdminService_RunCmd_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}
