//*
// Search service proto definition.
// Provides functionality for indexing, searching, and managing documents.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: search.proto

package searchpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SearchService_Stop_FullMethodName             = "/search.SearchService/Stop"
	SearchService_GetEngineVersion_FullMethodName = "/search.SearchService/GetEngineVersion"
	SearchService_IndexJsonObject_FullMethodName  = "/search.SearchService/IndexJsonObject"
	SearchService_Count_FullMethodName            = "/search.SearchService/Count"
	SearchService_DeleteDocument_FullMethodName   = "/search.SearchService/DeleteDocument"
	SearchService_SearchDocuments_FullMethodName  = "/search.SearchService/SearchDocuments"
)

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for Search.
type SearchServiceClient interface {
	// Stop the server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// *
	// Return the version number of the search engine.
	GetEngineVersion(ctx context.Context, in *GetEngineVersionRequest, opts ...grpc.CallOption) (*GetEngineVersionResponse, error)
	// *
	// Index a JSON object or an array of objects.
	IndexJsonObject(ctx context.Context, in *IndexJsonObjectRequest, opts ...grpc.CallOption) (*IndexJsonObjectResponse, error)
	// *
	// Get the count of documents in a database.
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// *
	// Remove a document from the database.
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error)
	// *
	// Search for documents based on the query.
	SearchDocuments(ctx context.Context, in *SearchDocumentsRequest, opts ...grpc.CallOption) (SearchService_SearchDocumentsClient, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, SearchService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetEngineVersion(ctx context.Context, in *GetEngineVersionRequest, opts ...grpc.CallOption) (*GetEngineVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEngineVersionResponse)
	err := c.cc.Invoke(ctx, SearchService_GetEngineVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) IndexJsonObject(ctx context.Context, in *IndexJsonObjectRequest, opts ...grpc.CallOption) (*IndexJsonObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexJsonObjectResponse)
	err := c.cc.Invoke(ctx, SearchService_IndexJsonObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SearchService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, SearchService_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SearchDocuments(ctx context.Context, in *SearchDocumentsRequest, opts ...grpc.CallOption) (SearchService_SearchDocumentsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[0], SearchService_SearchDocuments_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &searchServiceSearchDocumentsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SearchService_SearchDocumentsClient interface {
	Recv() (*SearchDocumentsResponse, error)
	grpc.ClientStream
}

type searchServiceSearchDocumentsClient struct {
	grpc.ClientStream
}

func (x *searchServiceSearchDocumentsClient) Recv() (*SearchDocumentsResponse, error) {
	m := new(SearchDocumentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations should embed UnimplementedSearchServiceServer
// for forward compatibility
//
// Service definition for Search.
type SearchServiceServer interface {
	// Stop the server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// *
	// Return the version number of the search engine.
	GetEngineVersion(context.Context, *GetEngineVersionRequest) (*GetEngineVersionResponse, error)
	// *
	// Index a JSON object or an array of objects.
	IndexJsonObject(context.Context, *IndexJsonObjectRequest) (*IndexJsonObjectResponse, error)
	// *
	// Get the count of documents in a database.
	Count(context.Context, *CountRequest) (*CountResponse, error)
	// *
	// Remove a document from the database.
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	// *
	// Search for documents based on the query.
	SearchDocuments(*SearchDocumentsRequest, SearchService_SearchDocumentsServer) error
}

// UnimplementedSearchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSearchServiceServer struct {
}

func (UnimplementedSearchServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedSearchServiceServer) GetEngineVersion(context.Context, *GetEngineVersionRequest) (*GetEngineVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngineVersion not implemented")
}
func (UnimplementedSearchServiceServer) IndexJsonObject(context.Context, *IndexJsonObjectRequest) (*IndexJsonObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexJsonObject not implemented")
}
func (UnimplementedSearchServiceServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedSearchServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedSearchServiceServer) SearchDocuments(*SearchDocumentsRequest, SearchService_SearchDocumentsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchDocuments not implemented")
}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetEngineVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEngineVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).GetEngineVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_GetEngineVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).GetEngineVersion(ctx, req.(*GetEngineVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_IndexJsonObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexJsonObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).IndexJsonObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_IndexJsonObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).IndexJsonObject(ctx, req.(*IndexJsonObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SearchDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchDocumentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServiceServer).SearchDocuments(m, &searchServiceSearchDocumentsServer{ServerStream: stream})
}

type SearchService_SearchDocumentsServer interface {
	Send(*SearchDocumentsResponse) error
	grpc.ServerStream
}

type searchServiceSearchDocumentsServer struct {
	grpc.ServerStream
}

func (x *searchServiceSearchDocumentsServer) Send(m *SearchDocumentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _SearchService_Stop_Handler,
		},
		{
			MethodName: "GetEngineVersion",
			Handler:    _SearchService_GetEngineVersion_Handler,
		},
		{
			MethodName: "IndexJsonObject",
			Handler:    _SearchService_IndexJsonObject_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _SearchService_Count_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _SearchService_DeleteDocument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchDocuments",
			Handler:       _SearchService_SearchDocuments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "search.proto",
}
