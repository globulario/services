//*
// You can use echo as starter project.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: catalog.proto

package catalogpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CatalogService_Stop_FullMethodName                         = "/catalog.CatalogService/Stop"
	CatalogService_CreateConnection_FullMethodName             = "/catalog.CatalogService/CreateConnection"
	CatalogService_DeleteConnection_FullMethodName             = "/catalog.CatalogService/DeleteConnection"
	CatalogService_SaveUnitOfMeasure_FullMethodName            = "/catalog.CatalogService/SaveUnitOfMeasure"
	CatalogService_SavePropertyDefinition_FullMethodName       = "/catalog.CatalogService/SavePropertyDefinition"
	CatalogService_SaveItemDefinition_FullMethodName           = "/catalog.CatalogService/SaveItemDefinition"
	CatalogService_SaveItemInstance_FullMethodName             = "/catalog.CatalogService/SaveItemInstance"
	CatalogService_SaveInventory_FullMethodName                = "/catalog.CatalogService/SaveInventory"
	CatalogService_SaveManufacturer_FullMethodName             = "/catalog.CatalogService/SaveManufacturer"
	CatalogService_SaveSupplier_FullMethodName                 = "/catalog.CatalogService/SaveSupplier"
	CatalogService_SaveLocalisation_FullMethodName             = "/catalog.CatalogService/SaveLocalisation"
	CatalogService_SavePackage_FullMethodName                  = "/catalog.CatalogService/SavePackage"
	CatalogService_SavePackageSupplier_FullMethodName          = "/catalog.CatalogService/SavePackageSupplier"
	CatalogService_SaveItemManufacturer_FullMethodName         = "/catalog.CatalogService/SaveItemManufacturer"
	CatalogService_SaveCategory_FullMethodName                 = "/catalog.CatalogService/SaveCategory"
	CatalogService_AppendItemDefinitionCategory_FullMethodName = "/catalog.CatalogService/AppendItemDefinitionCategory"
	CatalogService_RemoveItemDefinitionCategory_FullMethodName = "/catalog.CatalogService/RemoveItemDefinitionCategory"
	CatalogService_GetSupplier_FullMethodName                  = "/catalog.CatalogService/getSupplier"
	CatalogService_GetSuppliers_FullMethodName                 = "/catalog.CatalogService/getSuppliers"
	CatalogService_GetManufacturer_FullMethodName              = "/catalog.CatalogService/getManufacturer"
	CatalogService_GetManufacturers_FullMethodName             = "/catalog.CatalogService/getManufacturers"
	CatalogService_GetSupplierPackages_FullMethodName          = "/catalog.CatalogService/getSupplierPackages"
	CatalogService_GetPackage_FullMethodName                   = "/catalog.CatalogService/getPackage"
	CatalogService_GetPackages_FullMethodName                  = "/catalog.CatalogService/getPackages"
	CatalogService_GetUnitOfMeasure_FullMethodName             = "/catalog.CatalogService/getUnitOfMeasure"
	CatalogService_GetUnitOfMeasures_FullMethodName            = "/catalog.CatalogService/getUnitOfMeasures"
	CatalogService_GetItemDefinition_FullMethodName            = "/catalog.CatalogService/getItemDefinition"
	CatalogService_GetItemDefinitions_FullMethodName           = "/catalog.CatalogService/getItemDefinitions"
	CatalogService_GetItemInstance_FullMethodName              = "/catalog.CatalogService/getItemInstance"
	CatalogService_GetItemInstances_FullMethodName             = "/catalog.CatalogService/getItemInstances"
	CatalogService_GetLocalisation_FullMethodName              = "/catalog.CatalogService/getLocalisation"
	CatalogService_GetLocalisations_FullMethodName             = "/catalog.CatalogService/getLocalisations"
	CatalogService_GetCategory_FullMethodName                  = "/catalog.CatalogService/getCategory"
	CatalogService_GetCategories_FullMethodName                = "/catalog.CatalogService/getCategories"
	CatalogService_GetInventories_FullMethodName               = "/catalog.CatalogService/getInventories"
	CatalogService_DeleteInventory_FullMethodName              = "/catalog.CatalogService/deleteInventory"
	CatalogService_DeletePackage_FullMethodName                = "/catalog.CatalogService/deletePackage"
	CatalogService_DeletePackageSupplier_FullMethodName        = "/catalog.CatalogService/deletePackageSupplier"
	CatalogService_DeleteSupplier_FullMethodName               = "/catalog.CatalogService/deleteSupplier"
	CatalogService_DeletePropertyDefinition_FullMethodName     = "/catalog.CatalogService/deletePropertyDefinition"
	CatalogService_DeleteUnitOfMeasure_FullMethodName          = "/catalog.CatalogService/deleteUnitOfMeasure"
	CatalogService_DeleteItemInstance_FullMethodName           = "/catalog.CatalogService/deleteItemInstance"
	CatalogService_DeleteManufacturer_FullMethodName           = "/catalog.CatalogService/deleteManufacturer"
	CatalogService_DeleteItemManufacturer_FullMethodName       = "/catalog.CatalogService/deleteItemManufacturer"
	CatalogService_DeleteCategory_FullMethodName               = "/catalog.CatalogService/deleteCategory"
	CatalogService_DeleteLocalisation_FullMethodName           = "/catalog.CatalogService/deleteLocalisation"
)

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	// Stop the server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Save a connection.
	CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error)
	// Delete a connection.
	DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error)
	// Save unit of measure exemple inch
	SaveUnitOfMeasure(ctx context.Context, in *SaveUnitOfMeasureRequest, opts ...grpc.CallOption) (*SaveUnitOfMeasureResponse, error)
	// Save property definition return the Id of the Saved property
	SavePropertyDefinition(ctx context.Context, in *SavePropertyDefinitionRequest, opts ...grpc.CallOption) (*SavePropertyDefinitionResponse, error)
	// Save item definition.
	SaveItemDefinition(ctx context.Context, in *SaveItemDefinitionRequest, opts ...grpc.CallOption) (*SaveItemDefinitionResponse, error)
	// Save item
	SaveItemInstance(ctx context.Context, in *SaveItemInstanceRequest, opts ...grpc.CallOption) (*SaveItemInstanceResponse, error)
	// Save inventory
	SaveInventory(ctx context.Context, in *SaveInventoryRequest, opts ...grpc.CallOption) (*SaveInventoryResponse, error)
	// Save Manufacturer
	SaveManufacturer(ctx context.Context, in *SaveManufacturerRequest, opts ...grpc.CallOption) (*SaveManufacturerResponse, error)
	// Save Supplier
	SaveSupplier(ctx context.Context, in *SaveSupplierRequest, opts ...grpc.CallOption) (*SaveSupplierResponse, error)
	// Save localisation
	SaveLocalisation(ctx context.Context, in *SaveLocalisationRequest, opts ...grpc.CallOption) (*SaveLocalisationResponse, error)
	// Save Package
	SavePackage(ctx context.Context, in *SavePackageRequest, opts ...grpc.CallOption) (*SavePackageResponse, error)
	// Save Package Supplier
	SavePackageSupplier(ctx context.Context, in *SavePackageSupplierRequest, opts ...grpc.CallOption) (*SavePackageSupplierResponse, error)
	// Save Item Manufacturer
	SaveItemManufacturer(ctx context.Context, in *SaveItemManufacturerRequest, opts ...grpc.CallOption) (*SaveItemManufacturerResponse, error)
	// Save Item Category
	SaveCategory(ctx context.Context, in *SaveCategoryRequest, opts ...grpc.CallOption) (*SaveCategoryResponse, error)
	// Append a Category to item definition.
	AppendItemDefinitionCategory(ctx context.Context, in *AppendItemDefinitionCategoryRequest, opts ...grpc.CallOption) (*AppendItemDefinitionCategoryResponse, error)
	// Remove a Category from item definition.
	RemoveItemDefinitionCategory(ctx context.Context, in *RemoveItemDefinitionCategoryRequest, opts ...grpc.CallOption) (*RemoveItemDefinitionCategoryResponse, error)
	// Get supplier
	GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierResponse, error)
	GetSuppliers(ctx context.Context, in *GetSuppliersRequest, opts ...grpc.CallOption) (*GetSuppliersResponse, error)
	// Get manufacturers
	GetManufacturer(ctx context.Context, in *GetManufacturerRequest, opts ...grpc.CallOption) (*GetManufacturerResponse, error)
	GetManufacturers(ctx context.Context, in *GetManufacturersRequest, opts ...grpc.CallOption) (*GetManufacturersResponse, error)
	// Get Supplier Packages
	GetSupplierPackages(ctx context.Context, in *GetSupplierPackagesRequest, opts ...grpc.CallOption) (*GetSupplierPackagesResponse, error)
	// Getter function for pacakge.
	GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error)
	GetPackages(ctx context.Context, in *GetPackagesRequest, opts ...grpc.CallOption) (*GetPackagesResponse, error)
	// Getter for unit of measure
	GetUnitOfMeasure(ctx context.Context, in *GetUnitOfMeasureRequest, opts ...grpc.CallOption) (*GetUnitOfMeasureResponse, error)
	GetUnitOfMeasures(ctx context.Context, in *GetUnitOfMeasuresRequest, opts ...grpc.CallOption) (*GetUnitOfMeasuresResponse, error)
	// Getter for Item definition
	GetItemDefinition(ctx context.Context, in *GetItemDefinitionRequest, opts ...grpc.CallOption) (*GetItemDefinitionResponse, error)
	GetItemDefinitions(ctx context.Context, in *GetItemDefinitionsRequest, opts ...grpc.CallOption) (*GetItemDefinitionsResponse, error)
	// Getter for Item instance
	GetItemInstance(ctx context.Context, in *GetItemInstanceRequest, opts ...grpc.CallOption) (*GetItemInstanceResponse, error)
	GetItemInstances(ctx context.Context, in *GetItemInstancesRequest, opts ...grpc.CallOption) (*GetItemInstancesResponse, error)
	// Getter for localisation
	GetLocalisation(ctx context.Context, in *GetLocalisationRequest, opts ...grpc.CallOption) (*GetLocalisationResponse, error)
	GetLocalisations(ctx context.Context, in *GetLocalisationsRequest, opts ...grpc.CallOption) (*GetLocalisationsResponse, error)
	// Getter for localisation
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
	GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
	// Get the inventories
	GetInventories(ctx context.Context, in *GetInventoriesRequest, opts ...grpc.CallOption) (*GetInventoriesResponse, error)
	// Delete inventory.
	DeleteInventory(ctx context.Context, in *DeleteInventoryRequest, opts ...grpc.CallOption) (*DeleteInventoryResponse, error)
	// Delete a package.
	DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...grpc.CallOption) (*DeletePackageResponse, error)
	// Delete a package supplier
	DeletePackageSupplier(ctx context.Context, in *DeletePackageSupplierRequest, opts ...grpc.CallOption) (*DeletePackageSupplierResponse, error)
	// Delete a supplier
	DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error)
	// Delete propertie definition
	DeletePropertyDefinition(ctx context.Context, in *DeletePropertyDefinitionRequest, opts ...grpc.CallOption) (*DeletePropertyDefinitionResponse, error)
	// Delete unit of measure
	DeleteUnitOfMeasure(ctx context.Context, in *DeleteUnitOfMeasureRequest, opts ...grpc.CallOption) (*DeleteUnitOfMeasureResponse, error)
	// Delete Item Instance
	DeleteItemInstance(ctx context.Context, in *DeleteItemInstanceRequest, opts ...grpc.CallOption) (*DeleteItemInstanceResponse, error)
	// Delete Manufacturer
	DeleteManufacturer(ctx context.Context, in *DeleteManufacturerRequest, opts ...grpc.CallOption) (*DeleteManufacturerResponse, error)
	// Delete Item Manufacturer
	DeleteItemManufacturer(ctx context.Context, in *DeleteItemManufacturerRequest, opts ...grpc.CallOption) (*DeleteItemManufacturerResponse, error)
	// Delete Category
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
	// Delete Localisation
	DeleteLocalisation(ctx context.Context, in *DeleteLocalisationRequest, opts ...grpc.CallOption) (*DeleteLocalisationResponse, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, CatalogService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRqst, opts ...grpc.CallOption) (*CreateConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConnectionRsp)
	err := c.cc.Invoke(ctx, CatalogService_CreateConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRqst, opts ...grpc.CallOption) (*DeleteConnectionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConnectionRsp)
	err := c.cc.Invoke(ctx, CatalogService_DeleteConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SaveUnitOfMeasure(ctx context.Context, in *SaveUnitOfMeasureRequest, opts ...grpc.CallOption) (*SaveUnitOfMeasureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveUnitOfMeasureResponse)
	err := c.cc.Invoke(ctx, CatalogService_SaveUnitOfMeasure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SavePropertyDefinition(ctx context.Context, in *SavePropertyDefinitionRequest, opts ...grpc.CallOption) (*SavePropertyDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SavePropertyDefinitionResponse)
	err := c.cc.Invoke(ctx, CatalogService_SavePropertyDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SaveItemDefinition(ctx context.Context, in *SaveItemDefinitionRequest, opts ...grpc.CallOption) (*SaveItemDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveItemDefinitionResponse)
	err := c.cc.Invoke(ctx, CatalogService_SaveItemDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SaveItemInstance(ctx context.Context, in *SaveItemInstanceRequest, opts ...grpc.CallOption) (*SaveItemInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveItemInstanceResponse)
	err := c.cc.Invoke(ctx, CatalogService_SaveItemInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SaveInventory(ctx context.Context, in *SaveInventoryRequest, opts ...grpc.CallOption) (*SaveInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveInventoryResponse)
	err := c.cc.Invoke(ctx, CatalogService_SaveInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SaveManufacturer(ctx context.Context, in *SaveManufacturerRequest, opts ...grpc.CallOption) (*SaveManufacturerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveManufacturerResponse)
	err := c.cc.Invoke(ctx, CatalogService_SaveManufacturer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SaveSupplier(ctx context.Context, in *SaveSupplierRequest, opts ...grpc.CallOption) (*SaveSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveSupplierResponse)
	err := c.cc.Invoke(ctx, CatalogService_SaveSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SaveLocalisation(ctx context.Context, in *SaveLocalisationRequest, opts ...grpc.CallOption) (*SaveLocalisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveLocalisationResponse)
	err := c.cc.Invoke(ctx, CatalogService_SaveLocalisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SavePackage(ctx context.Context, in *SavePackageRequest, opts ...grpc.CallOption) (*SavePackageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SavePackageResponse)
	err := c.cc.Invoke(ctx, CatalogService_SavePackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SavePackageSupplier(ctx context.Context, in *SavePackageSupplierRequest, opts ...grpc.CallOption) (*SavePackageSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SavePackageSupplierResponse)
	err := c.cc.Invoke(ctx, CatalogService_SavePackageSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SaveItemManufacturer(ctx context.Context, in *SaveItemManufacturerRequest, opts ...grpc.CallOption) (*SaveItemManufacturerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveItemManufacturerResponse)
	err := c.cc.Invoke(ctx, CatalogService_SaveItemManufacturer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) SaveCategory(ctx context.Context, in *SaveCategoryRequest, opts ...grpc.CallOption) (*SaveCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveCategoryResponse)
	err := c.cc.Invoke(ctx, CatalogService_SaveCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) AppendItemDefinitionCategory(ctx context.Context, in *AppendItemDefinitionCategoryRequest, opts ...grpc.CallOption) (*AppendItemDefinitionCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendItemDefinitionCategoryResponse)
	err := c.cc.Invoke(ctx, CatalogService_AppendItemDefinitionCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) RemoveItemDefinitionCategory(ctx context.Context, in *RemoveItemDefinitionCategoryRequest, opts ...grpc.CallOption) (*RemoveItemDefinitionCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveItemDefinitionCategoryResponse)
	err := c.cc.Invoke(ctx, CatalogService_RemoveItemDefinitionCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupplierResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetSuppliers(ctx context.Context, in *GetSuppliersRequest, opts ...grpc.CallOption) (*GetSuppliersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSuppliersResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetSuppliers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetManufacturer(ctx context.Context, in *GetManufacturerRequest, opts ...grpc.CallOption) (*GetManufacturerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetManufacturerResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetManufacturer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetManufacturers(ctx context.Context, in *GetManufacturersRequest, opts ...grpc.CallOption) (*GetManufacturersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetManufacturersResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetManufacturers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetSupplierPackages(ctx context.Context, in *GetSupplierPackagesRequest, opts ...grpc.CallOption) (*GetSupplierPackagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupplierPackagesResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetSupplierPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPackageResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetPackages(ctx context.Context, in *GetPackagesRequest, opts ...grpc.CallOption) (*GetPackagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPackagesResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetUnitOfMeasure(ctx context.Context, in *GetUnitOfMeasureRequest, opts ...grpc.CallOption) (*GetUnitOfMeasureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnitOfMeasureResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetUnitOfMeasure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetUnitOfMeasures(ctx context.Context, in *GetUnitOfMeasuresRequest, opts ...grpc.CallOption) (*GetUnitOfMeasuresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnitOfMeasuresResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetUnitOfMeasures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetItemDefinition(ctx context.Context, in *GetItemDefinitionRequest, opts ...grpc.CallOption) (*GetItemDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemDefinitionResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetItemDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetItemDefinitions(ctx context.Context, in *GetItemDefinitionsRequest, opts ...grpc.CallOption) (*GetItemDefinitionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemDefinitionsResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetItemDefinitions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetItemInstance(ctx context.Context, in *GetItemInstanceRequest, opts ...grpc.CallOption) (*GetItemInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemInstanceResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetItemInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetItemInstances(ctx context.Context, in *GetItemInstancesRequest, opts ...grpc.CallOption) (*GetItemInstancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemInstancesResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetItemInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetLocalisation(ctx context.Context, in *GetLocalisationRequest, opts ...grpc.CallOption) (*GetLocalisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocalisationResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetLocalisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetLocalisations(ctx context.Context, in *GetLocalisationsRequest, opts ...grpc.CallOption) (*GetLocalisationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocalisationsResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetLocalisations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoryResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetInventories(ctx context.Context, in *GetInventoriesRequest, opts ...grpc.CallOption) (*GetInventoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoriesResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetInventories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteInventory(ctx context.Context, in *DeleteInventoryRequest, opts ...grpc.CallOption) (*DeleteInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInventoryResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeleteInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...grpc.CallOption) (*DeletePackageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePackageResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeletePackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeletePackageSupplier(ctx context.Context, in *DeletePackageSupplierRequest, opts ...grpc.CallOption) (*DeletePackageSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePackageSupplierResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeletePackageSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSupplierResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeleteSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeletePropertyDefinition(ctx context.Context, in *DeletePropertyDefinitionRequest, opts ...grpc.CallOption) (*DeletePropertyDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePropertyDefinitionResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeletePropertyDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteUnitOfMeasure(ctx context.Context, in *DeleteUnitOfMeasureRequest, opts ...grpc.CallOption) (*DeleteUnitOfMeasureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUnitOfMeasureResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeleteUnitOfMeasure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteItemInstance(ctx context.Context, in *DeleteItemInstanceRequest, opts ...grpc.CallOption) (*DeleteItemInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteItemInstanceResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeleteItemInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteManufacturer(ctx context.Context, in *DeleteManufacturerRequest, opts ...grpc.CallOption) (*DeleteManufacturerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteManufacturerResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeleteManufacturer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteItemManufacturer(ctx context.Context, in *DeleteItemManufacturerRequest, opts ...grpc.CallOption) (*DeleteItemManufacturerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteItemManufacturerResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeleteItemManufacturer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteLocalisation(ctx context.Context, in *DeleteLocalisationRequest, opts ...grpc.CallOption) (*DeleteLocalisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLocalisationResponse)
	err := c.cc.Invoke(ctx, CatalogService_DeleteLocalisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations should embed UnimplementedCatalogServiceServer
// for forward compatibility
type CatalogServiceServer interface {
	// Stop the server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Save a connection.
	CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error)
	// Delete a connection.
	DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error)
	// Save unit of measure exemple inch
	SaveUnitOfMeasure(context.Context, *SaveUnitOfMeasureRequest) (*SaveUnitOfMeasureResponse, error)
	// Save property definition return the Id of the Saved property
	SavePropertyDefinition(context.Context, *SavePropertyDefinitionRequest) (*SavePropertyDefinitionResponse, error)
	// Save item definition.
	SaveItemDefinition(context.Context, *SaveItemDefinitionRequest) (*SaveItemDefinitionResponse, error)
	// Save item
	SaveItemInstance(context.Context, *SaveItemInstanceRequest) (*SaveItemInstanceResponse, error)
	// Save inventory
	SaveInventory(context.Context, *SaveInventoryRequest) (*SaveInventoryResponse, error)
	// Save Manufacturer
	SaveManufacturer(context.Context, *SaveManufacturerRequest) (*SaveManufacturerResponse, error)
	// Save Supplier
	SaveSupplier(context.Context, *SaveSupplierRequest) (*SaveSupplierResponse, error)
	// Save localisation
	SaveLocalisation(context.Context, *SaveLocalisationRequest) (*SaveLocalisationResponse, error)
	// Save Package
	SavePackage(context.Context, *SavePackageRequest) (*SavePackageResponse, error)
	// Save Package Supplier
	SavePackageSupplier(context.Context, *SavePackageSupplierRequest) (*SavePackageSupplierResponse, error)
	// Save Item Manufacturer
	SaveItemManufacturer(context.Context, *SaveItemManufacturerRequest) (*SaveItemManufacturerResponse, error)
	// Save Item Category
	SaveCategory(context.Context, *SaveCategoryRequest) (*SaveCategoryResponse, error)
	// Append a Category to item definition.
	AppendItemDefinitionCategory(context.Context, *AppendItemDefinitionCategoryRequest) (*AppendItemDefinitionCategoryResponse, error)
	// Remove a Category from item definition.
	RemoveItemDefinitionCategory(context.Context, *RemoveItemDefinitionCategoryRequest) (*RemoveItemDefinitionCategoryResponse, error)
	// Get supplier
	GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierResponse, error)
	GetSuppliers(context.Context, *GetSuppliersRequest) (*GetSuppliersResponse, error)
	// Get manufacturers
	GetManufacturer(context.Context, *GetManufacturerRequest) (*GetManufacturerResponse, error)
	GetManufacturers(context.Context, *GetManufacturersRequest) (*GetManufacturersResponse, error)
	// Get Supplier Packages
	GetSupplierPackages(context.Context, *GetSupplierPackagesRequest) (*GetSupplierPackagesResponse, error)
	// Getter function for pacakge.
	GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error)
	GetPackages(context.Context, *GetPackagesRequest) (*GetPackagesResponse, error)
	// Getter for unit of measure
	GetUnitOfMeasure(context.Context, *GetUnitOfMeasureRequest) (*GetUnitOfMeasureResponse, error)
	GetUnitOfMeasures(context.Context, *GetUnitOfMeasuresRequest) (*GetUnitOfMeasuresResponse, error)
	// Getter for Item definition
	GetItemDefinition(context.Context, *GetItemDefinitionRequest) (*GetItemDefinitionResponse, error)
	GetItemDefinitions(context.Context, *GetItemDefinitionsRequest) (*GetItemDefinitionsResponse, error)
	// Getter for Item instance
	GetItemInstance(context.Context, *GetItemInstanceRequest) (*GetItemInstanceResponse, error)
	GetItemInstances(context.Context, *GetItemInstancesRequest) (*GetItemInstancesResponse, error)
	// Getter for localisation
	GetLocalisation(context.Context, *GetLocalisationRequest) (*GetLocalisationResponse, error)
	GetLocalisations(context.Context, *GetLocalisationsRequest) (*GetLocalisationsResponse, error)
	// Getter for localisation
	GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error)
	GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error)
	// Get the inventories
	GetInventories(context.Context, *GetInventoriesRequest) (*GetInventoriesResponse, error)
	// Delete inventory.
	DeleteInventory(context.Context, *DeleteInventoryRequest) (*DeleteInventoryResponse, error)
	// Delete a package.
	DeletePackage(context.Context, *DeletePackageRequest) (*DeletePackageResponse, error)
	// Delete a package supplier
	DeletePackageSupplier(context.Context, *DeletePackageSupplierRequest) (*DeletePackageSupplierResponse, error)
	// Delete a supplier
	DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error)
	// Delete propertie definition
	DeletePropertyDefinition(context.Context, *DeletePropertyDefinitionRequest) (*DeletePropertyDefinitionResponse, error)
	// Delete unit of measure
	DeleteUnitOfMeasure(context.Context, *DeleteUnitOfMeasureRequest) (*DeleteUnitOfMeasureResponse, error)
	// Delete Item Instance
	DeleteItemInstance(context.Context, *DeleteItemInstanceRequest) (*DeleteItemInstanceResponse, error)
	// Delete Manufacturer
	DeleteManufacturer(context.Context, *DeleteManufacturerRequest) (*DeleteManufacturerResponse, error)
	// Delete Item Manufacturer
	DeleteItemManufacturer(context.Context, *DeleteItemManufacturerRequest) (*DeleteItemManufacturerResponse, error)
	// Delete Category
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error)
	// Delete Localisation
	DeleteLocalisation(context.Context, *DeleteLocalisationRequest) (*DeleteLocalisationResponse, error)
}

// UnimplementedCatalogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCatalogServiceServer struct {
}

func (UnimplementedCatalogServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedCatalogServiceServer) CreateConnection(context.Context, *CreateConnectionRqst) (*CreateConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteConnection(context.Context, *DeleteConnectionRqst) (*DeleteConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedCatalogServiceServer) SaveUnitOfMeasure(context.Context, *SaveUnitOfMeasureRequest) (*SaveUnitOfMeasureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUnitOfMeasure not implemented")
}
func (UnimplementedCatalogServiceServer) SavePropertyDefinition(context.Context, *SavePropertyDefinitionRequest) (*SavePropertyDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePropertyDefinition not implemented")
}
func (UnimplementedCatalogServiceServer) SaveItemDefinition(context.Context, *SaveItemDefinitionRequest) (*SaveItemDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveItemDefinition not implemented")
}
func (UnimplementedCatalogServiceServer) SaveItemInstance(context.Context, *SaveItemInstanceRequest) (*SaveItemInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveItemInstance not implemented")
}
func (UnimplementedCatalogServiceServer) SaveInventory(context.Context, *SaveInventoryRequest) (*SaveInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveInventory not implemented")
}
func (UnimplementedCatalogServiceServer) SaveManufacturer(context.Context, *SaveManufacturerRequest) (*SaveManufacturerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveManufacturer not implemented")
}
func (UnimplementedCatalogServiceServer) SaveSupplier(context.Context, *SaveSupplierRequest) (*SaveSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSupplier not implemented")
}
func (UnimplementedCatalogServiceServer) SaveLocalisation(context.Context, *SaveLocalisationRequest) (*SaveLocalisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLocalisation not implemented")
}
func (UnimplementedCatalogServiceServer) SavePackage(context.Context, *SavePackageRequest) (*SavePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePackage not implemented")
}
func (UnimplementedCatalogServiceServer) SavePackageSupplier(context.Context, *SavePackageSupplierRequest) (*SavePackageSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePackageSupplier not implemented")
}
func (UnimplementedCatalogServiceServer) SaveItemManufacturer(context.Context, *SaveItemManufacturerRequest) (*SaveItemManufacturerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveItemManufacturer not implemented")
}
func (UnimplementedCatalogServiceServer) SaveCategory(context.Context, *SaveCategoryRequest) (*SaveCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCategory not implemented")
}
func (UnimplementedCatalogServiceServer) AppendItemDefinitionCategory(context.Context, *AppendItemDefinitionCategoryRequest) (*AppendItemDefinitionCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendItemDefinitionCategory not implemented")
}
func (UnimplementedCatalogServiceServer) RemoveItemDefinitionCategory(context.Context, *RemoveItemDefinitionCategoryRequest) (*RemoveItemDefinitionCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItemDefinitionCategory not implemented")
}
func (UnimplementedCatalogServiceServer) GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplier not implemented")
}
func (UnimplementedCatalogServiceServer) GetSuppliers(context.Context, *GetSuppliersRequest) (*GetSuppliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuppliers not implemented")
}
func (UnimplementedCatalogServiceServer) GetManufacturer(context.Context, *GetManufacturerRequest) (*GetManufacturerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManufacturer not implemented")
}
func (UnimplementedCatalogServiceServer) GetManufacturers(context.Context, *GetManufacturersRequest) (*GetManufacturersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManufacturers not implemented")
}
func (UnimplementedCatalogServiceServer) GetSupplierPackages(context.Context, *GetSupplierPackagesRequest) (*GetSupplierPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplierPackages not implemented")
}
func (UnimplementedCatalogServiceServer) GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (UnimplementedCatalogServiceServer) GetPackages(context.Context, *GetPackagesRequest) (*GetPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackages not implemented")
}
func (UnimplementedCatalogServiceServer) GetUnitOfMeasure(context.Context, *GetUnitOfMeasureRequest) (*GetUnitOfMeasureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitOfMeasure not implemented")
}
func (UnimplementedCatalogServiceServer) GetUnitOfMeasures(context.Context, *GetUnitOfMeasuresRequest) (*GetUnitOfMeasuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitOfMeasures not implemented")
}
func (UnimplementedCatalogServiceServer) GetItemDefinition(context.Context, *GetItemDefinitionRequest) (*GetItemDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemDefinition not implemented")
}
func (UnimplementedCatalogServiceServer) GetItemDefinitions(context.Context, *GetItemDefinitionsRequest) (*GetItemDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemDefinitions not implemented")
}
func (UnimplementedCatalogServiceServer) GetItemInstance(context.Context, *GetItemInstanceRequest) (*GetItemInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemInstance not implemented")
}
func (UnimplementedCatalogServiceServer) GetItemInstances(context.Context, *GetItemInstancesRequest) (*GetItemInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemInstances not implemented")
}
func (UnimplementedCatalogServiceServer) GetLocalisation(context.Context, *GetLocalisationRequest) (*GetLocalisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalisation not implemented")
}
func (UnimplementedCatalogServiceServer) GetLocalisations(context.Context, *GetLocalisationsRequest) (*GetLocalisationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalisations not implemented")
}
func (UnimplementedCatalogServiceServer) GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedCatalogServiceServer) GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedCatalogServiceServer) GetInventories(context.Context, *GetInventoriesRequest) (*GetInventoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventories not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteInventory(context.Context, *DeleteInventoryRequest) (*DeleteInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInventory not implemented")
}
func (UnimplementedCatalogServiceServer) DeletePackage(context.Context, *DeletePackageRequest) (*DeletePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackage not implemented")
}
func (UnimplementedCatalogServiceServer) DeletePackageSupplier(context.Context, *DeletePackageSupplierRequest) (*DeletePackageSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackageSupplier not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupplier not implemented")
}
func (UnimplementedCatalogServiceServer) DeletePropertyDefinition(context.Context, *DeletePropertyDefinitionRequest) (*DeletePropertyDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePropertyDefinition not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteUnitOfMeasure(context.Context, *DeleteUnitOfMeasureRequest) (*DeleteUnitOfMeasureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnitOfMeasure not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteItemInstance(context.Context, *DeleteItemInstanceRequest) (*DeleteItemInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemInstance not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteManufacturer(context.Context, *DeleteManufacturerRequest) (*DeleteManufacturerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManufacturer not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteItemManufacturer(context.Context, *DeleteItemManufacturerRequest) (*DeleteItemManufacturerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemManufacturer not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCatalogServiceServer) DeleteLocalisation(context.Context, *DeleteLocalisationRequest) (*DeleteLocalisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocalisation not implemented")
}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateConnection(ctx, req.(*CreateConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRqst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteConnection(ctx, req.(*DeleteConnectionRqst))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SaveUnitOfMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUnitOfMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SaveUnitOfMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SaveUnitOfMeasure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SaveUnitOfMeasure(ctx, req.(*SaveUnitOfMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SavePropertyDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePropertyDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SavePropertyDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SavePropertyDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SavePropertyDefinition(ctx, req.(*SavePropertyDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SaveItemDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveItemDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SaveItemDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SaveItemDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SaveItemDefinition(ctx, req.(*SaveItemDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SaveItemInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveItemInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SaveItemInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SaveItemInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SaveItemInstance(ctx, req.(*SaveItemInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SaveInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SaveInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SaveInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SaveInventory(ctx, req.(*SaveInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SaveManufacturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveManufacturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SaveManufacturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SaveManufacturer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SaveManufacturer(ctx, req.(*SaveManufacturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SaveSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SaveSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SaveSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SaveSupplier(ctx, req.(*SaveSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SaveLocalisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLocalisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SaveLocalisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SaveLocalisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SaveLocalisation(ctx, req.(*SaveLocalisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SavePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SavePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SavePackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SavePackage(ctx, req.(*SavePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SavePackageSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePackageSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SavePackageSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SavePackageSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SavePackageSupplier(ctx, req.(*SavePackageSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SaveItemManufacturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveItemManufacturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SaveItemManufacturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SaveItemManufacturer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SaveItemManufacturer(ctx, req.(*SaveItemManufacturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_SaveCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).SaveCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_SaveCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).SaveCategory(ctx, req.(*SaveCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_AppendItemDefinitionCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendItemDefinitionCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).AppendItemDefinitionCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_AppendItemDefinitionCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).AppendItemDefinitionCategory(ctx, req.(*AppendItemDefinitionCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_RemoveItemDefinitionCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemDefinitionCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).RemoveItemDefinitionCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_RemoveItemDefinitionCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).RemoveItemDefinitionCategory(ctx, req.(*RemoveItemDefinitionCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetSupplier(ctx, req.(*GetSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetSuppliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuppliersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetSuppliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetSuppliers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetSuppliers(ctx, req.(*GetSuppliersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetManufacturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManufacturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetManufacturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetManufacturer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetManufacturer(ctx, req.(*GetManufacturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetManufacturers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManufacturersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetManufacturers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetManufacturers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetManufacturers(ctx, req.(*GetManufacturersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetSupplierPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplierPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetSupplierPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetSupplierPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetSupplierPackages(ctx, req.(*GetSupplierPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetPackage(ctx, req.(*GetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetPackages(ctx, req.(*GetPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetUnitOfMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnitOfMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetUnitOfMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetUnitOfMeasure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetUnitOfMeasure(ctx, req.(*GetUnitOfMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetUnitOfMeasures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnitOfMeasuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetUnitOfMeasures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetUnitOfMeasures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetUnitOfMeasures(ctx, req.(*GetUnitOfMeasuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetItemDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetItemDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetItemDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetItemDefinition(ctx, req.(*GetItemDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetItemDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetItemDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetItemDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetItemDefinitions(ctx, req.(*GetItemDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetItemInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetItemInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetItemInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetItemInstance(ctx, req.(*GetItemInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetItemInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetItemInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetItemInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetItemInstances(ctx, req.(*GetItemInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetLocalisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocalisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetLocalisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetLocalisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetLocalisation(ctx, req.(*GetLocalisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetLocalisations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocalisationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetLocalisations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetLocalisations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetLocalisations(ctx, req.(*GetLocalisationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetCategories(ctx, req.(*GetCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetInventories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetInventories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetInventories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetInventories(ctx, req.(*GetInventoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeleteInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteInventory(ctx, req.(*DeleteInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeletePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeletePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeletePackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeletePackage(ctx, req.(*DeletePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeletePackageSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePackageSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeletePackageSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeletePackageSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeletePackageSupplier(ctx, req.(*DeletePackageSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeleteSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteSupplier(ctx, req.(*DeleteSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeletePropertyDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePropertyDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeletePropertyDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeletePropertyDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeletePropertyDefinition(ctx, req.(*DeletePropertyDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteUnitOfMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnitOfMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteUnitOfMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeleteUnitOfMeasure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteUnitOfMeasure(ctx, req.(*DeleteUnitOfMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteItemInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteItemInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeleteItemInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteItemInstance(ctx, req.(*DeleteItemInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteManufacturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManufacturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteManufacturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeleteManufacturer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteManufacturer(ctx, req.(*DeleteManufacturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteItemManufacturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemManufacturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteItemManufacturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeleteItemManufacturer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteItemManufacturer(ctx, req.(*DeleteItemManufacturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteLocalisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocalisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteLocalisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_DeleteLocalisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteLocalisation(ctx, req.(*DeleteLocalisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _CatalogService_Stop_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _CatalogService_CreateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _CatalogService_DeleteConnection_Handler,
		},
		{
			MethodName: "SaveUnitOfMeasure",
			Handler:    _CatalogService_SaveUnitOfMeasure_Handler,
		},
		{
			MethodName: "SavePropertyDefinition",
			Handler:    _CatalogService_SavePropertyDefinition_Handler,
		},
		{
			MethodName: "SaveItemDefinition",
			Handler:    _CatalogService_SaveItemDefinition_Handler,
		},
		{
			MethodName: "SaveItemInstance",
			Handler:    _CatalogService_SaveItemInstance_Handler,
		},
		{
			MethodName: "SaveInventory",
			Handler:    _CatalogService_SaveInventory_Handler,
		},
		{
			MethodName: "SaveManufacturer",
			Handler:    _CatalogService_SaveManufacturer_Handler,
		},
		{
			MethodName: "SaveSupplier",
			Handler:    _CatalogService_SaveSupplier_Handler,
		},
		{
			MethodName: "SaveLocalisation",
			Handler:    _CatalogService_SaveLocalisation_Handler,
		},
		{
			MethodName: "SavePackage",
			Handler:    _CatalogService_SavePackage_Handler,
		},
		{
			MethodName: "SavePackageSupplier",
			Handler:    _CatalogService_SavePackageSupplier_Handler,
		},
		{
			MethodName: "SaveItemManufacturer",
			Handler:    _CatalogService_SaveItemManufacturer_Handler,
		},
		{
			MethodName: "SaveCategory",
			Handler:    _CatalogService_SaveCategory_Handler,
		},
		{
			MethodName: "AppendItemDefinitionCategory",
			Handler:    _CatalogService_AppendItemDefinitionCategory_Handler,
		},
		{
			MethodName: "RemoveItemDefinitionCategory",
			Handler:    _CatalogService_RemoveItemDefinitionCategory_Handler,
		},
		{
			MethodName: "getSupplier",
			Handler:    _CatalogService_GetSupplier_Handler,
		},
		{
			MethodName: "getSuppliers",
			Handler:    _CatalogService_GetSuppliers_Handler,
		},
		{
			MethodName: "getManufacturer",
			Handler:    _CatalogService_GetManufacturer_Handler,
		},
		{
			MethodName: "getManufacturers",
			Handler:    _CatalogService_GetManufacturers_Handler,
		},
		{
			MethodName: "getSupplierPackages",
			Handler:    _CatalogService_GetSupplierPackages_Handler,
		},
		{
			MethodName: "getPackage",
			Handler:    _CatalogService_GetPackage_Handler,
		},
		{
			MethodName: "getPackages",
			Handler:    _CatalogService_GetPackages_Handler,
		},
		{
			MethodName: "getUnitOfMeasure",
			Handler:    _CatalogService_GetUnitOfMeasure_Handler,
		},
		{
			MethodName: "getUnitOfMeasures",
			Handler:    _CatalogService_GetUnitOfMeasures_Handler,
		},
		{
			MethodName: "getItemDefinition",
			Handler:    _CatalogService_GetItemDefinition_Handler,
		},
		{
			MethodName: "getItemDefinitions",
			Handler:    _CatalogService_GetItemDefinitions_Handler,
		},
		{
			MethodName: "getItemInstance",
			Handler:    _CatalogService_GetItemInstance_Handler,
		},
		{
			MethodName: "getItemInstances",
			Handler:    _CatalogService_GetItemInstances_Handler,
		},
		{
			MethodName: "getLocalisation",
			Handler:    _CatalogService_GetLocalisation_Handler,
		},
		{
			MethodName: "getLocalisations",
			Handler:    _CatalogService_GetLocalisations_Handler,
		},
		{
			MethodName: "getCategory",
			Handler:    _CatalogService_GetCategory_Handler,
		},
		{
			MethodName: "getCategories",
			Handler:    _CatalogService_GetCategories_Handler,
		},
		{
			MethodName: "getInventories",
			Handler:    _CatalogService_GetInventories_Handler,
		},
		{
			MethodName: "deleteInventory",
			Handler:    _CatalogService_DeleteInventory_Handler,
		},
		{
			MethodName: "deletePackage",
			Handler:    _CatalogService_DeletePackage_Handler,
		},
		{
			MethodName: "deletePackageSupplier",
			Handler:    _CatalogService_DeletePackageSupplier_Handler,
		},
		{
			MethodName: "deleteSupplier",
			Handler:    _CatalogService_DeleteSupplier_Handler,
		},
		{
			MethodName: "deletePropertyDefinition",
			Handler:    _CatalogService_DeletePropertyDefinition_Handler,
		},
		{
			MethodName: "deleteUnitOfMeasure",
			Handler:    _CatalogService_DeleteUnitOfMeasure_Handler,
		},
		{
			MethodName: "deleteItemInstance",
			Handler:    _CatalogService_DeleteItemInstance_Handler,
		},
		{
			MethodName: "deleteManufacturer",
			Handler:    _CatalogService_DeleteManufacturer_Handler,
		},
		{
			MethodName: "deleteItemManufacturer",
			Handler:    _CatalogService_DeleteItemManufacturer_Handler,
		},
		{
			MethodName: "deleteCategory",
			Handler:    _CatalogService_DeleteCategory_Handler,
		},
		{
			MethodName: "deleteLocalisation",
			Handler:    _CatalogService_DeleteLocalisation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog.proto",
}
