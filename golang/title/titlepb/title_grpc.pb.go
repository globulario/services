// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: title.proto

package titlepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TitleService_CreatePublisher_FullMethodName         = "/title.TitleService/CreatePublisher"
	TitleService_DeletePublisher_FullMethodName         = "/title.TitleService/DeletePublisher"
	TitleService_GetPublisherById_FullMethodName        = "/title.TitleService/GetPublisherById"
	TitleService_CreatePerson_FullMethodName            = "/title.TitleService/CreatePerson"
	TitleService_DeletePerson_FullMethodName            = "/title.TitleService/DeletePerson"
	TitleService_GetPersonById_FullMethodName           = "/title.TitleService/GetPersonById"
	TitleService_CreateTitle_FullMethodName             = "/title.TitleService/CreateTitle"
	TitleService_GetTitleById_FullMethodName            = "/title.TitleService/GetTitleById"
	TitleService_DeleteTitle_FullMethodName             = "/title.TitleService/DeleteTitle"
	TitleService_UpdateTitleMetadata_FullMethodName     = "/title.TitleService/UpdateTitleMetadata"
	TitleService_CreateAudio_FullMethodName             = "/title.TitleService/CreateAudio"
	TitleService_GetAudioById_FullMethodName            = "/title.TitleService/GetAudioById"
	TitleService_GetAlbum_FullMethodName                = "/title.TitleService/GetAlbum"
	TitleService_DeleteAudio_FullMethodName             = "/title.TitleService/DeleteAudio"
	TitleService_DeleteAlbum_FullMethodName             = "/title.TitleService/DeleteAlbum"
	TitleService_CreateVideo_FullMethodName             = "/title.TitleService/CreateVideo"
	TitleService_GetVideoById_FullMethodName            = "/title.TitleService/GetVideoById"
	TitleService_DeleteVideo_FullMethodName             = "/title.TitleService/DeleteVideo"
	TitleService_UpdateVideoMetadata_FullMethodName     = "/title.TitleService/UpdateVideoMetadata"
	TitleService_AssociateFileWithTitle_FullMethodName  = "/title.TitleService/AssociateFileWithTitle"
	TitleService_DissociateFileWithTitle_FullMethodName = "/title.TitleService/DissociateFileWithTitle"
	TitleService_GetFileTitles_FullMethodName           = "/title.TitleService/GetFileTitles"
	TitleService_GetFileVideos_FullMethodName           = "/title.TitleService/GetFileVideos"
	TitleService_GetFileAudios_FullMethodName           = "/title.TitleService/GetFileAudios"
	TitleService_GetTitleFiles_FullMethodName           = "/title.TitleService/GetTitleFiles"
	TitleService_SearchTitles_FullMethodName            = "/title.TitleService/SearchTitles"
	TitleService_SearchPersons_FullMethodName           = "/title.TitleService/SearchPersons"
)

// TitleServiceClient is the client API for TitleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Service for managing and accessing title information. It provides
// functionality to retrieve and manage data about movies, series, episodes,
// and their associations with files on a peer.
type TitleServiceClient interface {
	// Creates a new publisher in the database.
	CreatePublisher(ctx context.Context, in *CreatePublisherRequest, opts ...grpc.CallOption) (*CreatePublisherResponse, error)
	// Deletes a publisher from the database.
	DeletePublisher(ctx context.Context, in *DeletePublisherRequest, opts ...grpc.CallOption) (*DeletePublisherResponse, error)
	// Retrieves a publisher's information by ID.
	GetPublisherById(ctx context.Context, in *GetPublisherByIdRequest, opts ...grpc.CallOption) (*GetPublisherByIdResponse, error)
	// Creates a new person (e.g., actor, director) in the database.
	CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error)
	// Deletes a person from the database.
	DeletePerson(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*DeletePersonResponse, error)
	// Retrieves a person's information by ID.
	GetPersonById(ctx context.Context, in *GetPersonByIdRequest, opts ...grpc.CallOption) (*GetPersonByIdResponse, error)
	// Inserts or updates a title in the database.
	CreateTitle(ctx context.Context, in *CreateTitleRequest, opts ...grpc.CallOption) (*CreateTitleResponse, error)
	// Retrieves a title by its ID.
	GetTitleById(ctx context.Context, in *GetTitleByIdRequest, opts ...grpc.CallOption) (*GetTitleByIdResponse, error)
	// Deletes a title from the database.
	DeleteTitle(ctx context.Context, in *DeleteTitleRequest, opts ...grpc.CallOption) (*DeleteTitleResponse, error)
	// Updates metadata of a title in its associated files.
	UpdateTitleMetadata(ctx context.Context, in *UpdateTitleMetadataRequest, opts ...grpc.CallOption) (*UpdateTitleMetadataResponse, error)
	// Inserts or updates audio information in the database.
	CreateAudio(ctx context.Context, in *CreateAudioRequest, opts ...grpc.CallOption) (*CreateAudioResponse, error)
	// Retrieves audio information by its ID.
	GetAudioById(ctx context.Context, in *GetAudioByIdRequest, opts ...grpc.CallOption) (*GetAudioByIdResponse, error)
	// Retrieves album information by its ID.
	GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumResponse, error)
	// Deletes an audio record from the database.
	DeleteAudio(ctx context.Context, in *DeleteAudioRequest, opts ...grpc.CallOption) (*DeleteAudioResponse, error)
	// Deletes an album from the database.
	DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumResponse, error)
	// Inserts or updates a video in the database.
	CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*CreateVideoResponse, error)
	// Retrieves a video by its ID.
	GetVideoById(ctx context.Context, in *GetVideoByIdRequest, opts ...grpc.CallOption) (*GetVideoByIdResponse, error)
	// Deletes a video from the database.
	DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error)
	// Updates metadata of a video in its associated files.
	UpdateVideoMetadata(ctx context.Context, in *UpdateVideoMetadataRequest, opts ...grpc.CallOption) (*UpdateVideoMetadataResponse, error)
	// Associates a file with a title for easier retrieval.
	AssociateFileWithTitle(ctx context.Context, in *AssociateFileWithTitleRequest, opts ...grpc.CallOption) (*AssociateFileWithTitleResponse, error)
	// Dissociates a file from a title.
	DissociateFileWithTitle(ctx context.Context, in *DissociateFileWithTitleRequest, opts ...grpc.CallOption) (*DissociateFileWithTitleResponse, error)
	// Retrieves a list of titles associated with a file.
	GetFileTitles(ctx context.Context, in *GetFileTitlesRequest, opts ...grpc.CallOption) (*GetFileTitlesResponse, error)
	// Retrieves a list of videos associated with a file.
	GetFileVideos(ctx context.Context, in *GetFileVideosRequest, opts ...grpc.CallOption) (*GetFileVideosResponse, error)
	// Retrieves a list of audios associated with a file.
	GetFileAudios(ctx context.Context, in *GetFileAudiosRequest, opts ...grpc.CallOption) (*GetFileAudiosResponse, error)
	// Retrieves a list of files associated with a title.
	GetTitleFiles(ctx context.Context, in *GetTitleFilesRequest, opts ...grpc.CallOption) (*GetTitleFilesResponse, error)
	// Searches for titles or videos based on given criteria.
	SearchTitles(ctx context.Context, in *SearchTitlesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchTitlesResponse], error)
	// Searches for persons (e.g., YouTubers, actors, directors) based on given criteria.
	SearchPersons(ctx context.Context, in *SearchPersonsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchPersonsResponse], error)
}

type titleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTitleServiceClient(cc grpc.ClientConnInterface) TitleServiceClient {
	return &titleServiceClient{cc}
}

func (c *titleServiceClient) CreatePublisher(ctx context.Context, in *CreatePublisherRequest, opts ...grpc.CallOption) (*CreatePublisherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePublisherResponse)
	err := c.cc.Invoke(ctx, TitleService_CreatePublisher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) DeletePublisher(ctx context.Context, in *DeletePublisherRequest, opts ...grpc.CallOption) (*DeletePublisherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePublisherResponse)
	err := c.cc.Invoke(ctx, TitleService_DeletePublisher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) GetPublisherById(ctx context.Context, in *GetPublisherByIdRequest, opts ...grpc.CallOption) (*GetPublisherByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublisherByIdResponse)
	err := c.cc.Invoke(ctx, TitleService_GetPublisherById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePersonResponse)
	err := c.cc.Invoke(ctx, TitleService_CreatePerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) DeletePerson(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*DeletePersonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePersonResponse)
	err := c.cc.Invoke(ctx, TitleService_DeletePerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) GetPersonById(ctx context.Context, in *GetPersonByIdRequest, opts ...grpc.CallOption) (*GetPersonByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonByIdResponse)
	err := c.cc.Invoke(ctx, TitleService_GetPersonById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) CreateTitle(ctx context.Context, in *CreateTitleRequest, opts ...grpc.CallOption) (*CreateTitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTitleResponse)
	err := c.cc.Invoke(ctx, TitleService_CreateTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) GetTitleById(ctx context.Context, in *GetTitleByIdRequest, opts ...grpc.CallOption) (*GetTitleByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTitleByIdResponse)
	err := c.cc.Invoke(ctx, TitleService_GetTitleById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) DeleteTitle(ctx context.Context, in *DeleteTitleRequest, opts ...grpc.CallOption) (*DeleteTitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTitleResponse)
	err := c.cc.Invoke(ctx, TitleService_DeleteTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) UpdateTitleMetadata(ctx context.Context, in *UpdateTitleMetadataRequest, opts ...grpc.CallOption) (*UpdateTitleMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTitleMetadataResponse)
	err := c.cc.Invoke(ctx, TitleService_UpdateTitleMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) CreateAudio(ctx context.Context, in *CreateAudioRequest, opts ...grpc.CallOption) (*CreateAudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAudioResponse)
	err := c.cc.Invoke(ctx, TitleService_CreateAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) GetAudioById(ctx context.Context, in *GetAudioByIdRequest, opts ...grpc.CallOption) (*GetAudioByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAudioByIdResponse)
	err := c.cc.Invoke(ctx, TitleService_GetAudioById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlbumResponse)
	err := c.cc.Invoke(ctx, TitleService_GetAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) DeleteAudio(ctx context.Context, in *DeleteAudioRequest, opts ...grpc.CallOption) (*DeleteAudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAudioResponse)
	err := c.cc.Invoke(ctx, TitleService_DeleteAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAlbumResponse)
	err := c.cc.Invoke(ctx, TitleService_DeleteAlbum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*CreateVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVideoResponse)
	err := c.cc.Invoke(ctx, TitleService_CreateVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) GetVideoById(ctx context.Context, in *GetVideoByIdRequest, opts ...grpc.CallOption) (*GetVideoByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoByIdResponse)
	err := c.cc.Invoke(ctx, TitleService_GetVideoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVideoResponse)
	err := c.cc.Invoke(ctx, TitleService_DeleteVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) UpdateVideoMetadata(ctx context.Context, in *UpdateVideoMetadataRequest, opts ...grpc.CallOption) (*UpdateVideoMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVideoMetadataResponse)
	err := c.cc.Invoke(ctx, TitleService_UpdateVideoMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) AssociateFileWithTitle(ctx context.Context, in *AssociateFileWithTitleRequest, opts ...grpc.CallOption) (*AssociateFileWithTitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssociateFileWithTitleResponse)
	err := c.cc.Invoke(ctx, TitleService_AssociateFileWithTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) DissociateFileWithTitle(ctx context.Context, in *DissociateFileWithTitleRequest, opts ...grpc.CallOption) (*DissociateFileWithTitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DissociateFileWithTitleResponse)
	err := c.cc.Invoke(ctx, TitleService_DissociateFileWithTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) GetFileTitles(ctx context.Context, in *GetFileTitlesRequest, opts ...grpc.CallOption) (*GetFileTitlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileTitlesResponse)
	err := c.cc.Invoke(ctx, TitleService_GetFileTitles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) GetFileVideos(ctx context.Context, in *GetFileVideosRequest, opts ...grpc.CallOption) (*GetFileVideosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileVideosResponse)
	err := c.cc.Invoke(ctx, TitleService_GetFileVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) GetFileAudios(ctx context.Context, in *GetFileAudiosRequest, opts ...grpc.CallOption) (*GetFileAudiosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileAudiosResponse)
	err := c.cc.Invoke(ctx, TitleService_GetFileAudios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) GetTitleFiles(ctx context.Context, in *GetTitleFilesRequest, opts ...grpc.CallOption) (*GetTitleFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTitleFilesResponse)
	err := c.cc.Invoke(ctx, TitleService_GetTitleFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleServiceClient) SearchTitles(ctx context.Context, in *SearchTitlesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchTitlesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TitleService_ServiceDesc.Streams[0], TitleService_SearchTitles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchTitlesRequest, SearchTitlesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TitleService_SearchTitlesClient = grpc.ServerStreamingClient[SearchTitlesResponse]

func (c *titleServiceClient) SearchPersons(ctx context.Context, in *SearchPersonsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchPersonsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TitleService_ServiceDesc.Streams[1], TitleService_SearchPersons_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchPersonsRequest, SearchPersonsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TitleService_SearchPersonsClient = grpc.ServerStreamingClient[SearchPersonsResponse]

// TitleServiceServer is the server API for TitleService service.
// All implementations should embed UnimplementedTitleServiceServer
// for forward compatibility.
//
// *
// Service for managing and accessing title information. It provides
// functionality to retrieve and manage data about movies, series, episodes,
// and their associations with files on a peer.
type TitleServiceServer interface {
	// Creates a new publisher in the database.
	CreatePublisher(context.Context, *CreatePublisherRequest) (*CreatePublisherResponse, error)
	// Deletes a publisher from the database.
	DeletePublisher(context.Context, *DeletePublisherRequest) (*DeletePublisherResponse, error)
	// Retrieves a publisher's information by ID.
	GetPublisherById(context.Context, *GetPublisherByIdRequest) (*GetPublisherByIdResponse, error)
	// Creates a new person (e.g., actor, director) in the database.
	CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonResponse, error)
	// Deletes a person from the database.
	DeletePerson(context.Context, *DeletePersonRequest) (*DeletePersonResponse, error)
	// Retrieves a person's information by ID.
	GetPersonById(context.Context, *GetPersonByIdRequest) (*GetPersonByIdResponse, error)
	// Inserts or updates a title in the database.
	CreateTitle(context.Context, *CreateTitleRequest) (*CreateTitleResponse, error)
	// Retrieves a title by its ID.
	GetTitleById(context.Context, *GetTitleByIdRequest) (*GetTitleByIdResponse, error)
	// Deletes a title from the database.
	DeleteTitle(context.Context, *DeleteTitleRequest) (*DeleteTitleResponse, error)
	// Updates metadata of a title in its associated files.
	UpdateTitleMetadata(context.Context, *UpdateTitleMetadataRequest) (*UpdateTitleMetadataResponse, error)
	// Inserts or updates audio information in the database.
	CreateAudio(context.Context, *CreateAudioRequest) (*CreateAudioResponse, error)
	// Retrieves audio information by its ID.
	GetAudioById(context.Context, *GetAudioByIdRequest) (*GetAudioByIdResponse, error)
	// Retrieves album information by its ID.
	GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumResponse, error)
	// Deletes an audio record from the database.
	DeleteAudio(context.Context, *DeleteAudioRequest) (*DeleteAudioResponse, error)
	// Deletes an album from the database.
	DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumResponse, error)
	// Inserts or updates a video in the database.
	CreateVideo(context.Context, *CreateVideoRequest) (*CreateVideoResponse, error)
	// Retrieves a video by its ID.
	GetVideoById(context.Context, *GetVideoByIdRequest) (*GetVideoByIdResponse, error)
	// Deletes a video from the database.
	DeleteVideo(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error)
	// Updates metadata of a video in its associated files.
	UpdateVideoMetadata(context.Context, *UpdateVideoMetadataRequest) (*UpdateVideoMetadataResponse, error)
	// Associates a file with a title for easier retrieval.
	AssociateFileWithTitle(context.Context, *AssociateFileWithTitleRequest) (*AssociateFileWithTitleResponse, error)
	// Dissociates a file from a title.
	DissociateFileWithTitle(context.Context, *DissociateFileWithTitleRequest) (*DissociateFileWithTitleResponse, error)
	// Retrieves a list of titles associated with a file.
	GetFileTitles(context.Context, *GetFileTitlesRequest) (*GetFileTitlesResponse, error)
	// Retrieves a list of videos associated with a file.
	GetFileVideos(context.Context, *GetFileVideosRequest) (*GetFileVideosResponse, error)
	// Retrieves a list of audios associated with a file.
	GetFileAudios(context.Context, *GetFileAudiosRequest) (*GetFileAudiosResponse, error)
	// Retrieves a list of files associated with a title.
	GetTitleFiles(context.Context, *GetTitleFilesRequest) (*GetTitleFilesResponse, error)
	// Searches for titles or videos based on given criteria.
	SearchTitles(*SearchTitlesRequest, grpc.ServerStreamingServer[SearchTitlesResponse]) error
	// Searches for persons (e.g., YouTubers, actors, directors) based on given criteria.
	SearchPersons(*SearchPersonsRequest, grpc.ServerStreamingServer[SearchPersonsResponse]) error
}

// UnimplementedTitleServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTitleServiceServer struct{}

func (UnimplementedTitleServiceServer) CreatePublisher(context.Context, *CreatePublisherRequest) (*CreatePublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublisher not implemented")
}
func (UnimplementedTitleServiceServer) DeletePublisher(context.Context, *DeletePublisherRequest) (*DeletePublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublisher not implemented")
}
func (UnimplementedTitleServiceServer) GetPublisherById(context.Context, *GetPublisherByIdRequest) (*GetPublisherByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublisherById not implemented")
}
func (UnimplementedTitleServiceServer) CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedTitleServiceServer) DeletePerson(context.Context, *DeletePersonRequest) (*DeletePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerson not implemented")
}
func (UnimplementedTitleServiceServer) GetPersonById(context.Context, *GetPersonByIdRequest) (*GetPersonByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonById not implemented")
}
func (UnimplementedTitleServiceServer) CreateTitle(context.Context, *CreateTitleRequest) (*CreateTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTitle not implemented")
}
func (UnimplementedTitleServiceServer) GetTitleById(context.Context, *GetTitleByIdRequest) (*GetTitleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitleById not implemented")
}
func (UnimplementedTitleServiceServer) DeleteTitle(context.Context, *DeleteTitleRequest) (*DeleteTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTitle not implemented")
}
func (UnimplementedTitleServiceServer) UpdateTitleMetadata(context.Context, *UpdateTitleMetadataRequest) (*UpdateTitleMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTitleMetadata not implemented")
}
func (UnimplementedTitleServiceServer) CreateAudio(context.Context, *CreateAudioRequest) (*CreateAudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAudio not implemented")
}
func (UnimplementedTitleServiceServer) GetAudioById(context.Context, *GetAudioByIdRequest) (*GetAudioByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioById not implemented")
}
func (UnimplementedTitleServiceServer) GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedTitleServiceServer) DeleteAudio(context.Context, *DeleteAudioRequest) (*DeleteAudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAudio not implemented")
}
func (UnimplementedTitleServiceServer) DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedTitleServiceServer) CreateVideo(context.Context, *CreateVideoRequest) (*CreateVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideo not implemented")
}
func (UnimplementedTitleServiceServer) GetVideoById(context.Context, *GetVideoByIdRequest) (*GetVideoByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoById not implemented")
}
func (UnimplementedTitleServiceServer) DeleteVideo(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedTitleServiceServer) UpdateVideoMetadata(context.Context, *UpdateVideoMetadataRequest) (*UpdateVideoMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoMetadata not implemented")
}
func (UnimplementedTitleServiceServer) AssociateFileWithTitle(context.Context, *AssociateFileWithTitleRequest) (*AssociateFileWithTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateFileWithTitle not implemented")
}
func (UnimplementedTitleServiceServer) DissociateFileWithTitle(context.Context, *DissociateFileWithTitleRequest) (*DissociateFileWithTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DissociateFileWithTitle not implemented")
}
func (UnimplementedTitleServiceServer) GetFileTitles(context.Context, *GetFileTitlesRequest) (*GetFileTitlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileTitles not implemented")
}
func (UnimplementedTitleServiceServer) GetFileVideos(context.Context, *GetFileVideosRequest) (*GetFileVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileVideos not implemented")
}
func (UnimplementedTitleServiceServer) GetFileAudios(context.Context, *GetFileAudiosRequest) (*GetFileAudiosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileAudios not implemented")
}
func (UnimplementedTitleServiceServer) GetTitleFiles(context.Context, *GetTitleFilesRequest) (*GetTitleFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitleFiles not implemented")
}
func (UnimplementedTitleServiceServer) SearchTitles(*SearchTitlesRequest, grpc.ServerStreamingServer[SearchTitlesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SearchTitles not implemented")
}
func (UnimplementedTitleServiceServer) SearchPersons(*SearchPersonsRequest, grpc.ServerStreamingServer[SearchPersonsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SearchPersons not implemented")
}
func (UnimplementedTitleServiceServer) testEmbeddedByValue() {}

// UnsafeTitleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TitleServiceServer will
// result in compilation errors.
type UnsafeTitleServiceServer interface {
	mustEmbedUnimplementedTitleServiceServer()
}

func RegisterTitleServiceServer(s grpc.ServiceRegistrar, srv TitleServiceServer) {
	// If the following call pancis, it indicates UnimplementedTitleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TitleService_ServiceDesc, srv)
}

func _TitleService_CreatePublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).CreatePublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_CreatePublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).CreatePublisher(ctx, req.(*CreatePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_DeletePublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).DeletePublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_DeletePublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).DeletePublisher(ctx, req.(*DeletePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_GetPublisherById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublisherByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).GetPublisherById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_GetPublisherById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).GetPublisherById(ctx, req.(*GetPublisherByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_CreatePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).CreatePerson(ctx, req.(*CreatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_DeletePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).DeletePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_DeletePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).DeletePerson(ctx, req.(*DeletePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_GetPersonById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).GetPersonById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_GetPersonById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).GetPersonById(ctx, req.(*GetPersonByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_CreateTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).CreateTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_CreateTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).CreateTitle(ctx, req.(*CreateTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_GetTitleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).GetTitleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_GetTitleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).GetTitleById(ctx, req.(*GetTitleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_DeleteTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).DeleteTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_DeleteTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).DeleteTitle(ctx, req.(*DeleteTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_UpdateTitleMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTitleMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).UpdateTitleMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_UpdateTitleMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).UpdateTitleMetadata(ctx, req.(*UpdateTitleMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_CreateAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).CreateAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_CreateAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).CreateAudio(ctx, req.(*CreateAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_GetAudioById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudioByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).GetAudioById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_GetAudioById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).GetAudioById(ctx, req.(*GetAudioByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_GetAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).GetAlbum(ctx, req.(*GetAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_DeleteAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).DeleteAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_DeleteAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).DeleteAudio(ctx, req.(*DeleteAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_DeleteAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).DeleteAlbum(ctx, req.(*DeleteAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_CreateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).CreateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_CreateVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).CreateVideo(ctx, req.(*CreateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_GetVideoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).GetVideoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_GetVideoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).GetVideoById(ctx, req.(*GetVideoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_DeleteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).DeleteVideo(ctx, req.(*DeleteVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_UpdateVideoMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).UpdateVideoMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_UpdateVideoMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).UpdateVideoMetadata(ctx, req.(*UpdateVideoMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_AssociateFileWithTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateFileWithTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).AssociateFileWithTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_AssociateFileWithTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).AssociateFileWithTitle(ctx, req.(*AssociateFileWithTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_DissociateFileWithTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DissociateFileWithTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).DissociateFileWithTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_DissociateFileWithTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).DissociateFileWithTitle(ctx, req.(*DissociateFileWithTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_GetFileTitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileTitlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).GetFileTitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_GetFileTitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).GetFileTitles(ctx, req.(*GetFileTitlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_GetFileVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).GetFileVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_GetFileVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).GetFileVideos(ctx, req.(*GetFileVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_GetFileAudios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileAudiosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).GetFileAudios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_GetFileAudios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).GetFileAudios(ctx, req.(*GetFileAudiosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_GetTitleFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitleFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServiceServer).GetTitleFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TitleService_GetTitleFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServiceServer).GetTitleFiles(ctx, req.(*GetTitleFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitleService_SearchTitles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchTitlesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TitleServiceServer).SearchTitles(m, &grpc.GenericServerStream[SearchTitlesRequest, SearchTitlesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TitleService_SearchTitlesServer = grpc.ServerStreamingServer[SearchTitlesResponse]

func _TitleService_SearchPersons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchPersonsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TitleServiceServer).SearchPersons(m, &grpc.GenericServerStream[SearchPersonsRequest, SearchPersonsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TitleService_SearchPersonsServer = grpc.ServerStreamingServer[SearchPersonsResponse]

// TitleService_ServiceDesc is the grpc.ServiceDesc for TitleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TitleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "title.TitleService",
	HandlerType: (*TitleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePublisher",
			Handler:    _TitleService_CreatePublisher_Handler,
		},
		{
			MethodName: "DeletePublisher",
			Handler:    _TitleService_DeletePublisher_Handler,
		},
		{
			MethodName: "GetPublisherById",
			Handler:    _TitleService_GetPublisherById_Handler,
		},
		{
			MethodName: "CreatePerson",
			Handler:    _TitleService_CreatePerson_Handler,
		},
		{
			MethodName: "DeletePerson",
			Handler:    _TitleService_DeletePerson_Handler,
		},
		{
			MethodName: "GetPersonById",
			Handler:    _TitleService_GetPersonById_Handler,
		},
		{
			MethodName: "CreateTitle",
			Handler:    _TitleService_CreateTitle_Handler,
		},
		{
			MethodName: "GetTitleById",
			Handler:    _TitleService_GetTitleById_Handler,
		},
		{
			MethodName: "DeleteTitle",
			Handler:    _TitleService_DeleteTitle_Handler,
		},
		{
			MethodName: "UpdateTitleMetadata",
			Handler:    _TitleService_UpdateTitleMetadata_Handler,
		},
		{
			MethodName: "CreateAudio",
			Handler:    _TitleService_CreateAudio_Handler,
		},
		{
			MethodName: "GetAudioById",
			Handler:    _TitleService_GetAudioById_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _TitleService_GetAlbum_Handler,
		},
		{
			MethodName: "DeleteAudio",
			Handler:    _TitleService_DeleteAudio_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _TitleService_DeleteAlbum_Handler,
		},
		{
			MethodName: "CreateVideo",
			Handler:    _TitleService_CreateVideo_Handler,
		},
		{
			MethodName: "GetVideoById",
			Handler:    _TitleService_GetVideoById_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _TitleService_DeleteVideo_Handler,
		},
		{
			MethodName: "UpdateVideoMetadata",
			Handler:    _TitleService_UpdateVideoMetadata_Handler,
		},
		{
			MethodName: "AssociateFileWithTitle",
			Handler:    _TitleService_AssociateFileWithTitle_Handler,
		},
		{
			MethodName: "DissociateFileWithTitle",
			Handler:    _TitleService_DissociateFileWithTitle_Handler,
		},
		{
			MethodName: "GetFileTitles",
			Handler:    _TitleService_GetFileTitles_Handler,
		},
		{
			MethodName: "GetFileVideos",
			Handler:    _TitleService_GetFileVideos_Handler,
		},
		{
			MethodName: "GetFileAudios",
			Handler:    _TitleService_GetFileAudios_Handler,
		},
		{
			MethodName: "GetTitleFiles",
			Handler:    _TitleService_GetTitleFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchTitles",
			Handler:       _TitleService_SearchTitles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchPersons",
			Handler:       _TitleService_SearchPersons_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "title.proto",
}
