// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: repository.proto

package repositorypb

import (
	resourcepb "github.com/globulario/services/golang/resource/resourcepb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for uploading a bundle.
type UploadBundleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`                 // Username of the person uploading the bundle.
	Organization  string                 `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"` // Name of the organization uploading the bundle.
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                 // Binary data of the bundle being uploaded.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadBundleRequest) Reset() {
	*x = UploadBundleRequest{}
	mi := &file_repository_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBundleRequest) ProtoMessage() {}

func (x *UploadBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBundleRequest.ProtoReflect.Descriptor instead.
func (*UploadBundleRequest) Descriptor() ([]byte, []int) {
	return file_repository_proto_rawDescGZIP(), []int{0}
}

func (x *UploadBundleRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UploadBundleRequest) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *UploadBundleRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Response after uploading a bundle.
type UploadBundleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        bool                   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"` // Indicates success or failure of the bundle upload.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadBundleResponse) Reset() {
	*x = UploadBundleResponse{}
	mi := &file_repository_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBundleResponse) ProtoMessage() {}

func (x *UploadBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBundleResponse.ProtoReflect.Descriptor instead.
func (*UploadBundleResponse) Descriptor() ([]byte, []int) {
	return file_repository_proto_rawDescGZIP(), []int{1}
}

func (x *UploadBundleResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request for downloading a bundle.
type DownloadBundleRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Descriptor_   *resourcepb.PackageDescriptor `protobuf:"bytes,1,opt,name=descriptor,proto3" json:"descriptor,omitempty"` // Descriptor of the package to be downloaded.
	Platform      string                        `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`     // Platform for which the bundle is intended.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadBundleRequest) Reset() {
	*x = DownloadBundleRequest{}
	mi := &file_repository_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBundleRequest) ProtoMessage() {}

func (x *DownloadBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadBundleRequest.ProtoReflect.Descriptor instead.
func (*DownloadBundleRequest) Descriptor() ([]byte, []int) {
	return file_repository_proto_rawDescGZIP(), []int{2}
}

func (x *DownloadBundleRequest) GetDescriptor_() *resourcepb.PackageDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *DownloadBundleRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

// Response for downloading a bundle.
type DownloadBundleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // Binary data of the downloaded bundle.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadBundleResponse) Reset() {
	*x = DownloadBundleResponse{}
	mi := &file_repository_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBundleResponse) ProtoMessage() {}

func (x *DownloadBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadBundleResponse.ProtoReflect.Descriptor instead.
func (*DownloadBundleResponse) Descriptor() ([]byte, []int) {
	return file_repository_proto_rawDescGZIP(), []int{3}
}

func (x *DownloadBundleResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_repository_proto protoreflect.FileDescriptor

const file_repository_proto_rawDesc = "" +
	"\n" +
	"\x10repository.proto\x12\n" +
	"repository\x1a\x0eresource.proto\"a\n" +
	"\x13UploadBundleRequest\x12\x12\n" +
	"\x04user\x18\x01 \x01(\tR\x04user\x12\"\n" +
	"\forganization\x18\x02 \x01(\tR\forganization\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\".\n" +
	"\x14UploadBundleResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\bR\x06result\"p\n" +
	"\x15DownloadBundleRequest\x12;\n" +
	"\n" +
	"descriptor\x18\x01 \x01(\v2\x1b.resource.PackageDescriptorR\n" +
	"descriptor\x12\x1a\n" +
	"\bplatform\x18\x02 \x01(\tR\bplatform\",\n" +
	"\x16DownloadBundleResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data2\xc3\x01\n" +
	"\x11PackageRepository\x12Y\n" +
	"\x0eDownloadBundle\x12!.repository.DownloadBundleRequest\x1a\".repository.DownloadBundleResponse0\x01\x12S\n" +
	"\fUploadBundle\x12\x1f.repository.UploadBundleRequest\x1a .repository.UploadBundleResponse(\x01B?Z=github.com/globulario/services/golang/repository/repositorypbb\x06proto3"

var (
	file_repository_proto_rawDescOnce sync.Once
	file_repository_proto_rawDescData []byte
)

func file_repository_proto_rawDescGZIP() []byte {
	file_repository_proto_rawDescOnce.Do(func() {
		file_repository_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_repository_proto_rawDesc), len(file_repository_proto_rawDesc)))
	})
	return file_repository_proto_rawDescData
}

var file_repository_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_repository_proto_goTypes = []any{
	(*UploadBundleRequest)(nil),          // 0: repository.UploadBundleRequest
	(*UploadBundleResponse)(nil),         // 1: repository.UploadBundleResponse
	(*DownloadBundleRequest)(nil),        // 2: repository.DownloadBundleRequest
	(*DownloadBundleResponse)(nil),       // 3: repository.DownloadBundleResponse
	(*resourcepb.PackageDescriptor)(nil), // 4: resource.PackageDescriptor
}
var file_repository_proto_depIdxs = []int32{
	4, // 0: repository.DownloadBundleRequest.descriptor:type_name -> resource.PackageDescriptor
	2, // 1: repository.PackageRepository.DownloadBundle:input_type -> repository.DownloadBundleRequest
	0, // 2: repository.PackageRepository.UploadBundle:input_type -> repository.UploadBundleRequest
	3, // 3: repository.PackageRepository.DownloadBundle:output_type -> repository.DownloadBundleResponse
	1, // 4: repository.PackageRepository.UploadBundle:output_type -> repository.UploadBundleResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_repository_proto_init() }
func file_repository_proto_init() {
	if File_repository_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_repository_proto_rawDesc), len(file_repository_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_repository_proto_goTypes,
		DependencyIndexes: file_repository_proto_depIdxs,
		MessageInfos:      file_repository_proto_msgTypes,
	}.Build()
	File_repository_proto = out.File
	file_repository_proto_goTypes = nil
	file_repository_proto_depIdxs = nil
}
