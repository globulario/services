// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: repository.proto

package repositorypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PackageRepository_DownloadBundle_FullMethodName = "/repository.PackageRepository/DownloadBundle"
	PackageRepository_UploadBundle_FullMethodName   = "/repository.PackageRepository/UploadBundle"
)

// PackageRepositoryClient is the client API for PackageRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing package uploads and downloads in a repository.
type PackageRepositoryClient interface {
	// Downloads a package bundle from the package repository.
	// Input: DownloadBundleRequest containing the package descriptor and platform.
	// Output: Stream of DownloadBundleResponse containing the binary data of the bundle.
	DownloadBundle(ctx context.Context, in *DownloadBundleRequest, opts ...grpc.CallOption) (PackageRepository_DownloadBundleClient, error)
	// Uploads a package bundle to the repository.
	// Input: Stream of UploadBundleRequest containing the user, organization, and bundle data.
	// Output: UploadBundleResponse indicating the result of the upload operation.
	UploadBundle(ctx context.Context, opts ...grpc.CallOption) (PackageRepository_UploadBundleClient, error)
}

type packageRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageRepositoryClient(cc grpc.ClientConnInterface) PackageRepositoryClient {
	return &packageRepositoryClient{cc}
}

func (c *packageRepositoryClient) DownloadBundle(ctx context.Context, in *DownloadBundleRequest, opts ...grpc.CallOption) (PackageRepository_DownloadBundleClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PackageRepository_ServiceDesc.Streams[0], PackageRepository_DownloadBundle_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &packageRepositoryDownloadBundleClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PackageRepository_DownloadBundleClient interface {
	Recv() (*DownloadBundleResponse, error)
	grpc.ClientStream
}

type packageRepositoryDownloadBundleClient struct {
	grpc.ClientStream
}

func (x *packageRepositoryDownloadBundleClient) Recv() (*DownloadBundleResponse, error) {
	m := new(DownloadBundleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packageRepositoryClient) UploadBundle(ctx context.Context, opts ...grpc.CallOption) (PackageRepository_UploadBundleClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PackageRepository_ServiceDesc.Streams[1], PackageRepository_UploadBundle_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &packageRepositoryUploadBundleClient{ClientStream: stream}
	return x, nil
}

type PackageRepository_UploadBundleClient interface {
	Send(*UploadBundleRequest) error
	CloseAndRecv() (*UploadBundleResponse, error)
	grpc.ClientStream
}

type packageRepositoryUploadBundleClient struct {
	grpc.ClientStream
}

func (x *packageRepositoryUploadBundleClient) Send(m *UploadBundleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packageRepositoryUploadBundleClient) CloseAndRecv() (*UploadBundleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadBundleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PackageRepositoryServer is the server API for PackageRepository service.
// All implementations should embed UnimplementedPackageRepositoryServer
// for forward compatibility
//
// Service for managing package uploads and downloads in a repository.
type PackageRepositoryServer interface {
	// Downloads a package bundle from the package repository.
	// Input: DownloadBundleRequest containing the package descriptor and platform.
	// Output: Stream of DownloadBundleResponse containing the binary data of the bundle.
	DownloadBundle(*DownloadBundleRequest, PackageRepository_DownloadBundleServer) error
	// Uploads a package bundle to the repository.
	// Input: Stream of UploadBundleRequest containing the user, organization, and bundle data.
	// Output: UploadBundleResponse indicating the result of the upload operation.
	UploadBundle(PackageRepository_UploadBundleServer) error
}

// UnimplementedPackageRepositoryServer should be embedded to have forward compatible implementations.
type UnimplementedPackageRepositoryServer struct {
}

func (UnimplementedPackageRepositoryServer) DownloadBundle(*DownloadBundleRequest, PackageRepository_DownloadBundleServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadBundle not implemented")
}
func (UnimplementedPackageRepositoryServer) UploadBundle(PackageRepository_UploadBundleServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadBundle not implemented")
}

// UnsafePackageRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageRepositoryServer will
// result in compilation errors.
type UnsafePackageRepositoryServer interface {
	mustEmbedUnimplementedPackageRepositoryServer()
}

func RegisterPackageRepositoryServer(s grpc.ServiceRegistrar, srv PackageRepositoryServer) {
	s.RegisterService(&PackageRepository_ServiceDesc, srv)
}

func _PackageRepository_DownloadBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadBundleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PackageRepositoryServer).DownloadBundle(m, &packageRepositoryDownloadBundleServer{ServerStream: stream})
}

type PackageRepository_DownloadBundleServer interface {
	Send(*DownloadBundleResponse) error
	grpc.ServerStream
}

type packageRepositoryDownloadBundleServer struct {
	grpc.ServerStream
}

func (x *packageRepositoryDownloadBundleServer) Send(m *DownloadBundleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PackageRepository_UploadBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackageRepositoryServer).UploadBundle(&packageRepositoryUploadBundleServer{ServerStream: stream})
}

type PackageRepository_UploadBundleServer interface {
	SendAndClose(*UploadBundleResponse) error
	Recv() (*UploadBundleRequest, error)
	grpc.ServerStream
}

type packageRepositoryUploadBundleServer struct {
	grpc.ServerStream
}

func (x *packageRepositoryUploadBundleServer) SendAndClose(m *UploadBundleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packageRepositoryUploadBundleServer) Recv() (*UploadBundleRequest, error) {
	m := new(UploadBundleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PackageRepository_ServiceDesc is the grpc.ServiceDesc for PackageRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repository.PackageRepository",
	HandlerType: (*PackageRepositoryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadBundle",
			Handler:       _PackageRepository_DownloadBundle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadBundle",
			Handler:       _PackageRepository_UploadBundle_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "repository.proto",
}
