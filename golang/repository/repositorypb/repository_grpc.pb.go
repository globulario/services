// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: repository.proto

package repositorypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PackageRepository_DownloadBundle_FullMethodName = "/repository.PackageRepository/DownloadBundle"
	PackageRepository_UploadBundle_FullMethodName   = "/repository.PackageRepository/UploadBundle"
)

// PackageRepositoryClient is the client API for PackageRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for managing package uploads and downloads in a repository.
type PackageRepositoryClient interface {
	// Downloads a package bundle from the package repository.
	// Input: DownloadBundleRequest containing the package descriptor and platform.
	// Output: Stream of DownloadBundleResponse containing the binary data of the bundle.
	DownloadBundle(ctx context.Context, in *DownloadBundleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadBundleResponse], error)
	// Uploads a package bundle to the repository.
	// Input: Stream of UploadBundleRequest containing the user, organization, and bundle data.
	// Output: UploadBundleResponse indicating the result of the upload operation.
	UploadBundle(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadBundleRequest, UploadBundleResponse], error)
}

type packageRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageRepositoryClient(cc grpc.ClientConnInterface) PackageRepositoryClient {
	return &packageRepositoryClient{cc}
}

func (c *packageRepositoryClient) DownloadBundle(ctx context.Context, in *DownloadBundleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadBundleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PackageRepository_ServiceDesc.Streams[0], PackageRepository_DownloadBundle_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadBundleRequest, DownloadBundleResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PackageRepository_DownloadBundleClient = grpc.ServerStreamingClient[DownloadBundleResponse]

func (c *packageRepositoryClient) UploadBundle(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadBundleRequest, UploadBundleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PackageRepository_ServiceDesc.Streams[1], PackageRepository_UploadBundle_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadBundleRequest, UploadBundleResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PackageRepository_UploadBundleClient = grpc.ClientStreamingClient[UploadBundleRequest, UploadBundleResponse]

// PackageRepositoryServer is the server API for PackageRepository service.
// All implementations should embed UnimplementedPackageRepositoryServer
// for forward compatibility.
//
// Service for managing package uploads and downloads in a repository.
type PackageRepositoryServer interface {
	// Downloads a package bundle from the package repository.
	// Input: DownloadBundleRequest containing the package descriptor and platform.
	// Output: Stream of DownloadBundleResponse containing the binary data of the bundle.
	DownloadBundle(*DownloadBundleRequest, grpc.ServerStreamingServer[DownloadBundleResponse]) error
	// Uploads a package bundle to the repository.
	// Input: Stream of UploadBundleRequest containing the user, organization, and bundle data.
	// Output: UploadBundleResponse indicating the result of the upload operation.
	UploadBundle(grpc.ClientStreamingServer[UploadBundleRequest, UploadBundleResponse]) error
}

// UnimplementedPackageRepositoryServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPackageRepositoryServer struct{}

func (UnimplementedPackageRepositoryServer) DownloadBundle(*DownloadBundleRequest, grpc.ServerStreamingServer[DownloadBundleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadBundle not implemented")
}
func (UnimplementedPackageRepositoryServer) UploadBundle(grpc.ClientStreamingServer[UploadBundleRequest, UploadBundleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadBundle not implemented")
}
func (UnimplementedPackageRepositoryServer) testEmbeddedByValue() {}

// UnsafePackageRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageRepositoryServer will
// result in compilation errors.
type UnsafePackageRepositoryServer interface {
	mustEmbedUnimplementedPackageRepositoryServer()
}

func RegisterPackageRepositoryServer(s grpc.ServiceRegistrar, srv PackageRepositoryServer) {
	// If the following call pancis, it indicates UnimplementedPackageRepositoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PackageRepository_ServiceDesc, srv)
}

func _PackageRepository_DownloadBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadBundleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PackageRepositoryServer).DownloadBundle(m, &grpc.GenericServerStream[DownloadBundleRequest, DownloadBundleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PackageRepository_DownloadBundleServer = grpc.ServerStreamingServer[DownloadBundleResponse]

func _PackageRepository_UploadBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackageRepositoryServer).UploadBundle(&grpc.GenericServerStream[UploadBundleRequest, UploadBundleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PackageRepository_UploadBundleServer = grpc.ClientStreamingServer[UploadBundleRequest, UploadBundleResponse]

// PackageRepository_ServiceDesc is the grpc.ServiceDesc for PackageRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repository.PackageRepository",
	HandlerType: (*PackageRepositoryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadBundle",
			Handler:       _PackageRepository_DownloadBundle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadBundle",
			Handler:       _PackageRepository_UploadBundle_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "repository.proto",
}
