// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: blog.proto

package blogpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BlogService_CreateBlogPost_FullMethodName        = "/blog.BlogService/CreateBlogPost"
	BlogService_SaveBlogPost_FullMethodName          = "/blog.BlogService/SaveBlogPost"
	BlogService_GetBlogPostsByAuthors_FullMethodName = "/blog.BlogService/GetBlogPostsByAuthors"
	BlogService_GetBlogPosts_FullMethodName          = "/blog.BlogService/GetBlogPosts"
	BlogService_SearchBlogPosts_FullMethodName       = "/blog.BlogService/SearchBlogPosts"
	BlogService_DeleteBlogPost_FullMethodName        = "/blog.BlogService/DeleteBlogPost"
	BlogService_AddEmoji_FullMethodName              = "/blog.BlogService/AddEmoji"
	BlogService_RemoveEmoji_FullMethodName           = "/blog.BlogService/RemoveEmoji"
	BlogService_AddComment_FullMethodName            = "/blog.BlogService/AddComment"
	BlogService_RemoveComment_FullMethodName         = "/blog.BlogService/RemoveComment"
)

// BlogServiceClient is the client API for BlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Proto file for BlogService, offering a range of functionalities for blogging.
// This includes creating, updating, managing blog posts, comments, emojis, and
// searching through blog posts.
type BlogServiceClient interface {
	// Creates a new blog post. This is a simple request-response call.
	CreateBlogPost(ctx context.Context, in *CreateBlogPostRequest, opts ...grpc.CallOption) (*CreateBlogPostResponse, error)
	// Updates an existing blog post. This is also a simple request-response call.
	SaveBlogPost(ctx context.Context, in *SaveBlogPostRequest, opts ...grpc.CallOption) (*SaveBlogPostResponse, error)
	// Retrieves blog posts by a given set of authors. This method streams the responses back to the client.
	GetBlogPostsByAuthors(ctx context.Context, in *GetBlogPostsByAuthorsRequest, opts ...grpc.CallOption) (BlogService_GetBlogPostsByAuthorsClient, error)
	// Retrieves blog posts based on keywords or text content within the post. Responses are streamed to the client.
	GetBlogPosts(ctx context.Context, in *GetBlogPostsRequest, opts ...grpc.CallOption) (BlogService_GetBlogPostsClient, error)
	// Searches for blog posts based on various search criteria. This is a streaming response to handle potentially large result sets.
	SearchBlogPosts(ctx context.Context, in *SearchBlogPostsRequest, opts ...grpc.CallOption) (BlogService_SearchBlogPostsClient, error)
	// Deletes a specified blog post. This is a simple request-response call.
	DeleteBlogPost(ctx context.Context, in *DeleteBlogPostRequest, opts ...grpc.CallOption) (*DeleteBlogPostResponse, error)
	// Adds an emoji as a reaction to a post or a comment. This is a simple request-response call.
	AddEmoji(ctx context.Context, in *AddEmojiRequest, opts ...grpc.CallOption) (*AddEmojiResponse, error)
	// Removes an emoji reaction from a post or a comment. This is a simple request-response call.
	RemoveEmoji(ctx context.Context, in *RemoveEmojiRequest, opts ...grpc.CallOption) (*RemoveEmojiResponse, error)
	// Adds a comment to a post or another comment. This is a simple request-response call.
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	// Removes a comment from a post or another comment. This is a simple request-response call.
	RemoveComment(ctx context.Context, in *RemoveCommentRequest, opts ...grpc.CallOption) (*RemoveCommentResponse, error)
}

type blogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServiceClient(cc grpc.ClientConnInterface) BlogServiceClient {
	return &blogServiceClient{cc}
}

func (c *blogServiceClient) CreateBlogPost(ctx context.Context, in *CreateBlogPostRequest, opts ...grpc.CallOption) (*CreateBlogPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBlogPostResponse)
	err := c.cc.Invoke(ctx, BlogService_CreateBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) SaveBlogPost(ctx context.Context, in *SaveBlogPostRequest, opts ...grpc.CallOption) (*SaveBlogPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveBlogPostResponse)
	err := c.cc.Invoke(ctx, BlogService_SaveBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetBlogPostsByAuthors(ctx context.Context, in *GetBlogPostsByAuthorsRequest, opts ...grpc.CallOption) (BlogService_GetBlogPostsByAuthorsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlogService_ServiceDesc.Streams[0], BlogService_GetBlogPostsByAuthors_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &blogServiceGetBlogPostsByAuthorsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlogService_GetBlogPostsByAuthorsClient interface {
	Recv() (*GetBlogPostsByAuthorsResponse, error)
	grpc.ClientStream
}

type blogServiceGetBlogPostsByAuthorsClient struct {
	grpc.ClientStream
}

func (x *blogServiceGetBlogPostsByAuthorsClient) Recv() (*GetBlogPostsByAuthorsResponse, error) {
	m := new(GetBlogPostsByAuthorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blogServiceClient) GetBlogPosts(ctx context.Context, in *GetBlogPostsRequest, opts ...grpc.CallOption) (BlogService_GetBlogPostsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlogService_ServiceDesc.Streams[1], BlogService_GetBlogPosts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &blogServiceGetBlogPostsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlogService_GetBlogPostsClient interface {
	Recv() (*GetBlogPostsResponse, error)
	grpc.ClientStream
}

type blogServiceGetBlogPostsClient struct {
	grpc.ClientStream
}

func (x *blogServiceGetBlogPostsClient) Recv() (*GetBlogPostsResponse, error) {
	m := new(GetBlogPostsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blogServiceClient) SearchBlogPosts(ctx context.Context, in *SearchBlogPostsRequest, opts ...grpc.CallOption) (BlogService_SearchBlogPostsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlogService_ServiceDesc.Streams[2], BlogService_SearchBlogPosts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &blogServiceSearchBlogPostsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlogService_SearchBlogPostsClient interface {
	Recv() (*SearchBlogPostsResponse, error)
	grpc.ClientStream
}

type blogServiceSearchBlogPostsClient struct {
	grpc.ClientStream
}

func (x *blogServiceSearchBlogPostsClient) Recv() (*SearchBlogPostsResponse, error) {
	m := new(SearchBlogPostsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blogServiceClient) DeleteBlogPost(ctx context.Context, in *DeleteBlogPostRequest, opts ...grpc.CallOption) (*DeleteBlogPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBlogPostResponse)
	err := c.cc.Invoke(ctx, BlogService_DeleteBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) AddEmoji(ctx context.Context, in *AddEmojiRequest, opts ...grpc.CallOption) (*AddEmojiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddEmojiResponse)
	err := c.cc.Invoke(ctx, BlogService_AddEmoji_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) RemoveEmoji(ctx context.Context, in *RemoveEmojiRequest, opts ...grpc.CallOption) (*RemoveEmojiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveEmojiResponse)
	err := c.cc.Invoke(ctx, BlogService_RemoveEmoji_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, BlogService_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) RemoveComment(ctx context.Context, in *RemoveCommentRequest, opts ...grpc.CallOption) (*RemoveCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveCommentResponse)
	err := c.cc.Invoke(ctx, BlogService_RemoveComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServiceServer is the server API for BlogService service.
// All implementations should embed UnimplementedBlogServiceServer
// for forward compatibility
//
// *
// Proto file for BlogService, offering a range of functionalities for blogging.
// This includes creating, updating, managing blog posts, comments, emojis, and
// searching through blog posts.
type BlogServiceServer interface {
	// Creates a new blog post. This is a simple request-response call.
	CreateBlogPost(context.Context, *CreateBlogPostRequest) (*CreateBlogPostResponse, error)
	// Updates an existing blog post. This is also a simple request-response call.
	SaveBlogPost(context.Context, *SaveBlogPostRequest) (*SaveBlogPostResponse, error)
	// Retrieves blog posts by a given set of authors. This method streams the responses back to the client.
	GetBlogPostsByAuthors(*GetBlogPostsByAuthorsRequest, BlogService_GetBlogPostsByAuthorsServer) error
	// Retrieves blog posts based on keywords or text content within the post. Responses are streamed to the client.
	GetBlogPosts(*GetBlogPostsRequest, BlogService_GetBlogPostsServer) error
	// Searches for blog posts based on various search criteria. This is a streaming response to handle potentially large result sets.
	SearchBlogPosts(*SearchBlogPostsRequest, BlogService_SearchBlogPostsServer) error
	// Deletes a specified blog post. This is a simple request-response call.
	DeleteBlogPost(context.Context, *DeleteBlogPostRequest) (*DeleteBlogPostResponse, error)
	// Adds an emoji as a reaction to a post or a comment. This is a simple request-response call.
	AddEmoji(context.Context, *AddEmojiRequest) (*AddEmojiResponse, error)
	// Removes an emoji reaction from a post or a comment. This is a simple request-response call.
	RemoveEmoji(context.Context, *RemoveEmojiRequest) (*RemoveEmojiResponse, error)
	// Adds a comment to a post or another comment. This is a simple request-response call.
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	// Removes a comment from a post or another comment. This is a simple request-response call.
	RemoveComment(context.Context, *RemoveCommentRequest) (*RemoveCommentResponse, error)
}

// UnimplementedBlogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBlogServiceServer struct {
}

func (UnimplementedBlogServiceServer) CreateBlogPost(context.Context, *CreateBlogPostRequest) (*CreateBlogPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlogPost not implemented")
}
func (UnimplementedBlogServiceServer) SaveBlogPost(context.Context, *SaveBlogPostRequest) (*SaveBlogPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBlogPost not implemented")
}
func (UnimplementedBlogServiceServer) GetBlogPostsByAuthors(*GetBlogPostsByAuthorsRequest, BlogService_GetBlogPostsByAuthorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlogPostsByAuthors not implemented")
}
func (UnimplementedBlogServiceServer) GetBlogPosts(*GetBlogPostsRequest, BlogService_GetBlogPostsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlogPosts not implemented")
}
func (UnimplementedBlogServiceServer) SearchBlogPosts(*SearchBlogPostsRequest, BlogService_SearchBlogPostsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchBlogPosts not implemented")
}
func (UnimplementedBlogServiceServer) DeleteBlogPost(context.Context, *DeleteBlogPostRequest) (*DeleteBlogPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlogPost not implemented")
}
func (UnimplementedBlogServiceServer) AddEmoji(context.Context, *AddEmojiRequest) (*AddEmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmoji not implemented")
}
func (UnimplementedBlogServiceServer) RemoveEmoji(context.Context, *RemoveEmojiRequest) (*RemoveEmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEmoji not implemented")
}
func (UnimplementedBlogServiceServer) AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedBlogServiceServer) RemoveComment(context.Context, *RemoveCommentRequest) (*RemoveCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveComment not implemented")
}

// UnsafeBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServiceServer will
// result in compilation errors.
type UnsafeBlogServiceServer interface {
	mustEmbedUnimplementedBlogServiceServer()
}

func RegisterBlogServiceServer(s grpc.ServiceRegistrar, srv BlogServiceServer) {
	s.RegisterService(&BlogService_ServiceDesc, srv)
}

func _BlogService_CreateBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).CreateBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_CreateBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).CreateBlogPost(ctx, req.(*CreateBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_SaveBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).SaveBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_SaveBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).SaveBlogPost(ctx, req.(*SaveBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetBlogPostsByAuthors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlogPostsByAuthorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceServer).GetBlogPostsByAuthors(m, &blogServiceGetBlogPostsByAuthorsServer{ServerStream: stream})
}

type BlogService_GetBlogPostsByAuthorsServer interface {
	Send(*GetBlogPostsByAuthorsResponse) error
	grpc.ServerStream
}

type blogServiceGetBlogPostsByAuthorsServer struct {
	grpc.ServerStream
}

func (x *blogServiceGetBlogPostsByAuthorsServer) Send(m *GetBlogPostsByAuthorsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlogService_GetBlogPosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlogPostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceServer).GetBlogPosts(m, &blogServiceGetBlogPostsServer{ServerStream: stream})
}

type BlogService_GetBlogPostsServer interface {
	Send(*GetBlogPostsResponse) error
	grpc.ServerStream
}

type blogServiceGetBlogPostsServer struct {
	grpc.ServerStream
}

func (x *blogServiceGetBlogPostsServer) Send(m *GetBlogPostsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlogService_SearchBlogPosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchBlogPostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceServer).SearchBlogPosts(m, &blogServiceSearchBlogPostsServer{ServerStream: stream})
}

type BlogService_SearchBlogPostsServer interface {
	Send(*SearchBlogPostsResponse) error
	grpc.ServerStream
}

type blogServiceSearchBlogPostsServer struct {
	grpc.ServerStream
}

func (x *blogServiceSearchBlogPostsServer) Send(m *SearchBlogPostsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlogService_DeleteBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_DeleteBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteBlogPost(ctx, req.(*DeleteBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_AddEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).AddEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_AddEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).AddEmoji(ctx, req.(*AddEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_RemoveEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).RemoveEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_RemoveEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).RemoveEmoji(ctx, req.(*RemoveEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_RemoveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).RemoveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_RemoveComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).RemoveComment(ctx, req.(*RemoveCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogService_ServiceDesc is the grpc.ServiceDesc for BlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.BlogService",
	HandlerType: (*BlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlogPost",
			Handler:    _BlogService_CreateBlogPost_Handler,
		},
		{
			MethodName: "SaveBlogPost",
			Handler:    _BlogService_SaveBlogPost_Handler,
		},
		{
			MethodName: "DeleteBlogPost",
			Handler:    _BlogService_DeleteBlogPost_Handler,
		},
		{
			MethodName: "AddEmoji",
			Handler:    _BlogService_AddEmoji_Handler,
		},
		{
			MethodName: "RemoveEmoji",
			Handler:    _BlogService_RemoveEmoji_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _BlogService_AddComment_Handler,
		},
		{
			MethodName: "RemoveComment",
			Handler:    _BlogService_RemoveComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlogPostsByAuthors",
			Handler:       _BlogService_GetBlogPostsByAuthors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlogPosts",
			Handler:       _BlogService_GetBlogPosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchBlogPosts",
			Handler:       _BlogService_SearchBlogPosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blog.proto",
}
