// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rbac.proto

#ifndef PROTOBUF_INCLUDED_rbac_2eproto
#define PROTOBUF_INCLUDED_rbac_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rbac_2eproto 

namespace protobuf_rbac_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[40];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_rbac_2eproto
namespace rbac {
class AddResourceOwnerRqst;
class AddResourceOwnerRqstDefaultTypeInternal;
extern AddResourceOwnerRqstDefaultTypeInternal _AddResourceOwnerRqst_default_instance_;
class AddResourceOwnerRsp;
class AddResourceOwnerRspDefaultTypeInternal;
extern AddResourceOwnerRspDefaultTypeInternal _AddResourceOwnerRsp_default_instance_;
class DeleteAllAccessRqst;
class DeleteAllAccessRqstDefaultTypeInternal;
extern DeleteAllAccessRqstDefaultTypeInternal _DeleteAllAccessRqst_default_instance_;
class DeleteAllAccessRsp;
class DeleteAllAccessRspDefaultTypeInternal;
extern DeleteAllAccessRspDefaultTypeInternal _DeleteAllAccessRsp_default_instance_;
class DeleteResourcePermissionRqst;
class DeleteResourcePermissionRqstDefaultTypeInternal;
extern DeleteResourcePermissionRqstDefaultTypeInternal _DeleteResourcePermissionRqst_default_instance_;
class DeleteResourcePermissionRsp;
class DeleteResourcePermissionRspDefaultTypeInternal;
extern DeleteResourcePermissionRspDefaultTypeInternal _DeleteResourcePermissionRsp_default_instance_;
class DeleteResourcePermissionsRqst;
class DeleteResourcePermissionsRqstDefaultTypeInternal;
extern DeleteResourcePermissionsRqstDefaultTypeInternal _DeleteResourcePermissionsRqst_default_instance_;
class DeleteResourcePermissionsRsp;
class DeleteResourcePermissionsRspDefaultTypeInternal;
extern DeleteResourcePermissionsRspDefaultTypeInternal _DeleteResourcePermissionsRsp_default_instance_;
class DeleteSubjectShareRqst;
class DeleteSubjectShareRqstDefaultTypeInternal;
extern DeleteSubjectShareRqstDefaultTypeInternal _DeleteSubjectShareRqst_default_instance_;
class DeleteSubjectShareRsp;
class DeleteSubjectShareRspDefaultTypeInternal;
extern DeleteSubjectShareRspDefaultTypeInternal _DeleteSubjectShareRsp_default_instance_;
class GetActionResourceInfosRqst;
class GetActionResourceInfosRqstDefaultTypeInternal;
extern GetActionResourceInfosRqstDefaultTypeInternal _GetActionResourceInfosRqst_default_instance_;
class GetActionResourceInfosRsp;
class GetActionResourceInfosRspDefaultTypeInternal;
extern GetActionResourceInfosRspDefaultTypeInternal _GetActionResourceInfosRsp_default_instance_;
class GetResourcePermissionRqst;
class GetResourcePermissionRqstDefaultTypeInternal;
extern GetResourcePermissionRqstDefaultTypeInternal _GetResourcePermissionRqst_default_instance_;
class GetResourcePermissionRsp;
class GetResourcePermissionRspDefaultTypeInternal;
extern GetResourcePermissionRspDefaultTypeInternal _GetResourcePermissionRsp_default_instance_;
class GetResourcePermissionsRqst;
class GetResourcePermissionsRqstDefaultTypeInternal;
extern GetResourcePermissionsRqstDefaultTypeInternal _GetResourcePermissionsRqst_default_instance_;
class GetResourcePermissionsRsp;
class GetResourcePermissionsRspDefaultTypeInternal;
extern GetResourcePermissionsRspDefaultTypeInternal _GetResourcePermissionsRsp_default_instance_;
class GetSharedResourceRqst;
class GetSharedResourceRqstDefaultTypeInternal;
extern GetSharedResourceRqstDefaultTypeInternal _GetSharedResourceRqst_default_instance_;
class GetSharedResourceRsp;
class GetSharedResourceRspDefaultTypeInternal;
extern GetSharedResourceRspDefaultTypeInternal _GetSharedResourceRsp_default_instance_;
class Permission;
class PermissionDefaultTypeInternal;
extern PermissionDefaultTypeInternal _Permission_default_instance_;
class Permissions;
class PermissionsDefaultTypeInternal;
extern PermissionsDefaultTypeInternal _Permissions_default_instance_;
class RemoveResourceOwnerRqst;
class RemoveResourceOwnerRqstDefaultTypeInternal;
extern RemoveResourceOwnerRqstDefaultTypeInternal _RemoveResourceOwnerRqst_default_instance_;
class RemoveResourceOwnerRsp;
class RemoveResourceOwnerRspDefaultTypeInternal;
extern RemoveResourceOwnerRspDefaultTypeInternal _RemoveResourceOwnerRsp_default_instance_;
class RemoveSubjectFromShareRqst;
class RemoveSubjectFromShareRqstDefaultTypeInternal;
extern RemoveSubjectFromShareRqstDefaultTypeInternal _RemoveSubjectFromShareRqst_default_instance_;
class RemoveSubjectFromShareRsp;
class RemoveSubjectFromShareRspDefaultTypeInternal;
extern RemoveSubjectFromShareRspDefaultTypeInternal _RemoveSubjectFromShareRsp_default_instance_;
class ResourceInfos;
class ResourceInfosDefaultTypeInternal;
extern ResourceInfosDefaultTypeInternal _ResourceInfos_default_instance_;
class SetActionResourcesPermissionsRqst;
class SetActionResourcesPermissionsRqstDefaultTypeInternal;
extern SetActionResourcesPermissionsRqstDefaultTypeInternal _SetActionResourcesPermissionsRqst_default_instance_;
class SetActionResourcesPermissionsRsp;
class SetActionResourcesPermissionsRspDefaultTypeInternal;
extern SetActionResourcesPermissionsRspDefaultTypeInternal _SetActionResourcesPermissionsRsp_default_instance_;
class SetResourcePermissionRqst;
class SetResourcePermissionRqstDefaultTypeInternal;
extern SetResourcePermissionRqstDefaultTypeInternal _SetResourcePermissionRqst_default_instance_;
class SetResourcePermissionRsp;
class SetResourcePermissionRspDefaultTypeInternal;
extern SetResourcePermissionRspDefaultTypeInternal _SetResourcePermissionRsp_default_instance_;
class SetResourcePermissionsRqst;
class SetResourcePermissionsRqstDefaultTypeInternal;
extern SetResourcePermissionsRqstDefaultTypeInternal _SetResourcePermissionsRqst_default_instance_;
class SetResourcePermissionsRsp;
class SetResourcePermissionsRspDefaultTypeInternal;
extern SetResourcePermissionsRspDefaultTypeInternal _SetResourcePermissionsRsp_default_instance_;
class Share;
class ShareDefaultTypeInternal;
extern ShareDefaultTypeInternal _Share_default_instance_;
class ShareResourceRqst;
class ShareResourceRqstDefaultTypeInternal;
extern ShareResourceRqstDefaultTypeInternal _ShareResourceRqst_default_instance_;
class ShareResourceRsp;
class ShareResourceRspDefaultTypeInternal;
extern ShareResourceRspDefaultTypeInternal _ShareResourceRsp_default_instance_;
class UnshareResourceRqst;
class UnshareResourceRqstDefaultTypeInternal;
extern UnshareResourceRqstDefaultTypeInternal _UnshareResourceRqst_default_instance_;
class UnshareResourceRsp;
class UnshareResourceRspDefaultTypeInternal;
extern UnshareResourceRspDefaultTypeInternal _UnshareResourceRsp_default_instance_;
class ValidateAccessRqst;
class ValidateAccessRqstDefaultTypeInternal;
extern ValidateAccessRqstDefaultTypeInternal _ValidateAccessRqst_default_instance_;
class ValidateAccessRsp;
class ValidateAccessRspDefaultTypeInternal;
extern ValidateAccessRspDefaultTypeInternal _ValidateAccessRsp_default_instance_;
class ValidateActionRqst;
class ValidateActionRqstDefaultTypeInternal;
extern ValidateActionRqstDefaultTypeInternal _ValidateActionRqst_default_instance_;
class ValidateActionRsp;
class ValidateActionRspDefaultTypeInternal;
extern ValidateActionRspDefaultTypeInternal _ValidateActionRsp_default_instance_;
}  // namespace rbac
namespace google {
namespace protobuf {
template<> ::rbac::AddResourceOwnerRqst* Arena::CreateMaybeMessage<::rbac::AddResourceOwnerRqst>(Arena*);
template<> ::rbac::AddResourceOwnerRsp* Arena::CreateMaybeMessage<::rbac::AddResourceOwnerRsp>(Arena*);
template<> ::rbac::DeleteAllAccessRqst* Arena::CreateMaybeMessage<::rbac::DeleteAllAccessRqst>(Arena*);
template<> ::rbac::DeleteAllAccessRsp* Arena::CreateMaybeMessage<::rbac::DeleteAllAccessRsp>(Arena*);
template<> ::rbac::DeleteResourcePermissionRqst* Arena::CreateMaybeMessage<::rbac::DeleteResourcePermissionRqst>(Arena*);
template<> ::rbac::DeleteResourcePermissionRsp* Arena::CreateMaybeMessage<::rbac::DeleteResourcePermissionRsp>(Arena*);
template<> ::rbac::DeleteResourcePermissionsRqst* Arena::CreateMaybeMessage<::rbac::DeleteResourcePermissionsRqst>(Arena*);
template<> ::rbac::DeleteResourcePermissionsRsp* Arena::CreateMaybeMessage<::rbac::DeleteResourcePermissionsRsp>(Arena*);
template<> ::rbac::DeleteSubjectShareRqst* Arena::CreateMaybeMessage<::rbac::DeleteSubjectShareRqst>(Arena*);
template<> ::rbac::DeleteSubjectShareRsp* Arena::CreateMaybeMessage<::rbac::DeleteSubjectShareRsp>(Arena*);
template<> ::rbac::GetActionResourceInfosRqst* Arena::CreateMaybeMessage<::rbac::GetActionResourceInfosRqst>(Arena*);
template<> ::rbac::GetActionResourceInfosRsp* Arena::CreateMaybeMessage<::rbac::GetActionResourceInfosRsp>(Arena*);
template<> ::rbac::GetResourcePermissionRqst* Arena::CreateMaybeMessage<::rbac::GetResourcePermissionRqst>(Arena*);
template<> ::rbac::GetResourcePermissionRsp* Arena::CreateMaybeMessage<::rbac::GetResourcePermissionRsp>(Arena*);
template<> ::rbac::GetResourcePermissionsRqst* Arena::CreateMaybeMessage<::rbac::GetResourcePermissionsRqst>(Arena*);
template<> ::rbac::GetResourcePermissionsRsp* Arena::CreateMaybeMessage<::rbac::GetResourcePermissionsRsp>(Arena*);
template<> ::rbac::GetSharedResourceRqst* Arena::CreateMaybeMessage<::rbac::GetSharedResourceRqst>(Arena*);
template<> ::rbac::GetSharedResourceRsp* Arena::CreateMaybeMessage<::rbac::GetSharedResourceRsp>(Arena*);
template<> ::rbac::Permission* Arena::CreateMaybeMessage<::rbac::Permission>(Arena*);
template<> ::rbac::Permissions* Arena::CreateMaybeMessage<::rbac::Permissions>(Arena*);
template<> ::rbac::RemoveResourceOwnerRqst* Arena::CreateMaybeMessage<::rbac::RemoveResourceOwnerRqst>(Arena*);
template<> ::rbac::RemoveResourceOwnerRsp* Arena::CreateMaybeMessage<::rbac::RemoveResourceOwnerRsp>(Arena*);
template<> ::rbac::RemoveSubjectFromShareRqst* Arena::CreateMaybeMessage<::rbac::RemoveSubjectFromShareRqst>(Arena*);
template<> ::rbac::RemoveSubjectFromShareRsp* Arena::CreateMaybeMessage<::rbac::RemoveSubjectFromShareRsp>(Arena*);
template<> ::rbac::ResourceInfos* Arena::CreateMaybeMessage<::rbac::ResourceInfos>(Arena*);
template<> ::rbac::SetActionResourcesPermissionsRqst* Arena::CreateMaybeMessage<::rbac::SetActionResourcesPermissionsRqst>(Arena*);
template<> ::rbac::SetActionResourcesPermissionsRsp* Arena::CreateMaybeMessage<::rbac::SetActionResourcesPermissionsRsp>(Arena*);
template<> ::rbac::SetResourcePermissionRqst* Arena::CreateMaybeMessage<::rbac::SetResourcePermissionRqst>(Arena*);
template<> ::rbac::SetResourcePermissionRsp* Arena::CreateMaybeMessage<::rbac::SetResourcePermissionRsp>(Arena*);
template<> ::rbac::SetResourcePermissionsRqst* Arena::CreateMaybeMessage<::rbac::SetResourcePermissionsRqst>(Arena*);
template<> ::rbac::SetResourcePermissionsRsp* Arena::CreateMaybeMessage<::rbac::SetResourcePermissionsRsp>(Arena*);
template<> ::rbac::Share* Arena::CreateMaybeMessage<::rbac::Share>(Arena*);
template<> ::rbac::ShareResourceRqst* Arena::CreateMaybeMessage<::rbac::ShareResourceRqst>(Arena*);
template<> ::rbac::ShareResourceRsp* Arena::CreateMaybeMessage<::rbac::ShareResourceRsp>(Arena*);
template<> ::rbac::UnshareResourceRqst* Arena::CreateMaybeMessage<::rbac::UnshareResourceRqst>(Arena*);
template<> ::rbac::UnshareResourceRsp* Arena::CreateMaybeMessage<::rbac::UnshareResourceRsp>(Arena*);
template<> ::rbac::ValidateAccessRqst* Arena::CreateMaybeMessage<::rbac::ValidateAccessRqst>(Arena*);
template<> ::rbac::ValidateAccessRsp* Arena::CreateMaybeMessage<::rbac::ValidateAccessRsp>(Arena*);
template<> ::rbac::ValidateActionRqst* Arena::CreateMaybeMessage<::rbac::ValidateActionRqst>(Arena*);
template<> ::rbac::ValidateActionRsp* Arena::CreateMaybeMessage<::rbac::ValidateActionRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace rbac {

enum PermissionType {
  DENIED = 0,
  ALLOWED = 1,
  PermissionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PermissionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PermissionType_IsValid(int value);
const PermissionType PermissionType_MIN = DENIED;
const PermissionType PermissionType_MAX = ALLOWED;
const int PermissionType_ARRAYSIZE = PermissionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PermissionType_descriptor();
inline const ::std::string& PermissionType_Name(PermissionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PermissionType_descriptor(), value);
}
inline bool PermissionType_Parse(
    const ::std::string& name, PermissionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PermissionType>(
    PermissionType_descriptor(), name, value);
}
enum SubjectType {
  ACCOUNT = 0,
  PEER = 1,
  GROUP = 2,
  ORGANIZATION = 3,
  APPLICATION = 4,
  ROLE = 5,
  SubjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SubjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SubjectType_IsValid(int value);
const SubjectType SubjectType_MIN = ACCOUNT;
const SubjectType SubjectType_MAX = ROLE;
const int SubjectType_ARRAYSIZE = SubjectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubjectType_descriptor();
inline const ::std::string& SubjectType_Name(SubjectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubjectType_descriptor(), value);
}
inline bool SubjectType_Parse(
    const ::std::string& name, SubjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubjectType>(
    SubjectType_descriptor(), name, value);
}
// ===================================================================

class Permission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.Permission) */ {
 public:
  Permission();
  virtual ~Permission();

  Permission(const Permission& from);

  inline Permission& operator=(const Permission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Permission(Permission&& from) noexcept
    : Permission() {
    *this = ::std::move(from);
  }

  inline Permission& operator=(Permission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Permission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Permission* internal_default_instance() {
    return reinterpret_cast<const Permission*>(
               &_Permission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Permission* other);
  friend void swap(Permission& a, Permission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Permission* New() const final {
    return CreateMaybeMessage<Permission>(NULL);
  }

  Permission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Permission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Permission& from);
  void MergeFrom(const Permission& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Permission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string applications = 2;
  int applications_size() const;
  void clear_applications();
  static const int kApplicationsFieldNumber = 2;
  const ::std::string& applications(int index) const;
  ::std::string* mutable_applications(int index);
  void set_applications(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_applications(int index, ::std::string&& value);
  #endif
  void set_applications(int index, const char* value);
  void set_applications(int index, const char* value, size_t size);
  ::std::string* add_applications();
  void add_applications(const ::std::string& value);
  #if LANG_CXX11
  void add_applications(::std::string&& value);
  #endif
  void add_applications(const char* value);
  void add_applications(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& applications() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_applications();

  // repeated string peers = 3;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 3;
  const ::std::string& peers(int index) const;
  ::std::string* mutable_peers(int index);
  void set_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_peers(int index, ::std::string&& value);
  #endif
  void set_peers(int index, const char* value);
  void set_peers(int index, const char* value, size_t size);
  ::std::string* add_peers();
  void add_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_peers(::std::string&& value);
  #endif
  void add_peers(const char* value);
  void add_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peers();

  // repeated string accounts = 4;
  int accounts_size() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 4;
  const ::std::string& accounts(int index) const;
  ::std::string* mutable_accounts(int index);
  void set_accounts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_accounts(int index, ::std::string&& value);
  #endif
  void set_accounts(int index, const char* value);
  void set_accounts(int index, const char* value, size_t size);
  ::std::string* add_accounts();
  void add_accounts(const ::std::string& value);
  #if LANG_CXX11
  void add_accounts(::std::string&& value);
  #endif
  void add_accounts(const char* value);
  void add_accounts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& accounts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_accounts();

  // repeated string groups = 5;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 5;
  const ::std::string& groups(int index) const;
  ::std::string* mutable_groups(int index);
  void set_groups(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_groups(int index, ::std::string&& value);
  #endif
  void set_groups(int index, const char* value);
  void set_groups(int index, const char* value, size_t size);
  ::std::string* add_groups();
  void add_groups(const ::std::string& value);
  #if LANG_CXX11
  void add_groups(::std::string&& value);
  #endif
  void add_groups(const char* value);
  void add_groups(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& groups() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_groups();

  // repeated string organizations = 6;
  int organizations_size() const;
  void clear_organizations();
  static const int kOrganizationsFieldNumber = 6;
  const ::std::string& organizations(int index) const;
  ::std::string* mutable_organizations(int index);
  void set_organizations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_organizations(int index, ::std::string&& value);
  #endif
  void set_organizations(int index, const char* value);
  void set_organizations(int index, const char* value, size_t size);
  ::std::string* add_organizations();
  void add_organizations(const ::std::string& value);
  #if LANG_CXX11
  void add_organizations(::std::string&& value);
  #endif
  void add_organizations(const char* value);
  void add_organizations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& organizations() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_organizations();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:rbac.Permission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> applications_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> accounts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> groups_;
  ::google::protobuf::RepeatedPtrField< ::std::string> organizations_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Permissions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.Permissions) */ {
 public:
  Permissions();
  virtual ~Permissions();

  Permissions(const Permissions& from);

  inline Permissions& operator=(const Permissions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Permissions(Permissions&& from) noexcept
    : Permissions() {
    *this = ::std::move(from);
  }

  inline Permissions& operator=(Permissions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Permissions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Permissions* internal_default_instance() {
    return reinterpret_cast<const Permissions*>(
               &_Permissions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Permissions* other);
  friend void swap(Permissions& a, Permissions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Permissions* New() const final {
    return CreateMaybeMessage<Permissions>(NULL);
  }

  Permissions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Permissions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Permissions& from);
  void MergeFrom(const Permissions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Permissions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rbac.Permission allowed = 2;
  int allowed_size() const;
  void clear_allowed();
  static const int kAllowedFieldNumber = 2;
  ::rbac::Permission* mutable_allowed(int index);
  ::google::protobuf::RepeatedPtrField< ::rbac::Permission >*
      mutable_allowed();
  const ::rbac::Permission& allowed(int index) const;
  ::rbac::Permission* add_allowed();
  const ::google::protobuf::RepeatedPtrField< ::rbac::Permission >&
      allowed() const;

  // repeated .rbac.Permission denied = 3;
  int denied_size() const;
  void clear_denied();
  static const int kDeniedFieldNumber = 3;
  ::rbac::Permission* mutable_denied(int index);
  ::google::protobuf::RepeatedPtrField< ::rbac::Permission >*
      mutable_denied();
  const ::rbac::Permission& denied(int index) const;
  ::rbac::Permission* add_denied();
  const ::google::protobuf::RepeatedPtrField< ::rbac::Permission >&
      denied() const;

  // .rbac.Permission owners = 1;
  bool has_owners() const;
  void clear_owners();
  static const int kOwnersFieldNumber = 1;
  private:
  const ::rbac::Permission& _internal_owners() const;
  public:
  const ::rbac::Permission& owners() const;
  ::rbac::Permission* release_owners();
  ::rbac::Permission* mutable_owners();
  void set_allocated_owners(::rbac::Permission* owners);

  // @@protoc_insertion_point(class_scope:rbac.Permissions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::rbac::Permission > allowed_;
  ::google::protobuf::RepeatedPtrField< ::rbac::Permission > denied_;
  ::rbac::Permission* owners_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetResourcePermissionsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.GetResourcePermissionsRqst) */ {
 public:
  GetResourcePermissionsRqst();
  virtual ~GetResourcePermissionsRqst();

  GetResourcePermissionsRqst(const GetResourcePermissionsRqst& from);

  inline GetResourcePermissionsRqst& operator=(const GetResourcePermissionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResourcePermissionsRqst(GetResourcePermissionsRqst&& from) noexcept
    : GetResourcePermissionsRqst() {
    *this = ::std::move(from);
  }

  inline GetResourcePermissionsRqst& operator=(GetResourcePermissionsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResourcePermissionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResourcePermissionsRqst* internal_default_instance() {
    return reinterpret_cast<const GetResourcePermissionsRqst*>(
               &_GetResourcePermissionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetResourcePermissionsRqst* other);
  friend void swap(GetResourcePermissionsRqst& a, GetResourcePermissionsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResourcePermissionsRqst* New() const final {
    return CreateMaybeMessage<GetResourcePermissionsRqst>(NULL);
  }

  GetResourcePermissionsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResourcePermissionsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetResourcePermissionsRqst& from);
  void MergeFrom(const GetResourcePermissionsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResourcePermissionsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:rbac.GetResourcePermissionsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetResourcePermissionsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.GetResourcePermissionsRsp) */ {
 public:
  GetResourcePermissionsRsp();
  virtual ~GetResourcePermissionsRsp();

  GetResourcePermissionsRsp(const GetResourcePermissionsRsp& from);

  inline GetResourcePermissionsRsp& operator=(const GetResourcePermissionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResourcePermissionsRsp(GetResourcePermissionsRsp&& from) noexcept
    : GetResourcePermissionsRsp() {
    *this = ::std::move(from);
  }

  inline GetResourcePermissionsRsp& operator=(GetResourcePermissionsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResourcePermissionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResourcePermissionsRsp* internal_default_instance() {
    return reinterpret_cast<const GetResourcePermissionsRsp*>(
               &_GetResourcePermissionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetResourcePermissionsRsp* other);
  friend void swap(GetResourcePermissionsRsp& a, GetResourcePermissionsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResourcePermissionsRsp* New() const final {
    return CreateMaybeMessage<GetResourcePermissionsRsp>(NULL);
  }

  GetResourcePermissionsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResourcePermissionsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetResourcePermissionsRsp& from);
  void MergeFrom(const GetResourcePermissionsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResourcePermissionsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .rbac.Permissions permissions = 1;
  bool has_permissions() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 1;
  private:
  const ::rbac::Permissions& _internal_permissions() const;
  public:
  const ::rbac::Permissions& permissions() const;
  ::rbac::Permissions* release_permissions();
  ::rbac::Permissions* mutable_permissions();
  void set_allocated_permissions(::rbac::Permissions* permissions);

  // @@protoc_insertion_point(class_scope:rbac.GetResourcePermissionsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::rbac::Permissions* permissions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteResourcePermissionsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.DeleteResourcePermissionsRqst) */ {
 public:
  DeleteResourcePermissionsRqst();
  virtual ~DeleteResourcePermissionsRqst();

  DeleteResourcePermissionsRqst(const DeleteResourcePermissionsRqst& from);

  inline DeleteResourcePermissionsRqst& operator=(const DeleteResourcePermissionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteResourcePermissionsRqst(DeleteResourcePermissionsRqst&& from) noexcept
    : DeleteResourcePermissionsRqst() {
    *this = ::std::move(from);
  }

  inline DeleteResourcePermissionsRqst& operator=(DeleteResourcePermissionsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResourcePermissionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResourcePermissionsRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteResourcePermissionsRqst*>(
               &_DeleteResourcePermissionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeleteResourcePermissionsRqst* other);
  friend void swap(DeleteResourcePermissionsRqst& a, DeleteResourcePermissionsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteResourcePermissionsRqst* New() const final {
    return CreateMaybeMessage<DeleteResourcePermissionsRqst>(NULL);
  }

  DeleteResourcePermissionsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResourcePermissionsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteResourcePermissionsRqst& from);
  void MergeFrom(const DeleteResourcePermissionsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResourcePermissionsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:rbac.DeleteResourcePermissionsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteResourcePermissionsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.DeleteResourcePermissionsRsp) */ {
 public:
  DeleteResourcePermissionsRsp();
  virtual ~DeleteResourcePermissionsRsp();

  DeleteResourcePermissionsRsp(const DeleteResourcePermissionsRsp& from);

  inline DeleteResourcePermissionsRsp& operator=(const DeleteResourcePermissionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteResourcePermissionsRsp(DeleteResourcePermissionsRsp&& from) noexcept
    : DeleteResourcePermissionsRsp() {
    *this = ::std::move(from);
  }

  inline DeleteResourcePermissionsRsp& operator=(DeleteResourcePermissionsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResourcePermissionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResourcePermissionsRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteResourcePermissionsRsp*>(
               &_DeleteResourcePermissionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeleteResourcePermissionsRsp* other);
  friend void swap(DeleteResourcePermissionsRsp& a, DeleteResourcePermissionsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteResourcePermissionsRsp* New() const final {
    return CreateMaybeMessage<DeleteResourcePermissionsRsp>(NULL);
  }

  DeleteResourcePermissionsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResourcePermissionsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteResourcePermissionsRsp& from);
  void MergeFrom(const DeleteResourcePermissionsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResourcePermissionsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .rbac.Permissions permissions = 1;
  bool has_permissions() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 1;
  private:
  const ::rbac::Permissions& _internal_permissions() const;
  public:
  const ::rbac::Permissions& permissions() const;
  ::rbac::Permissions* release_permissions();
  ::rbac::Permissions* mutable_permissions();
  void set_allocated_permissions(::rbac::Permissions* permissions);

  // @@protoc_insertion_point(class_scope:rbac.DeleteResourcePermissionsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::rbac::Permissions* permissions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteResourcePermissionRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.DeleteResourcePermissionRqst) */ {
 public:
  DeleteResourcePermissionRqst();
  virtual ~DeleteResourcePermissionRqst();

  DeleteResourcePermissionRqst(const DeleteResourcePermissionRqst& from);

  inline DeleteResourcePermissionRqst& operator=(const DeleteResourcePermissionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteResourcePermissionRqst(DeleteResourcePermissionRqst&& from) noexcept
    : DeleteResourcePermissionRqst() {
    *this = ::std::move(from);
  }

  inline DeleteResourcePermissionRqst& operator=(DeleteResourcePermissionRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResourcePermissionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResourcePermissionRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteResourcePermissionRqst*>(
               &_DeleteResourcePermissionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DeleteResourcePermissionRqst* other);
  friend void swap(DeleteResourcePermissionRqst& a, DeleteResourcePermissionRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteResourcePermissionRqst* New() const final {
    return CreateMaybeMessage<DeleteResourcePermissionRqst>(NULL);
  }

  DeleteResourcePermissionRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResourcePermissionRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteResourcePermissionRqst& from);
  void MergeFrom(const DeleteResourcePermissionRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResourcePermissionRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .rbac.PermissionType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::rbac::PermissionType type() const;
  void set_type(::rbac::PermissionType value);

  // @@protoc_insertion_point(class_scope:rbac.DeleteResourcePermissionRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteResourcePermissionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.DeleteResourcePermissionRsp) */ {
 public:
  DeleteResourcePermissionRsp();
  virtual ~DeleteResourcePermissionRsp();

  DeleteResourcePermissionRsp(const DeleteResourcePermissionRsp& from);

  inline DeleteResourcePermissionRsp& operator=(const DeleteResourcePermissionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteResourcePermissionRsp(DeleteResourcePermissionRsp&& from) noexcept
    : DeleteResourcePermissionRsp() {
    *this = ::std::move(from);
  }

  inline DeleteResourcePermissionRsp& operator=(DeleteResourcePermissionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResourcePermissionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResourcePermissionRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteResourcePermissionRsp*>(
               &_DeleteResourcePermissionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DeleteResourcePermissionRsp* other);
  friend void swap(DeleteResourcePermissionRsp& a, DeleteResourcePermissionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteResourcePermissionRsp* New() const final {
    return CreateMaybeMessage<DeleteResourcePermissionRsp>(NULL);
  }

  DeleteResourcePermissionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResourcePermissionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteResourcePermissionRsp& from);
  void MergeFrom(const DeleteResourcePermissionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResourcePermissionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rbac.DeleteResourcePermissionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetResourcePermissionsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.SetResourcePermissionsRqst) */ {
 public:
  SetResourcePermissionsRqst();
  virtual ~SetResourcePermissionsRqst();

  SetResourcePermissionsRqst(const SetResourcePermissionsRqst& from);

  inline SetResourcePermissionsRqst& operator=(const SetResourcePermissionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetResourcePermissionsRqst(SetResourcePermissionsRqst&& from) noexcept
    : SetResourcePermissionsRqst() {
    *this = ::std::move(from);
  }

  inline SetResourcePermissionsRqst& operator=(SetResourcePermissionsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetResourcePermissionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResourcePermissionsRqst* internal_default_instance() {
    return reinterpret_cast<const SetResourcePermissionsRqst*>(
               &_SetResourcePermissionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SetResourcePermissionsRqst* other);
  friend void swap(SetResourcePermissionsRqst& a, SetResourcePermissionsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetResourcePermissionsRqst* New() const final {
    return CreateMaybeMessage<SetResourcePermissionsRqst>(NULL);
  }

  SetResourcePermissionsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetResourcePermissionsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetResourcePermissionsRqst& from);
  void MergeFrom(const SetResourcePermissionsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResourcePermissionsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .rbac.Permissions permissions = 2;
  bool has_permissions() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 2;
  private:
  const ::rbac::Permissions& _internal_permissions() const;
  public:
  const ::rbac::Permissions& permissions() const;
  ::rbac::Permissions* release_permissions();
  ::rbac::Permissions* mutable_permissions();
  void set_allocated_permissions(::rbac::Permissions* permissions);

  // @@protoc_insertion_point(class_scope:rbac.SetResourcePermissionsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::rbac::Permissions* permissions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetResourcePermissionsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.SetResourcePermissionsRsp) */ {
 public:
  SetResourcePermissionsRsp();
  virtual ~SetResourcePermissionsRsp();

  SetResourcePermissionsRsp(const SetResourcePermissionsRsp& from);

  inline SetResourcePermissionsRsp& operator=(const SetResourcePermissionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetResourcePermissionsRsp(SetResourcePermissionsRsp&& from) noexcept
    : SetResourcePermissionsRsp() {
    *this = ::std::move(from);
  }

  inline SetResourcePermissionsRsp& operator=(SetResourcePermissionsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetResourcePermissionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResourcePermissionsRsp* internal_default_instance() {
    return reinterpret_cast<const SetResourcePermissionsRsp*>(
               &_SetResourcePermissionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SetResourcePermissionsRsp* other);
  friend void swap(SetResourcePermissionsRsp& a, SetResourcePermissionsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetResourcePermissionsRsp* New() const final {
    return CreateMaybeMessage<SetResourcePermissionsRsp>(NULL);
  }

  SetResourcePermissionsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetResourcePermissionsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetResourcePermissionsRsp& from);
  void MergeFrom(const SetResourcePermissionsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResourcePermissionsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rbac.SetResourcePermissionsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetResourcePermissionRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.GetResourcePermissionRqst) */ {
 public:
  GetResourcePermissionRqst();
  virtual ~GetResourcePermissionRqst();

  GetResourcePermissionRqst(const GetResourcePermissionRqst& from);

  inline GetResourcePermissionRqst& operator=(const GetResourcePermissionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResourcePermissionRqst(GetResourcePermissionRqst&& from) noexcept
    : GetResourcePermissionRqst() {
    *this = ::std::move(from);
  }

  inline GetResourcePermissionRqst& operator=(GetResourcePermissionRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResourcePermissionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResourcePermissionRqst* internal_default_instance() {
    return reinterpret_cast<const GetResourcePermissionRqst*>(
               &_GetResourcePermissionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetResourcePermissionRqst* other);
  friend void swap(GetResourcePermissionRqst& a, GetResourcePermissionRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResourcePermissionRqst* New() const final {
    return CreateMaybeMessage<GetResourcePermissionRqst>(NULL);
  }

  GetResourcePermissionRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResourcePermissionRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetResourcePermissionRqst& from);
  void MergeFrom(const GetResourcePermissionRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResourcePermissionRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .rbac.PermissionType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::rbac::PermissionType type() const;
  void set_type(::rbac::PermissionType value);

  // @@protoc_insertion_point(class_scope:rbac.GetResourcePermissionRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetResourcePermissionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.GetResourcePermissionRsp) */ {
 public:
  GetResourcePermissionRsp();
  virtual ~GetResourcePermissionRsp();

  GetResourcePermissionRsp(const GetResourcePermissionRsp& from);

  inline GetResourcePermissionRsp& operator=(const GetResourcePermissionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResourcePermissionRsp(GetResourcePermissionRsp&& from) noexcept
    : GetResourcePermissionRsp() {
    *this = ::std::move(from);
  }

  inline GetResourcePermissionRsp& operator=(GetResourcePermissionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResourcePermissionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResourcePermissionRsp* internal_default_instance() {
    return reinterpret_cast<const GetResourcePermissionRsp*>(
               &_GetResourcePermissionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetResourcePermissionRsp* other);
  friend void swap(GetResourcePermissionRsp& a, GetResourcePermissionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResourcePermissionRsp* New() const final {
    return CreateMaybeMessage<GetResourcePermissionRsp>(NULL);
  }

  GetResourcePermissionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResourcePermissionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetResourcePermissionRsp& from);
  void MergeFrom(const GetResourcePermissionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResourcePermissionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .rbac.Permission permission = 1;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 1;
  private:
  const ::rbac::Permission& _internal_permission() const;
  public:
  const ::rbac::Permission& permission() const;
  ::rbac::Permission* release_permission();
  ::rbac::Permission* mutable_permission();
  void set_allocated_permission(::rbac::Permission* permission);

  // @@protoc_insertion_point(class_scope:rbac.GetResourcePermissionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::rbac::Permission* permission_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetResourcePermissionRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.SetResourcePermissionRqst) */ {
 public:
  SetResourcePermissionRqst();
  virtual ~SetResourcePermissionRqst();

  SetResourcePermissionRqst(const SetResourcePermissionRqst& from);

  inline SetResourcePermissionRqst& operator=(const SetResourcePermissionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetResourcePermissionRqst(SetResourcePermissionRqst&& from) noexcept
    : SetResourcePermissionRqst() {
    *this = ::std::move(from);
  }

  inline SetResourcePermissionRqst& operator=(SetResourcePermissionRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetResourcePermissionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResourcePermissionRqst* internal_default_instance() {
    return reinterpret_cast<const SetResourcePermissionRqst*>(
               &_SetResourcePermissionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SetResourcePermissionRqst* other);
  friend void swap(SetResourcePermissionRqst& a, SetResourcePermissionRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetResourcePermissionRqst* New() const final {
    return CreateMaybeMessage<SetResourcePermissionRqst>(NULL);
  }

  SetResourcePermissionRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetResourcePermissionRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetResourcePermissionRqst& from);
  void MergeFrom(const SetResourcePermissionRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResourcePermissionRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .rbac.Permission permission = 2;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 2;
  private:
  const ::rbac::Permission& _internal_permission() const;
  public:
  const ::rbac::Permission& permission() const;
  ::rbac::Permission* release_permission();
  ::rbac::Permission* mutable_permission();
  void set_allocated_permission(::rbac::Permission* permission);

  // .rbac.PermissionType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::rbac::PermissionType type() const;
  void set_type(::rbac::PermissionType value);

  // @@protoc_insertion_point(class_scope:rbac.SetResourcePermissionRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::rbac::Permission* permission_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetResourcePermissionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.SetResourcePermissionRsp) */ {
 public:
  SetResourcePermissionRsp();
  virtual ~SetResourcePermissionRsp();

  SetResourcePermissionRsp(const SetResourcePermissionRsp& from);

  inline SetResourcePermissionRsp& operator=(const SetResourcePermissionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetResourcePermissionRsp(SetResourcePermissionRsp&& from) noexcept
    : SetResourcePermissionRsp() {
    *this = ::std::move(from);
  }

  inline SetResourcePermissionRsp& operator=(SetResourcePermissionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetResourcePermissionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResourcePermissionRsp* internal_default_instance() {
    return reinterpret_cast<const SetResourcePermissionRsp*>(
               &_SetResourcePermissionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SetResourcePermissionRsp* other);
  friend void swap(SetResourcePermissionRsp& a, SetResourcePermissionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetResourcePermissionRsp* New() const final {
    return CreateMaybeMessage<SetResourcePermissionRsp>(NULL);
  }

  SetResourcePermissionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetResourcePermissionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetResourcePermissionRsp& from);
  void MergeFrom(const SetResourcePermissionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResourcePermissionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rbac.SetResourcePermissionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddResourceOwnerRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.AddResourceOwnerRqst) */ {
 public:
  AddResourceOwnerRqst();
  virtual ~AddResourceOwnerRqst();

  AddResourceOwnerRqst(const AddResourceOwnerRqst& from);

  inline AddResourceOwnerRqst& operator=(const AddResourceOwnerRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddResourceOwnerRqst(AddResourceOwnerRqst&& from) noexcept
    : AddResourceOwnerRqst() {
    *this = ::std::move(from);
  }

  inline AddResourceOwnerRqst& operator=(AddResourceOwnerRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddResourceOwnerRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddResourceOwnerRqst* internal_default_instance() {
    return reinterpret_cast<const AddResourceOwnerRqst*>(
               &_AddResourceOwnerRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(AddResourceOwnerRqst* other);
  friend void swap(AddResourceOwnerRqst& a, AddResourceOwnerRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddResourceOwnerRqst* New() const final {
    return CreateMaybeMessage<AddResourceOwnerRqst>(NULL);
  }

  AddResourceOwnerRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddResourceOwnerRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddResourceOwnerRqst& from);
  void MergeFrom(const AddResourceOwnerRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResourceOwnerRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string subject = 2;
  void clear_subject();
  static const int kSubjectFieldNumber = 2;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // .rbac.SubjectType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::rbac::SubjectType type() const;
  void set_type(::rbac::SubjectType value);

  // @@protoc_insertion_point(class_scope:rbac.AddResourceOwnerRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddResourceOwnerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.AddResourceOwnerRsp) */ {
 public:
  AddResourceOwnerRsp();
  virtual ~AddResourceOwnerRsp();

  AddResourceOwnerRsp(const AddResourceOwnerRsp& from);

  inline AddResourceOwnerRsp& operator=(const AddResourceOwnerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddResourceOwnerRsp(AddResourceOwnerRsp&& from) noexcept
    : AddResourceOwnerRsp() {
    *this = ::std::move(from);
  }

  inline AddResourceOwnerRsp& operator=(AddResourceOwnerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddResourceOwnerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddResourceOwnerRsp* internal_default_instance() {
    return reinterpret_cast<const AddResourceOwnerRsp*>(
               &_AddResourceOwnerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(AddResourceOwnerRsp* other);
  friend void swap(AddResourceOwnerRsp& a, AddResourceOwnerRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddResourceOwnerRsp* New() const final {
    return CreateMaybeMessage<AddResourceOwnerRsp>(NULL);
  }

  AddResourceOwnerRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddResourceOwnerRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddResourceOwnerRsp& from);
  void MergeFrom(const AddResourceOwnerRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResourceOwnerRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rbac.AddResourceOwnerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveResourceOwnerRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.RemoveResourceOwnerRqst) */ {
 public:
  RemoveResourceOwnerRqst();
  virtual ~RemoveResourceOwnerRqst();

  RemoveResourceOwnerRqst(const RemoveResourceOwnerRqst& from);

  inline RemoveResourceOwnerRqst& operator=(const RemoveResourceOwnerRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveResourceOwnerRqst(RemoveResourceOwnerRqst&& from) noexcept
    : RemoveResourceOwnerRqst() {
    *this = ::std::move(from);
  }

  inline RemoveResourceOwnerRqst& operator=(RemoveResourceOwnerRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveResourceOwnerRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveResourceOwnerRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveResourceOwnerRqst*>(
               &_RemoveResourceOwnerRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(RemoveResourceOwnerRqst* other);
  friend void swap(RemoveResourceOwnerRqst& a, RemoveResourceOwnerRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveResourceOwnerRqst* New() const final {
    return CreateMaybeMessage<RemoveResourceOwnerRqst>(NULL);
  }

  RemoveResourceOwnerRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveResourceOwnerRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveResourceOwnerRqst& from);
  void MergeFrom(const RemoveResourceOwnerRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveResourceOwnerRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string subject = 2;
  void clear_subject();
  static const int kSubjectFieldNumber = 2;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // .rbac.SubjectType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::rbac::SubjectType type() const;
  void set_type(::rbac::SubjectType value);

  // @@protoc_insertion_point(class_scope:rbac.RemoveResourceOwnerRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveResourceOwnerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.RemoveResourceOwnerRsp) */ {
 public:
  RemoveResourceOwnerRsp();
  virtual ~RemoveResourceOwnerRsp();

  RemoveResourceOwnerRsp(const RemoveResourceOwnerRsp& from);

  inline RemoveResourceOwnerRsp& operator=(const RemoveResourceOwnerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveResourceOwnerRsp(RemoveResourceOwnerRsp&& from) noexcept
    : RemoveResourceOwnerRsp() {
    *this = ::std::move(from);
  }

  inline RemoveResourceOwnerRsp& operator=(RemoveResourceOwnerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveResourceOwnerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveResourceOwnerRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveResourceOwnerRsp*>(
               &_RemoveResourceOwnerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(RemoveResourceOwnerRsp* other);
  friend void swap(RemoveResourceOwnerRsp& a, RemoveResourceOwnerRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveResourceOwnerRsp* New() const final {
    return CreateMaybeMessage<RemoveResourceOwnerRsp>(NULL);
  }

  RemoveResourceOwnerRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveResourceOwnerRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveResourceOwnerRsp& from);
  void MergeFrom(const RemoveResourceOwnerRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveResourceOwnerRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rbac.RemoveResourceOwnerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteAllAccessRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.DeleteAllAccessRqst) */ {
 public:
  DeleteAllAccessRqst();
  virtual ~DeleteAllAccessRqst();

  DeleteAllAccessRqst(const DeleteAllAccessRqst& from);

  inline DeleteAllAccessRqst& operator=(const DeleteAllAccessRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteAllAccessRqst(DeleteAllAccessRqst&& from) noexcept
    : DeleteAllAccessRqst() {
    *this = ::std::move(from);
  }

  inline DeleteAllAccessRqst& operator=(DeleteAllAccessRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteAllAccessRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAllAccessRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteAllAccessRqst*>(
               &_DeleteAllAccessRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(DeleteAllAccessRqst* other);
  friend void swap(DeleteAllAccessRqst& a, DeleteAllAccessRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteAllAccessRqst* New() const final {
    return CreateMaybeMessage<DeleteAllAccessRqst>(NULL);
  }

  DeleteAllAccessRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAllAccessRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteAllAccessRqst& from);
  void MergeFrom(const DeleteAllAccessRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAllAccessRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subject = 1;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // .rbac.SubjectType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::rbac::SubjectType type() const;
  void set_type(::rbac::SubjectType value);

  // @@protoc_insertion_point(class_scope:rbac.DeleteAllAccessRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteAllAccessRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.DeleteAllAccessRsp) */ {
 public:
  DeleteAllAccessRsp();
  virtual ~DeleteAllAccessRsp();

  DeleteAllAccessRsp(const DeleteAllAccessRsp& from);

  inline DeleteAllAccessRsp& operator=(const DeleteAllAccessRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteAllAccessRsp(DeleteAllAccessRsp&& from) noexcept
    : DeleteAllAccessRsp() {
    *this = ::std::move(from);
  }

  inline DeleteAllAccessRsp& operator=(DeleteAllAccessRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteAllAccessRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAllAccessRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteAllAccessRsp*>(
               &_DeleteAllAccessRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(DeleteAllAccessRsp* other);
  friend void swap(DeleteAllAccessRsp& a, DeleteAllAccessRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteAllAccessRsp* New() const final {
    return CreateMaybeMessage<DeleteAllAccessRsp>(NULL);
  }

  DeleteAllAccessRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAllAccessRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteAllAccessRsp& from);
  void MergeFrom(const DeleteAllAccessRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAllAccessRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rbac.DeleteAllAccessRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValidateAccessRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.ValidateAccessRqst) */ {
 public:
  ValidateAccessRqst();
  virtual ~ValidateAccessRqst();

  ValidateAccessRqst(const ValidateAccessRqst& from);

  inline ValidateAccessRqst& operator=(const ValidateAccessRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidateAccessRqst(ValidateAccessRqst&& from) noexcept
    : ValidateAccessRqst() {
    *this = ::std::move(from);
  }

  inline ValidateAccessRqst& operator=(ValidateAccessRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateAccessRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateAccessRqst* internal_default_instance() {
    return reinterpret_cast<const ValidateAccessRqst*>(
               &_ValidateAccessRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ValidateAccessRqst* other);
  friend void swap(ValidateAccessRqst& a, ValidateAccessRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidateAccessRqst* New() const final {
    return CreateMaybeMessage<ValidateAccessRqst>(NULL);
  }

  ValidateAccessRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValidateAccessRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValidateAccessRqst& from);
  void MergeFrom(const ValidateAccessRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateAccessRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subject = 1;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string permission = 4;
  void clear_permission();
  static const int kPermissionFieldNumber = 4;
  const ::std::string& permission() const;
  void set_permission(const ::std::string& value);
  #if LANG_CXX11
  void set_permission(::std::string&& value);
  #endif
  void set_permission(const char* value);
  void set_permission(const char* value, size_t size);
  ::std::string* mutable_permission();
  ::std::string* release_permission();
  void set_allocated_permission(::std::string* permission);

  // .rbac.SubjectType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::rbac::SubjectType type() const;
  void set_type(::rbac::SubjectType value);

  // @@protoc_insertion_point(class_scope:rbac.ValidateAccessRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr permission_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValidateAccessRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.ValidateAccessRsp) */ {
 public:
  ValidateAccessRsp();
  virtual ~ValidateAccessRsp();

  ValidateAccessRsp(const ValidateAccessRsp& from);

  inline ValidateAccessRsp& operator=(const ValidateAccessRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidateAccessRsp(ValidateAccessRsp&& from) noexcept
    : ValidateAccessRsp() {
    *this = ::std::move(from);
  }

  inline ValidateAccessRsp& operator=(ValidateAccessRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateAccessRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateAccessRsp* internal_default_instance() {
    return reinterpret_cast<const ValidateAccessRsp*>(
               &_ValidateAccessRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ValidateAccessRsp* other);
  friend void swap(ValidateAccessRsp& a, ValidateAccessRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidateAccessRsp* New() const final {
    return CreateMaybeMessage<ValidateAccessRsp>(NULL);
  }

  ValidateAccessRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValidateAccessRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValidateAccessRsp& from);
  void MergeFrom(const ValidateAccessRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateAccessRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool hasAccess = 1;
  void clear_hasaccess();
  static const int kHasAccessFieldNumber = 1;
  bool hasaccess() const;
  void set_hasaccess(bool value);

  // bool accessDenied = 2;
  void clear_accessdenied();
  static const int kAccessDeniedFieldNumber = 2;
  bool accessdenied() const;
  void set_accessdenied(bool value);

  // @@protoc_insertion_point(class_scope:rbac.ValidateAccessRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool hasaccess_;
  bool accessdenied_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetActionResourceInfosRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.GetActionResourceInfosRqst) */ {
 public:
  GetActionResourceInfosRqst();
  virtual ~GetActionResourceInfosRqst();

  GetActionResourceInfosRqst(const GetActionResourceInfosRqst& from);

  inline GetActionResourceInfosRqst& operator=(const GetActionResourceInfosRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetActionResourceInfosRqst(GetActionResourceInfosRqst&& from) noexcept
    : GetActionResourceInfosRqst() {
    *this = ::std::move(from);
  }

  inline GetActionResourceInfosRqst& operator=(GetActionResourceInfosRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetActionResourceInfosRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetActionResourceInfosRqst* internal_default_instance() {
    return reinterpret_cast<const GetActionResourceInfosRqst*>(
               &_GetActionResourceInfosRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(GetActionResourceInfosRqst* other);
  friend void swap(GetActionResourceInfosRqst& a, GetActionResourceInfosRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetActionResourceInfosRqst* New() const final {
    return CreateMaybeMessage<GetActionResourceInfosRqst>(NULL);
  }

  GetActionResourceInfosRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetActionResourceInfosRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetActionResourceInfosRqst& from);
  void MergeFrom(const GetActionResourceInfosRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActionResourceInfosRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // @@protoc_insertion_point(class_scope:rbac.GetActionResourceInfosRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResourceInfos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.ResourceInfos) */ {
 public:
  ResourceInfos();
  virtual ~ResourceInfos();

  ResourceInfos(const ResourceInfos& from);

  inline ResourceInfos& operator=(const ResourceInfos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceInfos(ResourceInfos&& from) noexcept
    : ResourceInfos() {
    *this = ::std::move(from);
  }

  inline ResourceInfos& operator=(ResourceInfos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceInfos* internal_default_instance() {
    return reinterpret_cast<const ResourceInfos*>(
               &_ResourceInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ResourceInfos* other);
  friend void swap(ResourceInfos& a, ResourceInfos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceInfos* New() const final {
    return CreateMaybeMessage<ResourceInfos>(NULL);
  }

  ResourceInfos* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceInfos>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceInfos& from);
  void MergeFrom(const ResourceInfos& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceInfos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string permission = 2;
  void clear_permission();
  static const int kPermissionFieldNumber = 2;
  const ::std::string& permission() const;
  void set_permission(const ::std::string& value);
  #if LANG_CXX11
  void set_permission(::std::string&& value);
  #endif
  void set_permission(const char* value);
  void set_permission(const char* value, size_t size);
  ::std::string* mutable_permission();
  ::std::string* release_permission();
  void set_allocated_permission(::std::string* permission);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rbac.ResourceInfos)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr permission_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int32 index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetActionResourceInfosRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.GetActionResourceInfosRsp) */ {
 public:
  GetActionResourceInfosRsp();
  virtual ~GetActionResourceInfosRsp();

  GetActionResourceInfosRsp(const GetActionResourceInfosRsp& from);

  inline GetActionResourceInfosRsp& operator=(const GetActionResourceInfosRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetActionResourceInfosRsp(GetActionResourceInfosRsp&& from) noexcept
    : GetActionResourceInfosRsp() {
    *this = ::std::move(from);
  }

  inline GetActionResourceInfosRsp& operator=(GetActionResourceInfosRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetActionResourceInfosRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetActionResourceInfosRsp* internal_default_instance() {
    return reinterpret_cast<const GetActionResourceInfosRsp*>(
               &_GetActionResourceInfosRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(GetActionResourceInfosRsp* other);
  friend void swap(GetActionResourceInfosRsp& a, GetActionResourceInfosRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetActionResourceInfosRsp* New() const final {
    return CreateMaybeMessage<GetActionResourceInfosRsp>(NULL);
  }

  GetActionResourceInfosRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetActionResourceInfosRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetActionResourceInfosRsp& from);
  void MergeFrom(const GetActionResourceInfosRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActionResourceInfosRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rbac.ResourceInfos infos = 1;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 1;
  ::rbac::ResourceInfos* mutable_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::rbac::ResourceInfos >*
      mutable_infos();
  const ::rbac::ResourceInfos& infos(int index) const;
  ::rbac::ResourceInfos* add_infos();
  const ::google::protobuf::RepeatedPtrField< ::rbac::ResourceInfos >&
      infos() const;

  // @@protoc_insertion_point(class_scope:rbac.GetActionResourceInfosRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::rbac::ResourceInfos > infos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValidateActionRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.ValidateActionRqst) */ {
 public:
  ValidateActionRqst();
  virtual ~ValidateActionRqst();

  ValidateActionRqst(const ValidateActionRqst& from);

  inline ValidateActionRqst& operator=(const ValidateActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidateActionRqst(ValidateActionRqst&& from) noexcept
    : ValidateActionRqst() {
    *this = ::std::move(from);
  }

  inline ValidateActionRqst& operator=(ValidateActionRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateActionRqst* internal_default_instance() {
    return reinterpret_cast<const ValidateActionRqst*>(
               &_ValidateActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ValidateActionRqst* other);
  friend void swap(ValidateActionRqst& a, ValidateActionRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidateActionRqst* New() const final {
    return CreateMaybeMessage<ValidateActionRqst>(NULL);
  }

  ValidateActionRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValidateActionRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValidateActionRqst& from);
  void MergeFrom(const ValidateActionRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateActionRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rbac.ResourceInfos infos = 4;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 4;
  ::rbac::ResourceInfos* mutable_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::rbac::ResourceInfos >*
      mutable_infos();
  const ::rbac::ResourceInfos& infos(int index) const;
  ::rbac::ResourceInfos* add_infos();
  const ::google::protobuf::RepeatedPtrField< ::rbac::ResourceInfos >&
      infos() const;

  // string subject = 1;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string action = 3;
  void clear_action();
  static const int kActionFieldNumber = 3;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // .rbac.SubjectType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::rbac::SubjectType type() const;
  void set_type(::rbac::SubjectType value);

  // @@protoc_insertion_point(class_scope:rbac.ValidateActionRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::rbac::ResourceInfos > infos_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValidateActionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.ValidateActionRsp) */ {
 public:
  ValidateActionRsp();
  virtual ~ValidateActionRsp();

  ValidateActionRsp(const ValidateActionRsp& from);

  inline ValidateActionRsp& operator=(const ValidateActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidateActionRsp(ValidateActionRsp&& from) noexcept
    : ValidateActionRsp() {
    *this = ::std::move(from);
  }

  inline ValidateActionRsp& operator=(ValidateActionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateActionRsp* internal_default_instance() {
    return reinterpret_cast<const ValidateActionRsp*>(
               &_ValidateActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ValidateActionRsp* other);
  friend void swap(ValidateActionRsp& a, ValidateActionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidateActionRsp* New() const final {
    return CreateMaybeMessage<ValidateActionRsp>(NULL);
  }

  ValidateActionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValidateActionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValidateActionRsp& from);
  void MergeFrom(const ValidateActionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateActionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:rbac.ValidateActionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetActionResourcesPermissionsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.SetActionResourcesPermissionsRqst) */ {
 public:
  SetActionResourcesPermissionsRqst();
  virtual ~SetActionResourcesPermissionsRqst();

  SetActionResourcesPermissionsRqst(const SetActionResourcesPermissionsRqst& from);

  inline SetActionResourcesPermissionsRqst& operator=(const SetActionResourcesPermissionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetActionResourcesPermissionsRqst(SetActionResourcesPermissionsRqst&& from) noexcept
    : SetActionResourcesPermissionsRqst() {
    *this = ::std::move(from);
  }

  inline SetActionResourcesPermissionsRqst& operator=(SetActionResourcesPermissionsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetActionResourcesPermissionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetActionResourcesPermissionsRqst* internal_default_instance() {
    return reinterpret_cast<const SetActionResourcesPermissionsRqst*>(
               &_SetActionResourcesPermissionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(SetActionResourcesPermissionsRqst* other);
  friend void swap(SetActionResourcesPermissionsRqst& a, SetActionResourcesPermissionsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetActionResourcesPermissionsRqst* New() const final {
    return CreateMaybeMessage<SetActionResourcesPermissionsRqst>(NULL);
  }

  SetActionResourcesPermissionsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetActionResourcesPermissionsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetActionResourcesPermissionsRqst& from);
  void MergeFrom(const SetActionResourcesPermissionsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActionResourcesPermissionsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Struct permissions = 1;
  bool has_permissions() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 1;
  private:
  const ::google::protobuf::Struct& _internal_permissions() const;
  public:
  const ::google::protobuf::Struct& permissions() const;
  ::google::protobuf::Struct* release_permissions();
  ::google::protobuf::Struct* mutable_permissions();
  void set_allocated_permissions(::google::protobuf::Struct* permissions);

  // @@protoc_insertion_point(class_scope:rbac.SetActionResourcesPermissionsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Struct* permissions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetActionResourcesPermissionsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.SetActionResourcesPermissionsRsp) */ {
 public:
  SetActionResourcesPermissionsRsp();
  virtual ~SetActionResourcesPermissionsRsp();

  SetActionResourcesPermissionsRsp(const SetActionResourcesPermissionsRsp& from);

  inline SetActionResourcesPermissionsRsp& operator=(const SetActionResourcesPermissionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetActionResourcesPermissionsRsp(SetActionResourcesPermissionsRsp&& from) noexcept
    : SetActionResourcesPermissionsRsp() {
    *this = ::std::move(from);
  }

  inline SetActionResourcesPermissionsRsp& operator=(SetActionResourcesPermissionsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetActionResourcesPermissionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetActionResourcesPermissionsRsp* internal_default_instance() {
    return reinterpret_cast<const SetActionResourcesPermissionsRsp*>(
               &_SetActionResourcesPermissionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(SetActionResourcesPermissionsRsp* other);
  friend void swap(SetActionResourcesPermissionsRsp& a, SetActionResourcesPermissionsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetActionResourcesPermissionsRsp* New() const final {
    return CreateMaybeMessage<SetActionResourcesPermissionsRsp>(NULL);
  }

  SetActionResourcesPermissionsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetActionResourcesPermissionsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetActionResourcesPermissionsRsp& from);
  void MergeFrom(const SetActionResourcesPermissionsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetActionResourcesPermissionsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rbac.SetActionResourcesPermissionsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Share : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.Share) */ {
 public:
  Share();
  virtual ~Share();

  Share(const Share& from);

  inline Share& operator=(const Share& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Share(Share&& from) noexcept
    : Share() {
    *this = ::std::move(from);
  }

  inline Share& operator=(Share&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Share& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Share* internal_default_instance() {
    return reinterpret_cast<const Share*>(
               &_Share_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(Share* other);
  friend void swap(Share& a, Share& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Share* New() const final {
    return CreateMaybeMessage<Share>(NULL);
  }

  Share* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Share>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Share& from);
  void MergeFrom(const Share& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Share* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string applications = 3;
  int applications_size() const;
  void clear_applications();
  static const int kApplicationsFieldNumber = 3;
  const ::std::string& applications(int index) const;
  ::std::string* mutable_applications(int index);
  void set_applications(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_applications(int index, ::std::string&& value);
  #endif
  void set_applications(int index, const char* value);
  void set_applications(int index, const char* value, size_t size);
  ::std::string* add_applications();
  void add_applications(const ::std::string& value);
  #if LANG_CXX11
  void add_applications(::std::string&& value);
  #endif
  void add_applications(const char* value);
  void add_applications(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& applications() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_applications();

  // repeated string peers = 4;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 4;
  const ::std::string& peers(int index) const;
  ::std::string* mutable_peers(int index);
  void set_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_peers(int index, ::std::string&& value);
  #endif
  void set_peers(int index, const char* value);
  void set_peers(int index, const char* value, size_t size);
  ::std::string* add_peers();
  void add_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_peers(::std::string&& value);
  #endif
  void add_peers(const char* value);
  void add_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peers();

  // repeated string accounts = 5;
  int accounts_size() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 5;
  const ::std::string& accounts(int index) const;
  ::std::string* mutable_accounts(int index);
  void set_accounts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_accounts(int index, ::std::string&& value);
  #endif
  void set_accounts(int index, const char* value);
  void set_accounts(int index, const char* value, size_t size);
  ::std::string* add_accounts();
  void add_accounts(const ::std::string& value);
  #if LANG_CXX11
  void add_accounts(::std::string&& value);
  #endif
  void add_accounts(const char* value);
  void add_accounts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& accounts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_accounts();

  // repeated string groups = 6;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 6;
  const ::std::string& groups(int index) const;
  ::std::string* mutable_groups(int index);
  void set_groups(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_groups(int index, ::std::string&& value);
  #endif
  void set_groups(int index, const char* value);
  void set_groups(int index, const char* value, size_t size);
  ::std::string* add_groups();
  void add_groups(const ::std::string& value);
  #if LANG_CXX11
  void add_groups(::std::string&& value);
  #endif
  void add_groups(const char* value);
  void add_groups(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& groups() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_groups();

  // repeated string organizations = 7;
  int organizations_size() const;
  void clear_organizations();
  static const int kOrganizationsFieldNumber = 7;
  const ::std::string& organizations(int index) const;
  ::std::string* mutable_organizations(int index);
  void set_organizations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_organizations(int index, ::std::string&& value);
  #endif
  void set_organizations(int index, const char* value);
  void set_organizations(int index, const char* value, size_t size);
  ::std::string* add_organizations();
  void add_organizations(const ::std::string& value);
  #if LANG_CXX11
  void add_organizations(::std::string&& value);
  #endif
  void add_organizations(const char* value);
  void add_organizations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& organizations() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_organizations();

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // @@protoc_insertion_point(class_scope:rbac.Share)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> applications_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> accounts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> groups_;
  ::google::protobuf::RepeatedPtrField< ::std::string> organizations_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShareResourceRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.ShareResourceRqst) */ {
 public:
  ShareResourceRqst();
  virtual ~ShareResourceRqst();

  ShareResourceRqst(const ShareResourceRqst& from);

  inline ShareResourceRqst& operator=(const ShareResourceRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShareResourceRqst(ShareResourceRqst&& from) noexcept
    : ShareResourceRqst() {
    *this = ::std::move(from);
  }

  inline ShareResourceRqst& operator=(ShareResourceRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareResourceRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShareResourceRqst* internal_default_instance() {
    return reinterpret_cast<const ShareResourceRqst*>(
               &_ShareResourceRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(ShareResourceRqst* other);
  friend void swap(ShareResourceRqst& a, ShareResourceRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShareResourceRqst* New() const final {
    return CreateMaybeMessage<ShareResourceRqst>(NULL);
  }

  ShareResourceRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShareResourceRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShareResourceRqst& from);
  void MergeFrom(const ShareResourceRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShareResourceRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .rbac.Share share = 1;
  bool has_share() const;
  void clear_share();
  static const int kShareFieldNumber = 1;
  private:
  const ::rbac::Share& _internal_share() const;
  public:
  const ::rbac::Share& share() const;
  ::rbac::Share* release_share();
  ::rbac::Share* mutable_share();
  void set_allocated_share(::rbac::Share* share);

  // @@protoc_insertion_point(class_scope:rbac.ShareResourceRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::rbac::Share* share_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShareResourceRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.ShareResourceRsp) */ {
 public:
  ShareResourceRsp();
  virtual ~ShareResourceRsp();

  ShareResourceRsp(const ShareResourceRsp& from);

  inline ShareResourceRsp& operator=(const ShareResourceRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShareResourceRsp(ShareResourceRsp&& from) noexcept
    : ShareResourceRsp() {
    *this = ::std::move(from);
  }

  inline ShareResourceRsp& operator=(ShareResourceRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareResourceRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShareResourceRsp* internal_default_instance() {
    return reinterpret_cast<const ShareResourceRsp*>(
               &_ShareResourceRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(ShareResourceRsp* other);
  friend void swap(ShareResourceRsp& a, ShareResourceRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShareResourceRsp* New() const final {
    return CreateMaybeMessage<ShareResourceRsp>(NULL);
  }

  ShareResourceRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShareResourceRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShareResourceRsp& from);
  void MergeFrom(const ShareResourceRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShareResourceRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rbac.ShareResourceRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnshareResourceRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.UnshareResourceRqst) */ {
 public:
  UnshareResourceRqst();
  virtual ~UnshareResourceRqst();

  UnshareResourceRqst(const UnshareResourceRqst& from);

  inline UnshareResourceRqst& operator=(const UnshareResourceRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnshareResourceRqst(UnshareResourceRqst&& from) noexcept
    : UnshareResourceRqst() {
    *this = ::std::move(from);
  }

  inline UnshareResourceRqst& operator=(UnshareResourceRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnshareResourceRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnshareResourceRqst* internal_default_instance() {
    return reinterpret_cast<const UnshareResourceRqst*>(
               &_UnshareResourceRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(UnshareResourceRqst* other);
  friend void swap(UnshareResourceRqst& a, UnshareResourceRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnshareResourceRqst* New() const final {
    return CreateMaybeMessage<UnshareResourceRqst>(NULL);
  }

  UnshareResourceRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnshareResourceRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnshareResourceRqst& from);
  void MergeFrom(const UnshareResourceRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnshareResourceRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .rbac.Share share = 1;
  bool has_share() const;
  void clear_share();
  static const int kShareFieldNumber = 1;
  private:
  const ::rbac::Share& _internal_share() const;
  public:
  const ::rbac::Share& share() const;
  ::rbac::Share* release_share();
  ::rbac::Share* mutable_share();
  void set_allocated_share(::rbac::Share* share);

  // @@protoc_insertion_point(class_scope:rbac.UnshareResourceRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::rbac::Share* share_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnshareResourceRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.UnshareResourceRsp) */ {
 public:
  UnshareResourceRsp();
  virtual ~UnshareResourceRsp();

  UnshareResourceRsp(const UnshareResourceRsp& from);

  inline UnshareResourceRsp& operator=(const UnshareResourceRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnshareResourceRsp(UnshareResourceRsp&& from) noexcept
    : UnshareResourceRsp() {
    *this = ::std::move(from);
  }

  inline UnshareResourceRsp& operator=(UnshareResourceRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnshareResourceRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnshareResourceRsp* internal_default_instance() {
    return reinterpret_cast<const UnshareResourceRsp*>(
               &_UnshareResourceRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(UnshareResourceRsp* other);
  friend void swap(UnshareResourceRsp& a, UnshareResourceRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnshareResourceRsp* New() const final {
    return CreateMaybeMessage<UnshareResourceRsp>(NULL);
  }

  UnshareResourceRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnshareResourceRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnshareResourceRsp& from);
  void MergeFrom(const UnshareResourceRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnshareResourceRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rbac.UnshareResourceRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSharedResourceRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.GetSharedResourceRqst) */ {
 public:
  GetSharedResourceRqst();
  virtual ~GetSharedResourceRqst();

  GetSharedResourceRqst(const GetSharedResourceRqst& from);

  inline GetSharedResourceRqst& operator=(const GetSharedResourceRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSharedResourceRqst(GetSharedResourceRqst&& from) noexcept
    : GetSharedResourceRqst() {
    *this = ::std::move(from);
  }

  inline GetSharedResourceRqst& operator=(GetSharedResourceRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSharedResourceRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSharedResourceRqst* internal_default_instance() {
    return reinterpret_cast<const GetSharedResourceRqst*>(
               &_GetSharedResourceRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(GetSharedResourceRqst* other);
  friend void swap(GetSharedResourceRqst& a, GetSharedResourceRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSharedResourceRqst* New() const final {
    return CreateMaybeMessage<GetSharedResourceRqst>(NULL);
  }

  GetSharedResourceRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSharedResourceRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSharedResourceRqst& from);
  void MergeFrom(const GetSharedResourceRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSharedResourceRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subject = 1;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // .rbac.SubjectType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::rbac::SubjectType type() const;
  void set_type(::rbac::SubjectType value);

  // @@protoc_insertion_point(class_scope:rbac.GetSharedResourceRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSharedResourceRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.GetSharedResourceRsp) */ {
 public:
  GetSharedResourceRsp();
  virtual ~GetSharedResourceRsp();

  GetSharedResourceRsp(const GetSharedResourceRsp& from);

  inline GetSharedResourceRsp& operator=(const GetSharedResourceRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSharedResourceRsp(GetSharedResourceRsp&& from) noexcept
    : GetSharedResourceRsp() {
    *this = ::std::move(from);
  }

  inline GetSharedResourceRsp& operator=(GetSharedResourceRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSharedResourceRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSharedResourceRsp* internal_default_instance() {
    return reinterpret_cast<const GetSharedResourceRsp*>(
               &_GetSharedResourceRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(GetSharedResourceRsp* other);
  friend void swap(GetSharedResourceRsp& a, GetSharedResourceRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSharedResourceRsp* New() const final {
    return CreateMaybeMessage<GetSharedResourceRsp>(NULL);
  }

  GetSharedResourceRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSharedResourceRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSharedResourceRsp& from);
  void MergeFrom(const GetSharedResourceRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSharedResourceRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rbac.Share sharedResource = 1;
  int sharedresource_size() const;
  void clear_sharedresource();
  static const int kSharedResourceFieldNumber = 1;
  ::rbac::Share* mutable_sharedresource(int index);
  ::google::protobuf::RepeatedPtrField< ::rbac::Share >*
      mutable_sharedresource();
  const ::rbac::Share& sharedresource(int index) const;
  ::rbac::Share* add_sharedresource();
  const ::google::protobuf::RepeatedPtrField< ::rbac::Share >&
      sharedresource() const;

  // @@protoc_insertion_point(class_scope:rbac.GetSharedResourceRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::rbac::Share > sharedresource_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveSubjectFromShareRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.RemoveSubjectFromShareRqst) */ {
 public:
  RemoveSubjectFromShareRqst();
  virtual ~RemoveSubjectFromShareRqst();

  RemoveSubjectFromShareRqst(const RemoveSubjectFromShareRqst& from);

  inline RemoveSubjectFromShareRqst& operator=(const RemoveSubjectFromShareRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveSubjectFromShareRqst(RemoveSubjectFromShareRqst&& from) noexcept
    : RemoveSubjectFromShareRqst() {
    *this = ::std::move(from);
  }

  inline RemoveSubjectFromShareRqst& operator=(RemoveSubjectFromShareRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveSubjectFromShareRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveSubjectFromShareRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveSubjectFromShareRqst*>(
               &_RemoveSubjectFromShareRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(RemoveSubjectFromShareRqst* other);
  friend void swap(RemoveSubjectFromShareRqst& a, RemoveSubjectFromShareRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveSubjectFromShareRqst* New() const final {
    return CreateMaybeMessage<RemoveSubjectFromShareRqst>(NULL);
  }

  RemoveSubjectFromShareRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSubjectFromShareRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveSubjectFromShareRqst& from);
  void MergeFrom(const RemoveSubjectFromShareRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSubjectFromShareRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subject = 1;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string domain = 3;
  void clear_domain();
  static const int kDomainFieldNumber = 3;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string path = 4;
  void clear_path();
  static const int kPathFieldNumber = 4;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .rbac.SubjectType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::rbac::SubjectType type() const;
  void set_type(::rbac::SubjectType value);

  // @@protoc_insertion_point(class_scope:rbac.RemoveSubjectFromShareRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveSubjectFromShareRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.RemoveSubjectFromShareRsp) */ {
 public:
  RemoveSubjectFromShareRsp();
  virtual ~RemoveSubjectFromShareRsp();

  RemoveSubjectFromShareRsp(const RemoveSubjectFromShareRsp& from);

  inline RemoveSubjectFromShareRsp& operator=(const RemoveSubjectFromShareRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveSubjectFromShareRsp(RemoveSubjectFromShareRsp&& from) noexcept
    : RemoveSubjectFromShareRsp() {
    *this = ::std::move(from);
  }

  inline RemoveSubjectFromShareRsp& operator=(RemoveSubjectFromShareRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveSubjectFromShareRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveSubjectFromShareRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveSubjectFromShareRsp*>(
               &_RemoveSubjectFromShareRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(RemoveSubjectFromShareRsp* other);
  friend void swap(RemoveSubjectFromShareRsp& a, RemoveSubjectFromShareRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveSubjectFromShareRsp* New() const final {
    return CreateMaybeMessage<RemoveSubjectFromShareRsp>(NULL);
  }

  RemoveSubjectFromShareRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSubjectFromShareRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveSubjectFromShareRsp& from);
  void MergeFrom(const RemoveSubjectFromShareRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSubjectFromShareRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rbac.RemoveSubjectFromShareRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteSubjectShareRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.DeleteSubjectShareRqst) */ {
 public:
  DeleteSubjectShareRqst();
  virtual ~DeleteSubjectShareRqst();

  DeleteSubjectShareRqst(const DeleteSubjectShareRqst& from);

  inline DeleteSubjectShareRqst& operator=(const DeleteSubjectShareRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteSubjectShareRqst(DeleteSubjectShareRqst&& from) noexcept
    : DeleteSubjectShareRqst() {
    *this = ::std::move(from);
  }

  inline DeleteSubjectShareRqst& operator=(DeleteSubjectShareRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSubjectShareRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSubjectShareRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteSubjectShareRqst*>(
               &_DeleteSubjectShareRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(DeleteSubjectShareRqst* other);
  friend void swap(DeleteSubjectShareRqst& a, DeleteSubjectShareRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteSubjectShareRqst* New() const final {
    return CreateMaybeMessage<DeleteSubjectShareRqst>(NULL);
  }

  DeleteSubjectShareRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSubjectShareRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteSubjectShareRqst& from);
  void MergeFrom(const DeleteSubjectShareRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSubjectShareRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subject = 1;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // .rbac.SubjectType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::rbac::SubjectType type() const;
  void set_type(::rbac::SubjectType value);

  // @@protoc_insertion_point(class_scope:rbac.DeleteSubjectShareRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteSubjectShareRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rbac.DeleteSubjectShareRsp) */ {
 public:
  DeleteSubjectShareRsp();
  virtual ~DeleteSubjectShareRsp();

  DeleteSubjectShareRsp(const DeleteSubjectShareRsp& from);

  inline DeleteSubjectShareRsp& operator=(const DeleteSubjectShareRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteSubjectShareRsp(DeleteSubjectShareRsp&& from) noexcept
    : DeleteSubjectShareRsp() {
    *this = ::std::move(from);
  }

  inline DeleteSubjectShareRsp& operator=(DeleteSubjectShareRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSubjectShareRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSubjectShareRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteSubjectShareRsp*>(
               &_DeleteSubjectShareRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(DeleteSubjectShareRsp* other);
  friend void swap(DeleteSubjectShareRsp& a, DeleteSubjectShareRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteSubjectShareRsp* New() const final {
    return CreateMaybeMessage<DeleteSubjectShareRsp>(NULL);
  }

  DeleteSubjectShareRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSubjectShareRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteSubjectShareRsp& from);
  void MergeFrom(const DeleteSubjectShareRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSubjectShareRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rbac.DeleteSubjectShareRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rbac_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Permission

// string name = 1;
inline void Permission::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Permission::name() const {
  // @@protoc_insertion_point(field_get:rbac.Permission.name)
  return name_.GetNoArena();
}
inline void Permission::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.Permission.name)
}
#if LANG_CXX11
inline void Permission::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.Permission.name)
}
#endif
inline void Permission::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.Permission.name)
}
inline void Permission::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.Permission.name)
}
inline ::std::string* Permission::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:rbac.Permission.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Permission::release_name() {
  // @@protoc_insertion_point(field_release:rbac.Permission.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Permission::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rbac.Permission.name)
}

// repeated string applications = 2;
inline int Permission::applications_size() const {
  return applications_.size();
}
inline void Permission::clear_applications() {
  applications_.Clear();
}
inline const ::std::string& Permission::applications(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Permission.applications)
  return applications_.Get(index);
}
inline ::std::string* Permission::mutable_applications(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Permission.applications)
  return applications_.Mutable(index);
}
inline void Permission::set_applications(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rbac.Permission.applications)
  applications_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Permission::set_applications(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:rbac.Permission.applications)
  applications_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Permission::set_applications(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  applications_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rbac.Permission.applications)
}
inline void Permission::set_applications(int index, const char* value, size_t size) {
  applications_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rbac.Permission.applications)
}
inline ::std::string* Permission::add_applications() {
  // @@protoc_insertion_point(field_add_mutable:rbac.Permission.applications)
  return applications_.Add();
}
inline void Permission::add_applications(const ::std::string& value) {
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rbac.Permission.applications)
}
#if LANG_CXX11
inline void Permission::add_applications(::std::string&& value) {
  applications_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rbac.Permission.applications)
}
#endif
inline void Permission::add_applications(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rbac.Permission.applications)
}
inline void Permission::add_applications(const char* value, size_t size) {
  applications_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rbac.Permission.applications)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Permission::applications() const {
  // @@protoc_insertion_point(field_list:rbac.Permission.applications)
  return applications_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Permission::mutable_applications() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Permission.applications)
  return &applications_;
}

// repeated string peers = 3;
inline int Permission::peers_size() const {
  return peers_.size();
}
inline void Permission::clear_peers() {
  peers_.Clear();
}
inline const ::std::string& Permission::peers(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Permission.peers)
  return peers_.Get(index);
}
inline ::std::string* Permission::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Permission.peers)
  return peers_.Mutable(index);
}
inline void Permission::set_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rbac.Permission.peers)
  peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Permission::set_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:rbac.Permission.peers)
  peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Permission::set_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rbac.Permission.peers)
}
inline void Permission::set_peers(int index, const char* value, size_t size) {
  peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rbac.Permission.peers)
}
inline ::std::string* Permission::add_peers() {
  // @@protoc_insertion_point(field_add_mutable:rbac.Permission.peers)
  return peers_.Add();
}
inline void Permission::add_peers(const ::std::string& value) {
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rbac.Permission.peers)
}
#if LANG_CXX11
inline void Permission::add_peers(::std::string&& value) {
  peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rbac.Permission.peers)
}
#endif
inline void Permission::add_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rbac.Permission.peers)
}
inline void Permission::add_peers(const char* value, size_t size) {
  peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rbac.Permission.peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Permission::peers() const {
  // @@protoc_insertion_point(field_list:rbac.Permission.peers)
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Permission::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Permission.peers)
  return &peers_;
}

// repeated string accounts = 4;
inline int Permission::accounts_size() const {
  return accounts_.size();
}
inline void Permission::clear_accounts() {
  accounts_.Clear();
}
inline const ::std::string& Permission::accounts(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Permission.accounts)
  return accounts_.Get(index);
}
inline ::std::string* Permission::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Permission.accounts)
  return accounts_.Mutable(index);
}
inline void Permission::set_accounts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rbac.Permission.accounts)
  accounts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Permission::set_accounts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:rbac.Permission.accounts)
  accounts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Permission::set_accounts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rbac.Permission.accounts)
}
inline void Permission::set_accounts(int index, const char* value, size_t size) {
  accounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rbac.Permission.accounts)
}
inline ::std::string* Permission::add_accounts() {
  // @@protoc_insertion_point(field_add_mutable:rbac.Permission.accounts)
  return accounts_.Add();
}
inline void Permission::add_accounts(const ::std::string& value) {
  accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rbac.Permission.accounts)
}
#if LANG_CXX11
inline void Permission::add_accounts(::std::string&& value) {
  accounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rbac.Permission.accounts)
}
#endif
inline void Permission::add_accounts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rbac.Permission.accounts)
}
inline void Permission::add_accounts(const char* value, size_t size) {
  accounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rbac.Permission.accounts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Permission::accounts() const {
  // @@protoc_insertion_point(field_list:rbac.Permission.accounts)
  return accounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Permission::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Permission.accounts)
  return &accounts_;
}

// repeated string groups = 5;
inline int Permission::groups_size() const {
  return groups_.size();
}
inline void Permission::clear_groups() {
  groups_.Clear();
}
inline const ::std::string& Permission::groups(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Permission.groups)
  return groups_.Get(index);
}
inline ::std::string* Permission::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Permission.groups)
  return groups_.Mutable(index);
}
inline void Permission::set_groups(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rbac.Permission.groups)
  groups_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Permission::set_groups(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:rbac.Permission.groups)
  groups_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Permission::set_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rbac.Permission.groups)
}
inline void Permission::set_groups(int index, const char* value, size_t size) {
  groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rbac.Permission.groups)
}
inline ::std::string* Permission::add_groups() {
  // @@protoc_insertion_point(field_add_mutable:rbac.Permission.groups)
  return groups_.Add();
}
inline void Permission::add_groups(const ::std::string& value) {
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rbac.Permission.groups)
}
#if LANG_CXX11
inline void Permission::add_groups(::std::string&& value) {
  groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rbac.Permission.groups)
}
#endif
inline void Permission::add_groups(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rbac.Permission.groups)
}
inline void Permission::add_groups(const char* value, size_t size) {
  groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rbac.Permission.groups)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Permission::groups() const {
  // @@protoc_insertion_point(field_list:rbac.Permission.groups)
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Permission::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Permission.groups)
  return &groups_;
}

// repeated string organizations = 6;
inline int Permission::organizations_size() const {
  return organizations_.size();
}
inline void Permission::clear_organizations() {
  organizations_.Clear();
}
inline const ::std::string& Permission::organizations(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Permission.organizations)
  return organizations_.Get(index);
}
inline ::std::string* Permission::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Permission.organizations)
  return organizations_.Mutable(index);
}
inline void Permission::set_organizations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rbac.Permission.organizations)
  organizations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Permission::set_organizations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:rbac.Permission.organizations)
  organizations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Permission::set_organizations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  organizations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rbac.Permission.organizations)
}
inline void Permission::set_organizations(int index, const char* value, size_t size) {
  organizations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rbac.Permission.organizations)
}
inline ::std::string* Permission::add_organizations() {
  // @@protoc_insertion_point(field_add_mutable:rbac.Permission.organizations)
  return organizations_.Add();
}
inline void Permission::add_organizations(const ::std::string& value) {
  organizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rbac.Permission.organizations)
}
#if LANG_CXX11
inline void Permission::add_organizations(::std::string&& value) {
  organizations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rbac.Permission.organizations)
}
#endif
inline void Permission::add_organizations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  organizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rbac.Permission.organizations)
}
inline void Permission::add_organizations(const char* value, size_t size) {
  organizations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rbac.Permission.organizations)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Permission::organizations() const {
  // @@protoc_insertion_point(field_list:rbac.Permission.organizations)
  return organizations_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Permission::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Permission.organizations)
  return &organizations_;
}

// -------------------------------------------------------------------

// Permissions

// .rbac.Permission owners = 1;
inline bool Permissions::has_owners() const {
  return this != internal_default_instance() && owners_ != NULL;
}
inline void Permissions::clear_owners() {
  if (GetArenaNoVirtual() == NULL && owners_ != NULL) {
    delete owners_;
  }
  owners_ = NULL;
}
inline const ::rbac::Permission& Permissions::_internal_owners() const {
  return *owners_;
}
inline const ::rbac::Permission& Permissions::owners() const {
  const ::rbac::Permission* p = owners_;
  // @@protoc_insertion_point(field_get:rbac.Permissions.owners)
  return p != NULL ? *p : *reinterpret_cast<const ::rbac::Permission*>(
      &::rbac::_Permission_default_instance_);
}
inline ::rbac::Permission* Permissions::release_owners() {
  // @@protoc_insertion_point(field_release:rbac.Permissions.owners)
  
  ::rbac::Permission* temp = owners_;
  owners_ = NULL;
  return temp;
}
inline ::rbac::Permission* Permissions::mutable_owners() {
  
  if (owners_ == NULL) {
    auto* p = CreateMaybeMessage<::rbac::Permission>(GetArenaNoVirtual());
    owners_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rbac.Permissions.owners)
  return owners_;
}
inline void Permissions::set_allocated_owners(::rbac::Permission* owners) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete owners_;
  }
  if (owners) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      owners = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owners, submessage_arena);
    }
    
  } else {
    
  }
  owners_ = owners;
  // @@protoc_insertion_point(field_set_allocated:rbac.Permissions.owners)
}

// repeated .rbac.Permission allowed = 2;
inline int Permissions::allowed_size() const {
  return allowed_.size();
}
inline void Permissions::clear_allowed() {
  allowed_.Clear();
}
inline ::rbac::Permission* Permissions::mutable_allowed(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Permissions.allowed)
  return allowed_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::rbac::Permission >*
Permissions::mutable_allowed() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Permissions.allowed)
  return &allowed_;
}
inline const ::rbac::Permission& Permissions::allowed(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Permissions.allowed)
  return allowed_.Get(index);
}
inline ::rbac::Permission* Permissions::add_allowed() {
  // @@protoc_insertion_point(field_add:rbac.Permissions.allowed)
  return allowed_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rbac::Permission >&
Permissions::allowed() const {
  // @@protoc_insertion_point(field_list:rbac.Permissions.allowed)
  return allowed_;
}

// repeated .rbac.Permission denied = 3;
inline int Permissions::denied_size() const {
  return denied_.size();
}
inline void Permissions::clear_denied() {
  denied_.Clear();
}
inline ::rbac::Permission* Permissions::mutable_denied(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Permissions.denied)
  return denied_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::rbac::Permission >*
Permissions::mutable_denied() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Permissions.denied)
  return &denied_;
}
inline const ::rbac::Permission& Permissions::denied(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Permissions.denied)
  return denied_.Get(index);
}
inline ::rbac::Permission* Permissions::add_denied() {
  // @@protoc_insertion_point(field_add:rbac.Permissions.denied)
  return denied_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rbac::Permission >&
Permissions::denied() const {
  // @@protoc_insertion_point(field_list:rbac.Permissions.denied)
  return denied_;
}

// -------------------------------------------------------------------

// GetResourcePermissionsRqst

// string path = 1;
inline void GetResourcePermissionsRqst::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResourcePermissionsRqst::path() const {
  // @@protoc_insertion_point(field_get:rbac.GetResourcePermissionsRqst.path)
  return path_.GetNoArena();
}
inline void GetResourcePermissionsRqst::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.GetResourcePermissionsRqst.path)
}
#if LANG_CXX11
inline void GetResourcePermissionsRqst::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.GetResourcePermissionsRqst.path)
}
#endif
inline void GetResourcePermissionsRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.GetResourcePermissionsRqst.path)
}
inline void GetResourcePermissionsRqst::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.GetResourcePermissionsRqst.path)
}
inline ::std::string* GetResourcePermissionsRqst::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.GetResourcePermissionsRqst.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResourcePermissionsRqst::release_path() {
  // @@protoc_insertion_point(field_release:rbac.GetResourcePermissionsRqst.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResourcePermissionsRqst::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.GetResourcePermissionsRqst.path)
}

// -------------------------------------------------------------------

// GetResourcePermissionsRsp

// .rbac.Permissions permissions = 1;
inline bool GetResourcePermissionsRsp::has_permissions() const {
  return this != internal_default_instance() && permissions_ != NULL;
}
inline void GetResourcePermissionsRsp::clear_permissions() {
  if (GetArenaNoVirtual() == NULL && permissions_ != NULL) {
    delete permissions_;
  }
  permissions_ = NULL;
}
inline const ::rbac::Permissions& GetResourcePermissionsRsp::_internal_permissions() const {
  return *permissions_;
}
inline const ::rbac::Permissions& GetResourcePermissionsRsp::permissions() const {
  const ::rbac::Permissions* p = permissions_;
  // @@protoc_insertion_point(field_get:rbac.GetResourcePermissionsRsp.permissions)
  return p != NULL ? *p : *reinterpret_cast<const ::rbac::Permissions*>(
      &::rbac::_Permissions_default_instance_);
}
inline ::rbac::Permissions* GetResourcePermissionsRsp::release_permissions() {
  // @@protoc_insertion_point(field_release:rbac.GetResourcePermissionsRsp.permissions)
  
  ::rbac::Permissions* temp = permissions_;
  permissions_ = NULL;
  return temp;
}
inline ::rbac::Permissions* GetResourcePermissionsRsp::mutable_permissions() {
  
  if (permissions_ == NULL) {
    auto* p = CreateMaybeMessage<::rbac::Permissions>(GetArenaNoVirtual());
    permissions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rbac.GetResourcePermissionsRsp.permissions)
  return permissions_;
}
inline void GetResourcePermissionsRsp::set_allocated_permissions(::rbac::Permissions* permissions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete permissions_;
  }
  if (permissions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      permissions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissions, submessage_arena);
    }
    
  } else {
    
  }
  permissions_ = permissions;
  // @@protoc_insertion_point(field_set_allocated:rbac.GetResourcePermissionsRsp.permissions)
}

// -------------------------------------------------------------------

// DeleteResourcePermissionsRqst

// string path = 1;
inline void DeleteResourcePermissionsRqst::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteResourcePermissionsRqst::path() const {
  // @@protoc_insertion_point(field_get:rbac.DeleteResourcePermissionsRqst.path)
  return path_.GetNoArena();
}
inline void DeleteResourcePermissionsRqst::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.DeleteResourcePermissionsRqst.path)
}
#if LANG_CXX11
inline void DeleteResourcePermissionsRqst::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.DeleteResourcePermissionsRqst.path)
}
#endif
inline void DeleteResourcePermissionsRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.DeleteResourcePermissionsRqst.path)
}
inline void DeleteResourcePermissionsRqst::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.DeleteResourcePermissionsRqst.path)
}
inline ::std::string* DeleteResourcePermissionsRqst::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.DeleteResourcePermissionsRqst.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteResourcePermissionsRqst::release_path() {
  // @@protoc_insertion_point(field_release:rbac.DeleteResourcePermissionsRqst.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteResourcePermissionsRqst::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.DeleteResourcePermissionsRqst.path)
}

// -------------------------------------------------------------------

// DeleteResourcePermissionsRsp

// .rbac.Permissions permissions = 1;
inline bool DeleteResourcePermissionsRsp::has_permissions() const {
  return this != internal_default_instance() && permissions_ != NULL;
}
inline void DeleteResourcePermissionsRsp::clear_permissions() {
  if (GetArenaNoVirtual() == NULL && permissions_ != NULL) {
    delete permissions_;
  }
  permissions_ = NULL;
}
inline const ::rbac::Permissions& DeleteResourcePermissionsRsp::_internal_permissions() const {
  return *permissions_;
}
inline const ::rbac::Permissions& DeleteResourcePermissionsRsp::permissions() const {
  const ::rbac::Permissions* p = permissions_;
  // @@protoc_insertion_point(field_get:rbac.DeleteResourcePermissionsRsp.permissions)
  return p != NULL ? *p : *reinterpret_cast<const ::rbac::Permissions*>(
      &::rbac::_Permissions_default_instance_);
}
inline ::rbac::Permissions* DeleteResourcePermissionsRsp::release_permissions() {
  // @@protoc_insertion_point(field_release:rbac.DeleteResourcePermissionsRsp.permissions)
  
  ::rbac::Permissions* temp = permissions_;
  permissions_ = NULL;
  return temp;
}
inline ::rbac::Permissions* DeleteResourcePermissionsRsp::mutable_permissions() {
  
  if (permissions_ == NULL) {
    auto* p = CreateMaybeMessage<::rbac::Permissions>(GetArenaNoVirtual());
    permissions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rbac.DeleteResourcePermissionsRsp.permissions)
  return permissions_;
}
inline void DeleteResourcePermissionsRsp::set_allocated_permissions(::rbac::Permissions* permissions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete permissions_;
  }
  if (permissions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      permissions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissions, submessage_arena);
    }
    
  } else {
    
  }
  permissions_ = permissions;
  // @@protoc_insertion_point(field_set_allocated:rbac.DeleteResourcePermissionsRsp.permissions)
}

// -------------------------------------------------------------------

// DeleteResourcePermissionRqst

// string path = 1;
inline void DeleteResourcePermissionRqst::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteResourcePermissionRqst::path() const {
  // @@protoc_insertion_point(field_get:rbac.DeleteResourcePermissionRqst.path)
  return path_.GetNoArena();
}
inline void DeleteResourcePermissionRqst::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.DeleteResourcePermissionRqst.path)
}
#if LANG_CXX11
inline void DeleteResourcePermissionRqst::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.DeleteResourcePermissionRqst.path)
}
#endif
inline void DeleteResourcePermissionRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.DeleteResourcePermissionRqst.path)
}
inline void DeleteResourcePermissionRqst::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.DeleteResourcePermissionRqst.path)
}
inline ::std::string* DeleteResourcePermissionRqst::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.DeleteResourcePermissionRqst.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteResourcePermissionRqst::release_path() {
  // @@protoc_insertion_point(field_release:rbac.DeleteResourcePermissionRqst.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteResourcePermissionRqst::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.DeleteResourcePermissionRqst.path)
}

// string name = 2;
inline void DeleteResourcePermissionRqst::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteResourcePermissionRqst::name() const {
  // @@protoc_insertion_point(field_get:rbac.DeleteResourcePermissionRqst.name)
  return name_.GetNoArena();
}
inline void DeleteResourcePermissionRqst::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.DeleteResourcePermissionRqst.name)
}
#if LANG_CXX11
inline void DeleteResourcePermissionRqst::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.DeleteResourcePermissionRqst.name)
}
#endif
inline void DeleteResourcePermissionRqst::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.DeleteResourcePermissionRqst.name)
}
inline void DeleteResourcePermissionRqst::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.DeleteResourcePermissionRqst.name)
}
inline ::std::string* DeleteResourcePermissionRqst::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:rbac.DeleteResourcePermissionRqst.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteResourcePermissionRqst::release_name() {
  // @@protoc_insertion_point(field_release:rbac.DeleteResourcePermissionRqst.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteResourcePermissionRqst::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rbac.DeleteResourcePermissionRqst.name)
}

// .rbac.PermissionType type = 3;
inline void DeleteResourcePermissionRqst::clear_type() {
  type_ = 0;
}
inline ::rbac::PermissionType DeleteResourcePermissionRqst::type() const {
  // @@protoc_insertion_point(field_get:rbac.DeleteResourcePermissionRqst.type)
  return static_cast< ::rbac::PermissionType >(type_);
}
inline void DeleteResourcePermissionRqst::set_type(::rbac::PermissionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rbac.DeleteResourcePermissionRqst.type)
}

// -------------------------------------------------------------------

// DeleteResourcePermissionRsp

// -------------------------------------------------------------------

// SetResourcePermissionsRqst

// string path = 1;
inline void SetResourcePermissionsRqst::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetResourcePermissionsRqst::path() const {
  // @@protoc_insertion_point(field_get:rbac.SetResourcePermissionsRqst.path)
  return path_.GetNoArena();
}
inline void SetResourcePermissionsRqst::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.SetResourcePermissionsRqst.path)
}
#if LANG_CXX11
inline void SetResourcePermissionsRqst::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.SetResourcePermissionsRqst.path)
}
#endif
inline void SetResourcePermissionsRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.SetResourcePermissionsRqst.path)
}
inline void SetResourcePermissionsRqst::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.SetResourcePermissionsRqst.path)
}
inline ::std::string* SetResourcePermissionsRqst::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.SetResourcePermissionsRqst.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetResourcePermissionsRqst::release_path() {
  // @@protoc_insertion_point(field_release:rbac.SetResourcePermissionsRqst.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetResourcePermissionsRqst::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.SetResourcePermissionsRqst.path)
}

// .rbac.Permissions permissions = 2;
inline bool SetResourcePermissionsRqst::has_permissions() const {
  return this != internal_default_instance() && permissions_ != NULL;
}
inline void SetResourcePermissionsRqst::clear_permissions() {
  if (GetArenaNoVirtual() == NULL && permissions_ != NULL) {
    delete permissions_;
  }
  permissions_ = NULL;
}
inline const ::rbac::Permissions& SetResourcePermissionsRqst::_internal_permissions() const {
  return *permissions_;
}
inline const ::rbac::Permissions& SetResourcePermissionsRqst::permissions() const {
  const ::rbac::Permissions* p = permissions_;
  // @@protoc_insertion_point(field_get:rbac.SetResourcePermissionsRqst.permissions)
  return p != NULL ? *p : *reinterpret_cast<const ::rbac::Permissions*>(
      &::rbac::_Permissions_default_instance_);
}
inline ::rbac::Permissions* SetResourcePermissionsRqst::release_permissions() {
  // @@protoc_insertion_point(field_release:rbac.SetResourcePermissionsRqst.permissions)
  
  ::rbac::Permissions* temp = permissions_;
  permissions_ = NULL;
  return temp;
}
inline ::rbac::Permissions* SetResourcePermissionsRqst::mutable_permissions() {
  
  if (permissions_ == NULL) {
    auto* p = CreateMaybeMessage<::rbac::Permissions>(GetArenaNoVirtual());
    permissions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rbac.SetResourcePermissionsRqst.permissions)
  return permissions_;
}
inline void SetResourcePermissionsRqst::set_allocated_permissions(::rbac::Permissions* permissions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete permissions_;
  }
  if (permissions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      permissions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissions, submessage_arena);
    }
    
  } else {
    
  }
  permissions_ = permissions;
  // @@protoc_insertion_point(field_set_allocated:rbac.SetResourcePermissionsRqst.permissions)
}

// -------------------------------------------------------------------

// SetResourcePermissionsRsp

// -------------------------------------------------------------------

// GetResourcePermissionRqst

// string path = 1;
inline void GetResourcePermissionRqst::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResourcePermissionRqst::path() const {
  // @@protoc_insertion_point(field_get:rbac.GetResourcePermissionRqst.path)
  return path_.GetNoArena();
}
inline void GetResourcePermissionRqst::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.GetResourcePermissionRqst.path)
}
#if LANG_CXX11
inline void GetResourcePermissionRqst::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.GetResourcePermissionRqst.path)
}
#endif
inline void GetResourcePermissionRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.GetResourcePermissionRqst.path)
}
inline void GetResourcePermissionRqst::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.GetResourcePermissionRqst.path)
}
inline ::std::string* GetResourcePermissionRqst::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.GetResourcePermissionRqst.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResourcePermissionRqst::release_path() {
  // @@protoc_insertion_point(field_release:rbac.GetResourcePermissionRqst.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResourcePermissionRqst::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.GetResourcePermissionRqst.path)
}

// string name = 2;
inline void GetResourcePermissionRqst::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResourcePermissionRqst::name() const {
  // @@protoc_insertion_point(field_get:rbac.GetResourcePermissionRqst.name)
  return name_.GetNoArena();
}
inline void GetResourcePermissionRqst::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.GetResourcePermissionRqst.name)
}
#if LANG_CXX11
inline void GetResourcePermissionRqst::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.GetResourcePermissionRqst.name)
}
#endif
inline void GetResourcePermissionRqst::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.GetResourcePermissionRqst.name)
}
inline void GetResourcePermissionRqst::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.GetResourcePermissionRqst.name)
}
inline ::std::string* GetResourcePermissionRqst::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:rbac.GetResourcePermissionRqst.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResourcePermissionRqst::release_name() {
  // @@protoc_insertion_point(field_release:rbac.GetResourcePermissionRqst.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResourcePermissionRqst::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rbac.GetResourcePermissionRqst.name)
}

// .rbac.PermissionType type = 3;
inline void GetResourcePermissionRqst::clear_type() {
  type_ = 0;
}
inline ::rbac::PermissionType GetResourcePermissionRqst::type() const {
  // @@protoc_insertion_point(field_get:rbac.GetResourcePermissionRqst.type)
  return static_cast< ::rbac::PermissionType >(type_);
}
inline void GetResourcePermissionRqst::set_type(::rbac::PermissionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rbac.GetResourcePermissionRqst.type)
}

// -------------------------------------------------------------------

// GetResourcePermissionRsp

// .rbac.Permission permission = 1;
inline bool GetResourcePermissionRsp::has_permission() const {
  return this != internal_default_instance() && permission_ != NULL;
}
inline void GetResourcePermissionRsp::clear_permission() {
  if (GetArenaNoVirtual() == NULL && permission_ != NULL) {
    delete permission_;
  }
  permission_ = NULL;
}
inline const ::rbac::Permission& GetResourcePermissionRsp::_internal_permission() const {
  return *permission_;
}
inline const ::rbac::Permission& GetResourcePermissionRsp::permission() const {
  const ::rbac::Permission* p = permission_;
  // @@protoc_insertion_point(field_get:rbac.GetResourcePermissionRsp.permission)
  return p != NULL ? *p : *reinterpret_cast<const ::rbac::Permission*>(
      &::rbac::_Permission_default_instance_);
}
inline ::rbac::Permission* GetResourcePermissionRsp::release_permission() {
  // @@protoc_insertion_point(field_release:rbac.GetResourcePermissionRsp.permission)
  
  ::rbac::Permission* temp = permission_;
  permission_ = NULL;
  return temp;
}
inline ::rbac::Permission* GetResourcePermissionRsp::mutable_permission() {
  
  if (permission_ == NULL) {
    auto* p = CreateMaybeMessage<::rbac::Permission>(GetArenaNoVirtual());
    permission_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rbac.GetResourcePermissionRsp.permission)
  return permission_;
}
inline void GetResourcePermissionRsp::set_allocated_permission(::rbac::Permission* permission) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete permission_;
  }
  if (permission) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      permission = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permission, submessage_arena);
    }
    
  } else {
    
  }
  permission_ = permission;
  // @@protoc_insertion_point(field_set_allocated:rbac.GetResourcePermissionRsp.permission)
}

// -------------------------------------------------------------------

// SetResourcePermissionRqst

// string path = 1;
inline void SetResourcePermissionRqst::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetResourcePermissionRqst::path() const {
  // @@protoc_insertion_point(field_get:rbac.SetResourcePermissionRqst.path)
  return path_.GetNoArena();
}
inline void SetResourcePermissionRqst::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.SetResourcePermissionRqst.path)
}
#if LANG_CXX11
inline void SetResourcePermissionRqst::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.SetResourcePermissionRqst.path)
}
#endif
inline void SetResourcePermissionRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.SetResourcePermissionRqst.path)
}
inline void SetResourcePermissionRqst::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.SetResourcePermissionRqst.path)
}
inline ::std::string* SetResourcePermissionRqst::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.SetResourcePermissionRqst.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetResourcePermissionRqst::release_path() {
  // @@protoc_insertion_point(field_release:rbac.SetResourcePermissionRqst.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetResourcePermissionRqst::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.SetResourcePermissionRqst.path)
}

// .rbac.Permission permission = 2;
inline bool SetResourcePermissionRqst::has_permission() const {
  return this != internal_default_instance() && permission_ != NULL;
}
inline void SetResourcePermissionRqst::clear_permission() {
  if (GetArenaNoVirtual() == NULL && permission_ != NULL) {
    delete permission_;
  }
  permission_ = NULL;
}
inline const ::rbac::Permission& SetResourcePermissionRqst::_internal_permission() const {
  return *permission_;
}
inline const ::rbac::Permission& SetResourcePermissionRqst::permission() const {
  const ::rbac::Permission* p = permission_;
  // @@protoc_insertion_point(field_get:rbac.SetResourcePermissionRqst.permission)
  return p != NULL ? *p : *reinterpret_cast<const ::rbac::Permission*>(
      &::rbac::_Permission_default_instance_);
}
inline ::rbac::Permission* SetResourcePermissionRqst::release_permission() {
  // @@protoc_insertion_point(field_release:rbac.SetResourcePermissionRqst.permission)
  
  ::rbac::Permission* temp = permission_;
  permission_ = NULL;
  return temp;
}
inline ::rbac::Permission* SetResourcePermissionRqst::mutable_permission() {
  
  if (permission_ == NULL) {
    auto* p = CreateMaybeMessage<::rbac::Permission>(GetArenaNoVirtual());
    permission_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rbac.SetResourcePermissionRqst.permission)
  return permission_;
}
inline void SetResourcePermissionRqst::set_allocated_permission(::rbac::Permission* permission) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete permission_;
  }
  if (permission) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      permission = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permission, submessage_arena);
    }
    
  } else {
    
  }
  permission_ = permission;
  // @@protoc_insertion_point(field_set_allocated:rbac.SetResourcePermissionRqst.permission)
}

// .rbac.PermissionType type = 3;
inline void SetResourcePermissionRqst::clear_type() {
  type_ = 0;
}
inline ::rbac::PermissionType SetResourcePermissionRqst::type() const {
  // @@protoc_insertion_point(field_get:rbac.SetResourcePermissionRqst.type)
  return static_cast< ::rbac::PermissionType >(type_);
}
inline void SetResourcePermissionRqst::set_type(::rbac::PermissionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rbac.SetResourcePermissionRqst.type)
}

// -------------------------------------------------------------------

// SetResourcePermissionRsp

// -------------------------------------------------------------------

// AddResourceOwnerRqst

// string path = 1;
inline void AddResourceOwnerRqst::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddResourceOwnerRqst::path() const {
  // @@protoc_insertion_point(field_get:rbac.AddResourceOwnerRqst.path)
  return path_.GetNoArena();
}
inline void AddResourceOwnerRqst::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.AddResourceOwnerRqst.path)
}
#if LANG_CXX11
inline void AddResourceOwnerRqst::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.AddResourceOwnerRqst.path)
}
#endif
inline void AddResourceOwnerRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.AddResourceOwnerRqst.path)
}
inline void AddResourceOwnerRqst::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.AddResourceOwnerRqst.path)
}
inline ::std::string* AddResourceOwnerRqst::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.AddResourceOwnerRqst.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddResourceOwnerRqst::release_path() {
  // @@protoc_insertion_point(field_release:rbac.AddResourceOwnerRqst.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddResourceOwnerRqst::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.AddResourceOwnerRqst.path)
}

// string subject = 2;
inline void AddResourceOwnerRqst::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddResourceOwnerRqst::subject() const {
  // @@protoc_insertion_point(field_get:rbac.AddResourceOwnerRqst.subject)
  return subject_.GetNoArena();
}
inline void AddResourceOwnerRqst::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.AddResourceOwnerRqst.subject)
}
#if LANG_CXX11
inline void AddResourceOwnerRqst::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.AddResourceOwnerRqst.subject)
}
#endif
inline void AddResourceOwnerRqst::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.AddResourceOwnerRqst.subject)
}
inline void AddResourceOwnerRqst::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.AddResourceOwnerRqst.subject)
}
inline ::std::string* AddResourceOwnerRqst::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:rbac.AddResourceOwnerRqst.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddResourceOwnerRqst::release_subject() {
  // @@protoc_insertion_point(field_release:rbac.AddResourceOwnerRqst.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddResourceOwnerRqst::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:rbac.AddResourceOwnerRqst.subject)
}

// .rbac.SubjectType type = 3;
inline void AddResourceOwnerRqst::clear_type() {
  type_ = 0;
}
inline ::rbac::SubjectType AddResourceOwnerRqst::type() const {
  // @@protoc_insertion_point(field_get:rbac.AddResourceOwnerRqst.type)
  return static_cast< ::rbac::SubjectType >(type_);
}
inline void AddResourceOwnerRqst::set_type(::rbac::SubjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rbac.AddResourceOwnerRqst.type)
}

// -------------------------------------------------------------------

// AddResourceOwnerRsp

// -------------------------------------------------------------------

// RemoveResourceOwnerRqst

// string path = 1;
inline void RemoveResourceOwnerRqst::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveResourceOwnerRqst::path() const {
  // @@protoc_insertion_point(field_get:rbac.RemoveResourceOwnerRqst.path)
  return path_.GetNoArena();
}
inline void RemoveResourceOwnerRqst::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.RemoveResourceOwnerRqst.path)
}
#if LANG_CXX11
inline void RemoveResourceOwnerRqst::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.RemoveResourceOwnerRqst.path)
}
#endif
inline void RemoveResourceOwnerRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.RemoveResourceOwnerRqst.path)
}
inline void RemoveResourceOwnerRqst::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.RemoveResourceOwnerRqst.path)
}
inline ::std::string* RemoveResourceOwnerRqst::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.RemoveResourceOwnerRqst.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveResourceOwnerRqst::release_path() {
  // @@protoc_insertion_point(field_release:rbac.RemoveResourceOwnerRqst.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveResourceOwnerRqst::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.RemoveResourceOwnerRqst.path)
}

// string subject = 2;
inline void RemoveResourceOwnerRqst::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveResourceOwnerRqst::subject() const {
  // @@protoc_insertion_point(field_get:rbac.RemoveResourceOwnerRqst.subject)
  return subject_.GetNoArena();
}
inline void RemoveResourceOwnerRqst::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.RemoveResourceOwnerRqst.subject)
}
#if LANG_CXX11
inline void RemoveResourceOwnerRqst::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.RemoveResourceOwnerRqst.subject)
}
#endif
inline void RemoveResourceOwnerRqst::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.RemoveResourceOwnerRqst.subject)
}
inline void RemoveResourceOwnerRqst::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.RemoveResourceOwnerRqst.subject)
}
inline ::std::string* RemoveResourceOwnerRqst::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:rbac.RemoveResourceOwnerRqst.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveResourceOwnerRqst::release_subject() {
  // @@protoc_insertion_point(field_release:rbac.RemoveResourceOwnerRqst.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveResourceOwnerRqst::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:rbac.RemoveResourceOwnerRqst.subject)
}

// .rbac.SubjectType type = 3;
inline void RemoveResourceOwnerRqst::clear_type() {
  type_ = 0;
}
inline ::rbac::SubjectType RemoveResourceOwnerRqst::type() const {
  // @@protoc_insertion_point(field_get:rbac.RemoveResourceOwnerRqst.type)
  return static_cast< ::rbac::SubjectType >(type_);
}
inline void RemoveResourceOwnerRqst::set_type(::rbac::SubjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rbac.RemoveResourceOwnerRqst.type)
}

// -------------------------------------------------------------------

// RemoveResourceOwnerRsp

// -------------------------------------------------------------------

// DeleteAllAccessRqst

// string subject = 1;
inline void DeleteAllAccessRqst::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteAllAccessRqst::subject() const {
  // @@protoc_insertion_point(field_get:rbac.DeleteAllAccessRqst.subject)
  return subject_.GetNoArena();
}
inline void DeleteAllAccessRqst::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.DeleteAllAccessRqst.subject)
}
#if LANG_CXX11
inline void DeleteAllAccessRqst::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.DeleteAllAccessRqst.subject)
}
#endif
inline void DeleteAllAccessRqst::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.DeleteAllAccessRqst.subject)
}
inline void DeleteAllAccessRqst::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.DeleteAllAccessRqst.subject)
}
inline ::std::string* DeleteAllAccessRqst::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:rbac.DeleteAllAccessRqst.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteAllAccessRqst::release_subject() {
  // @@protoc_insertion_point(field_release:rbac.DeleteAllAccessRqst.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteAllAccessRqst::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:rbac.DeleteAllAccessRqst.subject)
}

// .rbac.SubjectType type = 2;
inline void DeleteAllAccessRqst::clear_type() {
  type_ = 0;
}
inline ::rbac::SubjectType DeleteAllAccessRqst::type() const {
  // @@protoc_insertion_point(field_get:rbac.DeleteAllAccessRqst.type)
  return static_cast< ::rbac::SubjectType >(type_);
}
inline void DeleteAllAccessRqst::set_type(::rbac::SubjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rbac.DeleteAllAccessRqst.type)
}

// -------------------------------------------------------------------

// DeleteAllAccessRsp

// -------------------------------------------------------------------

// ValidateAccessRqst

// string subject = 1;
inline void ValidateAccessRqst::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValidateAccessRqst::subject() const {
  // @@protoc_insertion_point(field_get:rbac.ValidateAccessRqst.subject)
  return subject_.GetNoArena();
}
inline void ValidateAccessRqst::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.ValidateAccessRqst.subject)
}
#if LANG_CXX11
inline void ValidateAccessRqst::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.ValidateAccessRqst.subject)
}
#endif
inline void ValidateAccessRqst::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.ValidateAccessRqst.subject)
}
inline void ValidateAccessRqst::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.ValidateAccessRqst.subject)
}
inline ::std::string* ValidateAccessRqst::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:rbac.ValidateAccessRqst.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidateAccessRqst::release_subject() {
  // @@protoc_insertion_point(field_release:rbac.ValidateAccessRqst.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateAccessRqst::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:rbac.ValidateAccessRqst.subject)
}

// .rbac.SubjectType type = 2;
inline void ValidateAccessRqst::clear_type() {
  type_ = 0;
}
inline ::rbac::SubjectType ValidateAccessRqst::type() const {
  // @@protoc_insertion_point(field_get:rbac.ValidateAccessRqst.type)
  return static_cast< ::rbac::SubjectType >(type_);
}
inline void ValidateAccessRqst::set_type(::rbac::SubjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rbac.ValidateAccessRqst.type)
}

// string path = 3;
inline void ValidateAccessRqst::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValidateAccessRqst::path() const {
  // @@protoc_insertion_point(field_get:rbac.ValidateAccessRqst.path)
  return path_.GetNoArena();
}
inline void ValidateAccessRqst::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.ValidateAccessRqst.path)
}
#if LANG_CXX11
inline void ValidateAccessRqst::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.ValidateAccessRqst.path)
}
#endif
inline void ValidateAccessRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.ValidateAccessRqst.path)
}
inline void ValidateAccessRqst::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.ValidateAccessRqst.path)
}
inline ::std::string* ValidateAccessRqst::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.ValidateAccessRqst.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidateAccessRqst::release_path() {
  // @@protoc_insertion_point(field_release:rbac.ValidateAccessRqst.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateAccessRqst::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.ValidateAccessRqst.path)
}

// string permission = 4;
inline void ValidateAccessRqst::clear_permission() {
  permission_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValidateAccessRqst::permission() const {
  // @@protoc_insertion_point(field_get:rbac.ValidateAccessRqst.permission)
  return permission_.GetNoArena();
}
inline void ValidateAccessRqst::set_permission(const ::std::string& value) {
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.ValidateAccessRqst.permission)
}
#if LANG_CXX11
inline void ValidateAccessRqst::set_permission(::std::string&& value) {
  
  permission_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.ValidateAccessRqst.permission)
}
#endif
inline void ValidateAccessRqst::set_permission(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.ValidateAccessRqst.permission)
}
inline void ValidateAccessRqst::set_permission(const char* value, size_t size) {
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.ValidateAccessRqst.permission)
}
inline ::std::string* ValidateAccessRqst::mutable_permission() {
  
  // @@protoc_insertion_point(field_mutable:rbac.ValidateAccessRqst.permission)
  return permission_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidateAccessRqst::release_permission() {
  // @@protoc_insertion_point(field_release:rbac.ValidateAccessRqst.permission)
  
  return permission_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateAccessRqst::set_allocated_permission(::std::string* permission) {
  if (permission != NULL) {
    
  } else {
    
  }
  permission_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), permission);
  // @@protoc_insertion_point(field_set_allocated:rbac.ValidateAccessRqst.permission)
}

// -------------------------------------------------------------------

// ValidateAccessRsp

// bool hasAccess = 1;
inline void ValidateAccessRsp::clear_hasaccess() {
  hasaccess_ = false;
}
inline bool ValidateAccessRsp::hasaccess() const {
  // @@protoc_insertion_point(field_get:rbac.ValidateAccessRsp.hasAccess)
  return hasaccess_;
}
inline void ValidateAccessRsp::set_hasaccess(bool value) {
  
  hasaccess_ = value;
  // @@protoc_insertion_point(field_set:rbac.ValidateAccessRsp.hasAccess)
}

// bool accessDenied = 2;
inline void ValidateAccessRsp::clear_accessdenied() {
  accessdenied_ = false;
}
inline bool ValidateAccessRsp::accessdenied() const {
  // @@protoc_insertion_point(field_get:rbac.ValidateAccessRsp.accessDenied)
  return accessdenied_;
}
inline void ValidateAccessRsp::set_accessdenied(bool value) {
  
  accessdenied_ = value;
  // @@protoc_insertion_point(field_set:rbac.ValidateAccessRsp.accessDenied)
}

// -------------------------------------------------------------------

// GetActionResourceInfosRqst

// string action = 1;
inline void GetActionResourceInfosRqst::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetActionResourceInfosRqst::action() const {
  // @@protoc_insertion_point(field_get:rbac.GetActionResourceInfosRqst.action)
  return action_.GetNoArena();
}
inline void GetActionResourceInfosRqst::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.GetActionResourceInfosRqst.action)
}
#if LANG_CXX11
inline void GetActionResourceInfosRqst::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.GetActionResourceInfosRqst.action)
}
#endif
inline void GetActionResourceInfosRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.GetActionResourceInfosRqst.action)
}
inline void GetActionResourceInfosRqst::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.GetActionResourceInfosRqst.action)
}
inline ::std::string* GetActionResourceInfosRqst::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:rbac.GetActionResourceInfosRqst.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetActionResourceInfosRqst::release_action() {
  // @@protoc_insertion_point(field_release:rbac.GetActionResourceInfosRqst.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetActionResourceInfosRqst::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:rbac.GetActionResourceInfosRqst.action)
}

// -------------------------------------------------------------------

// ResourceInfos

// int32 index = 1;
inline void ResourceInfos::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 ResourceInfos::index() const {
  // @@protoc_insertion_point(field_get:rbac.ResourceInfos.index)
  return index_;
}
inline void ResourceInfos::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:rbac.ResourceInfos.index)
}

// string permission = 2;
inline void ResourceInfos::clear_permission() {
  permission_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceInfos::permission() const {
  // @@protoc_insertion_point(field_get:rbac.ResourceInfos.permission)
  return permission_.GetNoArena();
}
inline void ResourceInfos::set_permission(const ::std::string& value) {
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.ResourceInfos.permission)
}
#if LANG_CXX11
inline void ResourceInfos::set_permission(::std::string&& value) {
  
  permission_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.ResourceInfos.permission)
}
#endif
inline void ResourceInfos::set_permission(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.ResourceInfos.permission)
}
inline void ResourceInfos::set_permission(const char* value, size_t size) {
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.ResourceInfos.permission)
}
inline ::std::string* ResourceInfos::mutable_permission() {
  
  // @@protoc_insertion_point(field_mutable:rbac.ResourceInfos.permission)
  return permission_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceInfos::release_permission() {
  // @@protoc_insertion_point(field_release:rbac.ResourceInfos.permission)
  
  return permission_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceInfos::set_allocated_permission(::std::string* permission) {
  if (permission != NULL) {
    
  } else {
    
  }
  permission_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), permission);
  // @@protoc_insertion_point(field_set_allocated:rbac.ResourceInfos.permission)
}

// string path = 3;
inline void ResourceInfos::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceInfos::path() const {
  // @@protoc_insertion_point(field_get:rbac.ResourceInfos.path)
  return path_.GetNoArena();
}
inline void ResourceInfos::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.ResourceInfos.path)
}
#if LANG_CXX11
inline void ResourceInfos::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.ResourceInfos.path)
}
#endif
inline void ResourceInfos::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.ResourceInfos.path)
}
inline void ResourceInfos::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.ResourceInfos.path)
}
inline ::std::string* ResourceInfos::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.ResourceInfos.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceInfos::release_path() {
  // @@protoc_insertion_point(field_release:rbac.ResourceInfos.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceInfos::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.ResourceInfos.path)
}

// -------------------------------------------------------------------

// GetActionResourceInfosRsp

// repeated .rbac.ResourceInfos infos = 1;
inline int GetActionResourceInfosRsp::infos_size() const {
  return infos_.size();
}
inline void GetActionResourceInfosRsp::clear_infos() {
  infos_.Clear();
}
inline ::rbac::ResourceInfos* GetActionResourceInfosRsp::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.GetActionResourceInfosRsp.infos)
  return infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::rbac::ResourceInfos >*
GetActionResourceInfosRsp::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:rbac.GetActionResourceInfosRsp.infos)
  return &infos_;
}
inline const ::rbac::ResourceInfos& GetActionResourceInfosRsp::infos(int index) const {
  // @@protoc_insertion_point(field_get:rbac.GetActionResourceInfosRsp.infos)
  return infos_.Get(index);
}
inline ::rbac::ResourceInfos* GetActionResourceInfosRsp::add_infos() {
  // @@protoc_insertion_point(field_add:rbac.GetActionResourceInfosRsp.infos)
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rbac::ResourceInfos >&
GetActionResourceInfosRsp::infos() const {
  // @@protoc_insertion_point(field_list:rbac.GetActionResourceInfosRsp.infos)
  return infos_;
}

// -------------------------------------------------------------------

// ValidateActionRqst

// string subject = 1;
inline void ValidateActionRqst::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValidateActionRqst::subject() const {
  // @@protoc_insertion_point(field_get:rbac.ValidateActionRqst.subject)
  return subject_.GetNoArena();
}
inline void ValidateActionRqst::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.ValidateActionRqst.subject)
}
#if LANG_CXX11
inline void ValidateActionRqst::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.ValidateActionRqst.subject)
}
#endif
inline void ValidateActionRqst::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.ValidateActionRqst.subject)
}
inline void ValidateActionRqst::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.ValidateActionRqst.subject)
}
inline ::std::string* ValidateActionRqst::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:rbac.ValidateActionRqst.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidateActionRqst::release_subject() {
  // @@protoc_insertion_point(field_release:rbac.ValidateActionRqst.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateActionRqst::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:rbac.ValidateActionRqst.subject)
}

// .rbac.SubjectType type = 2;
inline void ValidateActionRqst::clear_type() {
  type_ = 0;
}
inline ::rbac::SubjectType ValidateActionRqst::type() const {
  // @@protoc_insertion_point(field_get:rbac.ValidateActionRqst.type)
  return static_cast< ::rbac::SubjectType >(type_);
}
inline void ValidateActionRqst::set_type(::rbac::SubjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rbac.ValidateActionRqst.type)
}

// string action = 3;
inline void ValidateActionRqst::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValidateActionRqst::action() const {
  // @@protoc_insertion_point(field_get:rbac.ValidateActionRqst.action)
  return action_.GetNoArena();
}
inline void ValidateActionRqst::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.ValidateActionRqst.action)
}
#if LANG_CXX11
inline void ValidateActionRqst::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.ValidateActionRqst.action)
}
#endif
inline void ValidateActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.ValidateActionRqst.action)
}
inline void ValidateActionRqst::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.ValidateActionRqst.action)
}
inline ::std::string* ValidateActionRqst::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:rbac.ValidateActionRqst.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidateActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:rbac.ValidateActionRqst.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateActionRqst::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:rbac.ValidateActionRqst.action)
}

// repeated .rbac.ResourceInfos infos = 4;
inline int ValidateActionRqst::infos_size() const {
  return infos_.size();
}
inline void ValidateActionRqst::clear_infos() {
  infos_.Clear();
}
inline ::rbac::ResourceInfos* ValidateActionRqst::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.ValidateActionRqst.infos)
  return infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::rbac::ResourceInfos >*
ValidateActionRqst::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:rbac.ValidateActionRqst.infos)
  return &infos_;
}
inline const ::rbac::ResourceInfos& ValidateActionRqst::infos(int index) const {
  // @@protoc_insertion_point(field_get:rbac.ValidateActionRqst.infos)
  return infos_.Get(index);
}
inline ::rbac::ResourceInfos* ValidateActionRqst::add_infos() {
  // @@protoc_insertion_point(field_add:rbac.ValidateActionRqst.infos)
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rbac::ResourceInfos >&
ValidateActionRqst::infos() const {
  // @@protoc_insertion_point(field_list:rbac.ValidateActionRqst.infos)
  return infos_;
}

// -------------------------------------------------------------------

// ValidateActionRsp

// bool result = 1;
inline void ValidateActionRsp::clear_result() {
  result_ = false;
}
inline bool ValidateActionRsp::result() const {
  // @@protoc_insertion_point(field_get:rbac.ValidateActionRsp.result)
  return result_;
}
inline void ValidateActionRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:rbac.ValidateActionRsp.result)
}

// -------------------------------------------------------------------

// SetActionResourcesPermissionsRqst

// .google.protobuf.Struct permissions = 1;
inline bool SetActionResourcesPermissionsRqst::has_permissions() const {
  return this != internal_default_instance() && permissions_ != NULL;
}
inline const ::google::protobuf::Struct& SetActionResourcesPermissionsRqst::_internal_permissions() const {
  return *permissions_;
}
inline const ::google::protobuf::Struct& SetActionResourcesPermissionsRqst::permissions() const {
  const ::google::protobuf::Struct* p = permissions_;
  // @@protoc_insertion_point(field_get:rbac.SetActionResourcesPermissionsRqst.permissions)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* SetActionResourcesPermissionsRqst::release_permissions() {
  // @@protoc_insertion_point(field_release:rbac.SetActionResourcesPermissionsRqst.permissions)
  
  ::google::protobuf::Struct* temp = permissions_;
  permissions_ = NULL;
  return temp;
}
inline ::google::protobuf::Struct* SetActionResourcesPermissionsRqst::mutable_permissions() {
  
  if (permissions_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    permissions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rbac.SetActionResourcesPermissionsRqst.permissions)
  return permissions_;
}
inline void SetActionResourcesPermissionsRqst::set_allocated_permissions(::google::protobuf::Struct* permissions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(permissions_);
  }
  if (permissions) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(permissions)->GetArena();
    if (message_arena != submessage_arena) {
      permissions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissions, submessage_arena);
    }
    
  } else {
    
  }
  permissions_ = permissions;
  // @@protoc_insertion_point(field_set_allocated:rbac.SetActionResourcesPermissionsRqst.permissions)
}

// -------------------------------------------------------------------

// SetActionResourcesPermissionsRsp

// -------------------------------------------------------------------

// Share

// string path = 1;
inline void Share::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Share::path() const {
  // @@protoc_insertion_point(field_get:rbac.Share.path)
  return path_.GetNoArena();
}
inline void Share::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.Share.path)
}
#if LANG_CXX11
inline void Share::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.Share.path)
}
#endif
inline void Share::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.Share.path)
}
inline void Share::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.Share.path)
}
inline ::std::string* Share::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.Share.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Share::release_path() {
  // @@protoc_insertion_point(field_release:rbac.Share.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.Share.path)
}

// string domain = 2;
inline void Share::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Share::domain() const {
  // @@protoc_insertion_point(field_get:rbac.Share.domain)
  return domain_.GetNoArena();
}
inline void Share::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.Share.domain)
}
#if LANG_CXX11
inline void Share::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.Share.domain)
}
#endif
inline void Share::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.Share.domain)
}
inline void Share::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.Share.domain)
}
inline ::std::string* Share::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:rbac.Share.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Share::release_domain() {
  // @@protoc_insertion_point(field_release:rbac.Share.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Share::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:rbac.Share.domain)
}

// repeated string applications = 3;
inline int Share::applications_size() const {
  return applications_.size();
}
inline void Share::clear_applications() {
  applications_.Clear();
}
inline const ::std::string& Share::applications(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Share.applications)
  return applications_.Get(index);
}
inline ::std::string* Share::mutable_applications(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Share.applications)
  return applications_.Mutable(index);
}
inline void Share::set_applications(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rbac.Share.applications)
  applications_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Share::set_applications(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:rbac.Share.applications)
  applications_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Share::set_applications(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  applications_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rbac.Share.applications)
}
inline void Share::set_applications(int index, const char* value, size_t size) {
  applications_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rbac.Share.applications)
}
inline ::std::string* Share::add_applications() {
  // @@protoc_insertion_point(field_add_mutable:rbac.Share.applications)
  return applications_.Add();
}
inline void Share::add_applications(const ::std::string& value) {
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rbac.Share.applications)
}
#if LANG_CXX11
inline void Share::add_applications(::std::string&& value) {
  applications_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rbac.Share.applications)
}
#endif
inline void Share::add_applications(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rbac.Share.applications)
}
inline void Share::add_applications(const char* value, size_t size) {
  applications_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rbac.Share.applications)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Share::applications() const {
  // @@protoc_insertion_point(field_list:rbac.Share.applications)
  return applications_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Share::mutable_applications() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Share.applications)
  return &applications_;
}

// repeated string peers = 4;
inline int Share::peers_size() const {
  return peers_.size();
}
inline void Share::clear_peers() {
  peers_.Clear();
}
inline const ::std::string& Share::peers(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Share.peers)
  return peers_.Get(index);
}
inline ::std::string* Share::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Share.peers)
  return peers_.Mutable(index);
}
inline void Share::set_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rbac.Share.peers)
  peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Share::set_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:rbac.Share.peers)
  peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Share::set_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rbac.Share.peers)
}
inline void Share::set_peers(int index, const char* value, size_t size) {
  peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rbac.Share.peers)
}
inline ::std::string* Share::add_peers() {
  // @@protoc_insertion_point(field_add_mutable:rbac.Share.peers)
  return peers_.Add();
}
inline void Share::add_peers(const ::std::string& value) {
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rbac.Share.peers)
}
#if LANG_CXX11
inline void Share::add_peers(::std::string&& value) {
  peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rbac.Share.peers)
}
#endif
inline void Share::add_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rbac.Share.peers)
}
inline void Share::add_peers(const char* value, size_t size) {
  peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rbac.Share.peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Share::peers() const {
  // @@protoc_insertion_point(field_list:rbac.Share.peers)
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Share::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Share.peers)
  return &peers_;
}

// repeated string accounts = 5;
inline int Share::accounts_size() const {
  return accounts_.size();
}
inline void Share::clear_accounts() {
  accounts_.Clear();
}
inline const ::std::string& Share::accounts(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Share.accounts)
  return accounts_.Get(index);
}
inline ::std::string* Share::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Share.accounts)
  return accounts_.Mutable(index);
}
inline void Share::set_accounts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rbac.Share.accounts)
  accounts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Share::set_accounts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:rbac.Share.accounts)
  accounts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Share::set_accounts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rbac.Share.accounts)
}
inline void Share::set_accounts(int index, const char* value, size_t size) {
  accounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rbac.Share.accounts)
}
inline ::std::string* Share::add_accounts() {
  // @@protoc_insertion_point(field_add_mutable:rbac.Share.accounts)
  return accounts_.Add();
}
inline void Share::add_accounts(const ::std::string& value) {
  accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rbac.Share.accounts)
}
#if LANG_CXX11
inline void Share::add_accounts(::std::string&& value) {
  accounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rbac.Share.accounts)
}
#endif
inline void Share::add_accounts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rbac.Share.accounts)
}
inline void Share::add_accounts(const char* value, size_t size) {
  accounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rbac.Share.accounts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Share::accounts() const {
  // @@protoc_insertion_point(field_list:rbac.Share.accounts)
  return accounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Share::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Share.accounts)
  return &accounts_;
}

// repeated string groups = 6;
inline int Share::groups_size() const {
  return groups_.size();
}
inline void Share::clear_groups() {
  groups_.Clear();
}
inline const ::std::string& Share::groups(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Share.groups)
  return groups_.Get(index);
}
inline ::std::string* Share::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Share.groups)
  return groups_.Mutable(index);
}
inline void Share::set_groups(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rbac.Share.groups)
  groups_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Share::set_groups(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:rbac.Share.groups)
  groups_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Share::set_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rbac.Share.groups)
}
inline void Share::set_groups(int index, const char* value, size_t size) {
  groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rbac.Share.groups)
}
inline ::std::string* Share::add_groups() {
  // @@protoc_insertion_point(field_add_mutable:rbac.Share.groups)
  return groups_.Add();
}
inline void Share::add_groups(const ::std::string& value) {
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rbac.Share.groups)
}
#if LANG_CXX11
inline void Share::add_groups(::std::string&& value) {
  groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rbac.Share.groups)
}
#endif
inline void Share::add_groups(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rbac.Share.groups)
}
inline void Share::add_groups(const char* value, size_t size) {
  groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rbac.Share.groups)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Share::groups() const {
  // @@protoc_insertion_point(field_list:rbac.Share.groups)
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Share::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Share.groups)
  return &groups_;
}

// repeated string organizations = 7;
inline int Share::organizations_size() const {
  return organizations_.size();
}
inline void Share::clear_organizations() {
  organizations_.Clear();
}
inline const ::std::string& Share::organizations(int index) const {
  // @@protoc_insertion_point(field_get:rbac.Share.organizations)
  return organizations_.Get(index);
}
inline ::std::string* Share::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.Share.organizations)
  return organizations_.Mutable(index);
}
inline void Share::set_organizations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rbac.Share.organizations)
  organizations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Share::set_organizations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:rbac.Share.organizations)
  organizations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Share::set_organizations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  organizations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rbac.Share.organizations)
}
inline void Share::set_organizations(int index, const char* value, size_t size) {
  organizations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rbac.Share.organizations)
}
inline ::std::string* Share::add_organizations() {
  // @@protoc_insertion_point(field_add_mutable:rbac.Share.organizations)
  return organizations_.Add();
}
inline void Share::add_organizations(const ::std::string& value) {
  organizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rbac.Share.organizations)
}
#if LANG_CXX11
inline void Share::add_organizations(::std::string&& value) {
  organizations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rbac.Share.organizations)
}
#endif
inline void Share::add_organizations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  organizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rbac.Share.organizations)
}
inline void Share::add_organizations(const char* value, size_t size) {
  organizations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rbac.Share.organizations)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Share::organizations() const {
  // @@protoc_insertion_point(field_list:rbac.Share.organizations)
  return organizations_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Share::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:rbac.Share.organizations)
  return &organizations_;
}

// -------------------------------------------------------------------

// ShareResourceRqst

// .rbac.Share share = 1;
inline bool ShareResourceRqst::has_share() const {
  return this != internal_default_instance() && share_ != NULL;
}
inline void ShareResourceRqst::clear_share() {
  if (GetArenaNoVirtual() == NULL && share_ != NULL) {
    delete share_;
  }
  share_ = NULL;
}
inline const ::rbac::Share& ShareResourceRqst::_internal_share() const {
  return *share_;
}
inline const ::rbac::Share& ShareResourceRqst::share() const {
  const ::rbac::Share* p = share_;
  // @@protoc_insertion_point(field_get:rbac.ShareResourceRqst.share)
  return p != NULL ? *p : *reinterpret_cast<const ::rbac::Share*>(
      &::rbac::_Share_default_instance_);
}
inline ::rbac::Share* ShareResourceRqst::release_share() {
  // @@protoc_insertion_point(field_release:rbac.ShareResourceRqst.share)
  
  ::rbac::Share* temp = share_;
  share_ = NULL;
  return temp;
}
inline ::rbac::Share* ShareResourceRqst::mutable_share() {
  
  if (share_ == NULL) {
    auto* p = CreateMaybeMessage<::rbac::Share>(GetArenaNoVirtual());
    share_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rbac.ShareResourceRqst.share)
  return share_;
}
inline void ShareResourceRqst::set_allocated_share(::rbac::Share* share) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete share_;
  }
  if (share) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      share = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, share, submessage_arena);
    }
    
  } else {
    
  }
  share_ = share;
  // @@protoc_insertion_point(field_set_allocated:rbac.ShareResourceRqst.share)
}

// -------------------------------------------------------------------

// ShareResourceRsp

// -------------------------------------------------------------------

// UnshareResourceRqst

// .rbac.Share share = 1;
inline bool UnshareResourceRqst::has_share() const {
  return this != internal_default_instance() && share_ != NULL;
}
inline void UnshareResourceRqst::clear_share() {
  if (GetArenaNoVirtual() == NULL && share_ != NULL) {
    delete share_;
  }
  share_ = NULL;
}
inline const ::rbac::Share& UnshareResourceRqst::_internal_share() const {
  return *share_;
}
inline const ::rbac::Share& UnshareResourceRqst::share() const {
  const ::rbac::Share* p = share_;
  // @@protoc_insertion_point(field_get:rbac.UnshareResourceRqst.share)
  return p != NULL ? *p : *reinterpret_cast<const ::rbac::Share*>(
      &::rbac::_Share_default_instance_);
}
inline ::rbac::Share* UnshareResourceRqst::release_share() {
  // @@protoc_insertion_point(field_release:rbac.UnshareResourceRqst.share)
  
  ::rbac::Share* temp = share_;
  share_ = NULL;
  return temp;
}
inline ::rbac::Share* UnshareResourceRqst::mutable_share() {
  
  if (share_ == NULL) {
    auto* p = CreateMaybeMessage<::rbac::Share>(GetArenaNoVirtual());
    share_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rbac.UnshareResourceRqst.share)
  return share_;
}
inline void UnshareResourceRqst::set_allocated_share(::rbac::Share* share) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete share_;
  }
  if (share) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      share = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, share, submessage_arena);
    }
    
  } else {
    
  }
  share_ = share;
  // @@protoc_insertion_point(field_set_allocated:rbac.UnshareResourceRqst.share)
}

// -------------------------------------------------------------------

// UnshareResourceRsp

// -------------------------------------------------------------------

// GetSharedResourceRqst

// string subject = 1;
inline void GetSharedResourceRqst::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSharedResourceRqst::subject() const {
  // @@protoc_insertion_point(field_get:rbac.GetSharedResourceRqst.subject)
  return subject_.GetNoArena();
}
inline void GetSharedResourceRqst::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.GetSharedResourceRqst.subject)
}
#if LANG_CXX11
inline void GetSharedResourceRqst::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.GetSharedResourceRqst.subject)
}
#endif
inline void GetSharedResourceRqst::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.GetSharedResourceRqst.subject)
}
inline void GetSharedResourceRqst::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.GetSharedResourceRqst.subject)
}
inline ::std::string* GetSharedResourceRqst::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:rbac.GetSharedResourceRqst.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSharedResourceRqst::release_subject() {
  // @@protoc_insertion_point(field_release:rbac.GetSharedResourceRqst.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSharedResourceRqst::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:rbac.GetSharedResourceRqst.subject)
}

// .rbac.SubjectType type = 2;
inline void GetSharedResourceRqst::clear_type() {
  type_ = 0;
}
inline ::rbac::SubjectType GetSharedResourceRqst::type() const {
  // @@protoc_insertion_point(field_get:rbac.GetSharedResourceRqst.type)
  return static_cast< ::rbac::SubjectType >(type_);
}
inline void GetSharedResourceRqst::set_type(::rbac::SubjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rbac.GetSharedResourceRqst.type)
}

// -------------------------------------------------------------------

// GetSharedResourceRsp

// repeated .rbac.Share sharedResource = 1;
inline int GetSharedResourceRsp::sharedresource_size() const {
  return sharedresource_.size();
}
inline void GetSharedResourceRsp::clear_sharedresource() {
  sharedresource_.Clear();
}
inline ::rbac::Share* GetSharedResourceRsp::mutable_sharedresource(int index) {
  // @@protoc_insertion_point(field_mutable:rbac.GetSharedResourceRsp.sharedResource)
  return sharedresource_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::rbac::Share >*
GetSharedResourceRsp::mutable_sharedresource() {
  // @@protoc_insertion_point(field_mutable_list:rbac.GetSharedResourceRsp.sharedResource)
  return &sharedresource_;
}
inline const ::rbac::Share& GetSharedResourceRsp::sharedresource(int index) const {
  // @@protoc_insertion_point(field_get:rbac.GetSharedResourceRsp.sharedResource)
  return sharedresource_.Get(index);
}
inline ::rbac::Share* GetSharedResourceRsp::add_sharedresource() {
  // @@protoc_insertion_point(field_add:rbac.GetSharedResourceRsp.sharedResource)
  return sharedresource_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rbac::Share >&
GetSharedResourceRsp::sharedresource() const {
  // @@protoc_insertion_point(field_list:rbac.GetSharedResourceRsp.sharedResource)
  return sharedresource_;
}

// -------------------------------------------------------------------

// RemoveSubjectFromShareRqst

// string subject = 1;
inline void RemoveSubjectFromShareRqst::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveSubjectFromShareRqst::subject() const {
  // @@protoc_insertion_point(field_get:rbac.RemoveSubjectFromShareRqst.subject)
  return subject_.GetNoArena();
}
inline void RemoveSubjectFromShareRqst::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.RemoveSubjectFromShareRqst.subject)
}
#if LANG_CXX11
inline void RemoveSubjectFromShareRqst::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.RemoveSubjectFromShareRqst.subject)
}
#endif
inline void RemoveSubjectFromShareRqst::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.RemoveSubjectFromShareRqst.subject)
}
inline void RemoveSubjectFromShareRqst::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.RemoveSubjectFromShareRqst.subject)
}
inline ::std::string* RemoveSubjectFromShareRqst::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:rbac.RemoveSubjectFromShareRqst.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveSubjectFromShareRqst::release_subject() {
  // @@protoc_insertion_point(field_release:rbac.RemoveSubjectFromShareRqst.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveSubjectFromShareRqst::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:rbac.RemoveSubjectFromShareRqst.subject)
}

// .rbac.SubjectType type = 2;
inline void RemoveSubjectFromShareRqst::clear_type() {
  type_ = 0;
}
inline ::rbac::SubjectType RemoveSubjectFromShareRqst::type() const {
  // @@protoc_insertion_point(field_get:rbac.RemoveSubjectFromShareRqst.type)
  return static_cast< ::rbac::SubjectType >(type_);
}
inline void RemoveSubjectFromShareRqst::set_type(::rbac::SubjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rbac.RemoveSubjectFromShareRqst.type)
}

// string domain = 3;
inline void RemoveSubjectFromShareRqst::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveSubjectFromShareRqst::domain() const {
  // @@protoc_insertion_point(field_get:rbac.RemoveSubjectFromShareRqst.domain)
  return domain_.GetNoArena();
}
inline void RemoveSubjectFromShareRqst::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.RemoveSubjectFromShareRqst.domain)
}
#if LANG_CXX11
inline void RemoveSubjectFromShareRqst::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.RemoveSubjectFromShareRqst.domain)
}
#endif
inline void RemoveSubjectFromShareRqst::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.RemoveSubjectFromShareRqst.domain)
}
inline void RemoveSubjectFromShareRqst::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.RemoveSubjectFromShareRqst.domain)
}
inline ::std::string* RemoveSubjectFromShareRqst::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:rbac.RemoveSubjectFromShareRqst.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveSubjectFromShareRqst::release_domain() {
  // @@protoc_insertion_point(field_release:rbac.RemoveSubjectFromShareRqst.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveSubjectFromShareRqst::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:rbac.RemoveSubjectFromShareRqst.domain)
}

// string path = 4;
inline void RemoveSubjectFromShareRqst::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveSubjectFromShareRqst::path() const {
  // @@protoc_insertion_point(field_get:rbac.RemoveSubjectFromShareRqst.path)
  return path_.GetNoArena();
}
inline void RemoveSubjectFromShareRqst::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.RemoveSubjectFromShareRqst.path)
}
#if LANG_CXX11
inline void RemoveSubjectFromShareRqst::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.RemoveSubjectFromShareRqst.path)
}
#endif
inline void RemoveSubjectFromShareRqst::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.RemoveSubjectFromShareRqst.path)
}
inline void RemoveSubjectFromShareRqst::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.RemoveSubjectFromShareRqst.path)
}
inline ::std::string* RemoveSubjectFromShareRqst::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:rbac.RemoveSubjectFromShareRqst.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveSubjectFromShareRqst::release_path() {
  // @@protoc_insertion_point(field_release:rbac.RemoveSubjectFromShareRqst.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveSubjectFromShareRqst::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:rbac.RemoveSubjectFromShareRqst.path)
}

// -------------------------------------------------------------------

// RemoveSubjectFromShareRsp

// -------------------------------------------------------------------

// DeleteSubjectShareRqst

// string subject = 1;
inline void DeleteSubjectShareRqst::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteSubjectShareRqst::subject() const {
  // @@protoc_insertion_point(field_get:rbac.DeleteSubjectShareRqst.subject)
  return subject_.GetNoArena();
}
inline void DeleteSubjectShareRqst::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbac.DeleteSubjectShareRqst.subject)
}
#if LANG_CXX11
inline void DeleteSubjectShareRqst::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbac.DeleteSubjectShareRqst.subject)
}
#endif
inline void DeleteSubjectShareRqst::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbac.DeleteSubjectShareRqst.subject)
}
inline void DeleteSubjectShareRqst::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbac.DeleteSubjectShareRqst.subject)
}
inline ::std::string* DeleteSubjectShareRqst::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:rbac.DeleteSubjectShareRqst.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteSubjectShareRqst::release_subject() {
  // @@protoc_insertion_point(field_release:rbac.DeleteSubjectShareRqst.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteSubjectShareRqst::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:rbac.DeleteSubjectShareRqst.subject)
}

// .rbac.SubjectType type = 2;
inline void DeleteSubjectShareRqst::clear_type() {
  type_ = 0;
}
inline ::rbac::SubjectType DeleteSubjectShareRqst::type() const {
  // @@protoc_insertion_point(field_get:rbac.DeleteSubjectShareRqst.type)
  return static_cast< ::rbac::SubjectType >(type_);
}
inline void DeleteSubjectShareRqst::set_type(::rbac::SubjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:rbac.DeleteSubjectShareRqst.type)
}

// -------------------------------------------------------------------

// DeleteSubjectShareRsp

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rbac

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rbac::PermissionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rbac::PermissionType>() {
  return ::rbac::PermissionType_descriptor();
}
template <> struct is_proto_enum< ::rbac::SubjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rbac::SubjectType>() {
  return ::rbac::SubjectType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rbac_2eproto
