// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rbac.proto

#include "rbac.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rbac {
constexpr Permission::Permission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : applications_()
  , peers_()
  , accounts_()
  , groups_()
  , organizations_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PermissionDefaultTypeInternal {
  constexpr PermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PermissionDefaultTypeInternal() {}
  union {
    Permission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PermissionDefaultTypeInternal _Permission_default_instance_;
constexpr Permissions::Permissions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allowed_()
  , denied_()
  , owners_(nullptr){}
struct PermissionsDefaultTypeInternal {
  constexpr PermissionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PermissionsDefaultTypeInternal() {}
  union {
    Permissions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PermissionsDefaultTypeInternal _Permissions_default_instance_;
constexpr GetResourcePermissionsRqst::GetResourcePermissionsRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetResourcePermissionsRqstDefaultTypeInternal {
  constexpr GetResourcePermissionsRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetResourcePermissionsRqstDefaultTypeInternal() {}
  union {
    GetResourcePermissionsRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetResourcePermissionsRqstDefaultTypeInternal _GetResourcePermissionsRqst_default_instance_;
constexpr GetResourcePermissionsRsp::GetResourcePermissionsRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permissions_(nullptr){}
struct GetResourcePermissionsRspDefaultTypeInternal {
  constexpr GetResourcePermissionsRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetResourcePermissionsRspDefaultTypeInternal() {}
  union {
    GetResourcePermissionsRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetResourcePermissionsRspDefaultTypeInternal _GetResourcePermissionsRsp_default_instance_;
constexpr DeleteResourcePermissionsRqst::DeleteResourcePermissionsRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteResourcePermissionsRqstDefaultTypeInternal {
  constexpr DeleteResourcePermissionsRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteResourcePermissionsRqstDefaultTypeInternal() {}
  union {
    DeleteResourcePermissionsRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteResourcePermissionsRqstDefaultTypeInternal _DeleteResourcePermissionsRqst_default_instance_;
constexpr DeleteResourcePermissionsRsp::DeleteResourcePermissionsRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permissions_(nullptr){}
struct DeleteResourcePermissionsRspDefaultTypeInternal {
  constexpr DeleteResourcePermissionsRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteResourcePermissionsRspDefaultTypeInternal() {}
  union {
    DeleteResourcePermissionsRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteResourcePermissionsRspDefaultTypeInternal _DeleteResourcePermissionsRsp_default_instance_;
constexpr DeleteResourcePermissionRqst::DeleteResourcePermissionRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct DeleteResourcePermissionRqstDefaultTypeInternal {
  constexpr DeleteResourcePermissionRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteResourcePermissionRqstDefaultTypeInternal() {}
  union {
    DeleteResourcePermissionRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteResourcePermissionRqstDefaultTypeInternal _DeleteResourcePermissionRqst_default_instance_;
constexpr DeleteResourcePermissionRsp::DeleteResourcePermissionRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeleteResourcePermissionRspDefaultTypeInternal {
  constexpr DeleteResourcePermissionRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteResourcePermissionRspDefaultTypeInternal() {}
  union {
    DeleteResourcePermissionRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteResourcePermissionRspDefaultTypeInternal _DeleteResourcePermissionRsp_default_instance_;
constexpr SetResourcePermissionsRqst::SetResourcePermissionsRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , permissions_(nullptr){}
struct SetResourcePermissionsRqstDefaultTypeInternal {
  constexpr SetResourcePermissionsRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetResourcePermissionsRqstDefaultTypeInternal() {}
  union {
    SetResourcePermissionsRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetResourcePermissionsRqstDefaultTypeInternal _SetResourcePermissionsRqst_default_instance_;
constexpr SetResourcePermissionsRsp::SetResourcePermissionsRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetResourcePermissionsRspDefaultTypeInternal {
  constexpr SetResourcePermissionsRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetResourcePermissionsRspDefaultTypeInternal() {}
  union {
    SetResourcePermissionsRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetResourcePermissionsRspDefaultTypeInternal _SetResourcePermissionsRsp_default_instance_;
constexpr GetResourcePermissionRqst::GetResourcePermissionRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct GetResourcePermissionRqstDefaultTypeInternal {
  constexpr GetResourcePermissionRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetResourcePermissionRqstDefaultTypeInternal() {}
  union {
    GetResourcePermissionRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetResourcePermissionRqstDefaultTypeInternal _GetResourcePermissionRqst_default_instance_;
constexpr GetResourcePermissionRsp::GetResourcePermissionRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permission_(nullptr){}
struct GetResourcePermissionRspDefaultTypeInternal {
  constexpr GetResourcePermissionRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetResourcePermissionRspDefaultTypeInternal() {}
  union {
    GetResourcePermissionRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetResourcePermissionRspDefaultTypeInternal _GetResourcePermissionRsp_default_instance_;
constexpr SetResourcePermissionRqst::SetResourcePermissionRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , permission_(nullptr)
  , type_(0)
{}
struct SetResourcePermissionRqstDefaultTypeInternal {
  constexpr SetResourcePermissionRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetResourcePermissionRqstDefaultTypeInternal() {}
  union {
    SetResourcePermissionRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetResourcePermissionRqstDefaultTypeInternal _SetResourcePermissionRqst_default_instance_;
constexpr SetResourcePermissionRsp::SetResourcePermissionRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetResourcePermissionRspDefaultTypeInternal {
  constexpr SetResourcePermissionRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetResourcePermissionRspDefaultTypeInternal() {}
  union {
    SetResourcePermissionRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetResourcePermissionRspDefaultTypeInternal _SetResourcePermissionRsp_default_instance_;
constexpr AddResourceOwnerRqst::AddResourceOwnerRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct AddResourceOwnerRqstDefaultTypeInternal {
  constexpr AddResourceOwnerRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddResourceOwnerRqstDefaultTypeInternal() {}
  union {
    AddResourceOwnerRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddResourceOwnerRqstDefaultTypeInternal _AddResourceOwnerRqst_default_instance_;
constexpr AddResourceOwnerRsp::AddResourceOwnerRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AddResourceOwnerRspDefaultTypeInternal {
  constexpr AddResourceOwnerRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddResourceOwnerRspDefaultTypeInternal() {}
  union {
    AddResourceOwnerRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddResourceOwnerRspDefaultTypeInternal _AddResourceOwnerRsp_default_instance_;
constexpr RemoveResourceOwnerRqst::RemoveResourceOwnerRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct RemoveResourceOwnerRqstDefaultTypeInternal {
  constexpr RemoveResourceOwnerRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveResourceOwnerRqstDefaultTypeInternal() {}
  union {
    RemoveResourceOwnerRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveResourceOwnerRqstDefaultTypeInternal _RemoveResourceOwnerRqst_default_instance_;
constexpr RemoveResourceOwnerRsp::RemoveResourceOwnerRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RemoveResourceOwnerRspDefaultTypeInternal {
  constexpr RemoveResourceOwnerRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveResourceOwnerRspDefaultTypeInternal() {}
  union {
    RemoveResourceOwnerRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveResourceOwnerRspDefaultTypeInternal _RemoveResourceOwnerRsp_default_instance_;
constexpr DeleteAllAccessRqst::DeleteAllAccessRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct DeleteAllAccessRqstDefaultTypeInternal {
  constexpr DeleteAllAccessRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteAllAccessRqstDefaultTypeInternal() {}
  union {
    DeleteAllAccessRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteAllAccessRqstDefaultTypeInternal _DeleteAllAccessRqst_default_instance_;
constexpr DeleteAllAccessRsp::DeleteAllAccessRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeleteAllAccessRspDefaultTypeInternal {
  constexpr DeleteAllAccessRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteAllAccessRspDefaultTypeInternal() {}
  union {
    DeleteAllAccessRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteAllAccessRspDefaultTypeInternal _DeleteAllAccessRsp_default_instance_;
constexpr ValidateAccessRqst::ValidateAccessRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , permission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct ValidateAccessRqstDefaultTypeInternal {
  constexpr ValidateAccessRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateAccessRqstDefaultTypeInternal() {}
  union {
    ValidateAccessRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateAccessRqstDefaultTypeInternal _ValidateAccessRqst_default_instance_;
constexpr ValidateAccessRsp::ValidateAccessRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hasaccess_(false)
  , accessdenied_(false){}
struct ValidateAccessRspDefaultTypeInternal {
  constexpr ValidateAccessRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateAccessRspDefaultTypeInternal() {}
  union {
    ValidateAccessRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateAccessRspDefaultTypeInternal _ValidateAccessRsp_default_instance_;
constexpr GetActionResourceInfosRqst::GetActionResourceInfosRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetActionResourceInfosRqstDefaultTypeInternal {
  constexpr GetActionResourceInfosRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetActionResourceInfosRqstDefaultTypeInternal() {}
  union {
    GetActionResourceInfosRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetActionResourceInfosRqstDefaultTypeInternal _GetActionResourceInfosRqst_default_instance_;
constexpr ResourceInfos::ResourceInfos(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0){}
struct ResourceInfosDefaultTypeInternal {
  constexpr ResourceInfosDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceInfosDefaultTypeInternal() {}
  union {
    ResourceInfos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceInfosDefaultTypeInternal _ResourceInfos_default_instance_;
constexpr GetActionResourceInfosRsp::GetActionResourceInfosRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_(){}
struct GetActionResourceInfosRspDefaultTypeInternal {
  constexpr GetActionResourceInfosRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetActionResourceInfosRspDefaultTypeInternal() {}
  union {
    GetActionResourceInfosRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetActionResourceInfosRspDefaultTypeInternal _GetActionResourceInfosRsp_default_instance_;
constexpr ValidateActionRqst::ValidateActionRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct ValidateActionRqstDefaultTypeInternal {
  constexpr ValidateActionRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateActionRqstDefaultTypeInternal() {}
  union {
    ValidateActionRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateActionRqstDefaultTypeInternal _ValidateActionRqst_default_instance_;
constexpr ValidateActionRsp::ValidateActionRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(false){}
struct ValidateActionRspDefaultTypeInternal {
  constexpr ValidateActionRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateActionRspDefaultTypeInternal() {}
  union {
    ValidateActionRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateActionRspDefaultTypeInternal _ValidateActionRsp_default_instance_;
constexpr SetActionResourcesPermissionsRqst::SetActionResourcesPermissionsRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permissions_(nullptr){}
struct SetActionResourcesPermissionsRqstDefaultTypeInternal {
  constexpr SetActionResourcesPermissionsRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetActionResourcesPermissionsRqstDefaultTypeInternal() {}
  union {
    SetActionResourcesPermissionsRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetActionResourcesPermissionsRqstDefaultTypeInternal _SetActionResourcesPermissionsRqst_default_instance_;
constexpr SetActionResourcesPermissionsRsp::SetActionResourcesPermissionsRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetActionResourcesPermissionsRspDefaultTypeInternal {
  constexpr SetActionResourcesPermissionsRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetActionResourcesPermissionsRspDefaultTypeInternal() {}
  union {
    SetActionResourcesPermissionsRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetActionResourcesPermissionsRspDefaultTypeInternal _SetActionResourcesPermissionsRsp_default_instance_;
constexpr Share::Share(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : applications_()
  , peers_()
  , accounts_()
  , groups_()
  , organizations_()
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ShareDefaultTypeInternal {
  constexpr ShareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShareDefaultTypeInternal() {}
  union {
    Share _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShareDefaultTypeInternal _Share_default_instance_;
constexpr ShareResourceRqst::ShareResourceRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : share_(nullptr){}
struct ShareResourceRqstDefaultTypeInternal {
  constexpr ShareResourceRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShareResourceRqstDefaultTypeInternal() {}
  union {
    ShareResourceRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShareResourceRqstDefaultTypeInternal _ShareResourceRqst_default_instance_;
constexpr ShareResourceRsp::ShareResourceRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ShareResourceRspDefaultTypeInternal {
  constexpr ShareResourceRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShareResourceRspDefaultTypeInternal() {}
  union {
    ShareResourceRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShareResourceRspDefaultTypeInternal _ShareResourceRsp_default_instance_;
constexpr UnshareResourceRqst::UnshareResourceRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : share_(nullptr){}
struct UnshareResourceRqstDefaultTypeInternal {
  constexpr UnshareResourceRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnshareResourceRqstDefaultTypeInternal() {}
  union {
    UnshareResourceRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnshareResourceRqstDefaultTypeInternal _UnshareResourceRqst_default_instance_;
constexpr UnshareResourceRsp::UnshareResourceRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UnshareResourceRspDefaultTypeInternal {
  constexpr UnshareResourceRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnshareResourceRspDefaultTypeInternal() {}
  union {
    UnshareResourceRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnshareResourceRspDefaultTypeInternal _UnshareResourceRsp_default_instance_;
constexpr GetSharedResourceRqst::GetSharedResourceRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct GetSharedResourceRqstDefaultTypeInternal {
  constexpr GetSharedResourceRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSharedResourceRqstDefaultTypeInternal() {}
  union {
    GetSharedResourceRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSharedResourceRqstDefaultTypeInternal _GetSharedResourceRqst_default_instance_;
constexpr GetSharedResourceRsp::GetSharedResourceRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sharedresource_(){}
struct GetSharedResourceRspDefaultTypeInternal {
  constexpr GetSharedResourceRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSharedResourceRspDefaultTypeInternal() {}
  union {
    GetSharedResourceRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSharedResourceRspDefaultTypeInternal _GetSharedResourceRsp_default_instance_;
constexpr RemoveSubjectFromShareRqst::RemoveSubjectFromShareRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct RemoveSubjectFromShareRqstDefaultTypeInternal {
  constexpr RemoveSubjectFromShareRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveSubjectFromShareRqstDefaultTypeInternal() {}
  union {
    RemoveSubjectFromShareRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveSubjectFromShareRqstDefaultTypeInternal _RemoveSubjectFromShareRqst_default_instance_;
constexpr RemoveSubjectFromShareRsp::RemoveSubjectFromShareRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RemoveSubjectFromShareRspDefaultTypeInternal {
  constexpr RemoveSubjectFromShareRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveSubjectFromShareRspDefaultTypeInternal() {}
  union {
    RemoveSubjectFromShareRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveSubjectFromShareRspDefaultTypeInternal _RemoveSubjectFromShareRsp_default_instance_;
constexpr DeleteSubjectShareRqst::DeleteSubjectShareRqst(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subject_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct DeleteSubjectShareRqstDefaultTypeInternal {
  constexpr DeleteSubjectShareRqstDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteSubjectShareRqstDefaultTypeInternal() {}
  union {
    DeleteSubjectShareRqst _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteSubjectShareRqstDefaultTypeInternal _DeleteSubjectShareRqst_default_instance_;
constexpr DeleteSubjectShareRsp::DeleteSubjectShareRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeleteSubjectShareRspDefaultTypeInternal {
  constexpr DeleteSubjectShareRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteSubjectShareRspDefaultTypeInternal() {}
  union {
    DeleteSubjectShareRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteSubjectShareRspDefaultTypeInternal _DeleteSubjectShareRsp_default_instance_;
}  // namespace rbac
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rbac_2eproto[40];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rbac_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rbac_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rbac_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::Permission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::Permission, name_),
  PROTOBUF_FIELD_OFFSET(::rbac::Permission, applications_),
  PROTOBUF_FIELD_OFFSET(::rbac::Permission, peers_),
  PROTOBUF_FIELD_OFFSET(::rbac::Permission, accounts_),
  PROTOBUF_FIELD_OFFSET(::rbac::Permission, groups_),
  PROTOBUF_FIELD_OFFSET(::rbac::Permission, organizations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::Permissions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::Permissions, owners_),
  PROTOBUF_FIELD_OFFSET(::rbac::Permissions, allowed_),
  PROTOBUF_FIELD_OFFSET(::rbac::Permissions, denied_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::GetResourcePermissionsRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::GetResourcePermissionsRqst, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::GetResourcePermissionsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::GetResourcePermissionsRsp, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteResourcePermissionsRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteResourcePermissionsRqst, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteResourcePermissionsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteResourcePermissionsRsp, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteResourcePermissionRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteResourcePermissionRqst, path_),
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteResourcePermissionRqst, name_),
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteResourcePermissionRqst, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteResourcePermissionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::SetResourcePermissionsRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::SetResourcePermissionsRqst, path_),
  PROTOBUF_FIELD_OFFSET(::rbac::SetResourcePermissionsRqst, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::SetResourcePermissionsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::GetResourcePermissionRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::GetResourcePermissionRqst, path_),
  PROTOBUF_FIELD_OFFSET(::rbac::GetResourcePermissionRqst, name_),
  PROTOBUF_FIELD_OFFSET(::rbac::GetResourcePermissionRqst, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::GetResourcePermissionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::GetResourcePermissionRsp, permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::SetResourcePermissionRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::SetResourcePermissionRqst, path_),
  PROTOBUF_FIELD_OFFSET(::rbac::SetResourcePermissionRqst, permission_),
  PROTOBUF_FIELD_OFFSET(::rbac::SetResourcePermissionRqst, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::SetResourcePermissionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::AddResourceOwnerRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::AddResourceOwnerRqst, path_),
  PROTOBUF_FIELD_OFFSET(::rbac::AddResourceOwnerRqst, subject_),
  PROTOBUF_FIELD_OFFSET(::rbac::AddResourceOwnerRqst, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::AddResourceOwnerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::RemoveResourceOwnerRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::RemoveResourceOwnerRqst, path_),
  PROTOBUF_FIELD_OFFSET(::rbac::RemoveResourceOwnerRqst, subject_),
  PROTOBUF_FIELD_OFFSET(::rbac::RemoveResourceOwnerRqst, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::RemoveResourceOwnerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteAllAccessRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteAllAccessRqst, subject_),
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteAllAccessRqst, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteAllAccessRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateAccessRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateAccessRqst, subject_),
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateAccessRqst, type_),
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateAccessRqst, path_),
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateAccessRqst, permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateAccessRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateAccessRsp, hasaccess_),
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateAccessRsp, accessdenied_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::GetActionResourceInfosRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::GetActionResourceInfosRqst, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::ResourceInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::ResourceInfos, index_),
  PROTOBUF_FIELD_OFFSET(::rbac::ResourceInfos, permission_),
  PROTOBUF_FIELD_OFFSET(::rbac::ResourceInfos, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::GetActionResourceInfosRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::GetActionResourceInfosRsp, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateActionRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateActionRqst, subject_),
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateActionRqst, type_),
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateActionRqst, action_),
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateActionRqst, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateActionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::ValidateActionRsp, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::SetActionResourcesPermissionsRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::SetActionResourcesPermissionsRqst, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::SetActionResourcesPermissionsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::Share, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::Share, path_),
  PROTOBUF_FIELD_OFFSET(::rbac::Share, domain_),
  PROTOBUF_FIELD_OFFSET(::rbac::Share, applications_),
  PROTOBUF_FIELD_OFFSET(::rbac::Share, peers_),
  PROTOBUF_FIELD_OFFSET(::rbac::Share, accounts_),
  PROTOBUF_FIELD_OFFSET(::rbac::Share, groups_),
  PROTOBUF_FIELD_OFFSET(::rbac::Share, organizations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::ShareResourceRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::ShareResourceRqst, share_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::ShareResourceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::UnshareResourceRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::UnshareResourceRqst, share_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::UnshareResourceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::GetSharedResourceRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::GetSharedResourceRqst, subject_),
  PROTOBUF_FIELD_OFFSET(::rbac::GetSharedResourceRqst, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::GetSharedResourceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::GetSharedResourceRsp, sharedresource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::RemoveSubjectFromShareRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::RemoveSubjectFromShareRqst, subject_),
  PROTOBUF_FIELD_OFFSET(::rbac::RemoveSubjectFromShareRqst, type_),
  PROTOBUF_FIELD_OFFSET(::rbac::RemoveSubjectFromShareRqst, domain_),
  PROTOBUF_FIELD_OFFSET(::rbac::RemoveSubjectFromShareRqst, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::RemoveSubjectFromShareRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteSubjectShareRqst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteSubjectShareRqst, subject_),
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteSubjectShareRqst, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbac::DeleteSubjectShareRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rbac::Permission)},
  { 11, -1, sizeof(::rbac::Permissions)},
  { 19, -1, sizeof(::rbac::GetResourcePermissionsRqst)},
  { 25, -1, sizeof(::rbac::GetResourcePermissionsRsp)},
  { 31, -1, sizeof(::rbac::DeleteResourcePermissionsRqst)},
  { 37, -1, sizeof(::rbac::DeleteResourcePermissionsRsp)},
  { 43, -1, sizeof(::rbac::DeleteResourcePermissionRqst)},
  { 51, -1, sizeof(::rbac::DeleteResourcePermissionRsp)},
  { 56, -1, sizeof(::rbac::SetResourcePermissionsRqst)},
  { 63, -1, sizeof(::rbac::SetResourcePermissionsRsp)},
  { 68, -1, sizeof(::rbac::GetResourcePermissionRqst)},
  { 76, -1, sizeof(::rbac::GetResourcePermissionRsp)},
  { 82, -1, sizeof(::rbac::SetResourcePermissionRqst)},
  { 90, -1, sizeof(::rbac::SetResourcePermissionRsp)},
  { 95, -1, sizeof(::rbac::AddResourceOwnerRqst)},
  { 103, -1, sizeof(::rbac::AddResourceOwnerRsp)},
  { 108, -1, sizeof(::rbac::RemoveResourceOwnerRqst)},
  { 116, -1, sizeof(::rbac::RemoveResourceOwnerRsp)},
  { 121, -1, sizeof(::rbac::DeleteAllAccessRqst)},
  { 128, -1, sizeof(::rbac::DeleteAllAccessRsp)},
  { 133, -1, sizeof(::rbac::ValidateAccessRqst)},
  { 142, -1, sizeof(::rbac::ValidateAccessRsp)},
  { 149, -1, sizeof(::rbac::GetActionResourceInfosRqst)},
  { 155, -1, sizeof(::rbac::ResourceInfos)},
  { 163, -1, sizeof(::rbac::GetActionResourceInfosRsp)},
  { 169, -1, sizeof(::rbac::ValidateActionRqst)},
  { 178, -1, sizeof(::rbac::ValidateActionRsp)},
  { 184, -1, sizeof(::rbac::SetActionResourcesPermissionsRqst)},
  { 190, -1, sizeof(::rbac::SetActionResourcesPermissionsRsp)},
  { 195, -1, sizeof(::rbac::Share)},
  { 207, -1, sizeof(::rbac::ShareResourceRqst)},
  { 213, -1, sizeof(::rbac::ShareResourceRsp)},
  { 218, -1, sizeof(::rbac::UnshareResourceRqst)},
  { 224, -1, sizeof(::rbac::UnshareResourceRsp)},
  { 229, -1, sizeof(::rbac::GetSharedResourceRqst)},
  { 236, -1, sizeof(::rbac::GetSharedResourceRsp)},
  { 242, -1, sizeof(::rbac::RemoveSubjectFromShareRqst)},
  { 251, -1, sizeof(::rbac::RemoveSubjectFromShareRsp)},
  { 256, -1, sizeof(::rbac::DeleteSubjectShareRqst)},
  { 263, -1, sizeof(::rbac::DeleteSubjectShareRsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_Permission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_Permissions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_GetResourcePermissionsRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_GetResourcePermissionsRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_DeleteResourcePermissionsRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_DeleteResourcePermissionsRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_DeleteResourcePermissionRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_DeleteResourcePermissionRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_SetResourcePermissionsRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_SetResourcePermissionsRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_GetResourcePermissionRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_GetResourcePermissionRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_SetResourcePermissionRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_SetResourcePermissionRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_AddResourceOwnerRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_AddResourceOwnerRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_RemoveResourceOwnerRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_RemoveResourceOwnerRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_DeleteAllAccessRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_DeleteAllAccessRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_ValidateAccessRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_ValidateAccessRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_GetActionResourceInfosRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_ResourceInfos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_GetActionResourceInfosRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_ValidateActionRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_ValidateActionRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_SetActionResourcesPermissionsRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_SetActionResourcesPermissionsRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_Share_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_ShareResourceRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_ShareResourceRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_UnshareResourceRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_UnshareResourceRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_GetSharedResourceRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_GetSharedResourceRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_RemoveSubjectFromShareRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_RemoveSubjectFromShareRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_DeleteSubjectShareRqst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rbac::_DeleteSubjectShareRsp_default_instance_),
};

const char descriptor_table_protodef_rbac_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nrbac.proto\022\004rbac\032\034google/protobuf/stru"
  "ct.proto\"x\n\nPermission\022\014\n\004name\030\001 \001(\t\022\024\n\014"
  "applications\030\002 \003(\t\022\r\n\005peers\030\003 \003(\t\022\020\n\010acc"
  "ounts\030\004 \003(\t\022\016\n\006groups\030\005 \003(\t\022\025\n\rorganizat"
  "ions\030\006 \003(\t\"t\n\013Permissions\022 \n\006owners\030\001 \001("
  "\0132\020.rbac.Permission\022!\n\007allowed\030\002 \003(\0132\020.r"
  "bac.Permission\022 \n\006denied\030\003 \003(\0132\020.rbac.Pe"
  "rmission\"*\n\032GetResourcePermissionsRqst\022\014"
  "\n\004path\030\001 \001(\t\"C\n\031GetResourcePermissionsRs"
  "p\022&\n\013permissions\030\001 \001(\0132\021.rbac.Permission"
  "s\"-\n\035DeleteResourcePermissionsRqst\022\014\n\004pa"
  "th\030\001 \001(\t\"F\n\034DeleteResourcePermissionsRsp"
  "\022&\n\013permissions\030\001 \001(\0132\021.rbac.Permissions"
  "\"^\n\034DeleteResourcePermissionRqst\022\014\n\004path"
  "\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\"\n\004type\030\003 \001(\0162\024.rba"
  "c.PermissionType\"\035\n\033DeleteResourcePermis"
  "sionRsp\"R\n\032SetResourcePermissionsRqst\022\014\n"
  "\004path\030\001 \001(\t\022&\n\013permissions\030\002 \001(\0132\021.rbac."
  "Permissions\"\033\n\031SetResourcePermissionsRsp"
  "\"[\n\031GetResourcePermissionRqst\022\014\n\004path\030\001 "
  "\001(\t\022\014\n\004name\030\002 \001(\t\022\"\n\004type\030\003 \001(\0162\024.rbac.P"
  "ermissionType\"@\n\030GetResourcePermissionRs"
  "p\022$\n\npermission\030\001 \001(\0132\020.rbac.Permission\""
  "s\n\031SetResourcePermissionRqst\022\014\n\004path\030\001 \001"
  "(\t\022$\n\npermission\030\002 \001(\0132\020.rbac.Permission"
  "\022\"\n\004type\030\003 \001(\0162\024.rbac.PermissionType\"\032\n\030"
  "SetResourcePermissionRsp\"V\n\024AddResourceO"
  "wnerRqst\022\014\n\004path\030\001 \001(\t\022\017\n\007subject\030\002 \001(\t\022"
  "\037\n\004type\030\003 \001(\0162\021.rbac.SubjectType\"\025\n\023AddR"
  "esourceOwnerRsp\"Y\n\027RemoveResourceOwnerRq"
  "st\022\014\n\004path\030\001 \001(\t\022\017\n\007subject\030\002 \001(\t\022\037\n\004typ"
  "e\030\003 \001(\0162\021.rbac.SubjectType\"\030\n\026RemoveReso"
  "urceOwnerRsp\"G\n\023DeleteAllAccessRqst\022\017\n\007s"
  "ubject\030\001 \001(\t\022\037\n\004type\030\002 \001(\0162\021.rbac.Subjec"
  "tType\"\024\n\022DeleteAllAccessRsp\"h\n\022ValidateA"
  "ccessRqst\022\017\n\007subject\030\001 \001(\t\022\037\n\004type\030\002 \001(\016"
  "2\021.rbac.SubjectType\022\014\n\004path\030\003 \001(\t\022\022\n\nper"
  "mission\030\004 \001(\t\"<\n\021ValidateAccessRsp\022\021\n\tha"
  "sAccess\030\001 \001(\010\022\024\n\014accessDenied\030\002 \001(\010\",\n\032G"
  "etActionResourceInfosRqst\022\016\n\006action\030\001 \001("
  "\t\"@\n\rResourceInfos\022\r\n\005index\030\001 \001(\005\022\022\n\nper"
  "mission\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\"\?\n\031GetAction"
  "ResourceInfosRsp\022\"\n\005infos\030\001 \003(\0132\023.rbac.R"
  "esourceInfos\"z\n\022ValidateActionRqst\022\017\n\007su"
  "bject\030\001 \001(\t\022\037\n\004type\030\002 \001(\0162\021.rbac.Subject"
  "Type\022\016\n\006action\030\003 \001(\t\022\"\n\005infos\030\004 \003(\0132\023.rb"
  "ac.ResourceInfos\"#\n\021ValidateActionRsp\022\016\n"
  "\006result\030\001 \001(\010\"Q\n!SetActionResourcesPermi"
  "ssionsRqst\022,\n\013permissions\030\001 \001(\0132\027.google"
  ".protobuf.Struct\"\"\n SetActionResourcesPe"
  "rmissionsRsp\"\203\001\n\005Share\022\014\n\004path\030\001 \001(\t\022\016\n\006"
  "domain\030\002 \001(\t\022\024\n\014applications\030\003 \003(\t\022\r\n\005pe"
  "ers\030\004 \003(\t\022\020\n\010accounts\030\005 \003(\t\022\016\n\006groups\030\006 "
  "\003(\t\022\025\n\rorganizations\030\007 \003(\t\"/\n\021ShareResou"
  "rceRqst\022\032\n\005share\030\001 \001(\0132\013.rbac.Share\"\022\n\020S"
  "hareResourceRsp\"1\n\023UnshareResourceRqst\022\032"
  "\n\005share\030\001 \001(\0132\013.rbac.Share\"\024\n\022UnshareRes"
  "ourceRsp\"I\n\025GetSharedResourceRqst\022\017\n\007sub"
  "ject\030\001 \001(\t\022\037\n\004type\030\002 \001(\0162\021.rbac.SubjectT"
  "ype\";\n\024GetSharedResourceRsp\022#\n\016sharedRes"
  "ource\030\001 \003(\0132\013.rbac.Share\"l\n\032RemoveSubjec"
  "tFromShareRqst\022\017\n\007subject\030\001 \001(\t\022\037\n\004type\030"
  "\002 \001(\0162\021.rbac.SubjectType\022\016\n\006domain\030\003 \001(\t"
  "\022\014\n\004path\030\004 \001(\t\"\033\n\031RemoveSubjectFromShare"
  "Rsp\"J\n\026DeleteSubjectShareRqst\022\017\n\007subject"
  "\030\001 \001(\t\022\037\n\004type\030\002 \001(\0162\021.rbac.SubjectType\""
  "\027\n\025DeleteSubjectShareRsp*)\n\016PermissionTy"
  "pe\022\n\n\006DENIED\020\000\022\013\n\007ALLOWED\020\001*\\\n\013SubjectTy"
  "pe\022\013\n\007ACCOUNT\020\000\022\010\n\004PEER\020\001\022\t\n\005GROUP\020\002\022\020\n\014"
  "ORGANIZATION\020\003\022\017\n\013APPLICATION\020\004\022\010\n\004ROLE\020"
  "\0052\214\014\n\013RbacService\022\\\n\026SetResourcePermissi"
  "ons\022 .rbac.SetResourcePermissionsRqst\032 ."
  "rbac.SetResourcePermissionsRqst\022e\n\031Delet"
  "eResourcePermissions\022#.rbac.DeleteResour"
  "cePermissionsRqst\032#.rbac.DeleteResourceP"
  "ermissionsRqst\022b\n\030DeleteResourcePermissi"
  "on\022\".rbac.DeleteResourcePermissionRqst\032\""
  ".rbac.DeleteResourcePermissionRqst\022X\n\025Ge"
  "tResourcePermission\022\037.rbac.GetResourcePe"
  "rmissionRqst\032\036.rbac.GetResourcePermissio"
  "nRsp\022X\n\025SetResourcePermission\022\037.rbac.Set"
  "ResourcePermissionRqst\032\036.rbac.SetResourc"
  "ePermissionRsp\022[\n\026GetResourcePermissions"
  "\022 .rbac.GetResourcePermissionsRqst\032\037.rba"
  "c.GetResourcePermissionsRsp\022I\n\020AddResour"
  "ceOwner\022\032.rbac.AddResourceOwnerRqst\032\031.rb"
  "ac.AddResourceOwnerRsp\022R\n\023RemoveResource"
  "Owner\022\035.rbac.RemoveResourceOwnerRqst\032\034.r"
  "bac.RemoveResourceOwnerRsp\022F\n\017DeleteAllA"
  "ccess\022\031.rbac.DeleteAllAccessRqst\032\030.rbac."
  "DeleteAllAccessRsp\022C\n\016ValidateAccess\022\030.r"
  "bac.ValidateAccessRqst\032\027.rbac.ValidateAc"
  "cessRsp\022p\n\035SetActionResourcesPermissions"
  "\022\'.rbac.SetActionResourcesPermissionsRqs"
  "t\032&.rbac.SetActionResourcesPermissionsRs"
  "p\022[\n\026GetActionResourceInfos\022 .rbac.GetAc"
  "tionResourceInfosRqst\032\037.rbac.GetActionRe"
  "sourceInfosRsp\022C\n\016ValidateAction\022\030.rbac."
  "ValidateActionRqst\032\027.rbac.ValidateAction"
  "Rsp\022@\n\rShareResource\022\027.rbac.ShareResourc"
  "eRqst\032\026.rbac.ShareResourceRsp\022E\n\016UshareR"
  "esource\022\031.rbac.UnshareResourceRqst\032\030.rba"
  "c.UnshareResourceRsp\022L\n\021GetSharedResourc"
  "e\022\033.rbac.GetSharedResourceRqst\032\032.rbac.Ge"
  "tSharedResourceRsp\022[\n\026RemoveSubjectFromS"
  "hare\022 .rbac.RemoveSubjectFromShareRqst\032\037"
  ".rbac.RemoveSubjectFromShareRsp\022O\n\022Delet"
  "eSubjectShare\022\034.rbac.DeleteSubjectShareR"
  "qst\032\033.rbac.DeleteSubjectShareRspB\rZ\013rbac"
  "/rbacpbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rbac_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rbac_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rbac_2eproto = {
  false, false, 4375, descriptor_table_protodef_rbac_2eproto, "rbac.proto", 
  &descriptor_table_rbac_2eproto_once, descriptor_table_rbac_2eproto_deps, 1, 40,
  schemas, file_default_instances, TableStruct_rbac_2eproto::offsets,
  file_level_metadata_rbac_2eproto, file_level_enum_descriptors_rbac_2eproto, file_level_service_descriptors_rbac_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_rbac_2eproto_getter() {
  return &descriptor_table_rbac_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_rbac_2eproto(&descriptor_table_rbac_2eproto);
namespace rbac {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PermissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rbac_2eproto);
  return file_level_enum_descriptors_rbac_2eproto[0];
}
bool PermissionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rbac_2eproto);
  return file_level_enum_descriptors_rbac_2eproto[1];
}
bool SubjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Permission::_Internal {
 public:
};

Permission::Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  applications_(arena),
  peers_(arena),
  accounts_(arena),
  groups_(arena),
  organizations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.Permission)
}
Permission::Permission(const Permission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      applications_(from.applications_),
      peers_(from.peers_),
      accounts_(from.accounts_),
      groups_(from.groups_),
      organizations_(from.organizations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rbac.Permission)
}

void Permission::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Permission::~Permission() {
  // @@protoc_insertion_point(destructor:rbac.Permission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Permission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Permission::ArenaDtor(void* object) {
  Permission* _this = reinterpret_cast< Permission* >(object);
  (void)_this;
}
void Permission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Permission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Permission::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.Permission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applications_.Clear();
  peers_.Clear();
  accounts_.Clear();
  groups_.Clear();
  organizations_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Permission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Permission.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string applications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_applications();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Permission.applications"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string peers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_peers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Permission.peers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string accounts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accounts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Permission.accounts"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string groups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groups();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Permission.groups"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string organizations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_organizations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Permission.organizations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Permission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.Permission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Permission.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string applications = 2;
  for (int i = 0, n = this->_internal_applications_size(); i < n; i++) {
    const auto& s = this->_internal_applications(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Permission.applications");
    target = stream->WriteString(2, s, target);
  }

  // repeated string peers = 3;
  for (int i = 0, n = this->_internal_peers_size(); i < n; i++) {
    const auto& s = this->_internal_peers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Permission.peers");
    target = stream->WriteString(3, s, target);
  }

  // repeated string accounts = 4;
  for (int i = 0, n = this->_internal_accounts_size(); i < n; i++) {
    const auto& s = this->_internal_accounts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Permission.accounts");
    target = stream->WriteString(4, s, target);
  }

  // repeated string groups = 5;
  for (int i = 0, n = this->_internal_groups_size(); i < n; i++) {
    const auto& s = this->_internal_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Permission.groups");
    target = stream->WriteString(5, s, target);
  }

  // repeated string organizations = 6;
  for (int i = 0, n = this->_internal_organizations_size(); i < n; i++) {
    const auto& s = this->_internal_organizations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Permission.organizations");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.Permission)
  return target;
}

size_t Permission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.Permission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string applications = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(applications_.size());
  for (int i = 0, n = applications_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      applications_.Get(i));
  }

  // repeated string peers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peers_.size());
  for (int i = 0, n = peers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      peers_.Get(i));
  }

  // repeated string accounts = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(accounts_.size());
  for (int i = 0, n = accounts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      accounts_.Get(i));
  }

  // repeated string groups = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(groups_.size());
  for (int i = 0, n = groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      groups_.Get(i));
  }

  // repeated string organizations = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(organizations_.size());
  for (int i = 0, n = organizations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      organizations_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Permission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.Permission)
  GOOGLE_DCHECK_NE(&from, this);
  const Permission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Permission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.Permission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.Permission)
    MergeFrom(*source);
  }
}

void Permission::MergeFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.Permission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applications_.MergeFrom(from.applications_);
  peers_.MergeFrom(from.peers_);
  accounts_.MergeFrom(from.accounts_);
  groups_.MergeFrom(from.groups_);
  organizations_.MergeFrom(from.organizations_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void Permission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Permission::CopyFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Permission::IsInitialized() const {
  return true;
}

void Permission::InternalSwap(Permission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  applications_.InternalSwap(&other->applications_);
  peers_.InternalSwap(&other->peers_);
  accounts_.InternalSwap(&other->accounts_);
  groups_.InternalSwap(&other->groups_);
  organizations_.InternalSwap(&other->organizations_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Permission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[0]);
}

// ===================================================================

class Permissions::_Internal {
 public:
  static const ::rbac::Permission& owners(const Permissions* msg);
};

const ::rbac::Permission&
Permissions::_Internal::owners(const Permissions* msg) {
  return *msg->owners_;
}
Permissions::Permissions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  allowed_(arena),
  denied_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.Permissions)
}
Permissions::Permissions(const Permissions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      allowed_(from.allowed_),
      denied_(from.denied_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owners()) {
    owners_ = new ::rbac::Permission(*from.owners_);
  } else {
    owners_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbac.Permissions)
}

void Permissions::SharedCtor() {
owners_ = nullptr;
}

Permissions::~Permissions() {
  // @@protoc_insertion_point(destructor:rbac.Permissions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Permissions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owners_;
}

void Permissions::ArenaDtor(void* object) {
  Permissions* _this = reinterpret_cast< Permissions* >(object);
  (void)_this;
}
void Permissions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Permissions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Permissions::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.Permissions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_.Clear();
  denied_.Clear();
  if (GetArena() == nullptr && owners_ != nullptr) {
    delete owners_;
  }
  owners_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Permissions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rbac.Permission owners = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owners(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rbac.Permission allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allowed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .rbac.Permission denied = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_denied(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Permissions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.Permissions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rbac.Permission owners = 1;
  if (this->has_owners()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owners(this), target, stream);
  }

  // repeated .rbac.Permission allowed = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_allowed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_allowed(i), target, stream);
  }

  // repeated .rbac.Permission denied = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_denied_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_denied(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.Permissions)
  return target;
}

size_t Permissions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.Permissions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbac.Permission allowed = 2;
  total_size += 1UL * this->_internal_allowed_size();
  for (const auto& msg : this->allowed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbac.Permission denied = 3;
  total_size += 1UL * this->_internal_denied_size();
  for (const auto& msg : this->denied_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .rbac.Permission owners = 1;
  if (this->has_owners()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owners_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Permissions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.Permissions)
  GOOGLE_DCHECK_NE(&from, this);
  const Permissions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Permissions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.Permissions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.Permissions)
    MergeFrom(*source);
  }
}

void Permissions::MergeFrom(const Permissions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.Permissions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_.MergeFrom(from.allowed_);
  denied_.MergeFrom(from.denied_);
  if (from.has_owners()) {
    _internal_mutable_owners()->::rbac::Permission::MergeFrom(from._internal_owners());
  }
}

void Permissions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.Permissions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Permissions::CopyFrom(const Permissions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.Permissions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Permissions::IsInitialized() const {
  return true;
}

void Permissions::InternalSwap(Permissions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  allowed_.InternalSwap(&other->allowed_);
  denied_.InternalSwap(&other->denied_);
  swap(owners_, other->owners_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Permissions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[1]);
}

// ===================================================================

class GetResourcePermissionsRqst::_Internal {
 public:
};

GetResourcePermissionsRqst::GetResourcePermissionsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.GetResourcePermissionsRqst)
}
GetResourcePermissionsRqst::GetResourcePermissionsRqst(const GetResourcePermissionsRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rbac.GetResourcePermissionsRqst)
}

void GetResourcePermissionsRqst::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetResourcePermissionsRqst::~GetResourcePermissionsRqst() {
  // @@protoc_insertion_point(destructor:rbac.GetResourcePermissionsRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetResourcePermissionsRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetResourcePermissionsRqst::ArenaDtor(void* object) {
  GetResourcePermissionsRqst* _this = reinterpret_cast< GetResourcePermissionsRqst* >(object);
  (void)_this;
}
void GetResourcePermissionsRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResourcePermissionsRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetResourcePermissionsRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.GetResourcePermissionsRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResourcePermissionsRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.GetResourcePermissionsRqst.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResourcePermissionsRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.GetResourcePermissionsRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.GetResourcePermissionsRqst.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.GetResourcePermissionsRqst)
  return target;
}

size_t GetResourcePermissionsRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.GetResourcePermissionsRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResourcePermissionsRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.GetResourcePermissionsRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResourcePermissionsRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResourcePermissionsRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.GetResourcePermissionsRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.GetResourcePermissionsRqst)
    MergeFrom(*source);
  }
}

void GetResourcePermissionsRqst::MergeFrom(const GetResourcePermissionsRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.GetResourcePermissionsRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void GetResourcePermissionsRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.GetResourcePermissionsRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResourcePermissionsRqst::CopyFrom(const GetResourcePermissionsRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.GetResourcePermissionsRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourcePermissionsRqst::IsInitialized() const {
  return true;
}

void GetResourcePermissionsRqst::InternalSwap(GetResourcePermissionsRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResourcePermissionsRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[2]);
}

// ===================================================================

class GetResourcePermissionsRsp::_Internal {
 public:
  static const ::rbac::Permissions& permissions(const GetResourcePermissionsRsp* msg);
};

const ::rbac::Permissions&
GetResourcePermissionsRsp::_Internal::permissions(const GetResourcePermissionsRsp* msg) {
  return *msg->permissions_;
}
GetResourcePermissionsRsp::GetResourcePermissionsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.GetResourcePermissionsRsp)
}
GetResourcePermissionsRsp::GetResourcePermissionsRsp(const GetResourcePermissionsRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_permissions()) {
    permissions_ = new ::rbac::Permissions(*from.permissions_);
  } else {
    permissions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbac.GetResourcePermissionsRsp)
}

void GetResourcePermissionsRsp::SharedCtor() {
permissions_ = nullptr;
}

GetResourcePermissionsRsp::~GetResourcePermissionsRsp() {
  // @@protoc_insertion_point(destructor:rbac.GetResourcePermissionsRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetResourcePermissionsRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete permissions_;
}

void GetResourcePermissionsRsp::ArenaDtor(void* object) {
  GetResourcePermissionsRsp* _this = reinterpret_cast< GetResourcePermissionsRsp* >(object);
  (void)_this;
}
void GetResourcePermissionsRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResourcePermissionsRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetResourcePermissionsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.GetResourcePermissionsRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && permissions_ != nullptr) {
    delete permissions_;
  }
  permissions_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResourcePermissionsRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rbac.Permissions permissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_permissions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResourcePermissionsRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.GetResourcePermissionsRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rbac.Permissions permissions = 1;
  if (this->has_permissions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::permissions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.GetResourcePermissionsRsp)
  return target;
}

size_t GetResourcePermissionsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.GetResourcePermissionsRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rbac.Permissions permissions = 1;
  if (this->has_permissions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permissions_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResourcePermissionsRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.GetResourcePermissionsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResourcePermissionsRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResourcePermissionsRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.GetResourcePermissionsRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.GetResourcePermissionsRsp)
    MergeFrom(*source);
  }
}

void GetResourcePermissionsRsp::MergeFrom(const GetResourcePermissionsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.GetResourcePermissionsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_permissions()) {
    _internal_mutable_permissions()->::rbac::Permissions::MergeFrom(from._internal_permissions());
  }
}

void GetResourcePermissionsRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.GetResourcePermissionsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResourcePermissionsRsp::CopyFrom(const GetResourcePermissionsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.GetResourcePermissionsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourcePermissionsRsp::IsInitialized() const {
  return true;
}

void GetResourcePermissionsRsp::InternalSwap(GetResourcePermissionsRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(permissions_, other->permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResourcePermissionsRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[3]);
}

// ===================================================================

class DeleteResourcePermissionsRqst::_Internal {
 public:
};

DeleteResourcePermissionsRqst::DeleteResourcePermissionsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.DeleteResourcePermissionsRqst)
}
DeleteResourcePermissionsRqst::DeleteResourcePermissionsRqst(const DeleteResourcePermissionsRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rbac.DeleteResourcePermissionsRqst)
}

void DeleteResourcePermissionsRqst::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteResourcePermissionsRqst::~DeleteResourcePermissionsRqst() {
  // @@protoc_insertion_point(destructor:rbac.DeleteResourcePermissionsRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteResourcePermissionsRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteResourcePermissionsRqst::ArenaDtor(void* object) {
  DeleteResourcePermissionsRqst* _this = reinterpret_cast< DeleteResourcePermissionsRqst* >(object);
  (void)_this;
}
void DeleteResourcePermissionsRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResourcePermissionsRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteResourcePermissionsRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.DeleteResourcePermissionsRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResourcePermissionsRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.DeleteResourcePermissionsRqst.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResourcePermissionsRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.DeleteResourcePermissionsRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.DeleteResourcePermissionsRqst.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.DeleteResourcePermissionsRqst)
  return target;
}

size_t DeleteResourcePermissionsRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.DeleteResourcePermissionsRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResourcePermissionsRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.DeleteResourcePermissionsRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResourcePermissionsRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteResourcePermissionsRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.DeleteResourcePermissionsRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.DeleteResourcePermissionsRqst)
    MergeFrom(*source);
  }
}

void DeleteResourcePermissionsRqst::MergeFrom(const DeleteResourcePermissionsRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.DeleteResourcePermissionsRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void DeleteResourcePermissionsRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.DeleteResourcePermissionsRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResourcePermissionsRqst::CopyFrom(const DeleteResourcePermissionsRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.DeleteResourcePermissionsRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResourcePermissionsRqst::IsInitialized() const {
  return true;
}

void DeleteResourcePermissionsRqst::InternalSwap(DeleteResourcePermissionsRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResourcePermissionsRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[4]);
}

// ===================================================================

class DeleteResourcePermissionsRsp::_Internal {
 public:
  static const ::rbac::Permissions& permissions(const DeleteResourcePermissionsRsp* msg);
};

const ::rbac::Permissions&
DeleteResourcePermissionsRsp::_Internal::permissions(const DeleteResourcePermissionsRsp* msg) {
  return *msg->permissions_;
}
DeleteResourcePermissionsRsp::DeleteResourcePermissionsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.DeleteResourcePermissionsRsp)
}
DeleteResourcePermissionsRsp::DeleteResourcePermissionsRsp(const DeleteResourcePermissionsRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_permissions()) {
    permissions_ = new ::rbac::Permissions(*from.permissions_);
  } else {
    permissions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbac.DeleteResourcePermissionsRsp)
}

void DeleteResourcePermissionsRsp::SharedCtor() {
permissions_ = nullptr;
}

DeleteResourcePermissionsRsp::~DeleteResourcePermissionsRsp() {
  // @@protoc_insertion_point(destructor:rbac.DeleteResourcePermissionsRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteResourcePermissionsRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete permissions_;
}

void DeleteResourcePermissionsRsp::ArenaDtor(void* object) {
  DeleteResourcePermissionsRsp* _this = reinterpret_cast< DeleteResourcePermissionsRsp* >(object);
  (void)_this;
}
void DeleteResourcePermissionsRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResourcePermissionsRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteResourcePermissionsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.DeleteResourcePermissionsRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && permissions_ != nullptr) {
    delete permissions_;
  }
  permissions_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResourcePermissionsRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rbac.Permissions permissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_permissions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResourcePermissionsRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.DeleteResourcePermissionsRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rbac.Permissions permissions = 1;
  if (this->has_permissions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::permissions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.DeleteResourcePermissionsRsp)
  return target;
}

size_t DeleteResourcePermissionsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.DeleteResourcePermissionsRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rbac.Permissions permissions = 1;
  if (this->has_permissions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permissions_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResourcePermissionsRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.DeleteResourcePermissionsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResourcePermissionsRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteResourcePermissionsRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.DeleteResourcePermissionsRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.DeleteResourcePermissionsRsp)
    MergeFrom(*source);
  }
}

void DeleteResourcePermissionsRsp::MergeFrom(const DeleteResourcePermissionsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.DeleteResourcePermissionsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_permissions()) {
    _internal_mutable_permissions()->::rbac::Permissions::MergeFrom(from._internal_permissions());
  }
}

void DeleteResourcePermissionsRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.DeleteResourcePermissionsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResourcePermissionsRsp::CopyFrom(const DeleteResourcePermissionsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.DeleteResourcePermissionsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResourcePermissionsRsp::IsInitialized() const {
  return true;
}

void DeleteResourcePermissionsRsp::InternalSwap(DeleteResourcePermissionsRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(permissions_, other->permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResourcePermissionsRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[5]);
}

// ===================================================================

class DeleteResourcePermissionRqst::_Internal {
 public:
};

DeleteResourcePermissionRqst::DeleteResourcePermissionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.DeleteResourcePermissionRqst)
}
DeleteResourcePermissionRqst::DeleteResourcePermissionRqst(const DeleteResourcePermissionRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rbac.DeleteResourcePermissionRqst)
}

void DeleteResourcePermissionRqst::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

DeleteResourcePermissionRqst::~DeleteResourcePermissionRqst() {
  // @@protoc_insertion_point(destructor:rbac.DeleteResourcePermissionRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteResourcePermissionRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteResourcePermissionRqst::ArenaDtor(void* object) {
  DeleteResourcePermissionRqst* _this = reinterpret_cast< DeleteResourcePermissionRqst* >(object);
  (void)_this;
}
void DeleteResourcePermissionRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResourcePermissionRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteResourcePermissionRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.DeleteResourcePermissionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResourcePermissionRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.DeleteResourcePermissionRqst.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.DeleteResourcePermissionRqst.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.PermissionType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rbac::PermissionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResourcePermissionRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.DeleteResourcePermissionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.DeleteResourcePermissionRqst.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.DeleteResourcePermissionRqst.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .rbac.PermissionType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.DeleteResourcePermissionRqst)
  return target;
}

size_t DeleteResourcePermissionRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.DeleteResourcePermissionRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .rbac.PermissionType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResourcePermissionRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.DeleteResourcePermissionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResourcePermissionRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteResourcePermissionRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.DeleteResourcePermissionRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.DeleteResourcePermissionRqst)
    MergeFrom(*source);
  }
}

void DeleteResourcePermissionRqst::MergeFrom(const DeleteResourcePermissionRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.DeleteResourcePermissionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DeleteResourcePermissionRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.DeleteResourcePermissionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResourcePermissionRqst::CopyFrom(const DeleteResourcePermissionRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.DeleteResourcePermissionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResourcePermissionRqst::IsInitialized() const {
  return true;
}

void DeleteResourcePermissionRqst::InternalSwap(DeleteResourcePermissionRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResourcePermissionRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[6]);
}

// ===================================================================

class DeleteResourcePermissionRsp::_Internal {
 public:
};

DeleteResourcePermissionRsp::DeleteResourcePermissionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.DeleteResourcePermissionRsp)
}
DeleteResourcePermissionRsp::DeleteResourcePermissionRsp(const DeleteResourcePermissionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.DeleteResourcePermissionRsp)
}

void DeleteResourcePermissionRsp::SharedCtor() {
}

DeleteResourcePermissionRsp::~DeleteResourcePermissionRsp() {
  // @@protoc_insertion_point(destructor:rbac.DeleteResourcePermissionRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteResourcePermissionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteResourcePermissionRsp::ArenaDtor(void* object) {
  DeleteResourcePermissionRsp* _this = reinterpret_cast< DeleteResourcePermissionRsp* >(object);
  (void)_this;
}
void DeleteResourcePermissionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResourcePermissionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteResourcePermissionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.DeleteResourcePermissionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResourcePermissionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResourcePermissionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.DeleteResourcePermissionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.DeleteResourcePermissionRsp)
  return target;
}

size_t DeleteResourcePermissionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.DeleteResourcePermissionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResourcePermissionRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.DeleteResourcePermissionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResourcePermissionRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteResourcePermissionRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.DeleteResourcePermissionRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.DeleteResourcePermissionRsp)
    MergeFrom(*source);
  }
}

void DeleteResourcePermissionRsp::MergeFrom(const DeleteResourcePermissionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.DeleteResourcePermissionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteResourcePermissionRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.DeleteResourcePermissionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResourcePermissionRsp::CopyFrom(const DeleteResourcePermissionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.DeleteResourcePermissionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResourcePermissionRsp::IsInitialized() const {
  return true;
}

void DeleteResourcePermissionRsp::InternalSwap(DeleteResourcePermissionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResourcePermissionRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[7]);
}

// ===================================================================

class SetResourcePermissionsRqst::_Internal {
 public:
  static const ::rbac::Permissions& permissions(const SetResourcePermissionsRqst* msg);
};

const ::rbac::Permissions&
SetResourcePermissionsRqst::_Internal::permissions(const SetResourcePermissionsRqst* msg) {
  return *msg->permissions_;
}
SetResourcePermissionsRqst::SetResourcePermissionsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.SetResourcePermissionsRqst)
}
SetResourcePermissionsRqst::SetResourcePermissionsRqst(const SetResourcePermissionsRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  if (from._internal_has_permissions()) {
    permissions_ = new ::rbac::Permissions(*from.permissions_);
  } else {
    permissions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbac.SetResourcePermissionsRqst)
}

void SetResourcePermissionsRqst::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
permissions_ = nullptr;
}

SetResourcePermissionsRqst::~SetResourcePermissionsRqst() {
  // @@protoc_insertion_point(destructor:rbac.SetResourcePermissionsRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetResourcePermissionsRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete permissions_;
}

void SetResourcePermissionsRqst::ArenaDtor(void* object) {
  SetResourcePermissionsRqst* _this = reinterpret_cast< SetResourcePermissionsRqst* >(object);
  (void)_this;
}
void SetResourcePermissionsRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResourcePermissionsRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetResourcePermissionsRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.SetResourcePermissionsRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  if (GetArena() == nullptr && permissions_ != nullptr) {
    delete permissions_;
  }
  permissions_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResourcePermissionsRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.SetResourcePermissionsRqst.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.Permissions permissions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_permissions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResourcePermissionsRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.SetResourcePermissionsRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.SetResourcePermissionsRqst.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .rbac.Permissions permissions = 2;
  if (this->has_permissions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::permissions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.SetResourcePermissionsRqst)
  return target;
}

size_t SetResourcePermissionsRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.SetResourcePermissionsRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .rbac.Permissions permissions = 2;
  if (this->has_permissions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permissions_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResourcePermissionsRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.SetResourcePermissionsRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const SetResourcePermissionsRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetResourcePermissionsRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.SetResourcePermissionsRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.SetResourcePermissionsRqst)
    MergeFrom(*source);
  }
}

void SetResourcePermissionsRqst::MergeFrom(const SetResourcePermissionsRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.SetResourcePermissionsRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.has_permissions()) {
    _internal_mutable_permissions()->::rbac::Permissions::MergeFrom(from._internal_permissions());
  }
}

void SetResourcePermissionsRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.SetResourcePermissionsRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetResourcePermissionsRqst::CopyFrom(const SetResourcePermissionsRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.SetResourcePermissionsRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResourcePermissionsRqst::IsInitialized() const {
  return true;
}

void SetResourcePermissionsRqst::InternalSwap(SetResourcePermissionsRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(permissions_, other->permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResourcePermissionsRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[8]);
}

// ===================================================================

class SetResourcePermissionsRsp::_Internal {
 public:
};

SetResourcePermissionsRsp::SetResourcePermissionsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.SetResourcePermissionsRsp)
}
SetResourcePermissionsRsp::SetResourcePermissionsRsp(const SetResourcePermissionsRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.SetResourcePermissionsRsp)
}

void SetResourcePermissionsRsp::SharedCtor() {
}

SetResourcePermissionsRsp::~SetResourcePermissionsRsp() {
  // @@protoc_insertion_point(destructor:rbac.SetResourcePermissionsRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetResourcePermissionsRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetResourcePermissionsRsp::ArenaDtor(void* object) {
  SetResourcePermissionsRsp* _this = reinterpret_cast< SetResourcePermissionsRsp* >(object);
  (void)_this;
}
void SetResourcePermissionsRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResourcePermissionsRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetResourcePermissionsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.SetResourcePermissionsRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResourcePermissionsRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResourcePermissionsRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.SetResourcePermissionsRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.SetResourcePermissionsRsp)
  return target;
}

size_t SetResourcePermissionsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.SetResourcePermissionsRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResourcePermissionsRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.SetResourcePermissionsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetResourcePermissionsRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetResourcePermissionsRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.SetResourcePermissionsRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.SetResourcePermissionsRsp)
    MergeFrom(*source);
  }
}

void SetResourcePermissionsRsp::MergeFrom(const SetResourcePermissionsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.SetResourcePermissionsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetResourcePermissionsRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.SetResourcePermissionsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetResourcePermissionsRsp::CopyFrom(const SetResourcePermissionsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.SetResourcePermissionsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResourcePermissionsRsp::IsInitialized() const {
  return true;
}

void SetResourcePermissionsRsp::InternalSwap(SetResourcePermissionsRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResourcePermissionsRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[9]);
}

// ===================================================================

class GetResourcePermissionRqst::_Internal {
 public:
};

GetResourcePermissionRqst::GetResourcePermissionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.GetResourcePermissionRqst)
}
GetResourcePermissionRqst::GetResourcePermissionRqst(const GetResourcePermissionRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rbac.GetResourcePermissionRqst)
}

void GetResourcePermissionRqst::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

GetResourcePermissionRqst::~GetResourcePermissionRqst() {
  // @@protoc_insertion_point(destructor:rbac.GetResourcePermissionRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetResourcePermissionRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetResourcePermissionRqst::ArenaDtor(void* object) {
  GetResourcePermissionRqst* _this = reinterpret_cast< GetResourcePermissionRqst* >(object);
  (void)_this;
}
void GetResourcePermissionRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResourcePermissionRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetResourcePermissionRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.GetResourcePermissionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResourcePermissionRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.GetResourcePermissionRqst.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.GetResourcePermissionRqst.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.PermissionType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rbac::PermissionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResourcePermissionRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.GetResourcePermissionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.GetResourcePermissionRqst.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.GetResourcePermissionRqst.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .rbac.PermissionType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.GetResourcePermissionRqst)
  return target;
}

size_t GetResourcePermissionRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.GetResourcePermissionRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .rbac.PermissionType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResourcePermissionRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.GetResourcePermissionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResourcePermissionRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResourcePermissionRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.GetResourcePermissionRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.GetResourcePermissionRqst)
    MergeFrom(*source);
  }
}

void GetResourcePermissionRqst::MergeFrom(const GetResourcePermissionRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.GetResourcePermissionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GetResourcePermissionRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.GetResourcePermissionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResourcePermissionRqst::CopyFrom(const GetResourcePermissionRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.GetResourcePermissionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourcePermissionRqst::IsInitialized() const {
  return true;
}

void GetResourcePermissionRqst::InternalSwap(GetResourcePermissionRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResourcePermissionRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[10]);
}

// ===================================================================

class GetResourcePermissionRsp::_Internal {
 public:
  static const ::rbac::Permission& permission(const GetResourcePermissionRsp* msg);
};

const ::rbac::Permission&
GetResourcePermissionRsp::_Internal::permission(const GetResourcePermissionRsp* msg) {
  return *msg->permission_;
}
GetResourcePermissionRsp::GetResourcePermissionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.GetResourcePermissionRsp)
}
GetResourcePermissionRsp::GetResourcePermissionRsp(const GetResourcePermissionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_permission()) {
    permission_ = new ::rbac::Permission(*from.permission_);
  } else {
    permission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbac.GetResourcePermissionRsp)
}

void GetResourcePermissionRsp::SharedCtor() {
permission_ = nullptr;
}

GetResourcePermissionRsp::~GetResourcePermissionRsp() {
  // @@protoc_insertion_point(destructor:rbac.GetResourcePermissionRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetResourcePermissionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete permission_;
}

void GetResourcePermissionRsp::ArenaDtor(void* object) {
  GetResourcePermissionRsp* _this = reinterpret_cast< GetResourcePermissionRsp* >(object);
  (void)_this;
}
void GetResourcePermissionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResourcePermissionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetResourcePermissionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.GetResourcePermissionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResourcePermissionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rbac.Permission permission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResourcePermissionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.GetResourcePermissionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rbac.Permission permission = 1;
  if (this->has_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::permission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.GetResourcePermissionRsp)
  return target;
}

size_t GetResourcePermissionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.GetResourcePermissionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rbac.Permission permission = 1;
  if (this->has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permission_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResourcePermissionRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.GetResourcePermissionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResourcePermissionRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResourcePermissionRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.GetResourcePermissionRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.GetResourcePermissionRsp)
    MergeFrom(*source);
  }
}

void GetResourcePermissionRsp::MergeFrom(const GetResourcePermissionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.GetResourcePermissionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_permission()) {
    _internal_mutable_permission()->::rbac::Permission::MergeFrom(from._internal_permission());
  }
}

void GetResourcePermissionRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.GetResourcePermissionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResourcePermissionRsp::CopyFrom(const GetResourcePermissionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.GetResourcePermissionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourcePermissionRsp::IsInitialized() const {
  return true;
}

void GetResourcePermissionRsp::InternalSwap(GetResourcePermissionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(permission_, other->permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResourcePermissionRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[11]);
}

// ===================================================================

class SetResourcePermissionRqst::_Internal {
 public:
  static const ::rbac::Permission& permission(const SetResourcePermissionRqst* msg);
};

const ::rbac::Permission&
SetResourcePermissionRqst::_Internal::permission(const SetResourcePermissionRqst* msg) {
  return *msg->permission_;
}
SetResourcePermissionRqst::SetResourcePermissionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.SetResourcePermissionRqst)
}
SetResourcePermissionRqst::SetResourcePermissionRqst(const SetResourcePermissionRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  if (from._internal_has_permission()) {
    permission_ = new ::rbac::Permission(*from.permission_);
  } else {
    permission_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rbac.SetResourcePermissionRqst)
}

void SetResourcePermissionRqst::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&permission_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&permission_)) + sizeof(type_));
}

SetResourcePermissionRqst::~SetResourcePermissionRqst() {
  // @@protoc_insertion_point(destructor:rbac.SetResourcePermissionRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetResourcePermissionRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete permission_;
}

void SetResourcePermissionRqst::ArenaDtor(void* object) {
  SetResourcePermissionRqst* _this = reinterpret_cast< SetResourcePermissionRqst* >(object);
  (void)_this;
}
void SetResourcePermissionRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResourcePermissionRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetResourcePermissionRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.SetResourcePermissionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  if (GetArena() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResourcePermissionRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.SetResourcePermissionRqst.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.Permission permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.PermissionType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rbac::PermissionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResourcePermissionRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.SetResourcePermissionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.SetResourcePermissionRqst.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .rbac.Permission permission = 2;
  if (this->has_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::permission(this), target, stream);
  }

  // .rbac.PermissionType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.SetResourcePermissionRqst)
  return target;
}

size_t SetResourcePermissionRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.SetResourcePermissionRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .rbac.Permission permission = 2;
  if (this->has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permission_);
  }

  // .rbac.PermissionType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResourcePermissionRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.SetResourcePermissionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const SetResourcePermissionRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetResourcePermissionRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.SetResourcePermissionRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.SetResourcePermissionRqst)
    MergeFrom(*source);
  }
}

void SetResourcePermissionRqst::MergeFrom(const SetResourcePermissionRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.SetResourcePermissionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.has_permission()) {
    _internal_mutable_permission()->::rbac::Permission::MergeFrom(from._internal_permission());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SetResourcePermissionRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.SetResourcePermissionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetResourcePermissionRqst::CopyFrom(const SetResourcePermissionRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.SetResourcePermissionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResourcePermissionRqst::IsInitialized() const {
  return true;
}

void SetResourcePermissionRqst::InternalSwap(SetResourcePermissionRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetResourcePermissionRqst, type_)
      + sizeof(SetResourcePermissionRqst::type_)
      - PROTOBUF_FIELD_OFFSET(SetResourcePermissionRqst, permission_)>(
          reinterpret_cast<char*>(&permission_),
          reinterpret_cast<char*>(&other->permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResourcePermissionRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[12]);
}

// ===================================================================

class SetResourcePermissionRsp::_Internal {
 public:
};

SetResourcePermissionRsp::SetResourcePermissionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.SetResourcePermissionRsp)
}
SetResourcePermissionRsp::SetResourcePermissionRsp(const SetResourcePermissionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.SetResourcePermissionRsp)
}

void SetResourcePermissionRsp::SharedCtor() {
}

SetResourcePermissionRsp::~SetResourcePermissionRsp() {
  // @@protoc_insertion_point(destructor:rbac.SetResourcePermissionRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetResourcePermissionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetResourcePermissionRsp::ArenaDtor(void* object) {
  SetResourcePermissionRsp* _this = reinterpret_cast< SetResourcePermissionRsp* >(object);
  (void)_this;
}
void SetResourcePermissionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResourcePermissionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetResourcePermissionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.SetResourcePermissionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResourcePermissionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResourcePermissionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.SetResourcePermissionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.SetResourcePermissionRsp)
  return target;
}

size_t SetResourcePermissionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.SetResourcePermissionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResourcePermissionRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.SetResourcePermissionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetResourcePermissionRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetResourcePermissionRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.SetResourcePermissionRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.SetResourcePermissionRsp)
    MergeFrom(*source);
  }
}

void SetResourcePermissionRsp::MergeFrom(const SetResourcePermissionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.SetResourcePermissionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetResourcePermissionRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.SetResourcePermissionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetResourcePermissionRsp::CopyFrom(const SetResourcePermissionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.SetResourcePermissionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResourcePermissionRsp::IsInitialized() const {
  return true;
}

void SetResourcePermissionRsp::InternalSwap(SetResourcePermissionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResourcePermissionRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[13]);
}

// ===================================================================

class AddResourceOwnerRqst::_Internal {
 public:
};

AddResourceOwnerRqst::AddResourceOwnerRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.AddResourceOwnerRqst)
}
AddResourceOwnerRqst::AddResourceOwnerRqst(const AddResourceOwnerRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rbac.AddResourceOwnerRqst)
}

void AddResourceOwnerRqst::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

AddResourceOwnerRqst::~AddResourceOwnerRqst() {
  // @@protoc_insertion_point(destructor:rbac.AddResourceOwnerRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddResourceOwnerRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddResourceOwnerRqst::ArenaDtor(void* object) {
  AddResourceOwnerRqst* _this = reinterpret_cast< AddResourceOwnerRqst* >(object);
  (void)_this;
}
void AddResourceOwnerRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddResourceOwnerRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddResourceOwnerRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.AddResourceOwnerRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  subject_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddResourceOwnerRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.AddResourceOwnerRqst.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.AddResourceOwnerRqst.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.SubjectType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rbac::SubjectType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddResourceOwnerRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.AddResourceOwnerRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.AddResourceOwnerRqst.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string subject = 2;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.AddResourceOwnerRqst.subject");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject(), target);
  }

  // .rbac.SubjectType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.AddResourceOwnerRqst)
  return target;
}

size_t AddResourceOwnerRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.AddResourceOwnerRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string subject = 2;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // .rbac.SubjectType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddResourceOwnerRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.AddResourceOwnerRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const AddResourceOwnerRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddResourceOwnerRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.AddResourceOwnerRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.AddResourceOwnerRqst)
    MergeFrom(*source);
  }
}

void AddResourceOwnerRqst::MergeFrom(const AddResourceOwnerRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.AddResourceOwnerRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void AddResourceOwnerRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.AddResourceOwnerRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddResourceOwnerRqst::CopyFrom(const AddResourceOwnerRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.AddResourceOwnerRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResourceOwnerRqst::IsInitialized() const {
  return true;
}

void AddResourceOwnerRqst::InternalSwap(AddResourceOwnerRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddResourceOwnerRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[14]);
}

// ===================================================================

class AddResourceOwnerRsp::_Internal {
 public:
};

AddResourceOwnerRsp::AddResourceOwnerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.AddResourceOwnerRsp)
}
AddResourceOwnerRsp::AddResourceOwnerRsp(const AddResourceOwnerRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.AddResourceOwnerRsp)
}

void AddResourceOwnerRsp::SharedCtor() {
}

AddResourceOwnerRsp::~AddResourceOwnerRsp() {
  // @@protoc_insertion_point(destructor:rbac.AddResourceOwnerRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddResourceOwnerRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddResourceOwnerRsp::ArenaDtor(void* object) {
  AddResourceOwnerRsp* _this = reinterpret_cast< AddResourceOwnerRsp* >(object);
  (void)_this;
}
void AddResourceOwnerRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddResourceOwnerRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddResourceOwnerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.AddResourceOwnerRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddResourceOwnerRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddResourceOwnerRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.AddResourceOwnerRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.AddResourceOwnerRsp)
  return target;
}

size_t AddResourceOwnerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.AddResourceOwnerRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddResourceOwnerRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.AddResourceOwnerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddResourceOwnerRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddResourceOwnerRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.AddResourceOwnerRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.AddResourceOwnerRsp)
    MergeFrom(*source);
  }
}

void AddResourceOwnerRsp::MergeFrom(const AddResourceOwnerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.AddResourceOwnerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddResourceOwnerRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.AddResourceOwnerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddResourceOwnerRsp::CopyFrom(const AddResourceOwnerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.AddResourceOwnerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResourceOwnerRsp::IsInitialized() const {
  return true;
}

void AddResourceOwnerRsp::InternalSwap(AddResourceOwnerRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddResourceOwnerRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[15]);
}

// ===================================================================

class RemoveResourceOwnerRqst::_Internal {
 public:
};

RemoveResourceOwnerRqst::RemoveResourceOwnerRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.RemoveResourceOwnerRqst)
}
RemoveResourceOwnerRqst::RemoveResourceOwnerRqst(const RemoveResourceOwnerRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rbac.RemoveResourceOwnerRqst)
}

void RemoveResourceOwnerRqst::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

RemoveResourceOwnerRqst::~RemoveResourceOwnerRqst() {
  // @@protoc_insertion_point(destructor:rbac.RemoveResourceOwnerRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveResourceOwnerRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveResourceOwnerRqst::ArenaDtor(void* object) {
  RemoveResourceOwnerRqst* _this = reinterpret_cast< RemoveResourceOwnerRqst* >(object);
  (void)_this;
}
void RemoveResourceOwnerRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveResourceOwnerRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveResourceOwnerRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.RemoveResourceOwnerRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  subject_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveResourceOwnerRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.RemoveResourceOwnerRqst.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.RemoveResourceOwnerRqst.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.SubjectType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rbac::SubjectType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveResourceOwnerRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.RemoveResourceOwnerRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.RemoveResourceOwnerRqst.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string subject = 2;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.RemoveResourceOwnerRqst.subject");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject(), target);
  }

  // .rbac.SubjectType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.RemoveResourceOwnerRqst)
  return target;
}

size_t RemoveResourceOwnerRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.RemoveResourceOwnerRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string subject = 2;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // .rbac.SubjectType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveResourceOwnerRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.RemoveResourceOwnerRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveResourceOwnerRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveResourceOwnerRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.RemoveResourceOwnerRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.RemoveResourceOwnerRqst)
    MergeFrom(*source);
  }
}

void RemoveResourceOwnerRqst::MergeFrom(const RemoveResourceOwnerRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.RemoveResourceOwnerRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RemoveResourceOwnerRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.RemoveResourceOwnerRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveResourceOwnerRqst::CopyFrom(const RemoveResourceOwnerRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.RemoveResourceOwnerRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveResourceOwnerRqst::IsInitialized() const {
  return true;
}

void RemoveResourceOwnerRqst::InternalSwap(RemoveResourceOwnerRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveResourceOwnerRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[16]);
}

// ===================================================================

class RemoveResourceOwnerRsp::_Internal {
 public:
};

RemoveResourceOwnerRsp::RemoveResourceOwnerRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.RemoveResourceOwnerRsp)
}
RemoveResourceOwnerRsp::RemoveResourceOwnerRsp(const RemoveResourceOwnerRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.RemoveResourceOwnerRsp)
}

void RemoveResourceOwnerRsp::SharedCtor() {
}

RemoveResourceOwnerRsp::~RemoveResourceOwnerRsp() {
  // @@protoc_insertion_point(destructor:rbac.RemoveResourceOwnerRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveResourceOwnerRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveResourceOwnerRsp::ArenaDtor(void* object) {
  RemoveResourceOwnerRsp* _this = reinterpret_cast< RemoveResourceOwnerRsp* >(object);
  (void)_this;
}
void RemoveResourceOwnerRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveResourceOwnerRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveResourceOwnerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.RemoveResourceOwnerRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveResourceOwnerRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveResourceOwnerRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.RemoveResourceOwnerRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.RemoveResourceOwnerRsp)
  return target;
}

size_t RemoveResourceOwnerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.RemoveResourceOwnerRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveResourceOwnerRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.RemoveResourceOwnerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveResourceOwnerRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveResourceOwnerRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.RemoveResourceOwnerRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.RemoveResourceOwnerRsp)
    MergeFrom(*source);
  }
}

void RemoveResourceOwnerRsp::MergeFrom(const RemoveResourceOwnerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.RemoveResourceOwnerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveResourceOwnerRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.RemoveResourceOwnerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveResourceOwnerRsp::CopyFrom(const RemoveResourceOwnerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.RemoveResourceOwnerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveResourceOwnerRsp::IsInitialized() const {
  return true;
}

void RemoveResourceOwnerRsp::InternalSwap(RemoveResourceOwnerRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveResourceOwnerRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[17]);
}

// ===================================================================

class DeleteAllAccessRqst::_Internal {
 public:
};

DeleteAllAccessRqst::DeleteAllAccessRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.DeleteAllAccessRqst)
}
DeleteAllAccessRqst::DeleteAllAccessRqst(const DeleteAllAccessRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rbac.DeleteAllAccessRqst)
}

void DeleteAllAccessRqst::SharedCtor() {
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

DeleteAllAccessRqst::~DeleteAllAccessRqst() {
  // @@protoc_insertion_point(destructor:rbac.DeleteAllAccessRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteAllAccessRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteAllAccessRqst::ArenaDtor(void* object) {
  DeleteAllAccessRqst* _this = reinterpret_cast< DeleteAllAccessRqst* >(object);
  (void)_this;
}
void DeleteAllAccessRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAllAccessRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAllAccessRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.DeleteAllAccessRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAllAccessRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.DeleteAllAccessRqst.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.SubjectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rbac::SubjectType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAllAccessRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.DeleteAllAccessRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.DeleteAllAccessRqst.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.DeleteAllAccessRqst)
  return target;
}

size_t DeleteAllAccessRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.DeleteAllAccessRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 1;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAllAccessRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.DeleteAllAccessRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAllAccessRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAllAccessRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.DeleteAllAccessRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.DeleteAllAccessRqst)
    MergeFrom(*source);
  }
}

void DeleteAllAccessRqst::MergeFrom(const DeleteAllAccessRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.DeleteAllAccessRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DeleteAllAccessRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.DeleteAllAccessRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAllAccessRqst::CopyFrom(const DeleteAllAccessRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.DeleteAllAccessRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAllAccessRqst::IsInitialized() const {
  return true;
}

void DeleteAllAccessRqst::InternalSwap(DeleteAllAccessRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAllAccessRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[18]);
}

// ===================================================================

class DeleteAllAccessRsp::_Internal {
 public:
};

DeleteAllAccessRsp::DeleteAllAccessRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.DeleteAllAccessRsp)
}
DeleteAllAccessRsp::DeleteAllAccessRsp(const DeleteAllAccessRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.DeleteAllAccessRsp)
}

void DeleteAllAccessRsp::SharedCtor() {
}

DeleteAllAccessRsp::~DeleteAllAccessRsp() {
  // @@protoc_insertion_point(destructor:rbac.DeleteAllAccessRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteAllAccessRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteAllAccessRsp::ArenaDtor(void* object) {
  DeleteAllAccessRsp* _this = reinterpret_cast< DeleteAllAccessRsp* >(object);
  (void)_this;
}
void DeleteAllAccessRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAllAccessRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteAllAccessRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.DeleteAllAccessRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAllAccessRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAllAccessRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.DeleteAllAccessRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.DeleteAllAccessRsp)
  return target;
}

size_t DeleteAllAccessRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.DeleteAllAccessRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAllAccessRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.DeleteAllAccessRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAllAccessRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAllAccessRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.DeleteAllAccessRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.DeleteAllAccessRsp)
    MergeFrom(*source);
  }
}

void DeleteAllAccessRsp::MergeFrom(const DeleteAllAccessRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.DeleteAllAccessRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteAllAccessRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.DeleteAllAccessRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAllAccessRsp::CopyFrom(const DeleteAllAccessRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.DeleteAllAccessRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAllAccessRsp::IsInitialized() const {
  return true;
}

void DeleteAllAccessRsp::InternalSwap(DeleteAllAccessRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAllAccessRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[19]);
}

// ===================================================================

class ValidateAccessRqst::_Internal {
 public:
};

ValidateAccessRqst::ValidateAccessRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.ValidateAccessRqst)
}
ValidateAccessRqst::ValidateAccessRqst(const ValidateAccessRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_permission().empty()) {
    permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_permission(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rbac.ValidateAccessRqst)
}

void ValidateAccessRqst::SharedCtor() {
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

ValidateAccessRqst::~ValidateAccessRqst() {
  // @@protoc_insertion_point(destructor:rbac.ValidateAccessRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateAccessRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  permission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidateAccessRqst::ArenaDtor(void* object) {
  ValidateAccessRqst* _this = reinterpret_cast< ValidateAccessRqst* >(object);
  (void)_this;
}
void ValidateAccessRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateAccessRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateAccessRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.ValidateAccessRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_.ClearToEmpty();
  path_.ClearToEmpty();
  permission_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateAccessRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.ValidateAccessRqst.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.SubjectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rbac::SubjectType>(val));
        } else goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.ValidateAccessRqst.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string permission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_permission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.ValidateAccessRqst.permission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateAccessRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.ValidateAccessRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.ValidateAccessRqst.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.ValidateAccessRqst.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // string permission = 4;
  if (this->permission().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_permission().data(), static_cast<int>(this->_internal_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.ValidateAccessRqst.permission");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_permission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.ValidateAccessRqst)
  return target;
}

size_t ValidateAccessRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.ValidateAccessRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 1;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string permission = 4;
  if (this->permission().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_permission());
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateAccessRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.ValidateAccessRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateAccessRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateAccessRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.ValidateAccessRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.ValidateAccessRqst)
    MergeFrom(*source);
  }
}

void ValidateAccessRqst::MergeFrom(const ValidateAccessRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.ValidateAccessRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.permission().size() > 0) {
    _internal_set_permission(from._internal_permission());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ValidateAccessRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.ValidateAccessRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateAccessRqst::CopyFrom(const ValidateAccessRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.ValidateAccessRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateAccessRqst::IsInitialized() const {
  return true;
}

void ValidateAccessRqst::InternalSwap(ValidateAccessRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  permission_.Swap(&other->permission_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateAccessRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[20]);
}

// ===================================================================

class ValidateAccessRsp::_Internal {
 public:
};

ValidateAccessRsp::ValidateAccessRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.ValidateAccessRsp)
}
ValidateAccessRsp::ValidateAccessRsp(const ValidateAccessRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hasaccess_, &from.hasaccess_,
    static_cast<size_t>(reinterpret_cast<char*>(&accessdenied_) -
    reinterpret_cast<char*>(&hasaccess_)) + sizeof(accessdenied_));
  // @@protoc_insertion_point(copy_constructor:rbac.ValidateAccessRsp)
}

void ValidateAccessRsp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hasaccess_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accessdenied_) -
    reinterpret_cast<char*>(&hasaccess_)) + sizeof(accessdenied_));
}

ValidateAccessRsp::~ValidateAccessRsp() {
  // @@protoc_insertion_point(destructor:rbac.ValidateAccessRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateAccessRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidateAccessRsp::ArenaDtor(void* object) {
  ValidateAccessRsp* _this = reinterpret_cast< ValidateAccessRsp* >(object);
  (void)_this;
}
void ValidateAccessRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateAccessRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateAccessRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.ValidateAccessRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hasaccess_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accessdenied_) -
      reinterpret_cast<char*>(&hasaccess_)) + sizeof(accessdenied_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateAccessRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool hasAccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hasaccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool accessDenied = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accessdenied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateAccessRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.ValidateAccessRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hasAccess = 1;
  if (this->hasaccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hasaccess(), target);
  }

  // bool accessDenied = 2;
  if (this->accessdenied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accessdenied(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.ValidateAccessRsp)
  return target;
}

size_t ValidateAccessRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.ValidateAccessRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool hasAccess = 1;
  if (this->hasaccess() != 0) {
    total_size += 1 + 1;
  }

  // bool accessDenied = 2;
  if (this->accessdenied() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateAccessRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.ValidateAccessRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateAccessRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateAccessRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.ValidateAccessRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.ValidateAccessRsp)
    MergeFrom(*source);
  }
}

void ValidateAccessRsp::MergeFrom(const ValidateAccessRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.ValidateAccessRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hasaccess() != 0) {
    _internal_set_hasaccess(from._internal_hasaccess());
  }
  if (from.accessdenied() != 0) {
    _internal_set_accessdenied(from._internal_accessdenied());
  }
}

void ValidateAccessRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.ValidateAccessRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateAccessRsp::CopyFrom(const ValidateAccessRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.ValidateAccessRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateAccessRsp::IsInitialized() const {
  return true;
}

void ValidateAccessRsp::InternalSwap(ValidateAccessRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateAccessRsp, accessdenied_)
      + sizeof(ValidateAccessRsp::accessdenied_)
      - PROTOBUF_FIELD_OFFSET(ValidateAccessRsp, hasaccess_)>(
          reinterpret_cast<char*>(&hasaccess_),
          reinterpret_cast<char*>(&other->hasaccess_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateAccessRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[21]);
}

// ===================================================================

class GetActionResourceInfosRqst::_Internal {
 public:
};

GetActionResourceInfosRqst::GetActionResourceInfosRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.GetActionResourceInfosRqst)
}
GetActionResourceInfosRqst::GetActionResourceInfosRqst(const GetActionResourceInfosRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rbac.GetActionResourceInfosRqst)
}

void GetActionResourceInfosRqst::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetActionResourceInfosRqst::~GetActionResourceInfosRqst() {
  // @@protoc_insertion_point(destructor:rbac.GetActionResourceInfosRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetActionResourceInfosRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetActionResourceInfosRqst::ArenaDtor(void* object) {
  GetActionResourceInfosRqst* _this = reinterpret_cast< GetActionResourceInfosRqst* >(object);
  (void)_this;
}
void GetActionResourceInfosRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetActionResourceInfosRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetActionResourceInfosRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.GetActionResourceInfosRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetActionResourceInfosRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.GetActionResourceInfosRqst.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetActionResourceInfosRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.GetActionResourceInfosRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.GetActionResourceInfosRqst.action");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.GetActionResourceInfosRqst)
  return target;
}

size_t GetActionResourceInfosRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.GetActionResourceInfosRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 1;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetActionResourceInfosRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.GetActionResourceInfosRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const GetActionResourceInfosRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetActionResourceInfosRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.GetActionResourceInfosRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.GetActionResourceInfosRqst)
    MergeFrom(*source);
  }
}

void GetActionResourceInfosRqst::MergeFrom(const GetActionResourceInfosRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.GetActionResourceInfosRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {
    _internal_set_action(from._internal_action());
  }
}

void GetActionResourceInfosRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.GetActionResourceInfosRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActionResourceInfosRqst::CopyFrom(const GetActionResourceInfosRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.GetActionResourceInfosRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActionResourceInfosRqst::IsInitialized() const {
  return true;
}

void GetActionResourceInfosRqst::InternalSwap(GetActionResourceInfosRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActionResourceInfosRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[22]);
}

// ===================================================================

class ResourceInfos::_Internal {
 public:
};

ResourceInfos::ResourceInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.ResourceInfos)
}
ResourceInfos::ResourceInfos(const ResourceInfos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_permission().empty()) {
    permission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_permission(), 
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:rbac.ResourceInfos)
}

void ResourceInfos::SharedCtor() {
permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
index_ = 0;
}

ResourceInfos::~ResourceInfos() {
  // @@protoc_insertion_point(destructor:rbac.ResourceInfos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceInfos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  permission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceInfos::ArenaDtor(void* object) {
  ResourceInfos* _this = reinterpret_cast< ResourceInfos* >(object);
  (void)_this;
}
void ResourceInfos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceInfos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.ResourceInfos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permission_.ClearToEmpty();
  path_.ClearToEmpty();
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceInfos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_permission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.ResourceInfos.permission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.ResourceInfos.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceInfos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.ResourceInfos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // string permission = 2;
  if (this->permission().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_permission().data(), static_cast<int>(this->_internal_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.ResourceInfos.permission");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_permission(), target);
  }

  // string path = 3;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.ResourceInfos.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.ResourceInfos)
  return target;
}

size_t ResourceInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.ResourceInfos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string permission = 2;
  if (this->permission().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_permission());
  }

  // string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceInfos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.ResourceInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceInfos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceInfos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.ResourceInfos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.ResourceInfos)
    MergeFrom(*source);
  }
}

void ResourceInfos::MergeFrom(const ResourceInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.ResourceInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.permission().size() > 0) {
    _internal_set_permission(from._internal_permission());
  }
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void ResourceInfos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.ResourceInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceInfos::CopyFrom(const ResourceInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.ResourceInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceInfos::IsInitialized() const {
  return true;
}

void ResourceInfos::InternalSwap(ResourceInfos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  permission_.Swap(&other->permission_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceInfos::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[23]);
}

// ===================================================================

class GetActionResourceInfosRsp::_Internal {
 public:
};

GetActionResourceInfosRsp::GetActionResourceInfosRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.GetActionResourceInfosRsp)
}
GetActionResourceInfosRsp::GetActionResourceInfosRsp(const GetActionResourceInfosRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.GetActionResourceInfosRsp)
}

void GetActionResourceInfosRsp::SharedCtor() {
}

GetActionResourceInfosRsp::~GetActionResourceInfosRsp() {
  // @@protoc_insertion_point(destructor:rbac.GetActionResourceInfosRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetActionResourceInfosRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetActionResourceInfosRsp::ArenaDtor(void* object) {
  GetActionResourceInfosRsp* _this = reinterpret_cast< GetActionResourceInfosRsp* >(object);
  (void)_this;
}
void GetActionResourceInfosRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetActionResourceInfosRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetActionResourceInfosRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.GetActionResourceInfosRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetActionResourceInfosRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rbac.ResourceInfos infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetActionResourceInfosRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.GetActionResourceInfosRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rbac.ResourceInfos infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.GetActionResourceInfosRsp)
  return target;
}

size_t GetActionResourceInfosRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.GetActionResourceInfosRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbac.ResourceInfos infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetActionResourceInfosRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.GetActionResourceInfosRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetActionResourceInfosRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetActionResourceInfosRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.GetActionResourceInfosRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.GetActionResourceInfosRsp)
    MergeFrom(*source);
  }
}

void GetActionResourceInfosRsp::MergeFrom(const GetActionResourceInfosRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.GetActionResourceInfosRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void GetActionResourceInfosRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.GetActionResourceInfosRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActionResourceInfosRsp::CopyFrom(const GetActionResourceInfosRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.GetActionResourceInfosRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActionResourceInfosRsp::IsInitialized() const {
  return true;
}

void GetActionResourceInfosRsp::InternalSwap(GetActionResourceInfosRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetActionResourceInfosRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[24]);
}

// ===================================================================

class ValidateActionRqst::_Internal {
 public:
};

ValidateActionRqst::ValidateActionRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.ValidateActionRqst)
}
ValidateActionRqst::ValidateActionRqst(const ValidateActionRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rbac.ValidateActionRqst)
}

void ValidateActionRqst::SharedCtor() {
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

ValidateActionRqst::~ValidateActionRqst() {
  // @@protoc_insertion_point(destructor:rbac.ValidateActionRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateActionRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidateActionRqst::ArenaDtor(void* object) {
  ValidateActionRqst* _this = reinterpret_cast< ValidateActionRqst* >(object);
  (void)_this;
}
void ValidateActionRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateActionRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateActionRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.ValidateActionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  subject_.ClearToEmpty();
  action_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateActionRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.ValidateActionRqst.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.SubjectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rbac::SubjectType>(val));
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.ValidateActionRqst.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rbac.ResourceInfos infos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateActionRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.ValidateActionRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.ValidateActionRqst.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string action = 3;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.ValidateActionRqst.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  // repeated .rbac.ResourceInfos infos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.ValidateActionRqst)
  return target;
}

size_t ValidateActionRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.ValidateActionRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbac.ResourceInfos infos = 4;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string subject = 1;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string action = 3;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateActionRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.ValidateActionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateActionRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateActionRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.ValidateActionRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.ValidateActionRqst)
    MergeFrom(*source);
  }
}

void ValidateActionRqst::MergeFrom(const ValidateActionRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.ValidateActionRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.action().size() > 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ValidateActionRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.ValidateActionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateActionRqst::CopyFrom(const ValidateActionRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.ValidateActionRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateActionRqst::IsInitialized() const {
  return true;
}

void ValidateActionRqst::InternalSwap(ValidateActionRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateActionRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[25]);
}

// ===================================================================

class ValidateActionRsp::_Internal {
 public:
};

ValidateActionRsp::ValidateActionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.ValidateActionRsp)
}
ValidateActionRsp::ValidateActionRsp(const ValidateActionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:rbac.ValidateActionRsp)
}

void ValidateActionRsp::SharedCtor() {
result_ = false;
}

ValidateActionRsp::~ValidateActionRsp() {
  // @@protoc_insertion_point(destructor:rbac.ValidateActionRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidateActionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValidateActionRsp::ArenaDtor(void* object) {
  ValidateActionRsp* _this = reinterpret_cast< ValidateActionRsp* >(object);
  (void)_this;
}
void ValidateActionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateActionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateActionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.ValidateActionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateActionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateActionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.ValidateActionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.ValidateActionRsp)
  return target;
}

size_t ValidateActionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.ValidateActionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateActionRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.ValidateActionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateActionRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateActionRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.ValidateActionRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.ValidateActionRsp)
    MergeFrom(*source);
  }
}

void ValidateActionRsp::MergeFrom(const ValidateActionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.ValidateActionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ValidateActionRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.ValidateActionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateActionRsp::CopyFrom(const ValidateActionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.ValidateActionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateActionRsp::IsInitialized() const {
  return true;
}

void ValidateActionRsp::InternalSwap(ValidateActionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateActionRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[26]);
}

// ===================================================================

class SetActionResourcesPermissionsRqst::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& permissions(const SetActionResourcesPermissionsRqst* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
SetActionResourcesPermissionsRqst::_Internal::permissions(const SetActionResourcesPermissionsRqst* msg) {
  return *msg->permissions_;
}
void SetActionResourcesPermissionsRqst::clear_permissions() {
  if (GetArena() == nullptr && permissions_ != nullptr) {
    delete permissions_;
  }
  permissions_ = nullptr;
}
SetActionResourcesPermissionsRqst::SetActionResourcesPermissionsRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.SetActionResourcesPermissionsRqst)
}
SetActionResourcesPermissionsRqst::SetActionResourcesPermissionsRqst(const SetActionResourcesPermissionsRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_permissions()) {
    permissions_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.permissions_);
  } else {
    permissions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbac.SetActionResourcesPermissionsRqst)
}

void SetActionResourcesPermissionsRqst::SharedCtor() {
permissions_ = nullptr;
}

SetActionResourcesPermissionsRqst::~SetActionResourcesPermissionsRqst() {
  // @@protoc_insertion_point(destructor:rbac.SetActionResourcesPermissionsRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetActionResourcesPermissionsRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete permissions_;
}

void SetActionResourcesPermissionsRqst::ArenaDtor(void* object) {
  SetActionResourcesPermissionsRqst* _this = reinterpret_cast< SetActionResourcesPermissionsRqst* >(object);
  (void)_this;
}
void SetActionResourcesPermissionsRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetActionResourcesPermissionsRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetActionResourcesPermissionsRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.SetActionResourcesPermissionsRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && permissions_ != nullptr) {
    delete permissions_;
  }
  permissions_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetActionResourcesPermissionsRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct permissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_permissions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetActionResourcesPermissionsRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.SetActionResourcesPermissionsRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct permissions = 1;
  if (this->has_permissions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::permissions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.SetActionResourcesPermissionsRqst)
  return target;
}

size_t SetActionResourcesPermissionsRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.SetActionResourcesPermissionsRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct permissions = 1;
  if (this->has_permissions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permissions_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetActionResourcesPermissionsRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.SetActionResourcesPermissionsRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const SetActionResourcesPermissionsRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetActionResourcesPermissionsRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.SetActionResourcesPermissionsRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.SetActionResourcesPermissionsRqst)
    MergeFrom(*source);
  }
}

void SetActionResourcesPermissionsRqst::MergeFrom(const SetActionResourcesPermissionsRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.SetActionResourcesPermissionsRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_permissions()) {
    _internal_mutable_permissions()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_permissions());
  }
}

void SetActionResourcesPermissionsRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.SetActionResourcesPermissionsRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetActionResourcesPermissionsRqst::CopyFrom(const SetActionResourcesPermissionsRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.SetActionResourcesPermissionsRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetActionResourcesPermissionsRqst::IsInitialized() const {
  return true;
}

void SetActionResourcesPermissionsRqst::InternalSwap(SetActionResourcesPermissionsRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(permissions_, other->permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetActionResourcesPermissionsRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[27]);
}

// ===================================================================

class SetActionResourcesPermissionsRsp::_Internal {
 public:
};

SetActionResourcesPermissionsRsp::SetActionResourcesPermissionsRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.SetActionResourcesPermissionsRsp)
}
SetActionResourcesPermissionsRsp::SetActionResourcesPermissionsRsp(const SetActionResourcesPermissionsRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.SetActionResourcesPermissionsRsp)
}

void SetActionResourcesPermissionsRsp::SharedCtor() {
}

SetActionResourcesPermissionsRsp::~SetActionResourcesPermissionsRsp() {
  // @@protoc_insertion_point(destructor:rbac.SetActionResourcesPermissionsRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetActionResourcesPermissionsRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetActionResourcesPermissionsRsp::ArenaDtor(void* object) {
  SetActionResourcesPermissionsRsp* _this = reinterpret_cast< SetActionResourcesPermissionsRsp* >(object);
  (void)_this;
}
void SetActionResourcesPermissionsRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetActionResourcesPermissionsRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetActionResourcesPermissionsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.SetActionResourcesPermissionsRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetActionResourcesPermissionsRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetActionResourcesPermissionsRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.SetActionResourcesPermissionsRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.SetActionResourcesPermissionsRsp)
  return target;
}

size_t SetActionResourcesPermissionsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.SetActionResourcesPermissionsRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetActionResourcesPermissionsRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.SetActionResourcesPermissionsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetActionResourcesPermissionsRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetActionResourcesPermissionsRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.SetActionResourcesPermissionsRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.SetActionResourcesPermissionsRsp)
    MergeFrom(*source);
  }
}

void SetActionResourcesPermissionsRsp::MergeFrom(const SetActionResourcesPermissionsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.SetActionResourcesPermissionsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetActionResourcesPermissionsRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.SetActionResourcesPermissionsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetActionResourcesPermissionsRsp::CopyFrom(const SetActionResourcesPermissionsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.SetActionResourcesPermissionsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetActionResourcesPermissionsRsp::IsInitialized() const {
  return true;
}

void SetActionResourcesPermissionsRsp::InternalSwap(SetActionResourcesPermissionsRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetActionResourcesPermissionsRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[28]);
}

// ===================================================================

class Share::_Internal {
 public:
};

Share::Share(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  applications_(arena),
  peers_(arena),
  accounts_(arena),
  groups_(arena),
  organizations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.Share)
}
Share::Share(const Share& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      applications_(from.applications_),
      peers_(from.peers_),
      accounts_(from.accounts_),
      groups_(from.groups_),
      organizations_(from.organizations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rbac.Share)
}

void Share::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Share::~Share() {
  // @@protoc_insertion_point(destructor:rbac.Share)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Share::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Share::ArenaDtor(void* object) {
  Share* _this = reinterpret_cast< Share* >(object);
  (void)_this;
}
void Share::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Share::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Share::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.Share)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applications_.Clear();
  peers_.Clear();
  accounts_.Clear();
  groups_.Clear();
  organizations_.Clear();
  path_.ClearToEmpty();
  domain_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Share::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Share.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Share.domain"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string applications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_applications();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Share.applications"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string peers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_peers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Share.peers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string accounts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_accounts();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Share.accounts"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string groups = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groups();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Share.groups"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string organizations = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_organizations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.Share.organizations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Share::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.Share)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Share.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Share.domain");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_domain(), target);
  }

  // repeated string applications = 3;
  for (int i = 0, n = this->_internal_applications_size(); i < n; i++) {
    const auto& s = this->_internal_applications(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Share.applications");
    target = stream->WriteString(3, s, target);
  }

  // repeated string peers = 4;
  for (int i = 0, n = this->_internal_peers_size(); i < n; i++) {
    const auto& s = this->_internal_peers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Share.peers");
    target = stream->WriteString(4, s, target);
  }

  // repeated string accounts = 5;
  for (int i = 0, n = this->_internal_accounts_size(); i < n; i++) {
    const auto& s = this->_internal_accounts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Share.accounts");
    target = stream->WriteString(5, s, target);
  }

  // repeated string groups = 6;
  for (int i = 0, n = this->_internal_groups_size(); i < n; i++) {
    const auto& s = this->_internal_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Share.groups");
    target = stream->WriteString(6, s, target);
  }

  // repeated string organizations = 7;
  for (int i = 0, n = this->_internal_organizations_size(); i < n; i++) {
    const auto& s = this->_internal_organizations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.Share.organizations");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.Share)
  return target;
}

size_t Share::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.Share)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string applications = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(applications_.size());
  for (int i = 0, n = applications_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      applications_.Get(i));
  }

  // repeated string peers = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peers_.size());
  for (int i = 0, n = peers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      peers_.Get(i));
  }

  // repeated string accounts = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(accounts_.size());
  for (int i = 0, n = accounts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      accounts_.Get(i));
  }

  // repeated string groups = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(groups_.size());
  for (int i = 0, n = groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      groups_.Get(i));
  }

  // repeated string organizations = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(organizations_.size());
  for (int i = 0, n = organizations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      organizations_.Get(i));
  }

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Share::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.Share)
  GOOGLE_DCHECK_NE(&from, this);
  const Share* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Share>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.Share)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.Share)
    MergeFrom(*source);
  }
}

void Share::MergeFrom(const Share& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.Share)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applications_.MergeFrom(from.applications_);
  peers_.MergeFrom(from.peers_);
  accounts_.MergeFrom(from.accounts_);
  groups_.MergeFrom(from.groups_);
  organizations_.MergeFrom(from.organizations_);
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.domain().size() > 0) {
    _internal_set_domain(from._internal_domain());
  }
}

void Share::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.Share)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Share::CopyFrom(const Share& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.Share)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Share::IsInitialized() const {
  return true;
}

void Share::InternalSwap(Share* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  applications_.InternalSwap(&other->applications_);
  peers_.InternalSwap(&other->peers_);
  accounts_.InternalSwap(&other->accounts_);
  groups_.InternalSwap(&other->groups_);
  organizations_.InternalSwap(&other->organizations_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Share::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[29]);
}

// ===================================================================

class ShareResourceRqst::_Internal {
 public:
  static const ::rbac::Share& share(const ShareResourceRqst* msg);
};

const ::rbac::Share&
ShareResourceRqst::_Internal::share(const ShareResourceRqst* msg) {
  return *msg->share_;
}
ShareResourceRqst::ShareResourceRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.ShareResourceRqst)
}
ShareResourceRqst::ShareResourceRqst(const ShareResourceRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_share()) {
    share_ = new ::rbac::Share(*from.share_);
  } else {
    share_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbac.ShareResourceRqst)
}

void ShareResourceRqst::SharedCtor() {
share_ = nullptr;
}

ShareResourceRqst::~ShareResourceRqst() {
  // @@protoc_insertion_point(destructor:rbac.ShareResourceRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShareResourceRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete share_;
}

void ShareResourceRqst::ArenaDtor(void* object) {
  ShareResourceRqst* _this = reinterpret_cast< ShareResourceRqst* >(object);
  (void)_this;
}
void ShareResourceRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShareResourceRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShareResourceRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.ShareResourceRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && share_ != nullptr) {
    delete share_;
  }
  share_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShareResourceRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rbac.Share share = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_share(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShareResourceRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.ShareResourceRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rbac.Share share = 1;
  if (this->has_share()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::share(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.ShareResourceRqst)
  return target;
}

size_t ShareResourceRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.ShareResourceRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rbac.Share share = 1;
  if (this->has_share()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *share_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShareResourceRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.ShareResourceRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const ShareResourceRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShareResourceRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.ShareResourceRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.ShareResourceRqst)
    MergeFrom(*source);
  }
}

void ShareResourceRqst::MergeFrom(const ShareResourceRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.ShareResourceRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_share()) {
    _internal_mutable_share()->::rbac::Share::MergeFrom(from._internal_share());
  }
}

void ShareResourceRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.ShareResourceRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareResourceRqst::CopyFrom(const ShareResourceRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.ShareResourceRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareResourceRqst::IsInitialized() const {
  return true;
}

void ShareResourceRqst::InternalSwap(ShareResourceRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(share_, other->share_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShareResourceRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[30]);
}

// ===================================================================

class ShareResourceRsp::_Internal {
 public:
};

ShareResourceRsp::ShareResourceRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.ShareResourceRsp)
}
ShareResourceRsp::ShareResourceRsp(const ShareResourceRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.ShareResourceRsp)
}

void ShareResourceRsp::SharedCtor() {
}

ShareResourceRsp::~ShareResourceRsp() {
  // @@protoc_insertion_point(destructor:rbac.ShareResourceRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShareResourceRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShareResourceRsp::ArenaDtor(void* object) {
  ShareResourceRsp* _this = reinterpret_cast< ShareResourceRsp* >(object);
  (void)_this;
}
void ShareResourceRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShareResourceRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShareResourceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.ShareResourceRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShareResourceRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShareResourceRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.ShareResourceRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.ShareResourceRsp)
  return target;
}

size_t ShareResourceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.ShareResourceRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShareResourceRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.ShareResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ShareResourceRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShareResourceRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.ShareResourceRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.ShareResourceRsp)
    MergeFrom(*source);
  }
}

void ShareResourceRsp::MergeFrom(const ShareResourceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.ShareResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ShareResourceRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.ShareResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareResourceRsp::CopyFrom(const ShareResourceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.ShareResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareResourceRsp::IsInitialized() const {
  return true;
}

void ShareResourceRsp::InternalSwap(ShareResourceRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShareResourceRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[31]);
}

// ===================================================================

class UnshareResourceRqst::_Internal {
 public:
  static const ::rbac::Share& share(const UnshareResourceRqst* msg);
};

const ::rbac::Share&
UnshareResourceRqst::_Internal::share(const UnshareResourceRqst* msg) {
  return *msg->share_;
}
UnshareResourceRqst::UnshareResourceRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.UnshareResourceRqst)
}
UnshareResourceRqst::UnshareResourceRqst(const UnshareResourceRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_share()) {
    share_ = new ::rbac::Share(*from.share_);
  } else {
    share_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbac.UnshareResourceRqst)
}

void UnshareResourceRqst::SharedCtor() {
share_ = nullptr;
}

UnshareResourceRqst::~UnshareResourceRqst() {
  // @@protoc_insertion_point(destructor:rbac.UnshareResourceRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnshareResourceRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete share_;
}

void UnshareResourceRqst::ArenaDtor(void* object) {
  UnshareResourceRqst* _this = reinterpret_cast< UnshareResourceRqst* >(object);
  (void)_this;
}
void UnshareResourceRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnshareResourceRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnshareResourceRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.UnshareResourceRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && share_ != nullptr) {
    delete share_;
  }
  share_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnshareResourceRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rbac.Share share = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_share(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnshareResourceRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.UnshareResourceRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rbac.Share share = 1;
  if (this->has_share()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::share(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.UnshareResourceRqst)
  return target;
}

size_t UnshareResourceRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.UnshareResourceRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rbac.Share share = 1;
  if (this->has_share()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *share_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnshareResourceRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.UnshareResourceRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const UnshareResourceRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnshareResourceRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.UnshareResourceRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.UnshareResourceRqst)
    MergeFrom(*source);
  }
}

void UnshareResourceRqst::MergeFrom(const UnshareResourceRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.UnshareResourceRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_share()) {
    _internal_mutable_share()->::rbac::Share::MergeFrom(from._internal_share());
  }
}

void UnshareResourceRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.UnshareResourceRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnshareResourceRqst::CopyFrom(const UnshareResourceRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.UnshareResourceRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnshareResourceRqst::IsInitialized() const {
  return true;
}

void UnshareResourceRqst::InternalSwap(UnshareResourceRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(share_, other->share_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnshareResourceRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[32]);
}

// ===================================================================

class UnshareResourceRsp::_Internal {
 public:
};

UnshareResourceRsp::UnshareResourceRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.UnshareResourceRsp)
}
UnshareResourceRsp::UnshareResourceRsp(const UnshareResourceRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.UnshareResourceRsp)
}

void UnshareResourceRsp::SharedCtor() {
}

UnshareResourceRsp::~UnshareResourceRsp() {
  // @@protoc_insertion_point(destructor:rbac.UnshareResourceRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnshareResourceRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnshareResourceRsp::ArenaDtor(void* object) {
  UnshareResourceRsp* _this = reinterpret_cast< UnshareResourceRsp* >(object);
  (void)_this;
}
void UnshareResourceRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnshareResourceRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnshareResourceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.UnshareResourceRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnshareResourceRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnshareResourceRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.UnshareResourceRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.UnshareResourceRsp)
  return target;
}

size_t UnshareResourceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.UnshareResourceRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnshareResourceRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.UnshareResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const UnshareResourceRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnshareResourceRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.UnshareResourceRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.UnshareResourceRsp)
    MergeFrom(*source);
  }
}

void UnshareResourceRsp::MergeFrom(const UnshareResourceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.UnshareResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnshareResourceRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.UnshareResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnshareResourceRsp::CopyFrom(const UnshareResourceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.UnshareResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnshareResourceRsp::IsInitialized() const {
  return true;
}

void UnshareResourceRsp::InternalSwap(UnshareResourceRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnshareResourceRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[33]);
}

// ===================================================================

class GetSharedResourceRqst::_Internal {
 public:
};

GetSharedResourceRqst::GetSharedResourceRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.GetSharedResourceRqst)
}
GetSharedResourceRqst::GetSharedResourceRqst(const GetSharedResourceRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rbac.GetSharedResourceRqst)
}

void GetSharedResourceRqst::SharedCtor() {
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

GetSharedResourceRqst::~GetSharedResourceRqst() {
  // @@protoc_insertion_point(destructor:rbac.GetSharedResourceRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSharedResourceRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSharedResourceRqst::ArenaDtor(void* object) {
  GetSharedResourceRqst* _this = reinterpret_cast< GetSharedResourceRqst* >(object);
  (void)_this;
}
void GetSharedResourceRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSharedResourceRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSharedResourceRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.GetSharedResourceRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSharedResourceRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.GetSharedResourceRqst.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.SubjectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rbac::SubjectType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSharedResourceRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.GetSharedResourceRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.GetSharedResourceRqst.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.GetSharedResourceRqst)
  return target;
}

size_t GetSharedResourceRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.GetSharedResourceRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 1;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSharedResourceRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.GetSharedResourceRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSharedResourceRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSharedResourceRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.GetSharedResourceRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.GetSharedResourceRqst)
    MergeFrom(*source);
  }
}

void GetSharedResourceRqst::MergeFrom(const GetSharedResourceRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.GetSharedResourceRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GetSharedResourceRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.GetSharedResourceRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSharedResourceRqst::CopyFrom(const GetSharedResourceRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.GetSharedResourceRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSharedResourceRqst::IsInitialized() const {
  return true;
}

void GetSharedResourceRqst::InternalSwap(GetSharedResourceRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSharedResourceRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[34]);
}

// ===================================================================

class GetSharedResourceRsp::_Internal {
 public:
};

GetSharedResourceRsp::GetSharedResourceRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sharedresource_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.GetSharedResourceRsp)
}
GetSharedResourceRsp::GetSharedResourceRsp(const GetSharedResourceRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sharedresource_(from.sharedresource_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.GetSharedResourceRsp)
}

void GetSharedResourceRsp::SharedCtor() {
}

GetSharedResourceRsp::~GetSharedResourceRsp() {
  // @@protoc_insertion_point(destructor:rbac.GetSharedResourceRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSharedResourceRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetSharedResourceRsp::ArenaDtor(void* object) {
  GetSharedResourceRsp* _this = reinterpret_cast< GetSharedResourceRsp* >(object);
  (void)_this;
}
void GetSharedResourceRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSharedResourceRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSharedResourceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.GetSharedResourceRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sharedresource_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSharedResourceRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rbac.Share sharedResource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sharedresource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSharedResourceRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.GetSharedResourceRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rbac.Share sharedResource = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sharedresource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sharedresource(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.GetSharedResourceRsp)
  return target;
}

size_t GetSharedResourceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.GetSharedResourceRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbac.Share sharedResource = 1;
  total_size += 1UL * this->_internal_sharedresource_size();
  for (const auto& msg : this->sharedresource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSharedResourceRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.GetSharedResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSharedResourceRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSharedResourceRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.GetSharedResourceRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.GetSharedResourceRsp)
    MergeFrom(*source);
  }
}

void GetSharedResourceRsp::MergeFrom(const GetSharedResourceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.GetSharedResourceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sharedresource_.MergeFrom(from.sharedresource_);
}

void GetSharedResourceRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.GetSharedResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSharedResourceRsp::CopyFrom(const GetSharedResourceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.GetSharedResourceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSharedResourceRsp::IsInitialized() const {
  return true;
}

void GetSharedResourceRsp::InternalSwap(GetSharedResourceRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sharedresource_.InternalSwap(&other->sharedresource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSharedResourceRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[35]);
}

// ===================================================================

class RemoveSubjectFromShareRqst::_Internal {
 public:
};

RemoveSubjectFromShareRqst::RemoveSubjectFromShareRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.RemoveSubjectFromShareRqst)
}
RemoveSubjectFromShareRqst::RemoveSubjectFromShareRqst(const RemoveSubjectFromShareRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArena());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rbac.RemoveSubjectFromShareRqst)
}

void RemoveSubjectFromShareRqst::SharedCtor() {
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

RemoveSubjectFromShareRqst::~RemoveSubjectFromShareRqst() {
  // @@protoc_insertion_point(destructor:rbac.RemoveSubjectFromShareRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveSubjectFromShareRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveSubjectFromShareRqst::ArenaDtor(void* object) {
  RemoveSubjectFromShareRqst* _this = reinterpret_cast< RemoveSubjectFromShareRqst* >(object);
  (void)_this;
}
void RemoveSubjectFromShareRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveSubjectFromShareRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveSubjectFromShareRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.RemoveSubjectFromShareRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_.ClearToEmpty();
  domain_.ClearToEmpty();
  path_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveSubjectFromShareRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.RemoveSubjectFromShareRqst.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.SubjectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rbac::SubjectType>(val));
        } else goto handle_unusual;
        continue;
      // string domain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.RemoveSubjectFromShareRqst.domain"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.RemoveSubjectFromShareRqst.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveSubjectFromShareRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.RemoveSubjectFromShareRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.RemoveSubjectFromShareRqst.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.RemoveSubjectFromShareRqst.domain");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_domain(), target);
  }

  // string path = 4;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.RemoveSubjectFromShareRqst.path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.RemoveSubjectFromShareRqst)
  return target;
}

size_t RemoveSubjectFromShareRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.RemoveSubjectFromShareRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 1;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // string path = 4;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveSubjectFromShareRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.RemoveSubjectFromShareRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveSubjectFromShareRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveSubjectFromShareRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.RemoveSubjectFromShareRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.RemoveSubjectFromShareRqst)
    MergeFrom(*source);
  }
}

void RemoveSubjectFromShareRqst::MergeFrom(const RemoveSubjectFromShareRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.RemoveSubjectFromShareRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.domain().size() > 0) {
    _internal_set_domain(from._internal_domain());
  }
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RemoveSubjectFromShareRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.RemoveSubjectFromShareRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveSubjectFromShareRqst::CopyFrom(const RemoveSubjectFromShareRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.RemoveSubjectFromShareRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSubjectFromShareRqst::IsInitialized() const {
  return true;
}

void RemoveSubjectFromShareRqst::InternalSwap(RemoveSubjectFromShareRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveSubjectFromShareRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[36]);
}

// ===================================================================

class RemoveSubjectFromShareRsp::_Internal {
 public:
};

RemoveSubjectFromShareRsp::RemoveSubjectFromShareRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.RemoveSubjectFromShareRsp)
}
RemoveSubjectFromShareRsp::RemoveSubjectFromShareRsp(const RemoveSubjectFromShareRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.RemoveSubjectFromShareRsp)
}

void RemoveSubjectFromShareRsp::SharedCtor() {
}

RemoveSubjectFromShareRsp::~RemoveSubjectFromShareRsp() {
  // @@protoc_insertion_point(destructor:rbac.RemoveSubjectFromShareRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveSubjectFromShareRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveSubjectFromShareRsp::ArenaDtor(void* object) {
  RemoveSubjectFromShareRsp* _this = reinterpret_cast< RemoveSubjectFromShareRsp* >(object);
  (void)_this;
}
void RemoveSubjectFromShareRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveSubjectFromShareRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveSubjectFromShareRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.RemoveSubjectFromShareRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveSubjectFromShareRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveSubjectFromShareRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.RemoveSubjectFromShareRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.RemoveSubjectFromShareRsp)
  return target;
}

size_t RemoveSubjectFromShareRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.RemoveSubjectFromShareRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveSubjectFromShareRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.RemoveSubjectFromShareRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveSubjectFromShareRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveSubjectFromShareRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.RemoveSubjectFromShareRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.RemoveSubjectFromShareRsp)
    MergeFrom(*source);
  }
}

void RemoveSubjectFromShareRsp::MergeFrom(const RemoveSubjectFromShareRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.RemoveSubjectFromShareRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveSubjectFromShareRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.RemoveSubjectFromShareRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveSubjectFromShareRsp::CopyFrom(const RemoveSubjectFromShareRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.RemoveSubjectFromShareRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSubjectFromShareRsp::IsInitialized() const {
  return true;
}

void RemoveSubjectFromShareRsp::InternalSwap(RemoveSubjectFromShareRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveSubjectFromShareRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[37]);
}

// ===================================================================

class DeleteSubjectShareRqst::_Internal {
 public:
};

DeleteSubjectShareRqst::DeleteSubjectShareRqst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.DeleteSubjectShareRqst)
}
DeleteSubjectShareRqst::DeleteSubjectShareRqst(const DeleteSubjectShareRqst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subject(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rbac.DeleteSubjectShareRqst)
}

void DeleteSubjectShareRqst::SharedCtor() {
subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

DeleteSubjectShareRqst::~DeleteSubjectShareRqst() {
  // @@protoc_insertion_point(destructor:rbac.DeleteSubjectShareRqst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSubjectShareRqst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSubjectShareRqst::ArenaDtor(void* object) {
  DeleteSubjectShareRqst* _this = reinterpret_cast< DeleteSubjectShareRqst* >(object);
  (void)_this;
}
void DeleteSubjectShareRqst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSubjectShareRqst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteSubjectShareRqst::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.DeleteSubjectShareRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSubjectShareRqst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rbac.DeleteSubjectShareRqst.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rbac.SubjectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rbac::SubjectType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSubjectShareRqst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.DeleteSubjectShareRqst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subject = 1;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbac.DeleteSubjectShareRqst.subject");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subject(), target);
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.DeleteSubjectShareRqst)
  return target;
}

size_t DeleteSubjectShareRqst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.DeleteSubjectShareRqst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 1;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // .rbac.SubjectType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSubjectShareRqst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.DeleteSubjectShareRqst)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSubjectShareRqst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSubjectShareRqst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.DeleteSubjectShareRqst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.DeleteSubjectShareRqst)
    MergeFrom(*source);
  }
}

void DeleteSubjectShareRqst::MergeFrom(const DeleteSubjectShareRqst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.DeleteSubjectShareRqst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DeleteSubjectShareRqst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.DeleteSubjectShareRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSubjectShareRqst::CopyFrom(const DeleteSubjectShareRqst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.DeleteSubjectShareRqst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSubjectShareRqst::IsInitialized() const {
  return true;
}

void DeleteSubjectShareRqst::InternalSwap(DeleteSubjectShareRqst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSubjectShareRqst::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[38]);
}

// ===================================================================

class DeleteSubjectShareRsp::_Internal {
 public:
};

DeleteSubjectShareRsp::DeleteSubjectShareRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rbac.DeleteSubjectShareRsp)
}
DeleteSubjectShareRsp::DeleteSubjectShareRsp(const DeleteSubjectShareRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbac.DeleteSubjectShareRsp)
}

void DeleteSubjectShareRsp::SharedCtor() {
}

DeleteSubjectShareRsp::~DeleteSubjectShareRsp() {
  // @@protoc_insertion_point(destructor:rbac.DeleteSubjectShareRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteSubjectShareRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteSubjectShareRsp::ArenaDtor(void* object) {
  DeleteSubjectShareRsp* _this = reinterpret_cast< DeleteSubjectShareRsp* >(object);
  (void)_this;
}
void DeleteSubjectShareRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSubjectShareRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteSubjectShareRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:rbac.DeleteSubjectShareRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSubjectShareRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSubjectShareRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbac.DeleteSubjectShareRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbac.DeleteSubjectShareRsp)
  return target;
}

size_t DeleteSubjectShareRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbac.DeleteSubjectShareRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSubjectShareRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbac.DeleteSubjectShareRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSubjectShareRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSubjectShareRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbac.DeleteSubjectShareRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbac.DeleteSubjectShareRsp)
    MergeFrom(*source);
  }
}

void DeleteSubjectShareRsp::MergeFrom(const DeleteSubjectShareRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbac.DeleteSubjectShareRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteSubjectShareRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbac.DeleteSubjectShareRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSubjectShareRsp::CopyFrom(const DeleteSubjectShareRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbac.DeleteSubjectShareRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSubjectShareRsp::IsInitialized() const {
  return true;
}

void DeleteSubjectShareRsp::InternalSwap(DeleteSubjectShareRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSubjectShareRsp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[39]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rbac
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rbac::Permission* Arena::CreateMaybeMessage< ::rbac::Permission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::Permission >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::Permissions* Arena::CreateMaybeMessage< ::rbac::Permissions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::Permissions >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::GetResourcePermissionsRqst* Arena::CreateMaybeMessage< ::rbac::GetResourcePermissionsRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::GetResourcePermissionsRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::GetResourcePermissionsRsp* Arena::CreateMaybeMessage< ::rbac::GetResourcePermissionsRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::GetResourcePermissionsRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::DeleteResourcePermissionsRqst* Arena::CreateMaybeMessage< ::rbac::DeleteResourcePermissionsRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::DeleteResourcePermissionsRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::DeleteResourcePermissionsRsp* Arena::CreateMaybeMessage< ::rbac::DeleteResourcePermissionsRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::DeleteResourcePermissionsRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::DeleteResourcePermissionRqst* Arena::CreateMaybeMessage< ::rbac::DeleteResourcePermissionRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::DeleteResourcePermissionRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::DeleteResourcePermissionRsp* Arena::CreateMaybeMessage< ::rbac::DeleteResourcePermissionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::DeleteResourcePermissionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::SetResourcePermissionsRqst* Arena::CreateMaybeMessage< ::rbac::SetResourcePermissionsRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::SetResourcePermissionsRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::SetResourcePermissionsRsp* Arena::CreateMaybeMessage< ::rbac::SetResourcePermissionsRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::SetResourcePermissionsRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::GetResourcePermissionRqst* Arena::CreateMaybeMessage< ::rbac::GetResourcePermissionRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::GetResourcePermissionRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::GetResourcePermissionRsp* Arena::CreateMaybeMessage< ::rbac::GetResourcePermissionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::GetResourcePermissionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::SetResourcePermissionRqst* Arena::CreateMaybeMessage< ::rbac::SetResourcePermissionRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::SetResourcePermissionRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::SetResourcePermissionRsp* Arena::CreateMaybeMessage< ::rbac::SetResourcePermissionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::SetResourcePermissionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::AddResourceOwnerRqst* Arena::CreateMaybeMessage< ::rbac::AddResourceOwnerRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::AddResourceOwnerRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::AddResourceOwnerRsp* Arena::CreateMaybeMessage< ::rbac::AddResourceOwnerRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::AddResourceOwnerRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::RemoveResourceOwnerRqst* Arena::CreateMaybeMessage< ::rbac::RemoveResourceOwnerRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::RemoveResourceOwnerRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::RemoveResourceOwnerRsp* Arena::CreateMaybeMessage< ::rbac::RemoveResourceOwnerRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::RemoveResourceOwnerRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::DeleteAllAccessRqst* Arena::CreateMaybeMessage< ::rbac::DeleteAllAccessRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::DeleteAllAccessRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::DeleteAllAccessRsp* Arena::CreateMaybeMessage< ::rbac::DeleteAllAccessRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::DeleteAllAccessRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::ValidateAccessRqst* Arena::CreateMaybeMessage< ::rbac::ValidateAccessRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::ValidateAccessRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::ValidateAccessRsp* Arena::CreateMaybeMessage< ::rbac::ValidateAccessRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::ValidateAccessRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::GetActionResourceInfosRqst* Arena::CreateMaybeMessage< ::rbac::GetActionResourceInfosRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::GetActionResourceInfosRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::ResourceInfos* Arena::CreateMaybeMessage< ::rbac::ResourceInfos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::ResourceInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::GetActionResourceInfosRsp* Arena::CreateMaybeMessage< ::rbac::GetActionResourceInfosRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::GetActionResourceInfosRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::ValidateActionRqst* Arena::CreateMaybeMessage< ::rbac::ValidateActionRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::ValidateActionRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::ValidateActionRsp* Arena::CreateMaybeMessage< ::rbac::ValidateActionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::ValidateActionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::SetActionResourcesPermissionsRqst* Arena::CreateMaybeMessage< ::rbac::SetActionResourcesPermissionsRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::SetActionResourcesPermissionsRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::SetActionResourcesPermissionsRsp* Arena::CreateMaybeMessage< ::rbac::SetActionResourcesPermissionsRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::SetActionResourcesPermissionsRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::Share* Arena::CreateMaybeMessage< ::rbac::Share >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::Share >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::ShareResourceRqst* Arena::CreateMaybeMessage< ::rbac::ShareResourceRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::ShareResourceRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::ShareResourceRsp* Arena::CreateMaybeMessage< ::rbac::ShareResourceRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::ShareResourceRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::UnshareResourceRqst* Arena::CreateMaybeMessage< ::rbac::UnshareResourceRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::UnshareResourceRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::UnshareResourceRsp* Arena::CreateMaybeMessage< ::rbac::UnshareResourceRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::UnshareResourceRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::GetSharedResourceRqst* Arena::CreateMaybeMessage< ::rbac::GetSharedResourceRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::GetSharedResourceRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::GetSharedResourceRsp* Arena::CreateMaybeMessage< ::rbac::GetSharedResourceRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::GetSharedResourceRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::RemoveSubjectFromShareRqst* Arena::CreateMaybeMessage< ::rbac::RemoveSubjectFromShareRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::RemoveSubjectFromShareRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::RemoveSubjectFromShareRsp* Arena::CreateMaybeMessage< ::rbac::RemoveSubjectFromShareRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::RemoveSubjectFromShareRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::DeleteSubjectShareRqst* Arena::CreateMaybeMessage< ::rbac::DeleteSubjectShareRqst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::DeleteSubjectShareRqst >(arena);
}
template<> PROTOBUF_NOINLINE ::rbac::DeleteSubjectShareRsp* Arena::CreateMaybeMessage< ::rbac::DeleteSubjectShareRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbac::DeleteSubjectShareRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
