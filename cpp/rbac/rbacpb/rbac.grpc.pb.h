// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rbac.proto
#ifndef GRPC_rbac_2eproto__INCLUDED
#define GRPC_rbac_2eproto__INCLUDED

#include "rbac.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace rbac {

// *
// The service to control action and resource access.
class RbacService final {
 public:
  static constexpr char const* service_full_name() {
    return "rbac.RbacService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // * Set resource permissions this method will replace existing permission at once *
    virtual ::grpc::Status SetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::rbac::SetResourcePermissionsRqst* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionsRqst>> AsyncSetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionsRqst>>(AsyncSetResourcePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionsRqst>> PrepareAsyncSetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionsRqst>>(PrepareAsyncSetResourcePermissionsRaw(context, request, cq));
    }
    // * Delete a resource permissions (when a resource is deleted) *
    virtual ::grpc::Status DeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::rbac::DeleteResourcePermissionsRqst* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionsRqst>> AsyncDeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionsRqst>>(AsyncDeleteResourcePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionsRqst>> PrepareAsyncDeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionsRqst>>(PrepareAsyncDeleteResourcePermissionsRaw(context, request, cq));
    }
    // * Delete a specific resource permission *
    virtual ::grpc::Status DeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::rbac::DeleteResourcePermissionRqst* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionRqst>> AsyncDeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionRqst>>(AsyncDeleteResourcePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionRqst>> PrepareAsyncDeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionRqst>>(PrepareAsyncDeleteResourcePermissionRaw(context, request, cq));
    }
    // * Get specific resource permission  ex. read permission... *
    virtual ::grpc::Status GetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::rbac::GetResourcePermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionRsp>> AsyncGetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionRsp>>(AsyncGetResourcePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionRsp>> PrepareAsyncGetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionRsp>>(PrepareAsyncGetResourcePermissionRaw(context, request, cq));
    }
    // * Set specific resource permission  ex. read permission... *
    virtual ::grpc::Status SetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::rbac::SetResourcePermissionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionRsp>> AsyncSetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionRsp>>(AsyncSetResourcePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionRsp>> PrepareAsyncSetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionRsp>>(PrepareAsyncSetResourcePermissionRaw(context, request, cq));
    }
    // * Get resource permissions *
    virtual ::grpc::Status GetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::rbac::GetResourcePermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionsRsp>> AsyncGetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionsRsp>>(AsyncGetResourcePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionsRsp>> PrepareAsyncGetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionsRsp>>(PrepareAsyncGetResourcePermissionsRaw(context, request, cq));
    }
    // * Add resource owner do nothing if it already exist 
    virtual ::grpc::Status AddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::rbac::AddResourceOwnerRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::AddResourceOwnerRsp>> AsyncAddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::AddResourceOwnerRsp>>(AsyncAddResourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::AddResourceOwnerRsp>> PrepareAsyncAddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::AddResourceOwnerRsp>>(PrepareAsyncAddResourceOwnerRaw(context, request, cq));
    }
    // * Remove resource owner 
    virtual ::grpc::Status RemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::rbac::RemoveResourceOwnerRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveResourceOwnerRsp>> AsyncRemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveResourceOwnerRsp>>(AsyncRemoveResourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveResourceOwnerRsp>> PrepareAsyncRemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveResourceOwnerRsp>>(PrepareAsyncRemoveResourceOwnerRaw(context, request, cq));
    }
    // * That function must be call when a subject is removed to clean up permissions. 
    virtual ::grpc::Status DeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::rbac::DeleteAllAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteAllAccessRsp>> AsyncDeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteAllAccessRsp>>(AsyncDeleteAllAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteAllAccessRsp>> PrepareAsyncDeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteAllAccessRsp>>(PrepareAsyncDeleteAllAccessRaw(context, request, cq));
    }
    // * Validate if a user can get access to a given Resource for a given operation (read, write...) 
    virtual ::grpc::Status ValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::rbac::ValidateAccessRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateAccessRsp>> AsyncValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateAccessRsp>>(AsyncValidateAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateAccessRsp>> PrepareAsyncValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateAccessRsp>>(PrepareAsyncValidateAccessRaw(context, request, cq));
    }
    // * Set Actions resource Permissions 
    virtual ::grpc::Status SetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::rbac::SetActionResourcesPermissionsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetActionResourcesPermissionsRsp>> AsyncSetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetActionResourcesPermissionsRsp>>(AsyncSetActionResourcesPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetActionResourcesPermissionsRsp>> PrepareAsyncSetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetActionResourcesPermissionsRsp>>(PrepareAsyncSetActionResourcesPermissionsRaw(context, request, cq));
    }
    // ///////////////////////// Rpc Action Valdisation ////////////////////////////////
    //
    // * Return the action resource informations. 
    virtual ::grpc::Status GetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::rbac::GetActionResourceInfosRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetActionResourceInfosRsp>> AsyncGetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetActionResourceInfosRsp>>(AsyncGetActionResourceInfosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetActionResourceInfosRsp>> PrepareAsyncGetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetActionResourceInfosRsp>>(PrepareAsyncGetActionResourceInfosRaw(context, request, cq));
    }
    // * Validate the actions 
    virtual ::grpc::Status ValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::rbac::ValidateActionRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateActionRsp>> AsyncValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateActionRsp>>(AsyncValidateActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateActionRsp>> PrepareAsyncValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateActionRsp>>(PrepareAsyncValidateActionRaw(context, request, cq));
    }
    // /////////////////////// Share ////////////////////////////
    //
    // That function will set a share or update existing share... ex. add/delete account, group
    virtual ::grpc::Status ShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::rbac::ShareResourceRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ShareResourceRsp>> AsyncShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ShareResourceRsp>>(AsyncShareResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ShareResourceRsp>> PrepareAsyncShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ShareResourceRsp>>(PrepareAsyncShareResourceRaw(context, request, cq));
    }
    // Remove the share
    virtual ::grpc::Status UshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::rbac::UnshareResourceRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::UnshareResourceRsp>> AsyncUshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::UnshareResourceRsp>>(AsyncUshareResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::UnshareResourceRsp>> PrepareAsyncUshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::UnshareResourceRsp>>(PrepareAsyncUshareResourceRaw(context, request, cq));
    }
    // Get the list of accessible shared resources.
    virtual ::grpc::Status GetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::rbac::GetSharedResourceRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetSharedResourceRsp>> AsyncGetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetSharedResourceRsp>>(AsyncGetSharedResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetSharedResourceRsp>> PrepareAsyncGetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetSharedResourceRsp>>(PrepareAsyncGetSharedResourceRaw(context, request, cq));
    }
    // Remove a subject from a share.
    virtual ::grpc::Status RemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::rbac::RemoveSubjectFromShareRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveSubjectFromShareRsp>> AsyncRemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveSubjectFromShareRsp>>(AsyncRemoveSubjectFromShareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveSubjectFromShareRsp>> PrepareAsyncRemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveSubjectFromShareRsp>>(PrepareAsyncRemoveSubjectFromShareRaw(context, request, cq));
    }
    // Delete the subject
    virtual ::grpc::Status DeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::rbac::DeleteSubjectShareRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteSubjectShareRsp>> AsyncDeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteSubjectShareRsp>>(AsyncDeleteSubjectShareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteSubjectShareRsp>> PrepareAsyncDeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteSubjectShareRsp>>(PrepareAsyncDeleteSubjectShareRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // * Set resource permissions this method will replace existing permission at once *
      virtual void SetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst* request, ::rbac::SetResourcePermissionsRqst* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst* request, ::rbac::SetResourcePermissionsRqst* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst* request, ::rbac::SetResourcePermissionsRqst* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete a resource permissions (when a resource is deleted) *
      virtual void DeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst* request, ::rbac::DeleteResourcePermissionsRqst* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst* request, ::rbac::DeleteResourcePermissionsRqst* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst* request, ::rbac::DeleteResourcePermissionsRqst* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Delete a specific resource permission *
      virtual void DeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst* request, ::rbac::DeleteResourcePermissionRqst* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst* request, ::rbac::DeleteResourcePermissionRqst* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst* request, ::rbac::DeleteResourcePermissionRqst* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get specific resource permission  ex. read permission... *
      virtual void GetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst* request, ::rbac::GetResourcePermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst* request, ::rbac::GetResourcePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst* request, ::rbac::GetResourcePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Set specific resource permission  ex. read permission... *
      virtual void SetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst* request, ::rbac::SetResourcePermissionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst* request, ::rbac::SetResourcePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst* request, ::rbac::SetResourcePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Get resource permissions *
      virtual void GetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst* request, ::rbac::GetResourcePermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst* request, ::rbac::GetResourcePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst* request, ::rbac::GetResourcePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Add resource owner do nothing if it already exist 
      virtual void AddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst* request, ::rbac::AddResourceOwnerRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst* request, ::rbac::AddResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst* request, ::rbac::AddResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Remove resource owner 
      virtual void RemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst* request, ::rbac::RemoveResourceOwnerRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst* request, ::rbac::RemoveResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst* request, ::rbac::RemoveResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * That function must be call when a subject is removed to clean up permissions. 
      virtual void DeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst* request, ::rbac::DeleteAllAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst* request, ::rbac::DeleteAllAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst* request, ::rbac::DeleteAllAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate if a user can get access to a given Resource for a given operation (read, write...) 
      virtual void ValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst* request, ::rbac::ValidateAccessRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst* request, ::rbac::ValidateAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst* request, ::rbac::ValidateAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Set Actions resource Permissions 
      virtual void SetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst* request, ::rbac::SetActionResourcesPermissionsRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst* request, ::rbac::SetActionResourcesPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst* request, ::rbac::SetActionResourcesPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // ///////////////////////// Rpc Action Valdisation ////////////////////////////////
      //
      // * Return the action resource informations. 
      virtual void GetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst* request, ::rbac::GetActionResourceInfosRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst* request, ::rbac::GetActionResourceInfosRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst* request, ::rbac::GetActionResourceInfosRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // * Validate the actions 
      virtual void ValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst* request, ::rbac::ValidateActionRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst* request, ::rbac::ValidateActionRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst* request, ::rbac::ValidateActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // /////////////////////// Share ////////////////////////////
      //
      // That function will set a share or update existing share... ex. add/delete account, group
      virtual void ShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst* request, ::rbac::ShareResourceRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst* request, ::rbac::ShareResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst* request, ::rbac::ShareResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Remove the share
      virtual void UshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst* request, ::rbac::UnshareResourceRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst* request, ::rbac::UnshareResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst* request, ::rbac::UnshareResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get the list of accessible shared resources.
      virtual void GetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst* request, ::rbac::GetSharedResourceRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst* request, ::rbac::GetSharedResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst* request, ::rbac::GetSharedResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Remove a subject from a share.
      virtual void RemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst* request, ::rbac::RemoveSubjectFromShareRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst* request, ::rbac::RemoveSubjectFromShareRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst* request, ::rbac::RemoveSubjectFromShareRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Delete the subject
      virtual void DeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst* request, ::rbac::DeleteSubjectShareRsp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst* request, ::rbac::DeleteSubjectShareRsp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst* request, ::rbac::DeleteSubjectShareRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionsRqst>* AsyncSetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionsRqst>* PrepareAsyncSetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionsRqst>* AsyncDeleteResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionsRqst>* PrepareAsyncDeleteResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionRqst>* AsyncDeleteResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteResourcePermissionRqst>* PrepareAsyncDeleteResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionRsp>* AsyncGetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionRsp>* PrepareAsyncGetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionRsp>* AsyncSetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetResourcePermissionRsp>* PrepareAsyncSetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionsRsp>* AsyncGetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetResourcePermissionsRsp>* PrepareAsyncGetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::AddResourceOwnerRsp>* AsyncAddResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::AddResourceOwnerRsp>* PrepareAsyncAddResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveResourceOwnerRsp>* AsyncRemoveResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveResourceOwnerRsp>* PrepareAsyncRemoveResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteAllAccessRsp>* AsyncDeleteAllAccessRaw(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteAllAccessRsp>* PrepareAsyncDeleteAllAccessRaw(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateAccessRsp>* AsyncValidateAccessRaw(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateAccessRsp>* PrepareAsyncValidateAccessRaw(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetActionResourcesPermissionsRsp>* AsyncSetActionResourcesPermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::SetActionResourcesPermissionsRsp>* PrepareAsyncSetActionResourcesPermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetActionResourceInfosRsp>* AsyncGetActionResourceInfosRaw(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetActionResourceInfosRsp>* PrepareAsyncGetActionResourceInfosRaw(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateActionRsp>* AsyncValidateActionRaw(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ValidateActionRsp>* PrepareAsyncValidateActionRaw(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ShareResourceRsp>* AsyncShareResourceRaw(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::ShareResourceRsp>* PrepareAsyncShareResourceRaw(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::UnshareResourceRsp>* AsyncUshareResourceRaw(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::UnshareResourceRsp>* PrepareAsyncUshareResourceRaw(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetSharedResourceRsp>* AsyncGetSharedResourceRaw(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::GetSharedResourceRsp>* PrepareAsyncGetSharedResourceRaw(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveSubjectFromShareRsp>* AsyncRemoveSubjectFromShareRaw(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::RemoveSubjectFromShareRsp>* PrepareAsyncRemoveSubjectFromShareRaw(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteSubjectShareRsp>* AsyncDeleteSubjectShareRaw(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rbac::DeleteSubjectShareRsp>* PrepareAsyncDeleteSubjectShareRaw(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::rbac::SetResourcePermissionsRqst* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionsRqst>> AsyncSetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionsRqst>>(AsyncSetResourcePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionsRqst>> PrepareAsyncSetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionsRqst>>(PrepareAsyncSetResourcePermissionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::rbac::DeleteResourcePermissionsRqst* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionsRqst>> AsyncDeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionsRqst>>(AsyncDeleteResourcePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionsRqst>> PrepareAsyncDeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionsRqst>>(PrepareAsyncDeleteResourcePermissionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::rbac::DeleteResourcePermissionRqst* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionRqst>> AsyncDeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionRqst>>(AsyncDeleteResourcePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionRqst>> PrepareAsyncDeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionRqst>>(PrepareAsyncDeleteResourcePermissionRaw(context, request, cq));
    }
    ::grpc::Status GetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::rbac::GetResourcePermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionRsp>> AsyncGetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionRsp>>(AsyncGetResourcePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionRsp>> PrepareAsyncGetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionRsp>>(PrepareAsyncGetResourcePermissionRaw(context, request, cq));
    }
    ::grpc::Status SetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::rbac::SetResourcePermissionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionRsp>> AsyncSetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionRsp>>(AsyncSetResourcePermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionRsp>> PrepareAsyncSetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionRsp>>(PrepareAsyncSetResourcePermissionRaw(context, request, cq));
    }
    ::grpc::Status GetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::rbac::GetResourcePermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionsRsp>> AsyncGetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionsRsp>>(AsyncGetResourcePermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionsRsp>> PrepareAsyncGetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionsRsp>>(PrepareAsyncGetResourcePermissionsRaw(context, request, cq));
    }
    ::grpc::Status AddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::rbac::AddResourceOwnerRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::AddResourceOwnerRsp>> AsyncAddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::AddResourceOwnerRsp>>(AsyncAddResourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::AddResourceOwnerRsp>> PrepareAsyncAddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::AddResourceOwnerRsp>>(PrepareAsyncAddResourceOwnerRaw(context, request, cq));
    }
    ::grpc::Status RemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::rbac::RemoveResourceOwnerRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::RemoveResourceOwnerRsp>> AsyncRemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::RemoveResourceOwnerRsp>>(AsyncRemoveResourceOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::RemoveResourceOwnerRsp>> PrepareAsyncRemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::RemoveResourceOwnerRsp>>(PrepareAsyncRemoveResourceOwnerRaw(context, request, cq));
    }
    ::grpc::Status DeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::rbac::DeleteAllAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteAllAccessRsp>> AsyncDeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteAllAccessRsp>>(AsyncDeleteAllAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteAllAccessRsp>> PrepareAsyncDeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteAllAccessRsp>>(PrepareAsyncDeleteAllAccessRaw(context, request, cq));
    }
    ::grpc::Status ValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::rbac::ValidateAccessRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ValidateAccessRsp>> AsyncValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ValidateAccessRsp>>(AsyncValidateAccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ValidateAccessRsp>> PrepareAsyncValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ValidateAccessRsp>>(PrepareAsyncValidateAccessRaw(context, request, cq));
    }
    ::grpc::Status SetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::rbac::SetActionResourcesPermissionsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetActionResourcesPermissionsRsp>> AsyncSetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetActionResourcesPermissionsRsp>>(AsyncSetActionResourcesPermissionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetActionResourcesPermissionsRsp>> PrepareAsyncSetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::SetActionResourcesPermissionsRsp>>(PrepareAsyncSetActionResourcesPermissionsRaw(context, request, cq));
    }
    ::grpc::Status GetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::rbac::GetActionResourceInfosRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetActionResourceInfosRsp>> AsyncGetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetActionResourceInfosRsp>>(AsyncGetActionResourceInfosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetActionResourceInfosRsp>> PrepareAsyncGetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetActionResourceInfosRsp>>(PrepareAsyncGetActionResourceInfosRaw(context, request, cq));
    }
    ::grpc::Status ValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::rbac::ValidateActionRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ValidateActionRsp>> AsyncValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ValidateActionRsp>>(AsyncValidateActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ValidateActionRsp>> PrepareAsyncValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ValidateActionRsp>>(PrepareAsyncValidateActionRaw(context, request, cq));
    }
    ::grpc::Status ShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::rbac::ShareResourceRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ShareResourceRsp>> AsyncShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ShareResourceRsp>>(AsyncShareResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ShareResourceRsp>> PrepareAsyncShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::ShareResourceRsp>>(PrepareAsyncShareResourceRaw(context, request, cq));
    }
    ::grpc::Status UshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::rbac::UnshareResourceRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::UnshareResourceRsp>> AsyncUshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::UnshareResourceRsp>>(AsyncUshareResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::UnshareResourceRsp>> PrepareAsyncUshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::UnshareResourceRsp>>(PrepareAsyncUshareResourceRaw(context, request, cq));
    }
    ::grpc::Status GetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::rbac::GetSharedResourceRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetSharedResourceRsp>> AsyncGetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetSharedResourceRsp>>(AsyncGetSharedResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetSharedResourceRsp>> PrepareAsyncGetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::GetSharedResourceRsp>>(PrepareAsyncGetSharedResourceRaw(context, request, cq));
    }
    ::grpc::Status RemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::rbac::RemoveSubjectFromShareRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::RemoveSubjectFromShareRsp>> AsyncRemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::RemoveSubjectFromShareRsp>>(AsyncRemoveSubjectFromShareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::RemoveSubjectFromShareRsp>> PrepareAsyncRemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::RemoveSubjectFromShareRsp>>(PrepareAsyncRemoveSubjectFromShareRaw(context, request, cq));
    }
    ::grpc::Status DeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::rbac::DeleteSubjectShareRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteSubjectShareRsp>> AsyncDeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteSubjectShareRsp>>(AsyncDeleteSubjectShareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteSubjectShareRsp>> PrepareAsyncDeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rbac::DeleteSubjectShareRsp>>(PrepareAsyncDeleteSubjectShareRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst* request, ::rbac::SetResourcePermissionsRqst* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst* request, ::rbac::SetResourcePermissionsRqst* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst* request, ::rbac::SetResourcePermissionsRqst* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst* request, ::rbac::DeleteResourcePermissionsRqst* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst* request, ::rbac::DeleteResourcePermissionsRqst* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst* request, ::rbac::DeleteResourcePermissionsRqst* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst* request, ::rbac::DeleteResourcePermissionRqst* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst* request, ::rbac::DeleteResourcePermissionRqst* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst* request, ::rbac::DeleteResourcePermissionRqst* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst* request, ::rbac::GetResourcePermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst* request, ::rbac::GetResourcePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst* request, ::rbac::GetResourcePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst* request, ::rbac::SetResourcePermissionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst* request, ::rbac::SetResourcePermissionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst* request, ::rbac::SetResourcePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst* request, ::rbac::GetResourcePermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst* request, ::rbac::GetResourcePermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst* request, ::rbac::GetResourcePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst* request, ::rbac::AddResourceOwnerRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst* request, ::rbac::AddResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst* request, ::rbac::AddResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst* request, ::rbac::RemoveResourceOwnerRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst* request, ::rbac::RemoveResourceOwnerRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst* request, ::rbac::RemoveResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst* request, ::rbac::DeleteAllAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst* request, ::rbac::DeleteAllAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst* request, ::rbac::DeleteAllAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst* request, ::rbac::ValidateAccessRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst* request, ::rbac::ValidateAccessRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst* request, ::rbac::ValidateAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst* request, ::rbac::SetActionResourcesPermissionsRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst* request, ::rbac::SetActionResourcesPermissionsRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst* request, ::rbac::SetActionResourcesPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst* request, ::rbac::GetActionResourceInfosRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst* request, ::rbac::GetActionResourceInfosRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst* request, ::rbac::GetActionResourceInfosRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst* request, ::rbac::ValidateActionRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst* request, ::rbac::ValidateActionRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst* request, ::rbac::ValidateActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst* request, ::rbac::ShareResourceRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst* request, ::rbac::ShareResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst* request, ::rbac::ShareResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst* request, ::rbac::UnshareResourceRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst* request, ::rbac::UnshareResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst* request, ::rbac::UnshareResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst* request, ::rbac::GetSharedResourceRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst* request, ::rbac::GetSharedResourceRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst* request, ::rbac::GetSharedResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst* request, ::rbac::RemoveSubjectFromShareRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst* request, ::rbac::RemoveSubjectFromShareRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst* request, ::rbac::RemoveSubjectFromShareRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst* request, ::rbac::DeleteSubjectShareRsp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst* request, ::rbac::DeleteSubjectShareRsp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst* request, ::rbac::DeleteSubjectShareRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionsRqst>* AsyncSetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionsRqst>* PrepareAsyncSetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionsRqst>* AsyncDeleteResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionsRqst>* PrepareAsyncDeleteResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionRqst>* AsyncDeleteResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionRqst>* PrepareAsyncDeleteResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionRsp>* AsyncGetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionRsp>* PrepareAsyncGetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionRsp>* AsyncSetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionRsp>* PrepareAsyncSetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionsRsp>* AsyncGetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionsRsp>* PrepareAsyncGetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::AddResourceOwnerRsp>* AsyncAddResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::AddResourceOwnerRsp>* PrepareAsyncAddResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::RemoveResourceOwnerRsp>* AsyncRemoveResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::RemoveResourceOwnerRsp>* PrepareAsyncRemoveResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::DeleteAllAccessRsp>* AsyncDeleteAllAccessRaw(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::DeleteAllAccessRsp>* PrepareAsyncDeleteAllAccessRaw(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::ValidateAccessRsp>* AsyncValidateAccessRaw(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::ValidateAccessRsp>* PrepareAsyncValidateAccessRaw(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::SetActionResourcesPermissionsRsp>* AsyncSetActionResourcesPermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::SetActionResourcesPermissionsRsp>* PrepareAsyncSetActionResourcesPermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::GetActionResourceInfosRsp>* AsyncGetActionResourceInfosRaw(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::GetActionResourceInfosRsp>* PrepareAsyncGetActionResourceInfosRaw(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::ValidateActionRsp>* AsyncValidateActionRaw(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::ValidateActionRsp>* PrepareAsyncValidateActionRaw(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::ShareResourceRsp>* AsyncShareResourceRaw(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::ShareResourceRsp>* PrepareAsyncShareResourceRaw(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::UnshareResourceRsp>* AsyncUshareResourceRaw(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::UnshareResourceRsp>* PrepareAsyncUshareResourceRaw(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::GetSharedResourceRsp>* AsyncGetSharedResourceRaw(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::GetSharedResourceRsp>* PrepareAsyncGetSharedResourceRaw(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::RemoveSubjectFromShareRsp>* AsyncRemoveSubjectFromShareRaw(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::RemoveSubjectFromShareRsp>* PrepareAsyncRemoveSubjectFromShareRaw(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::DeleteSubjectShareRsp>* AsyncDeleteSubjectShareRaw(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rbac::DeleteSubjectShareRsp>* PrepareAsyncDeleteSubjectShareRaw(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetResourcePermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteResourcePermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteResourcePermission_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResourcePermission_;
    const ::grpc::internal::RpcMethod rpcmethod_SetResourcePermission_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResourcePermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_AddResourceOwner_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveResourceOwner_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAllAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateAccess_;
    const ::grpc::internal::RpcMethod rpcmethod_SetActionResourcesPermissions_;
    const ::grpc::internal::RpcMethod rpcmethod_GetActionResourceInfos_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateAction_;
    const ::grpc::internal::RpcMethod rpcmethod_ShareResource_;
    const ::grpc::internal::RpcMethod rpcmethod_UshareResource_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSharedResource_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveSubjectFromShare_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSubjectShare_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // * Set resource permissions this method will replace existing permission at once *
    virtual ::grpc::Status SetResourcePermissions(::grpc::ServerContext* context, const ::rbac::SetResourcePermissionsRqst* request, ::rbac::SetResourcePermissionsRqst* response);
    // * Delete a resource permissions (when a resource is deleted) *
    virtual ::grpc::Status DeleteResourcePermissions(::grpc::ServerContext* context, const ::rbac::DeleteResourcePermissionsRqst* request, ::rbac::DeleteResourcePermissionsRqst* response);
    // * Delete a specific resource permission *
    virtual ::grpc::Status DeleteResourcePermission(::grpc::ServerContext* context, const ::rbac::DeleteResourcePermissionRqst* request, ::rbac::DeleteResourcePermissionRqst* response);
    // * Get specific resource permission  ex. read permission... *
    virtual ::grpc::Status GetResourcePermission(::grpc::ServerContext* context, const ::rbac::GetResourcePermissionRqst* request, ::rbac::GetResourcePermissionRsp* response);
    // * Set specific resource permission  ex. read permission... *
    virtual ::grpc::Status SetResourcePermission(::grpc::ServerContext* context, const ::rbac::SetResourcePermissionRqst* request, ::rbac::SetResourcePermissionRsp* response);
    // * Get resource permissions *
    virtual ::grpc::Status GetResourcePermissions(::grpc::ServerContext* context, const ::rbac::GetResourcePermissionsRqst* request, ::rbac::GetResourcePermissionsRsp* response);
    // * Add resource owner do nothing if it already exist 
    virtual ::grpc::Status AddResourceOwner(::grpc::ServerContext* context, const ::rbac::AddResourceOwnerRqst* request, ::rbac::AddResourceOwnerRsp* response);
    // * Remove resource owner 
    virtual ::grpc::Status RemoveResourceOwner(::grpc::ServerContext* context, const ::rbac::RemoveResourceOwnerRqst* request, ::rbac::RemoveResourceOwnerRsp* response);
    // * That function must be call when a subject is removed to clean up permissions. 
    virtual ::grpc::Status DeleteAllAccess(::grpc::ServerContext* context, const ::rbac::DeleteAllAccessRqst* request, ::rbac::DeleteAllAccessRsp* response);
    // * Validate if a user can get access to a given Resource for a given operation (read, write...) 
    virtual ::grpc::Status ValidateAccess(::grpc::ServerContext* context, const ::rbac::ValidateAccessRqst* request, ::rbac::ValidateAccessRsp* response);
    // * Set Actions resource Permissions 
    virtual ::grpc::Status SetActionResourcesPermissions(::grpc::ServerContext* context, const ::rbac::SetActionResourcesPermissionsRqst* request, ::rbac::SetActionResourcesPermissionsRsp* response);
    // ///////////////////////// Rpc Action Valdisation ////////////////////////////////
    //
    // * Return the action resource informations. 
    virtual ::grpc::Status GetActionResourceInfos(::grpc::ServerContext* context, const ::rbac::GetActionResourceInfosRqst* request, ::rbac::GetActionResourceInfosRsp* response);
    // * Validate the actions 
    virtual ::grpc::Status ValidateAction(::grpc::ServerContext* context, const ::rbac::ValidateActionRqst* request, ::rbac::ValidateActionRsp* response);
    // /////////////////////// Share ////////////////////////////
    //
    // That function will set a share or update existing share... ex. add/delete account, group
    virtual ::grpc::Status ShareResource(::grpc::ServerContext* context, const ::rbac::ShareResourceRqst* request, ::rbac::ShareResourceRsp* response);
    // Remove the share
    virtual ::grpc::Status UshareResource(::grpc::ServerContext* context, const ::rbac::UnshareResourceRqst* request, ::rbac::UnshareResourceRsp* response);
    // Get the list of accessible shared resources.
    virtual ::grpc::Status GetSharedResource(::grpc::ServerContext* context, const ::rbac::GetSharedResourceRqst* request, ::rbac::GetSharedResourceRsp* response);
    // Remove a subject from a share.
    virtual ::grpc::Status RemoveSubjectFromShare(::grpc::ServerContext* context, const ::rbac::RemoveSubjectFromShareRqst* request, ::rbac::RemoveSubjectFromShareRsp* response);
    // Delete the subject
    virtual ::grpc::Status DeleteSubjectShare(::grpc::ServerContext* context, const ::rbac::DeleteSubjectShareRqst* request, ::rbac::DeleteSubjectShareRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetResourcePermissions() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionsRqst* /*request*/, ::rbac::SetResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetResourcePermissions(::grpc::ServerContext* context, ::rbac::SetResourcePermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::SetResourcePermissionsRqst>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteResourcePermissions() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionsRqst* /*request*/, ::rbac::DeleteResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteResourcePermissions(::grpc::ServerContext* context, ::rbac::DeleteResourcePermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::DeleteResourcePermissionsRqst>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteResourcePermission() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionRqst* /*request*/, ::rbac::DeleteResourcePermissionRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteResourcePermission(::grpc::ServerContext* context, ::rbac::DeleteResourcePermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::DeleteResourcePermissionRqst>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResourcePermission() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionRqst* /*request*/, ::rbac::GetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourcePermission(::grpc::ServerContext* context, ::rbac::GetResourcePermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::GetResourcePermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetResourcePermission() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionRqst* /*request*/, ::rbac::SetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetResourcePermission(::grpc::ServerContext* context, ::rbac::SetResourcePermissionRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::SetResourcePermissionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResourcePermissions() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionsRqst* /*request*/, ::rbac::GetResourcePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourcePermissions(::grpc::ServerContext* context, ::rbac::GetResourcePermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::GetResourcePermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddResourceOwner() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_AddResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::AddResourceOwnerRqst* /*request*/, ::rbac::AddResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddResourceOwner(::grpc::ServerContext* context, ::rbac::AddResourceOwnerRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::AddResourceOwnerRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveResourceOwner() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RemoveResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::RemoveResourceOwnerRqst* /*request*/, ::rbac::RemoveResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveResourceOwner(::grpc::ServerContext* context, ::rbac::RemoveResourceOwnerRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::RemoveResourceOwnerRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAllAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAllAccess() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DeleteAllAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAllAccess(::grpc::ServerContext* /*context*/, const ::rbac::DeleteAllAccessRqst* /*request*/, ::rbac::DeleteAllAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAllAccess(::grpc::ServerContext* context, ::rbac::DeleteAllAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::DeleteAllAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateAccess() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ValidateAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateAccess(::grpc::ServerContext* /*context*/, const ::rbac::ValidateAccessRqst* /*request*/, ::rbac::ValidateAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateAccess(::grpc::ServerContext* context, ::rbac::ValidateAccessRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::ValidateAccessRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetActionResourcesPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetActionResourcesPermissions() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SetActionResourcesPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionResourcesPermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetActionResourcesPermissionsRqst* /*request*/, ::rbac::SetActionResourcesPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetActionResourcesPermissions(::grpc::ServerContext* context, ::rbac::SetActionResourcesPermissionsRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::SetActionResourcesPermissionsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetActionResourceInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetActionResourceInfos() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetActionResourceInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionResourceInfos(::grpc::ServerContext* /*context*/, const ::rbac::GetActionResourceInfosRqst* /*request*/, ::rbac::GetActionResourceInfosRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActionResourceInfos(::grpc::ServerContext* context, ::rbac::GetActionResourceInfosRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::GetActionResourceInfosRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateAction() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ValidateAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateAction(::grpc::ServerContext* /*context*/, const ::rbac::ValidateActionRqst* /*request*/, ::rbac::ValidateActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateAction(::grpc::ServerContext* context, ::rbac::ValidateActionRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::ValidateActionRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShareResource() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ShareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareResource(::grpc::ServerContext* /*context*/, const ::rbac::ShareResourceRqst* /*request*/, ::rbac::ShareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareResource(::grpc::ServerContext* context, ::rbac::ShareResourceRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::ShareResourceRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UshareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UshareResource() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_UshareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UshareResource(::grpc::ServerContext* /*context*/, const ::rbac::UnshareResourceRqst* /*request*/, ::rbac::UnshareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUshareResource(::grpc::ServerContext* context, ::rbac::UnshareResourceRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::UnshareResourceRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSharedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSharedResource() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetSharedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSharedResource(::grpc::ServerContext* /*context*/, const ::rbac::GetSharedResourceRqst* /*request*/, ::rbac::GetSharedResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSharedResource(::grpc::ServerContext* context, ::rbac::GetSharedResourceRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::GetSharedResourceRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveSubjectFromShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveSubjectFromShare() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_RemoveSubjectFromShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveSubjectFromShare(::grpc::ServerContext* /*context*/, const ::rbac::RemoveSubjectFromShareRqst* /*request*/, ::rbac::RemoveSubjectFromShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveSubjectFromShare(::grpc::ServerContext* context, ::rbac::RemoveSubjectFromShareRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::RemoveSubjectFromShareRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSubjectShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSubjectShare() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_DeleteSubjectShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubjectShare(::grpc::ServerContext* /*context*/, const ::rbac::DeleteSubjectShareRqst* /*request*/, ::rbac::DeleteSubjectShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSubjectShare(::grpc::ServerContext* context, ::rbac::DeleteSubjectShareRqst* request, ::grpc::ServerAsyncResponseWriter< ::rbac::DeleteSubjectShareRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetResourcePermissions<WithAsyncMethod_DeleteResourcePermissions<WithAsyncMethod_DeleteResourcePermission<WithAsyncMethod_GetResourcePermission<WithAsyncMethod_SetResourcePermission<WithAsyncMethod_GetResourcePermissions<WithAsyncMethod_AddResourceOwner<WithAsyncMethod_RemoveResourceOwner<WithAsyncMethod_DeleteAllAccess<WithAsyncMethod_ValidateAccess<WithAsyncMethod_SetActionResourcesPermissions<WithAsyncMethod_GetActionResourceInfos<WithAsyncMethod_ValidateAction<WithAsyncMethod_ShareResource<WithAsyncMethod_UshareResource<WithAsyncMethod_GetSharedResource<WithAsyncMethod_RemoveSubjectFromShare<WithAsyncMethod_DeleteSubjectShare<Service > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetResourcePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::SetResourcePermissionsRqst, ::rbac::SetResourcePermissionsRqst>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::SetResourcePermissionsRqst* request, ::rbac::SetResourcePermissionsRqst* response) { return this->SetResourcePermissions(context, request, response); }));}
    void SetMessageAllocatorFor_SetResourcePermissions(
        ::grpc::experimental::MessageAllocator< ::rbac::SetResourcePermissionsRqst, ::rbac::SetResourcePermissionsRqst>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::SetResourcePermissionsRqst, ::rbac::SetResourcePermissionsRqst>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionsRqst* /*request*/, ::rbac::SetResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetResourcePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::SetResourcePermissionsRqst* /*request*/, ::rbac::SetResourcePermissionsRqst* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetResourcePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::SetResourcePermissionsRqst* /*request*/, ::rbac::SetResourcePermissionsRqst* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteResourcePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::DeleteResourcePermissionsRqst, ::rbac::DeleteResourcePermissionsRqst>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::DeleteResourcePermissionsRqst* request, ::rbac::DeleteResourcePermissionsRqst* response) { return this->DeleteResourcePermissions(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteResourcePermissions(
        ::grpc::experimental::MessageAllocator< ::rbac::DeleteResourcePermissionsRqst, ::rbac::DeleteResourcePermissionsRqst>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::DeleteResourcePermissionsRqst, ::rbac::DeleteResourcePermissionsRqst>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionsRqst* /*request*/, ::rbac::DeleteResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteResourcePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::DeleteResourcePermissionsRqst* /*request*/, ::rbac::DeleteResourcePermissionsRqst* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteResourcePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::DeleteResourcePermissionsRqst* /*request*/, ::rbac::DeleteResourcePermissionsRqst* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteResourcePermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::DeleteResourcePermissionRqst, ::rbac::DeleteResourcePermissionRqst>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::DeleteResourcePermissionRqst* request, ::rbac::DeleteResourcePermissionRqst* response) { return this->DeleteResourcePermission(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteResourcePermission(
        ::grpc::experimental::MessageAllocator< ::rbac::DeleteResourcePermissionRqst, ::rbac::DeleteResourcePermissionRqst>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::DeleteResourcePermissionRqst, ::rbac::DeleteResourcePermissionRqst>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionRqst* /*request*/, ::rbac::DeleteResourcePermissionRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteResourcePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::DeleteResourcePermissionRqst* /*request*/, ::rbac::DeleteResourcePermissionRqst* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteResourcePermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::DeleteResourcePermissionRqst* /*request*/, ::rbac::DeleteResourcePermissionRqst* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetResourcePermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::GetResourcePermissionRqst, ::rbac::GetResourcePermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::GetResourcePermissionRqst* request, ::rbac::GetResourcePermissionRsp* response) { return this->GetResourcePermission(context, request, response); }));}
    void SetMessageAllocatorFor_GetResourcePermission(
        ::grpc::experimental::MessageAllocator< ::rbac::GetResourcePermissionRqst, ::rbac::GetResourcePermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::GetResourcePermissionRqst, ::rbac::GetResourcePermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionRqst* /*request*/, ::rbac::GetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetResourcePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::GetResourcePermissionRqst* /*request*/, ::rbac::GetResourcePermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetResourcePermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::GetResourcePermissionRqst* /*request*/, ::rbac::GetResourcePermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetResourcePermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::SetResourcePermissionRqst, ::rbac::SetResourcePermissionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::SetResourcePermissionRqst* request, ::rbac::SetResourcePermissionRsp* response) { return this->SetResourcePermission(context, request, response); }));}
    void SetMessageAllocatorFor_SetResourcePermission(
        ::grpc::experimental::MessageAllocator< ::rbac::SetResourcePermissionRqst, ::rbac::SetResourcePermissionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::SetResourcePermissionRqst, ::rbac::SetResourcePermissionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionRqst* /*request*/, ::rbac::SetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetResourcePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::SetResourcePermissionRqst* /*request*/, ::rbac::SetResourcePermissionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetResourcePermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::SetResourcePermissionRqst* /*request*/, ::rbac::SetResourcePermissionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetResourcePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::GetResourcePermissionsRqst, ::rbac::GetResourcePermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::GetResourcePermissionsRqst* request, ::rbac::GetResourcePermissionsRsp* response) { return this->GetResourcePermissions(context, request, response); }));}
    void SetMessageAllocatorFor_GetResourcePermissions(
        ::grpc::experimental::MessageAllocator< ::rbac::GetResourcePermissionsRqst, ::rbac::GetResourcePermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::GetResourcePermissionsRqst, ::rbac::GetResourcePermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionsRqst* /*request*/, ::rbac::GetResourcePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetResourcePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::GetResourcePermissionsRqst* /*request*/, ::rbac::GetResourcePermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetResourcePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::GetResourcePermissionsRqst* /*request*/, ::rbac::GetResourcePermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddResourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::AddResourceOwnerRqst, ::rbac::AddResourceOwnerRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::AddResourceOwnerRqst* request, ::rbac::AddResourceOwnerRsp* response) { return this->AddResourceOwner(context, request, response); }));}
    void SetMessageAllocatorFor_AddResourceOwner(
        ::grpc::experimental::MessageAllocator< ::rbac::AddResourceOwnerRqst, ::rbac::AddResourceOwnerRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::AddResourceOwnerRqst, ::rbac::AddResourceOwnerRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::AddResourceOwnerRqst* /*request*/, ::rbac::AddResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddResourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::AddResourceOwnerRqst* /*request*/, ::rbac::AddResourceOwnerRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddResourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::AddResourceOwnerRqst* /*request*/, ::rbac::AddResourceOwnerRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveResourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::RemoveResourceOwnerRqst, ::rbac::RemoveResourceOwnerRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::RemoveResourceOwnerRqst* request, ::rbac::RemoveResourceOwnerRsp* response) { return this->RemoveResourceOwner(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveResourceOwner(
        ::grpc::experimental::MessageAllocator< ::rbac::RemoveResourceOwnerRqst, ::rbac::RemoveResourceOwnerRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::RemoveResourceOwnerRqst, ::rbac::RemoveResourceOwnerRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::RemoveResourceOwnerRqst* /*request*/, ::rbac::RemoveResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveResourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::RemoveResourceOwnerRqst* /*request*/, ::rbac::RemoveResourceOwnerRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveResourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::RemoveResourceOwnerRqst* /*request*/, ::rbac::RemoveResourceOwnerRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteAllAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteAllAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::DeleteAllAccessRqst, ::rbac::DeleteAllAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::DeleteAllAccessRqst* request, ::rbac::DeleteAllAccessRsp* response) { return this->DeleteAllAccess(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAllAccess(
        ::grpc::experimental::MessageAllocator< ::rbac::DeleteAllAccessRqst, ::rbac::DeleteAllAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::DeleteAllAccessRqst, ::rbac::DeleteAllAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteAllAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAllAccess(::grpc::ServerContext* /*context*/, const ::rbac::DeleteAllAccessRqst* /*request*/, ::rbac::DeleteAllAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAllAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::DeleteAllAccessRqst* /*request*/, ::rbac::DeleteAllAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAllAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::DeleteAllAccessRqst* /*request*/, ::rbac::DeleteAllAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::ValidateAccessRqst, ::rbac::ValidateAccessRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::ValidateAccessRqst* request, ::rbac::ValidateAccessRsp* response) { return this->ValidateAccess(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateAccess(
        ::grpc::experimental::MessageAllocator< ::rbac::ValidateAccessRqst, ::rbac::ValidateAccessRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::ValidateAccessRqst, ::rbac::ValidateAccessRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateAccess(::grpc::ServerContext* /*context*/, const ::rbac::ValidateAccessRqst* /*request*/, ::rbac::ValidateAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::ValidateAccessRqst* /*request*/, ::rbac::ValidateAccessRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::ValidateAccessRqst* /*request*/, ::rbac::ValidateAccessRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetActionResourcesPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetActionResourcesPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::SetActionResourcesPermissionsRqst, ::rbac::SetActionResourcesPermissionsRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::SetActionResourcesPermissionsRqst* request, ::rbac::SetActionResourcesPermissionsRsp* response) { return this->SetActionResourcesPermissions(context, request, response); }));}
    void SetMessageAllocatorFor_SetActionResourcesPermissions(
        ::grpc::experimental::MessageAllocator< ::rbac::SetActionResourcesPermissionsRqst, ::rbac::SetActionResourcesPermissionsRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::SetActionResourcesPermissionsRqst, ::rbac::SetActionResourcesPermissionsRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetActionResourcesPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionResourcesPermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetActionResourcesPermissionsRqst* /*request*/, ::rbac::SetActionResourcesPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetActionResourcesPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::SetActionResourcesPermissionsRqst* /*request*/, ::rbac::SetActionResourcesPermissionsRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetActionResourcesPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::SetActionResourcesPermissionsRqst* /*request*/, ::rbac::SetActionResourcesPermissionsRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetActionResourceInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetActionResourceInfos() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::GetActionResourceInfosRqst, ::rbac::GetActionResourceInfosRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::GetActionResourceInfosRqst* request, ::rbac::GetActionResourceInfosRsp* response) { return this->GetActionResourceInfos(context, request, response); }));}
    void SetMessageAllocatorFor_GetActionResourceInfos(
        ::grpc::experimental::MessageAllocator< ::rbac::GetActionResourceInfosRqst, ::rbac::GetActionResourceInfosRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::GetActionResourceInfosRqst, ::rbac::GetActionResourceInfosRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetActionResourceInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionResourceInfos(::grpc::ServerContext* /*context*/, const ::rbac::GetActionResourceInfosRqst* /*request*/, ::rbac::GetActionResourceInfosRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetActionResourceInfos(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::GetActionResourceInfosRqst* /*request*/, ::rbac::GetActionResourceInfosRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetActionResourceInfos(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::GetActionResourceInfosRqst* /*request*/, ::rbac::GetActionResourceInfosRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ValidateAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ValidateAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::ValidateActionRqst, ::rbac::ValidateActionRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::ValidateActionRqst* request, ::rbac::ValidateActionRsp* response) { return this->ValidateAction(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateAction(
        ::grpc::experimental::MessageAllocator< ::rbac::ValidateActionRqst, ::rbac::ValidateActionRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::ValidateActionRqst, ::rbac::ValidateActionRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ValidateAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateAction(::grpc::ServerContext* /*context*/, const ::rbac::ValidateActionRqst* /*request*/, ::rbac::ValidateActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateAction(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::ValidateActionRqst* /*request*/, ::rbac::ValidateActionRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::ValidateActionRqst* /*request*/, ::rbac::ValidateActionRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ShareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ShareResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::ShareResourceRqst, ::rbac::ShareResourceRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::ShareResourceRqst* request, ::rbac::ShareResourceRsp* response) { return this->ShareResource(context, request, response); }));}
    void SetMessageAllocatorFor_ShareResource(
        ::grpc::experimental::MessageAllocator< ::rbac::ShareResourceRqst, ::rbac::ShareResourceRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::ShareResourceRqst, ::rbac::ShareResourceRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ShareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareResource(::grpc::ServerContext* /*context*/, const ::rbac::ShareResourceRqst* /*request*/, ::rbac::ShareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShareResource(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::ShareResourceRqst* /*request*/, ::rbac::ShareResourceRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShareResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::ShareResourceRqst* /*request*/, ::rbac::ShareResourceRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UshareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UshareResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::UnshareResourceRqst, ::rbac::UnshareResourceRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::UnshareResourceRqst* request, ::rbac::UnshareResourceRsp* response) { return this->UshareResource(context, request, response); }));}
    void SetMessageAllocatorFor_UshareResource(
        ::grpc::experimental::MessageAllocator< ::rbac::UnshareResourceRqst, ::rbac::UnshareResourceRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::UnshareResourceRqst, ::rbac::UnshareResourceRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UshareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UshareResource(::grpc::ServerContext* /*context*/, const ::rbac::UnshareResourceRqst* /*request*/, ::rbac::UnshareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UshareResource(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::UnshareResourceRqst* /*request*/, ::rbac::UnshareResourceRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UshareResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::UnshareResourceRqst* /*request*/, ::rbac::UnshareResourceRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSharedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSharedResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::GetSharedResourceRqst, ::rbac::GetSharedResourceRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::GetSharedResourceRqst* request, ::rbac::GetSharedResourceRsp* response) { return this->GetSharedResource(context, request, response); }));}
    void SetMessageAllocatorFor_GetSharedResource(
        ::grpc::experimental::MessageAllocator< ::rbac::GetSharedResourceRqst, ::rbac::GetSharedResourceRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::GetSharedResourceRqst, ::rbac::GetSharedResourceRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSharedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSharedResource(::grpc::ServerContext* /*context*/, const ::rbac::GetSharedResourceRqst* /*request*/, ::rbac::GetSharedResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSharedResource(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::GetSharedResourceRqst* /*request*/, ::rbac::GetSharedResourceRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSharedResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::GetSharedResourceRqst* /*request*/, ::rbac::GetSharedResourceRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveSubjectFromShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveSubjectFromShare() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::RemoveSubjectFromShareRqst, ::rbac::RemoveSubjectFromShareRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::RemoveSubjectFromShareRqst* request, ::rbac::RemoveSubjectFromShareRsp* response) { return this->RemoveSubjectFromShare(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveSubjectFromShare(
        ::grpc::experimental::MessageAllocator< ::rbac::RemoveSubjectFromShareRqst, ::rbac::RemoveSubjectFromShareRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(16);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::RemoveSubjectFromShareRqst, ::rbac::RemoveSubjectFromShareRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveSubjectFromShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveSubjectFromShare(::grpc::ServerContext* /*context*/, const ::rbac::RemoveSubjectFromShareRqst* /*request*/, ::rbac::RemoveSubjectFromShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveSubjectFromShare(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::RemoveSubjectFromShareRqst* /*request*/, ::rbac::RemoveSubjectFromShareRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveSubjectFromShare(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::RemoveSubjectFromShareRqst* /*request*/, ::rbac::RemoveSubjectFromShareRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteSubjectShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteSubjectShare() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::rbac::DeleteSubjectShareRqst, ::rbac::DeleteSubjectShareRsp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rbac::DeleteSubjectShareRqst* request, ::rbac::DeleteSubjectShareRsp* response) { return this->DeleteSubjectShare(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSubjectShare(
        ::grpc::experimental::MessageAllocator< ::rbac::DeleteSubjectShareRqst, ::rbac::DeleteSubjectShareRsp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(17);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rbac::DeleteSubjectShareRqst, ::rbac::DeleteSubjectShareRsp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteSubjectShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubjectShare(::grpc::ServerContext* /*context*/, const ::rbac::DeleteSubjectShareRqst* /*request*/, ::rbac::DeleteSubjectShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSubjectShare(
      ::grpc::CallbackServerContext* /*context*/, const ::rbac::DeleteSubjectShareRqst* /*request*/, ::rbac::DeleteSubjectShareRsp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSubjectShare(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rbac::DeleteSubjectShareRqst* /*request*/, ::rbac::DeleteSubjectShareRsp* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SetResourcePermissions<ExperimentalWithCallbackMethod_DeleteResourcePermissions<ExperimentalWithCallbackMethod_DeleteResourcePermission<ExperimentalWithCallbackMethod_GetResourcePermission<ExperimentalWithCallbackMethod_SetResourcePermission<ExperimentalWithCallbackMethod_GetResourcePermissions<ExperimentalWithCallbackMethod_AddResourceOwner<ExperimentalWithCallbackMethod_RemoveResourceOwner<ExperimentalWithCallbackMethod_DeleteAllAccess<ExperimentalWithCallbackMethod_ValidateAccess<ExperimentalWithCallbackMethod_SetActionResourcesPermissions<ExperimentalWithCallbackMethod_GetActionResourceInfos<ExperimentalWithCallbackMethod_ValidateAction<ExperimentalWithCallbackMethod_ShareResource<ExperimentalWithCallbackMethod_UshareResource<ExperimentalWithCallbackMethod_GetSharedResource<ExperimentalWithCallbackMethod_RemoveSubjectFromShare<ExperimentalWithCallbackMethod_DeleteSubjectShare<Service > > > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SetResourcePermissions<ExperimentalWithCallbackMethod_DeleteResourcePermissions<ExperimentalWithCallbackMethod_DeleteResourcePermission<ExperimentalWithCallbackMethod_GetResourcePermission<ExperimentalWithCallbackMethod_SetResourcePermission<ExperimentalWithCallbackMethod_GetResourcePermissions<ExperimentalWithCallbackMethod_AddResourceOwner<ExperimentalWithCallbackMethod_RemoveResourceOwner<ExperimentalWithCallbackMethod_DeleteAllAccess<ExperimentalWithCallbackMethod_ValidateAccess<ExperimentalWithCallbackMethod_SetActionResourcesPermissions<ExperimentalWithCallbackMethod_GetActionResourceInfos<ExperimentalWithCallbackMethod_ValidateAction<ExperimentalWithCallbackMethod_ShareResource<ExperimentalWithCallbackMethod_UshareResource<ExperimentalWithCallbackMethod_GetSharedResource<ExperimentalWithCallbackMethod_RemoveSubjectFromShare<ExperimentalWithCallbackMethod_DeleteSubjectShare<Service > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetResourcePermissions() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionsRqst* /*request*/, ::rbac::SetResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteResourcePermissions() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionsRqst* /*request*/, ::rbac::DeleteResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteResourcePermission() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionRqst* /*request*/, ::rbac::DeleteResourcePermissionRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResourcePermission() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionRqst* /*request*/, ::rbac::GetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetResourcePermission() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionRqst* /*request*/, ::rbac::SetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResourcePermissions() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionsRqst* /*request*/, ::rbac::GetResourcePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddResourceOwner() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_AddResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::AddResourceOwnerRqst* /*request*/, ::rbac::AddResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveResourceOwner() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RemoveResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::RemoveResourceOwnerRqst* /*request*/, ::rbac::RemoveResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAllAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAllAccess() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DeleteAllAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAllAccess(::grpc::ServerContext* /*context*/, const ::rbac::DeleteAllAccessRqst* /*request*/, ::rbac::DeleteAllAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateAccess() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ValidateAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateAccess(::grpc::ServerContext* /*context*/, const ::rbac::ValidateAccessRqst* /*request*/, ::rbac::ValidateAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetActionResourcesPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetActionResourcesPermissions() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SetActionResourcesPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionResourcesPermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetActionResourcesPermissionsRqst* /*request*/, ::rbac::SetActionResourcesPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetActionResourceInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetActionResourceInfos() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetActionResourceInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionResourceInfos(::grpc::ServerContext* /*context*/, const ::rbac::GetActionResourceInfosRqst* /*request*/, ::rbac::GetActionResourceInfosRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateAction() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ValidateAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateAction(::grpc::ServerContext* /*context*/, const ::rbac::ValidateActionRqst* /*request*/, ::rbac::ValidateActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShareResource() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ShareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareResource(::grpc::ServerContext* /*context*/, const ::rbac::ShareResourceRqst* /*request*/, ::rbac::ShareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UshareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UshareResource() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_UshareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UshareResource(::grpc::ServerContext* /*context*/, const ::rbac::UnshareResourceRqst* /*request*/, ::rbac::UnshareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSharedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSharedResource() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetSharedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSharedResource(::grpc::ServerContext* /*context*/, const ::rbac::GetSharedResourceRqst* /*request*/, ::rbac::GetSharedResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveSubjectFromShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveSubjectFromShare() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_RemoveSubjectFromShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveSubjectFromShare(::grpc::ServerContext* /*context*/, const ::rbac::RemoveSubjectFromShareRqst* /*request*/, ::rbac::RemoveSubjectFromShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSubjectShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSubjectShare() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_DeleteSubjectShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubjectShare(::grpc::ServerContext* /*context*/, const ::rbac::DeleteSubjectShareRqst* /*request*/, ::rbac::DeleteSubjectShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetResourcePermissions() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionsRqst* /*request*/, ::rbac::SetResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetResourcePermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteResourcePermissions() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionsRqst* /*request*/, ::rbac::DeleteResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteResourcePermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteResourcePermission() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionRqst* /*request*/, ::rbac::DeleteResourcePermissionRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteResourcePermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResourcePermission() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionRqst* /*request*/, ::rbac::GetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourcePermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetResourcePermission() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionRqst* /*request*/, ::rbac::SetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetResourcePermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResourcePermissions() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionsRqst* /*request*/, ::rbac::GetResourcePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResourcePermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddResourceOwner() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_AddResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::AddResourceOwnerRqst* /*request*/, ::rbac::AddResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddResourceOwner(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveResourceOwner() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_RemoveResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::RemoveResourceOwnerRqst* /*request*/, ::rbac::RemoveResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveResourceOwner(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAllAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAllAccess() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DeleteAllAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAllAccess(::grpc::ServerContext* /*context*/, const ::rbac::DeleteAllAccessRqst* /*request*/, ::rbac::DeleteAllAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAllAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateAccess() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ValidateAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateAccess(::grpc::ServerContext* /*context*/, const ::rbac::ValidateAccessRqst* /*request*/, ::rbac::ValidateAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateAccess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetActionResourcesPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetActionResourcesPermissions() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SetActionResourcesPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionResourcesPermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetActionResourcesPermissionsRqst* /*request*/, ::rbac::SetActionResourcesPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetActionResourcesPermissions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetActionResourceInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetActionResourceInfos() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetActionResourceInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionResourceInfos(::grpc::ServerContext* /*context*/, const ::rbac::GetActionResourceInfosRqst* /*request*/, ::rbac::GetActionResourceInfosRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetActionResourceInfos(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateAction() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ValidateAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateAction(::grpc::ServerContext* /*context*/, const ::rbac::ValidateActionRqst* /*request*/, ::rbac::ValidateActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShareResource() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ShareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareResource(::grpc::ServerContext* /*context*/, const ::rbac::ShareResourceRqst* /*request*/, ::rbac::ShareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UshareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UshareResource() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_UshareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UshareResource(::grpc::ServerContext* /*context*/, const ::rbac::UnshareResourceRqst* /*request*/, ::rbac::UnshareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUshareResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSharedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSharedResource() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetSharedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSharedResource(::grpc::ServerContext* /*context*/, const ::rbac::GetSharedResourceRqst* /*request*/, ::rbac::GetSharedResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSharedResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveSubjectFromShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveSubjectFromShare() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_RemoveSubjectFromShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveSubjectFromShare(::grpc::ServerContext* /*context*/, const ::rbac::RemoveSubjectFromShareRqst* /*request*/, ::rbac::RemoveSubjectFromShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveSubjectFromShare(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSubjectShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSubjectShare() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_DeleteSubjectShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubjectShare(::grpc::ServerContext* /*context*/, const ::rbac::DeleteSubjectShareRqst* /*request*/, ::rbac::DeleteSubjectShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSubjectShare(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetResourcePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetResourcePermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionsRqst* /*request*/, ::rbac::SetResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetResourcePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetResourcePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteResourcePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteResourcePermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionsRqst* /*request*/, ::rbac::DeleteResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteResourcePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteResourcePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteResourcePermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteResourcePermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionRqst* /*request*/, ::rbac::DeleteResourcePermissionRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteResourcePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteResourcePermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetResourcePermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetResourcePermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionRqst* /*request*/, ::rbac::GetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetResourcePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetResourcePermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetResourcePermission() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetResourcePermission(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionRqst* /*request*/, ::rbac::SetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetResourcePermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetResourcePermission(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetResourcePermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetResourcePermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionsRqst* /*request*/, ::rbac::GetResourcePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetResourcePermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetResourcePermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddResourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddResourceOwner(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::AddResourceOwnerRqst* /*request*/, ::rbac::AddResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddResourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddResourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveResourceOwner() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveResourceOwner(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::RemoveResourceOwnerRqst* /*request*/, ::rbac::RemoveResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveResourceOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveResourceOwner(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteAllAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteAllAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAllAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteAllAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAllAccess(::grpc::ServerContext* /*context*/, const ::rbac::DeleteAllAccessRqst* /*request*/, ::rbac::DeleteAllAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteAllAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteAllAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateAccess() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateAccess(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateAccess(::grpc::ServerContext* /*context*/, const ::rbac::ValidateAccessRqst* /*request*/, ::rbac::ValidateAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateAccess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateAccess(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetActionResourcesPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetActionResourcesPermissions() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetActionResourcesPermissions(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetActionResourcesPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetActionResourcesPermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetActionResourcesPermissionsRqst* /*request*/, ::rbac::SetActionResourcesPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetActionResourcesPermissions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetActionResourcesPermissions(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetActionResourceInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetActionResourceInfos() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetActionResourceInfos(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetActionResourceInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetActionResourceInfos(::grpc::ServerContext* /*context*/, const ::rbac::GetActionResourceInfosRqst* /*request*/, ::rbac::GetActionResourceInfosRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetActionResourceInfos(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetActionResourceInfos(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ValidateAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ValidateAction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateAction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ValidateAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateAction(::grpc::ServerContext* /*context*/, const ::rbac::ValidateActionRqst* /*request*/, ::rbac::ValidateActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ValidateAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ValidateAction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ShareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ShareResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShareResource(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ShareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareResource(::grpc::ServerContext* /*context*/, const ::rbac::ShareResourceRqst* /*request*/, ::rbac::ShareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ShareResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ShareResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UshareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UshareResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UshareResource(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UshareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UshareResource(::grpc::ServerContext* /*context*/, const ::rbac::UnshareResourceRqst* /*request*/, ::rbac::UnshareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UshareResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UshareResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSharedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSharedResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSharedResource(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSharedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSharedResource(::grpc::ServerContext* /*context*/, const ::rbac::GetSharedResourceRqst* /*request*/, ::rbac::GetSharedResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSharedResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSharedResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveSubjectFromShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveSubjectFromShare() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveSubjectFromShare(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveSubjectFromShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveSubjectFromShare(::grpc::ServerContext* /*context*/, const ::rbac::RemoveSubjectFromShareRqst* /*request*/, ::rbac::RemoveSubjectFromShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveSubjectFromShare(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveSubjectFromShare(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteSubjectShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteSubjectShare() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSubjectShare(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteSubjectShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubjectShare(::grpc::ServerContext* /*context*/, const ::rbac::DeleteSubjectShareRqst* /*request*/, ::rbac::DeleteSubjectShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSubjectShare(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSubjectShare(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetResourcePermissions() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::SetResourcePermissionsRqst, ::rbac::SetResourcePermissionsRqst>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::SetResourcePermissionsRqst, ::rbac::SetResourcePermissionsRqst>* streamer) {
                       return this->StreamedSetResourcePermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionsRqst* /*request*/, ::rbac::SetResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetResourcePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::SetResourcePermissionsRqst,::rbac::SetResourcePermissionsRqst>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteResourcePermissions() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::DeleteResourcePermissionsRqst, ::rbac::DeleteResourcePermissionsRqst>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::DeleteResourcePermissionsRqst, ::rbac::DeleteResourcePermissionsRqst>* streamer) {
                       return this->StreamedDeleteResourcePermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionsRqst* /*request*/, ::rbac::DeleteResourcePermissionsRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteResourcePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::DeleteResourcePermissionsRqst,::rbac::DeleteResourcePermissionsRqst>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteResourcePermission() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::DeleteResourcePermissionRqst, ::rbac::DeleteResourcePermissionRqst>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::DeleteResourcePermissionRqst, ::rbac::DeleteResourcePermissionRqst>* streamer) {
                       return this->StreamedDeleteResourcePermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::DeleteResourcePermissionRqst* /*request*/, ::rbac::DeleteResourcePermissionRqst* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteResourcePermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::DeleteResourcePermissionRqst,::rbac::DeleteResourcePermissionRqst>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetResourcePermission() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::GetResourcePermissionRqst, ::rbac::GetResourcePermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::GetResourcePermissionRqst, ::rbac::GetResourcePermissionRsp>* streamer) {
                       return this->StreamedGetResourcePermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionRqst* /*request*/, ::rbac::GetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResourcePermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::GetResourcePermissionRqst,::rbac::GetResourcePermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetResourcePermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetResourcePermission() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::SetResourcePermissionRqst, ::rbac::SetResourcePermissionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::SetResourcePermissionRqst, ::rbac::SetResourcePermissionRsp>* streamer) {
                       return this->StreamedSetResourcePermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetResourcePermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetResourcePermission(::grpc::ServerContext* /*context*/, const ::rbac::SetResourcePermissionRqst* /*request*/, ::rbac::SetResourcePermissionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetResourcePermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::SetResourcePermissionRqst,::rbac::SetResourcePermissionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResourcePermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetResourcePermissions() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::GetResourcePermissionsRqst, ::rbac::GetResourcePermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::GetResourcePermissionsRqst, ::rbac::GetResourcePermissionsRsp>* streamer) {
                       return this->StreamedGetResourcePermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetResourcePermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResourcePermissions(::grpc::ServerContext* /*context*/, const ::rbac::GetResourcePermissionsRqst* /*request*/, ::rbac::GetResourcePermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResourcePermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::GetResourcePermissionsRqst,::rbac::GetResourcePermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddResourceOwner() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::AddResourceOwnerRqst, ::rbac::AddResourceOwnerRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::AddResourceOwnerRqst, ::rbac::AddResourceOwnerRsp>* streamer) {
                       return this->StreamedAddResourceOwner(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::AddResourceOwnerRqst* /*request*/, ::rbac::AddResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddResourceOwner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::AddResourceOwnerRqst,::rbac::AddResourceOwnerRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveResourceOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveResourceOwner() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::RemoveResourceOwnerRqst, ::rbac::RemoveResourceOwnerRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::RemoveResourceOwnerRqst, ::rbac::RemoveResourceOwnerRsp>* streamer) {
                       return this->StreamedRemoveResourceOwner(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveResourceOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveResourceOwner(::grpc::ServerContext* /*context*/, const ::rbac::RemoveResourceOwnerRqst* /*request*/, ::rbac::RemoveResourceOwnerRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveResourceOwner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::RemoveResourceOwnerRqst,::rbac::RemoveResourceOwnerRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAllAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAllAccess() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::DeleteAllAccessRqst, ::rbac::DeleteAllAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::DeleteAllAccessRqst, ::rbac::DeleteAllAccessRsp>* streamer) {
                       return this->StreamedDeleteAllAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAllAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAllAccess(::grpc::ServerContext* /*context*/, const ::rbac::DeleteAllAccessRqst* /*request*/, ::rbac::DeleteAllAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAllAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::DeleteAllAccessRqst,::rbac::DeleteAllAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateAccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateAccess() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::ValidateAccessRqst, ::rbac::ValidateAccessRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::ValidateAccessRqst, ::rbac::ValidateAccessRsp>* streamer) {
                       return this->StreamedValidateAccess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateAccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateAccess(::grpc::ServerContext* /*context*/, const ::rbac::ValidateAccessRqst* /*request*/, ::rbac::ValidateAccessRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateAccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::ValidateAccessRqst,::rbac::ValidateAccessRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetActionResourcesPermissions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetActionResourcesPermissions() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::SetActionResourcesPermissionsRqst, ::rbac::SetActionResourcesPermissionsRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::SetActionResourcesPermissionsRqst, ::rbac::SetActionResourcesPermissionsRsp>* streamer) {
                       return this->StreamedSetActionResourcesPermissions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetActionResourcesPermissions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetActionResourcesPermissions(::grpc::ServerContext* /*context*/, const ::rbac::SetActionResourcesPermissionsRqst* /*request*/, ::rbac::SetActionResourcesPermissionsRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetActionResourcesPermissions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::SetActionResourcesPermissionsRqst,::rbac::SetActionResourcesPermissionsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetActionResourceInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetActionResourceInfos() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::GetActionResourceInfosRqst, ::rbac::GetActionResourceInfosRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::GetActionResourceInfosRqst, ::rbac::GetActionResourceInfosRsp>* streamer) {
                       return this->StreamedGetActionResourceInfos(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetActionResourceInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetActionResourceInfos(::grpc::ServerContext* /*context*/, const ::rbac::GetActionResourceInfosRqst* /*request*/, ::rbac::GetActionResourceInfosRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetActionResourceInfos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::GetActionResourceInfosRqst,::rbac::GetActionResourceInfosRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateAction() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::ValidateActionRqst, ::rbac::ValidateActionRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::ValidateActionRqst, ::rbac::ValidateActionRsp>* streamer) {
                       return this->StreamedValidateAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateAction(::grpc::ServerContext* /*context*/, const ::rbac::ValidateActionRqst* /*request*/, ::rbac::ValidateActionRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::ValidateActionRqst,::rbac::ValidateActionRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShareResource() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::ShareResourceRqst, ::rbac::ShareResourceRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::ShareResourceRqst, ::rbac::ShareResourceRsp>* streamer) {
                       return this->StreamedShareResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShareResource(::grpc::ServerContext* /*context*/, const ::rbac::ShareResourceRqst* /*request*/, ::rbac::ShareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShareResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::ShareResourceRqst,::rbac::ShareResourceRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UshareResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UshareResource() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::UnshareResourceRqst, ::rbac::UnshareResourceRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::UnshareResourceRqst, ::rbac::UnshareResourceRsp>* streamer) {
                       return this->StreamedUshareResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UshareResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UshareResource(::grpc::ServerContext* /*context*/, const ::rbac::UnshareResourceRqst* /*request*/, ::rbac::UnshareResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUshareResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::UnshareResourceRqst,::rbac::UnshareResourceRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSharedResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSharedResource() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::GetSharedResourceRqst, ::rbac::GetSharedResourceRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::GetSharedResourceRqst, ::rbac::GetSharedResourceRsp>* streamer) {
                       return this->StreamedGetSharedResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSharedResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSharedResource(::grpc::ServerContext* /*context*/, const ::rbac::GetSharedResourceRqst* /*request*/, ::rbac::GetSharedResourceRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSharedResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::GetSharedResourceRqst,::rbac::GetSharedResourceRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveSubjectFromShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveSubjectFromShare() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::RemoveSubjectFromShareRqst, ::rbac::RemoveSubjectFromShareRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::RemoveSubjectFromShareRqst, ::rbac::RemoveSubjectFromShareRsp>* streamer) {
                       return this->StreamedRemoveSubjectFromShare(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveSubjectFromShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveSubjectFromShare(::grpc::ServerContext* /*context*/, const ::rbac::RemoveSubjectFromShareRqst* /*request*/, ::rbac::RemoveSubjectFromShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveSubjectFromShare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::RemoveSubjectFromShareRqst,::rbac::RemoveSubjectFromShareRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSubjectShare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSubjectShare() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rbac::DeleteSubjectShareRqst, ::rbac::DeleteSubjectShareRsp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rbac::DeleteSubjectShareRqst, ::rbac::DeleteSubjectShareRsp>* streamer) {
                       return this->StreamedDeleteSubjectShare(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSubjectShare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSubjectShare(::grpc::ServerContext* /*context*/, const ::rbac::DeleteSubjectShareRqst* /*request*/, ::rbac::DeleteSubjectShareRsp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSubjectShare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rbac::DeleteSubjectShareRqst,::rbac::DeleteSubjectShareRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetResourcePermissions<WithStreamedUnaryMethod_DeleteResourcePermissions<WithStreamedUnaryMethod_DeleteResourcePermission<WithStreamedUnaryMethod_GetResourcePermission<WithStreamedUnaryMethod_SetResourcePermission<WithStreamedUnaryMethod_GetResourcePermissions<WithStreamedUnaryMethod_AddResourceOwner<WithStreamedUnaryMethod_RemoveResourceOwner<WithStreamedUnaryMethod_DeleteAllAccess<WithStreamedUnaryMethod_ValidateAccess<WithStreamedUnaryMethod_SetActionResourcesPermissions<WithStreamedUnaryMethod_GetActionResourceInfos<WithStreamedUnaryMethod_ValidateAction<WithStreamedUnaryMethod_ShareResource<WithStreamedUnaryMethod_UshareResource<WithStreamedUnaryMethod_GetSharedResource<WithStreamedUnaryMethod_RemoveSubjectFromShare<WithStreamedUnaryMethod_DeleteSubjectShare<Service > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetResourcePermissions<WithStreamedUnaryMethod_DeleteResourcePermissions<WithStreamedUnaryMethod_DeleteResourcePermission<WithStreamedUnaryMethod_GetResourcePermission<WithStreamedUnaryMethod_SetResourcePermission<WithStreamedUnaryMethod_GetResourcePermissions<WithStreamedUnaryMethod_AddResourceOwner<WithStreamedUnaryMethod_RemoveResourceOwner<WithStreamedUnaryMethod_DeleteAllAccess<WithStreamedUnaryMethod_ValidateAccess<WithStreamedUnaryMethod_SetActionResourcesPermissions<WithStreamedUnaryMethod_GetActionResourceInfos<WithStreamedUnaryMethod_ValidateAction<WithStreamedUnaryMethod_ShareResource<WithStreamedUnaryMethod_UshareResource<WithStreamedUnaryMethod_GetSharedResource<WithStreamedUnaryMethod_RemoveSubjectFromShare<WithStreamedUnaryMethod_DeleteSubjectShare<Service > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace rbac


#endif  // GRPC_rbac_2eproto__INCLUDED
