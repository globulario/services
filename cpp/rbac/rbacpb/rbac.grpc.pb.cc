// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rbac.proto

#include "rbac.pb.h"
#include "rbac.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rbac {

static const char* RbacService_method_names[] = {
  "/rbac.RbacService/SetResourcePermissions",
  "/rbac.RbacService/DeleteResourcePermissions",
  "/rbac.RbacService/DeleteResourcePermission",
  "/rbac.RbacService/GetResourcePermission",
  "/rbac.RbacService/SetResourcePermission",
  "/rbac.RbacService/GetResourcePermissions",
  "/rbac.RbacService/AddResourceOwner",
  "/rbac.RbacService/RemoveResourceOwner",
  "/rbac.RbacService/DeleteAllAccess",
  "/rbac.RbacService/ValidateAccess",
  "/rbac.RbacService/SetActionResourcesPermissions",
  "/rbac.RbacService/GetActionResourceInfos",
  "/rbac.RbacService/ValidateAction",
  "/rbac.RbacService/ShareResource",
  "/rbac.RbacService/UshareResource",
  "/rbac.RbacService/GetSharedResource",
  "/rbac.RbacService/RemoveSubjectFromShare",
  "/rbac.RbacService/DeleteSubjectShare",
};

std::unique_ptr< RbacService::Stub> RbacService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RbacService::Stub> stub(new RbacService::Stub(channel));
  return stub;
}

RbacService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetResourcePermissions_(RbacService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteResourcePermissions_(RbacService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteResourcePermission_(RbacService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetResourcePermission_(RbacService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetResourcePermission_(RbacService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetResourcePermissions_(RbacService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddResourceOwner_(RbacService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveResourceOwner_(RbacService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAllAccess_(RbacService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateAccess_(RbacService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetActionResourcesPermissions_(RbacService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActionResourceInfos_(RbacService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateAction_(RbacService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShareResource_(RbacService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UshareResource_(RbacService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSharedResource_(RbacService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveSubjectFromShare_(RbacService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSubjectShare_(RbacService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RbacService::Stub::SetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::rbac::SetResourcePermissionsRqst* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::SetResourcePermissionsRqst, ::rbac::SetResourcePermissionsRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetResourcePermissions_, context, request, response);
}

void RbacService::Stub::experimental_async::SetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst* request, ::rbac::SetResourcePermissionsRqst* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::SetResourcePermissionsRqst, ::rbac::SetResourcePermissionsRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetResourcePermissions_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::SetResourcePermissions(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst* request, ::rbac::SetResourcePermissionsRqst* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetResourcePermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionsRqst>* RbacService::Stub::PrepareAsyncSetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::SetResourcePermissionsRqst, ::rbac::SetResourcePermissionsRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetResourcePermissions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionsRqst>* RbacService::Stub::AsyncSetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetResourcePermissionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::DeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::rbac::DeleteResourcePermissionsRqst* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::DeleteResourcePermissionsRqst, ::rbac::DeleteResourcePermissionsRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteResourcePermissions_, context, request, response);
}

void RbacService::Stub::experimental_async::DeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst* request, ::rbac::DeleteResourcePermissionsRqst* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::DeleteResourcePermissionsRqst, ::rbac::DeleteResourcePermissionsRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteResourcePermissions_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::DeleteResourcePermissions(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst* request, ::rbac::DeleteResourcePermissionsRqst* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteResourcePermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionsRqst>* RbacService::Stub::PrepareAsyncDeleteResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::DeleteResourcePermissionsRqst, ::rbac::DeleteResourcePermissionsRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteResourcePermissions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionsRqst>* RbacService::Stub::AsyncDeleteResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteResourcePermissionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::DeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::rbac::DeleteResourcePermissionRqst* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::DeleteResourcePermissionRqst, ::rbac::DeleteResourcePermissionRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteResourcePermission_, context, request, response);
}

void RbacService::Stub::experimental_async::DeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst* request, ::rbac::DeleteResourcePermissionRqst* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::DeleteResourcePermissionRqst, ::rbac::DeleteResourcePermissionRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteResourcePermission_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::DeleteResourcePermission(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst* request, ::rbac::DeleteResourcePermissionRqst* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteResourcePermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionRqst>* RbacService::Stub::PrepareAsyncDeleteResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::DeleteResourcePermissionRqst, ::rbac::DeleteResourcePermissionRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteResourcePermission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::DeleteResourcePermissionRqst>* RbacService::Stub::AsyncDeleteResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::DeleteResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteResourcePermissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::GetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::rbac::GetResourcePermissionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::GetResourcePermissionRqst, ::rbac::GetResourcePermissionRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetResourcePermission_, context, request, response);
}

void RbacService::Stub::experimental_async::GetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst* request, ::rbac::GetResourcePermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::GetResourcePermissionRqst, ::rbac::GetResourcePermissionRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourcePermission_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::GetResourcePermission(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst* request, ::rbac::GetResourcePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourcePermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionRsp>* RbacService::Stub::PrepareAsyncGetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::GetResourcePermissionRsp, ::rbac::GetResourcePermissionRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetResourcePermission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionRsp>* RbacService::Stub::AsyncGetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetResourcePermissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::SetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::rbac::SetResourcePermissionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::SetResourcePermissionRqst, ::rbac::SetResourcePermissionRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetResourcePermission_, context, request, response);
}

void RbacService::Stub::experimental_async::SetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst* request, ::rbac::SetResourcePermissionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::SetResourcePermissionRqst, ::rbac::SetResourcePermissionRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetResourcePermission_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::SetResourcePermission(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst* request, ::rbac::SetResourcePermissionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetResourcePermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionRsp>* RbacService::Stub::PrepareAsyncSetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::SetResourcePermissionRsp, ::rbac::SetResourcePermissionRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetResourcePermission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::SetResourcePermissionRsp>* RbacService::Stub::AsyncSetResourcePermissionRaw(::grpc::ClientContext* context, const ::rbac::SetResourcePermissionRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetResourcePermissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::GetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::rbac::GetResourcePermissionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::GetResourcePermissionsRqst, ::rbac::GetResourcePermissionsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetResourcePermissions_, context, request, response);
}

void RbacService::Stub::experimental_async::GetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst* request, ::rbac::GetResourcePermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::GetResourcePermissionsRqst, ::rbac::GetResourcePermissionsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourcePermissions_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::GetResourcePermissions(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst* request, ::rbac::GetResourcePermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResourcePermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionsRsp>* RbacService::Stub::PrepareAsyncGetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::GetResourcePermissionsRsp, ::rbac::GetResourcePermissionsRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetResourcePermissions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::GetResourcePermissionsRsp>* RbacService::Stub::AsyncGetResourcePermissionsRaw(::grpc::ClientContext* context, const ::rbac::GetResourcePermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetResourcePermissionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::AddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::rbac::AddResourceOwnerRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::AddResourceOwnerRqst, ::rbac::AddResourceOwnerRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddResourceOwner_, context, request, response);
}

void RbacService::Stub::experimental_async::AddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst* request, ::rbac::AddResourceOwnerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::AddResourceOwnerRqst, ::rbac::AddResourceOwnerRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddResourceOwner_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::AddResourceOwner(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst* request, ::rbac::AddResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddResourceOwner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::AddResourceOwnerRsp>* RbacService::Stub::PrepareAsyncAddResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::AddResourceOwnerRsp, ::rbac::AddResourceOwnerRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddResourceOwner_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::AddResourceOwnerRsp>* RbacService::Stub::AsyncAddResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::AddResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddResourceOwnerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::RemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::rbac::RemoveResourceOwnerRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::RemoveResourceOwnerRqst, ::rbac::RemoveResourceOwnerRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveResourceOwner_, context, request, response);
}

void RbacService::Stub::experimental_async::RemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst* request, ::rbac::RemoveResourceOwnerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::RemoveResourceOwnerRqst, ::rbac::RemoveResourceOwnerRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveResourceOwner_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::RemoveResourceOwner(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst* request, ::rbac::RemoveResourceOwnerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveResourceOwner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::RemoveResourceOwnerRsp>* RbacService::Stub::PrepareAsyncRemoveResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::RemoveResourceOwnerRsp, ::rbac::RemoveResourceOwnerRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveResourceOwner_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::RemoveResourceOwnerRsp>* RbacService::Stub::AsyncRemoveResourceOwnerRaw(::grpc::ClientContext* context, const ::rbac::RemoveResourceOwnerRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveResourceOwnerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::DeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::rbac::DeleteAllAccessRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::DeleteAllAccessRqst, ::rbac::DeleteAllAccessRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAllAccess_, context, request, response);
}

void RbacService::Stub::experimental_async::DeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst* request, ::rbac::DeleteAllAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::DeleteAllAccessRqst, ::rbac::DeleteAllAccessRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAllAccess_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::DeleteAllAccess(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst* request, ::rbac::DeleteAllAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAllAccess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::DeleteAllAccessRsp>* RbacService::Stub::PrepareAsyncDeleteAllAccessRaw(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::DeleteAllAccessRsp, ::rbac::DeleteAllAccessRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAllAccess_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::DeleteAllAccessRsp>* RbacService::Stub::AsyncDeleteAllAccessRaw(::grpc::ClientContext* context, const ::rbac::DeleteAllAccessRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAllAccessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::ValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::rbac::ValidateAccessRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::ValidateAccessRqst, ::rbac::ValidateAccessRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateAccess_, context, request, response);
}

void RbacService::Stub::experimental_async::ValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst* request, ::rbac::ValidateAccessRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::ValidateAccessRqst, ::rbac::ValidateAccessRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateAccess_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::ValidateAccess(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst* request, ::rbac::ValidateAccessRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateAccess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::ValidateAccessRsp>* RbacService::Stub::PrepareAsyncValidateAccessRaw(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::ValidateAccessRsp, ::rbac::ValidateAccessRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateAccess_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::ValidateAccessRsp>* RbacService::Stub::AsyncValidateAccessRaw(::grpc::ClientContext* context, const ::rbac::ValidateAccessRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateAccessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::SetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::rbac::SetActionResourcesPermissionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::SetActionResourcesPermissionsRqst, ::rbac::SetActionResourcesPermissionsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetActionResourcesPermissions_, context, request, response);
}

void RbacService::Stub::experimental_async::SetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst* request, ::rbac::SetActionResourcesPermissionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::SetActionResourcesPermissionsRqst, ::rbac::SetActionResourcesPermissionsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetActionResourcesPermissions_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::SetActionResourcesPermissions(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst* request, ::rbac::SetActionResourcesPermissionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetActionResourcesPermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::SetActionResourcesPermissionsRsp>* RbacService::Stub::PrepareAsyncSetActionResourcesPermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::SetActionResourcesPermissionsRsp, ::rbac::SetActionResourcesPermissionsRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetActionResourcesPermissions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::SetActionResourcesPermissionsRsp>* RbacService::Stub::AsyncSetActionResourcesPermissionsRaw(::grpc::ClientContext* context, const ::rbac::SetActionResourcesPermissionsRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetActionResourcesPermissionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::GetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::rbac::GetActionResourceInfosRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::GetActionResourceInfosRqst, ::rbac::GetActionResourceInfosRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetActionResourceInfos_, context, request, response);
}

void RbacService::Stub::experimental_async::GetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst* request, ::rbac::GetActionResourceInfosRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::GetActionResourceInfosRqst, ::rbac::GetActionResourceInfosRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActionResourceInfos_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::GetActionResourceInfos(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst* request, ::rbac::GetActionResourceInfosRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActionResourceInfos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::GetActionResourceInfosRsp>* RbacService::Stub::PrepareAsyncGetActionResourceInfosRaw(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::GetActionResourceInfosRsp, ::rbac::GetActionResourceInfosRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetActionResourceInfos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::GetActionResourceInfosRsp>* RbacService::Stub::AsyncGetActionResourceInfosRaw(::grpc::ClientContext* context, const ::rbac::GetActionResourceInfosRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetActionResourceInfosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::ValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::rbac::ValidateActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::ValidateActionRqst, ::rbac::ValidateActionRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateAction_, context, request, response);
}

void RbacService::Stub::experimental_async::ValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst* request, ::rbac::ValidateActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::ValidateActionRqst, ::rbac::ValidateActionRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateAction_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::ValidateAction(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst* request, ::rbac::ValidateActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::ValidateActionRsp>* RbacService::Stub::PrepareAsyncValidateActionRaw(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::ValidateActionRsp, ::rbac::ValidateActionRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateAction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::ValidateActionRsp>* RbacService::Stub::AsyncValidateActionRaw(::grpc::ClientContext* context, const ::rbac::ValidateActionRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateActionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::ShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::rbac::ShareResourceRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::ShareResourceRqst, ::rbac::ShareResourceRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShareResource_, context, request, response);
}

void RbacService::Stub::experimental_async::ShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst* request, ::rbac::ShareResourceRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::ShareResourceRqst, ::rbac::ShareResourceRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareResource_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::ShareResource(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst* request, ::rbac::ShareResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareResource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::ShareResourceRsp>* RbacService::Stub::PrepareAsyncShareResourceRaw(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::ShareResourceRsp, ::rbac::ShareResourceRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShareResource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::ShareResourceRsp>* RbacService::Stub::AsyncShareResourceRaw(::grpc::ClientContext* context, const ::rbac::ShareResourceRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShareResourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::UshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::rbac::UnshareResourceRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::UnshareResourceRqst, ::rbac::UnshareResourceRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UshareResource_, context, request, response);
}

void RbacService::Stub::experimental_async::UshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst* request, ::rbac::UnshareResourceRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::UnshareResourceRqst, ::rbac::UnshareResourceRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UshareResource_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::UshareResource(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst* request, ::rbac::UnshareResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UshareResource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::UnshareResourceRsp>* RbacService::Stub::PrepareAsyncUshareResourceRaw(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::UnshareResourceRsp, ::rbac::UnshareResourceRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UshareResource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::UnshareResourceRsp>* RbacService::Stub::AsyncUshareResourceRaw(::grpc::ClientContext* context, const ::rbac::UnshareResourceRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUshareResourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::GetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::rbac::GetSharedResourceRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::GetSharedResourceRqst, ::rbac::GetSharedResourceRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSharedResource_, context, request, response);
}

void RbacService::Stub::experimental_async::GetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst* request, ::rbac::GetSharedResourceRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::GetSharedResourceRqst, ::rbac::GetSharedResourceRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSharedResource_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::GetSharedResource(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst* request, ::rbac::GetSharedResourceRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSharedResource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::GetSharedResourceRsp>* RbacService::Stub::PrepareAsyncGetSharedResourceRaw(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::GetSharedResourceRsp, ::rbac::GetSharedResourceRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSharedResource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::GetSharedResourceRsp>* RbacService::Stub::AsyncGetSharedResourceRaw(::grpc::ClientContext* context, const ::rbac::GetSharedResourceRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSharedResourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::RemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::rbac::RemoveSubjectFromShareRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::RemoveSubjectFromShareRqst, ::rbac::RemoveSubjectFromShareRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveSubjectFromShare_, context, request, response);
}

void RbacService::Stub::experimental_async::RemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst* request, ::rbac::RemoveSubjectFromShareRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::RemoveSubjectFromShareRqst, ::rbac::RemoveSubjectFromShareRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveSubjectFromShare_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::RemoveSubjectFromShare(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst* request, ::rbac::RemoveSubjectFromShareRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveSubjectFromShare_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::RemoveSubjectFromShareRsp>* RbacService::Stub::PrepareAsyncRemoveSubjectFromShareRaw(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::RemoveSubjectFromShareRsp, ::rbac::RemoveSubjectFromShareRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveSubjectFromShare_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::RemoveSubjectFromShareRsp>* RbacService::Stub::AsyncRemoveSubjectFromShareRaw(::grpc::ClientContext* context, const ::rbac::RemoveSubjectFromShareRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveSubjectFromShareRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RbacService::Stub::DeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::rbac::DeleteSubjectShareRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rbac::DeleteSubjectShareRqst, ::rbac::DeleteSubjectShareRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSubjectShare_, context, request, response);
}

void RbacService::Stub::experimental_async::DeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst* request, ::rbac::DeleteSubjectShareRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rbac::DeleteSubjectShareRqst, ::rbac::DeleteSubjectShareRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSubjectShare_, context, request, response, std::move(f));
}

void RbacService::Stub::experimental_async::DeleteSubjectShare(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst* request, ::rbac::DeleteSubjectShareRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSubjectShare_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rbac::DeleteSubjectShareRsp>* RbacService::Stub::PrepareAsyncDeleteSubjectShareRaw(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rbac::DeleteSubjectShareRsp, ::rbac::DeleteSubjectShareRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSubjectShare_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rbac::DeleteSubjectShareRsp>* RbacService::Stub::AsyncDeleteSubjectShareRaw(::grpc::ClientContext* context, const ::rbac::DeleteSubjectShareRqst& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSubjectShareRaw(context, request, cq);
  result->StartCall();
  return result;
}

RbacService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::SetResourcePermissionsRqst, ::rbac::SetResourcePermissionsRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::SetResourcePermissionsRqst* req,
             ::rbac::SetResourcePermissionsRqst* resp) {
               return service->SetResourcePermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::DeleteResourcePermissionsRqst, ::rbac::DeleteResourcePermissionsRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::DeleteResourcePermissionsRqst* req,
             ::rbac::DeleteResourcePermissionsRqst* resp) {
               return service->DeleteResourcePermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::DeleteResourcePermissionRqst, ::rbac::DeleteResourcePermissionRqst, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::DeleteResourcePermissionRqst* req,
             ::rbac::DeleteResourcePermissionRqst* resp) {
               return service->DeleteResourcePermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::GetResourcePermissionRqst, ::rbac::GetResourcePermissionRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::GetResourcePermissionRqst* req,
             ::rbac::GetResourcePermissionRsp* resp) {
               return service->GetResourcePermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::SetResourcePermissionRqst, ::rbac::SetResourcePermissionRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::SetResourcePermissionRqst* req,
             ::rbac::SetResourcePermissionRsp* resp) {
               return service->SetResourcePermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::GetResourcePermissionsRqst, ::rbac::GetResourcePermissionsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::GetResourcePermissionsRqst* req,
             ::rbac::GetResourcePermissionsRsp* resp) {
               return service->GetResourcePermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::AddResourceOwnerRqst, ::rbac::AddResourceOwnerRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::AddResourceOwnerRqst* req,
             ::rbac::AddResourceOwnerRsp* resp) {
               return service->AddResourceOwner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::RemoveResourceOwnerRqst, ::rbac::RemoveResourceOwnerRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::RemoveResourceOwnerRqst* req,
             ::rbac::RemoveResourceOwnerRsp* resp) {
               return service->RemoveResourceOwner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::DeleteAllAccessRqst, ::rbac::DeleteAllAccessRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::DeleteAllAccessRqst* req,
             ::rbac::DeleteAllAccessRsp* resp) {
               return service->DeleteAllAccess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::ValidateAccessRqst, ::rbac::ValidateAccessRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::ValidateAccessRqst* req,
             ::rbac::ValidateAccessRsp* resp) {
               return service->ValidateAccess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::SetActionResourcesPermissionsRqst, ::rbac::SetActionResourcesPermissionsRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::SetActionResourcesPermissionsRqst* req,
             ::rbac::SetActionResourcesPermissionsRsp* resp) {
               return service->SetActionResourcesPermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::GetActionResourceInfosRqst, ::rbac::GetActionResourceInfosRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::GetActionResourceInfosRqst* req,
             ::rbac::GetActionResourceInfosRsp* resp) {
               return service->GetActionResourceInfos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::ValidateActionRqst, ::rbac::ValidateActionRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::ValidateActionRqst* req,
             ::rbac::ValidateActionRsp* resp) {
               return service->ValidateAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::ShareResourceRqst, ::rbac::ShareResourceRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::ShareResourceRqst* req,
             ::rbac::ShareResourceRsp* resp) {
               return service->ShareResource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::UnshareResourceRqst, ::rbac::UnshareResourceRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::UnshareResourceRqst* req,
             ::rbac::UnshareResourceRsp* resp) {
               return service->UshareResource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::GetSharedResourceRqst, ::rbac::GetSharedResourceRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::GetSharedResourceRqst* req,
             ::rbac::GetSharedResourceRsp* resp) {
               return service->GetSharedResource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::RemoveSubjectFromShareRqst, ::rbac::RemoveSubjectFromShareRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::RemoveSubjectFromShareRqst* req,
             ::rbac::RemoveSubjectFromShareRsp* resp) {
               return service->RemoveSubjectFromShare(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RbacService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RbacService::Service, ::rbac::DeleteSubjectShareRqst, ::rbac::DeleteSubjectShareRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RbacService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rbac::DeleteSubjectShareRqst* req,
             ::rbac::DeleteSubjectShareRsp* resp) {
               return service->DeleteSubjectShare(ctx, req, resp);
             }, this)));
}

RbacService::Service::~Service() {
}

::grpc::Status RbacService::Service::SetResourcePermissions(::grpc::ServerContext* context, const ::rbac::SetResourcePermissionsRqst* request, ::rbac::SetResourcePermissionsRqst* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::DeleteResourcePermissions(::grpc::ServerContext* context, const ::rbac::DeleteResourcePermissionsRqst* request, ::rbac::DeleteResourcePermissionsRqst* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::DeleteResourcePermission(::grpc::ServerContext* context, const ::rbac::DeleteResourcePermissionRqst* request, ::rbac::DeleteResourcePermissionRqst* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::GetResourcePermission(::grpc::ServerContext* context, const ::rbac::GetResourcePermissionRqst* request, ::rbac::GetResourcePermissionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::SetResourcePermission(::grpc::ServerContext* context, const ::rbac::SetResourcePermissionRqst* request, ::rbac::SetResourcePermissionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::GetResourcePermissions(::grpc::ServerContext* context, const ::rbac::GetResourcePermissionsRqst* request, ::rbac::GetResourcePermissionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::AddResourceOwner(::grpc::ServerContext* context, const ::rbac::AddResourceOwnerRqst* request, ::rbac::AddResourceOwnerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::RemoveResourceOwner(::grpc::ServerContext* context, const ::rbac::RemoveResourceOwnerRqst* request, ::rbac::RemoveResourceOwnerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::DeleteAllAccess(::grpc::ServerContext* context, const ::rbac::DeleteAllAccessRqst* request, ::rbac::DeleteAllAccessRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::ValidateAccess(::grpc::ServerContext* context, const ::rbac::ValidateAccessRqst* request, ::rbac::ValidateAccessRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::SetActionResourcesPermissions(::grpc::ServerContext* context, const ::rbac::SetActionResourcesPermissionsRqst* request, ::rbac::SetActionResourcesPermissionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::GetActionResourceInfos(::grpc::ServerContext* context, const ::rbac::GetActionResourceInfosRqst* request, ::rbac::GetActionResourceInfosRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::ValidateAction(::grpc::ServerContext* context, const ::rbac::ValidateActionRqst* request, ::rbac::ValidateActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::ShareResource(::grpc::ServerContext* context, const ::rbac::ShareResourceRqst* request, ::rbac::ShareResourceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::UshareResource(::grpc::ServerContext* context, const ::rbac::UnshareResourceRqst* request, ::rbac::UnshareResourceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::GetSharedResource(::grpc::ServerContext* context, const ::rbac::GetSharedResourceRqst* request, ::rbac::GetSharedResourceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::RemoveSubjectFromShare(::grpc::ServerContext* context, const ::rbac::RemoveSubjectFromShareRqst* request, ::rbac::RemoveSubjectFromShareRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RbacService::Service::DeleteSubjectShare(::grpc::ServerContext* context, const ::rbac::DeleteSubjectShareRqst* request, ::rbac::DeleteSubjectShareRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rbac

