// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: config.proto

#include "config.pb.h"
#include "config.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace config {

static const char* ConfigService_method_names[] = {
  "/config.ConfigService/SetServiceConfiguration",
  "/config.ConfigService/GetServiceConfiguration",
  "/config.ConfigService/GetServiceConfigurationById",
  "/config.ConfigService/GetServicesConfigurationsByName",
  "/config.ConfigService/GetServicesConfigurations",
};

std::unique_ptr< ConfigService::Stub> ConfigService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConfigService::Stub> stub(new ConfigService::Stub(channel));
  return stub;
}

ConfigService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetServiceConfiguration_(ConfigService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServiceConfiguration_(ConfigService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServiceConfigurationById_(ConfigService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServicesConfigurationsByName_(ConfigService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServicesConfigurations_(ConfigService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConfigService::Stub::SetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::config::SetServiceConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::config::SetServiceConfigurationRequest, ::config::SetServiceConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetServiceConfiguration_, context, request, response);
}

void ConfigService::Stub::experimental_async::SetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest* request, ::config::SetServiceConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::config::SetServiceConfigurationRequest, ::config::SetServiceConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServiceConfiguration_, context, request, response, std::move(f));
}

void ConfigService::Stub::experimental_async::SetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest* request, ::config::SetServiceConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetServiceConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::config::SetServiceConfigurationResponse>* ConfigService::Stub::PrepareAsyncSetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::config::SetServiceConfigurationResponse, ::config::SetServiceConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetServiceConfiguration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::config::SetServiceConfigurationResponse>* ConfigService::Stub::AsyncSetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetServiceConfigurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::GetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::config::GetServiceConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::config::GetServiceConfigurationRequest, ::config::GetServiceConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServiceConfiguration_, context, request, response);
}

void ConfigService::Stub::experimental_async::GetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest* request, ::config::GetServiceConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::config::GetServiceConfigurationRequest, ::config::GetServiceConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceConfiguration_, context, request, response, std::move(f));
}

void ConfigService::Stub::experimental_async::GetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest* request, ::config::GetServiceConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationResponse>* ConfigService::Stub::PrepareAsyncGetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::config::GetServiceConfigurationResponse, ::config::GetServiceConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServiceConfiguration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationResponse>* ConfigService::Stub::AsyncGetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceConfigurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::GetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::config::GetServiceConfigurationByIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::config::GetServiceConfigurationByIdRequest, ::config::GetServiceConfigurationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServiceConfigurationById_, context, request, response);
}

void ConfigService::Stub::experimental_async::GetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest* request, ::config::GetServiceConfigurationByIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::config::GetServiceConfigurationByIdRequest, ::config::GetServiceConfigurationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceConfigurationById_, context, request, response, std::move(f));
}

void ConfigService::Stub::experimental_async::GetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest* request, ::config::GetServiceConfigurationByIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceConfigurationById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationByIdResponse>* ConfigService::Stub::PrepareAsyncGetServiceConfigurationByIdRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::config::GetServiceConfigurationByIdResponse, ::config::GetServiceConfigurationByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServiceConfigurationById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationByIdResponse>* ConfigService::Stub::AsyncGetServiceConfigurationByIdRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceConfigurationByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::GetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::config::GetServicesConfigurationsByNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::config::GetServicesConfigurationsByNameRequest, ::config::GetServicesConfigurationsByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServicesConfigurationsByName_, context, request, response);
}

void ConfigService::Stub::experimental_async::GetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest* request, ::config::GetServicesConfigurationsByNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::config::GetServicesConfigurationsByNameRequest, ::config::GetServicesConfigurationsByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServicesConfigurationsByName_, context, request, response, std::move(f));
}

void ConfigService::Stub::experimental_async::GetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest* request, ::config::GetServicesConfigurationsByNameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServicesConfigurationsByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsByNameResponse>* ConfigService::Stub::PrepareAsyncGetServicesConfigurationsByNameRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::config::GetServicesConfigurationsByNameResponse, ::config::GetServicesConfigurationsByNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServicesConfigurationsByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsByNameResponse>* ConfigService::Stub::AsyncGetServicesConfigurationsByNameRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServicesConfigurationsByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::GetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::config::GetServicesConfigurationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::config::GetServicesConfigurationsRequest, ::config::GetServicesConfigurationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServicesConfigurations_, context, request, response);
}

void ConfigService::Stub::experimental_async::GetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest* request, ::config::GetServicesConfigurationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::config::GetServicesConfigurationsRequest, ::config::GetServicesConfigurationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServicesConfigurations_, context, request, response, std::move(f));
}

void ConfigService::Stub::experimental_async::GetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest* request, ::config::GetServicesConfigurationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServicesConfigurations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsResponse>* ConfigService::Stub::PrepareAsyncGetServicesConfigurationsRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::config::GetServicesConfigurationsResponse, ::config::GetServicesConfigurationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServicesConfigurations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsResponse>* ConfigService::Stub::AsyncGetServicesConfigurationsRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServicesConfigurationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConfigService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::config::SetServiceConfigurationRequest, ::config::SetServiceConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::config::SetServiceConfigurationRequest* req,
             ::config::SetServiceConfigurationResponse* resp) {
               return service->SetServiceConfiguration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::config::GetServiceConfigurationRequest, ::config::GetServiceConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::config::GetServiceConfigurationRequest* req,
             ::config::GetServiceConfigurationResponse* resp) {
               return service->GetServiceConfiguration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::config::GetServiceConfigurationByIdRequest, ::config::GetServiceConfigurationByIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::config::GetServiceConfigurationByIdRequest* req,
             ::config::GetServiceConfigurationByIdResponse* resp) {
               return service->GetServiceConfigurationById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::config::GetServicesConfigurationsByNameRequest, ::config::GetServicesConfigurationsByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::config::GetServicesConfigurationsByNameRequest* req,
             ::config::GetServicesConfigurationsByNameResponse* resp) {
               return service->GetServicesConfigurationsByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::config::GetServicesConfigurationsRequest, ::config::GetServicesConfigurationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::config::GetServicesConfigurationsRequest* req,
             ::config::GetServicesConfigurationsResponse* resp) {
               return service->GetServicesConfigurations(ctx, req, resp);
             }, this)));
}

ConfigService::Service::~Service() {
}

::grpc::Status ConfigService::Service::SetServiceConfiguration(::grpc::ServerContext* context, const ::config::SetServiceConfigurationRequest* request, ::config::SetServiceConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::GetServiceConfiguration(::grpc::ServerContext* context, const ::config::GetServiceConfigurationRequest* request, ::config::GetServiceConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::GetServiceConfigurationById(::grpc::ServerContext* context, const ::config::GetServiceConfigurationByIdRequest* request, ::config::GetServiceConfigurationByIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::GetServicesConfigurationsByName(::grpc::ServerContext* context, const ::config::GetServicesConfigurationsByNameRequest* request, ::config::GetServicesConfigurationsByNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::GetServicesConfigurations(::grpc::ServerContext* context, const ::config::GetServicesConfigurationsRequest* request, ::config::GetServicesConfigurationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace config

