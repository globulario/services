// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
namespace config {
class GetServiceConfigurationByIdRequest;
struct GetServiceConfigurationByIdRequestDefaultTypeInternal;
extern GetServiceConfigurationByIdRequestDefaultTypeInternal _GetServiceConfigurationByIdRequest_default_instance_;
class GetServiceConfigurationByIdResponse;
struct GetServiceConfigurationByIdResponseDefaultTypeInternal;
extern GetServiceConfigurationByIdResponseDefaultTypeInternal _GetServiceConfigurationByIdResponse_default_instance_;
class GetServiceConfigurationRequest;
struct GetServiceConfigurationRequestDefaultTypeInternal;
extern GetServiceConfigurationRequestDefaultTypeInternal _GetServiceConfigurationRequest_default_instance_;
class GetServiceConfigurationResponse;
struct GetServiceConfigurationResponseDefaultTypeInternal;
extern GetServiceConfigurationResponseDefaultTypeInternal _GetServiceConfigurationResponse_default_instance_;
class GetServicesConfigurationsByNameRequest;
struct GetServicesConfigurationsByNameRequestDefaultTypeInternal;
extern GetServicesConfigurationsByNameRequestDefaultTypeInternal _GetServicesConfigurationsByNameRequest_default_instance_;
class GetServicesConfigurationsByNameResponse;
struct GetServicesConfigurationsByNameResponseDefaultTypeInternal;
extern GetServicesConfigurationsByNameResponseDefaultTypeInternal _GetServicesConfigurationsByNameResponse_default_instance_;
class GetServicesConfigurationsRequest;
struct GetServicesConfigurationsRequestDefaultTypeInternal;
extern GetServicesConfigurationsRequestDefaultTypeInternal _GetServicesConfigurationsRequest_default_instance_;
class GetServicesConfigurationsResponse;
struct GetServicesConfigurationsResponseDefaultTypeInternal;
extern GetServicesConfigurationsResponseDefaultTypeInternal _GetServicesConfigurationsResponse_default_instance_;
class SetServiceConfigurationRequest;
struct SetServiceConfigurationRequestDefaultTypeInternal;
extern SetServiceConfigurationRequestDefaultTypeInternal _SetServiceConfigurationRequest_default_instance_;
class SetServiceConfigurationResponse;
struct SetServiceConfigurationResponseDefaultTypeInternal;
extern SetServiceConfigurationResponseDefaultTypeInternal _SetServiceConfigurationResponse_default_instance_;
}  // namespace config
PROTOBUF_NAMESPACE_OPEN
template<> ::config::GetServiceConfigurationByIdRequest* Arena::CreateMaybeMessage<::config::GetServiceConfigurationByIdRequest>(Arena*);
template<> ::config::GetServiceConfigurationByIdResponse* Arena::CreateMaybeMessage<::config::GetServiceConfigurationByIdResponse>(Arena*);
template<> ::config::GetServiceConfigurationRequest* Arena::CreateMaybeMessage<::config::GetServiceConfigurationRequest>(Arena*);
template<> ::config::GetServiceConfigurationResponse* Arena::CreateMaybeMessage<::config::GetServiceConfigurationResponse>(Arena*);
template<> ::config::GetServicesConfigurationsByNameRequest* Arena::CreateMaybeMessage<::config::GetServicesConfigurationsByNameRequest>(Arena*);
template<> ::config::GetServicesConfigurationsByNameResponse* Arena::CreateMaybeMessage<::config::GetServicesConfigurationsByNameResponse>(Arena*);
template<> ::config::GetServicesConfigurationsRequest* Arena::CreateMaybeMessage<::config::GetServicesConfigurationsRequest>(Arena*);
template<> ::config::GetServicesConfigurationsResponse* Arena::CreateMaybeMessage<::config::GetServicesConfigurationsResponse>(Arena*);
template<> ::config::SetServiceConfigurationRequest* Arena::CreateMaybeMessage<::config::SetServiceConfigurationRequest>(Arena*);
template<> ::config::SetServiceConfigurationResponse* Arena::CreateMaybeMessage<::config::SetServiceConfigurationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace config {

// ===================================================================

class SetServiceConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.SetServiceConfigurationRequest) */ {
 public:
  inline SetServiceConfigurationRequest() : SetServiceConfigurationRequest(nullptr) {}
  ~SetServiceConfigurationRequest() override;
  explicit constexpr SetServiceConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetServiceConfigurationRequest(const SetServiceConfigurationRequest& from);
  SetServiceConfigurationRequest(SetServiceConfigurationRequest&& from) noexcept
    : SetServiceConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline SetServiceConfigurationRequest& operator=(const SetServiceConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetServiceConfigurationRequest& operator=(SetServiceConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetServiceConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetServiceConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const SetServiceConfigurationRequest*>(
               &_SetServiceConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetServiceConfigurationRequest& a, SetServiceConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetServiceConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetServiceConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetServiceConfigurationRequest* New() const final {
    return CreateMaybeMessage<SetServiceConfigurationRequest>(nullptr);
  }

  SetServiceConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetServiceConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetServiceConfigurationRequest& from);
  void MergeFrom(const SetServiceConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetServiceConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.SetServiceConfigurationRequest";
  }
  protected:
  explicit SetServiceConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // string config = 1;
  void clear_config();
  const std::string& config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config();
  std::string* release_config();
  void set_allocated_config(std::string* config);
  private:
  const std::string& _internal_config() const;
  void _internal_set_config(const std::string& value);
  std::string* _internal_mutable_config();
  public:

  // @@protoc_insertion_point(class_scope:config.SetServiceConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class SetServiceConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.SetServiceConfigurationResponse) */ {
 public:
  inline SetServiceConfigurationResponse() : SetServiceConfigurationResponse(nullptr) {}
  ~SetServiceConfigurationResponse() override;
  explicit constexpr SetServiceConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetServiceConfigurationResponse(const SetServiceConfigurationResponse& from);
  SetServiceConfigurationResponse(SetServiceConfigurationResponse&& from) noexcept
    : SetServiceConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline SetServiceConfigurationResponse& operator=(const SetServiceConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetServiceConfigurationResponse& operator=(SetServiceConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetServiceConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetServiceConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const SetServiceConfigurationResponse*>(
               &_SetServiceConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetServiceConfigurationResponse& a, SetServiceConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetServiceConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetServiceConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetServiceConfigurationResponse* New() const final {
    return CreateMaybeMessage<SetServiceConfigurationResponse>(nullptr);
  }

  SetServiceConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetServiceConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetServiceConfigurationResponse& from);
  void MergeFrom(const SetServiceConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetServiceConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.SetServiceConfigurationResponse";
  }
  protected:
  explicit SetServiceConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:config.SetServiceConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.GetServiceConfigurationRequest) */ {
 public:
  inline GetServiceConfigurationRequest() : GetServiceConfigurationRequest(nullptr) {}
  ~GetServiceConfigurationRequest() override;
  explicit constexpr GetServiceConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceConfigurationRequest(const GetServiceConfigurationRequest& from);
  GetServiceConfigurationRequest(GetServiceConfigurationRequest&& from) noexcept
    : GetServiceConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigurationRequest& operator=(const GetServiceConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigurationRequest& operator=(GetServiceConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigurationRequest*>(
               &_GetServiceConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetServiceConfigurationRequest& a, GetServiceConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigurationRequest* New() const final {
    return CreateMaybeMessage<GetServiceConfigurationRequest>(nullptr);
  }

  GetServiceConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigurationRequest& from);
  void MergeFrom(const GetServiceConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.GetServiceConfigurationRequest";
  }
  protected:
  explicit GetServiceConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:config.GetServiceConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.GetServiceConfigurationResponse) */ {
 public:
  inline GetServiceConfigurationResponse() : GetServiceConfigurationResponse(nullptr) {}
  ~GetServiceConfigurationResponse() override;
  explicit constexpr GetServiceConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceConfigurationResponse(const GetServiceConfigurationResponse& from);
  GetServiceConfigurationResponse(GetServiceConfigurationResponse&& from) noexcept
    : GetServiceConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigurationResponse& operator=(const GetServiceConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigurationResponse& operator=(GetServiceConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigurationResponse*>(
               &_GetServiceConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetServiceConfigurationResponse& a, GetServiceConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigurationResponse* New() const final {
    return CreateMaybeMessage<GetServiceConfigurationResponse>(nullptr);
  }

  GetServiceConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigurationResponse& from);
  void MergeFrom(const GetServiceConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.GetServiceConfigurationResponse";
  }
  protected:
  explicit GetServiceConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // string config = 1;
  void clear_config();
  const std::string& config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config();
  std::string* release_config();
  void set_allocated_config(std::string* config);
  private:
  const std::string& _internal_config() const;
  void _internal_set_config(const std::string& value);
  std::string* _internal_mutable_config();
  public:

  // @@protoc_insertion_point(class_scope:config.GetServiceConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigurationByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.GetServiceConfigurationByIdRequest) */ {
 public:
  inline GetServiceConfigurationByIdRequest() : GetServiceConfigurationByIdRequest(nullptr) {}
  ~GetServiceConfigurationByIdRequest() override;
  explicit constexpr GetServiceConfigurationByIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceConfigurationByIdRequest(const GetServiceConfigurationByIdRequest& from);
  GetServiceConfigurationByIdRequest(GetServiceConfigurationByIdRequest&& from) noexcept
    : GetServiceConfigurationByIdRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigurationByIdRequest& operator=(const GetServiceConfigurationByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigurationByIdRequest& operator=(GetServiceConfigurationByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceConfigurationByIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceConfigurationByIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigurationByIdRequest*>(
               &_GetServiceConfigurationByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetServiceConfigurationByIdRequest& a, GetServiceConfigurationByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigurationByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigurationByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigurationByIdRequest* New() const final {
    return CreateMaybeMessage<GetServiceConfigurationByIdRequest>(nullptr);
  }

  GetServiceConfigurationByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigurationByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigurationByIdRequest& from);
  void MergeFrom(const GetServiceConfigurationByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigurationByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.GetServiceConfigurationByIdRequest";
  }
  protected:
  explicit GetServiceConfigurationByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:config.GetServiceConfigurationByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class GetServiceConfigurationByIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.GetServiceConfigurationByIdResponse) */ {
 public:
  inline GetServiceConfigurationByIdResponse() : GetServiceConfigurationByIdResponse(nullptr) {}
  ~GetServiceConfigurationByIdResponse() override;
  explicit constexpr GetServiceConfigurationByIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceConfigurationByIdResponse(const GetServiceConfigurationByIdResponse& from);
  GetServiceConfigurationByIdResponse(GetServiceConfigurationByIdResponse&& from) noexcept
    : GetServiceConfigurationByIdResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceConfigurationByIdResponse& operator=(const GetServiceConfigurationByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceConfigurationByIdResponse& operator=(GetServiceConfigurationByIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceConfigurationByIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceConfigurationByIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceConfigurationByIdResponse*>(
               &_GetServiceConfigurationByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetServiceConfigurationByIdResponse& a, GetServiceConfigurationByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceConfigurationByIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceConfigurationByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceConfigurationByIdResponse* New() const final {
    return CreateMaybeMessage<GetServiceConfigurationByIdResponse>(nullptr);
  }

  GetServiceConfigurationByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceConfigurationByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceConfigurationByIdResponse& from);
  void MergeFrom(const GetServiceConfigurationByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceConfigurationByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.GetServiceConfigurationByIdResponse";
  }
  protected:
  explicit GetServiceConfigurationByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // string config = 1;
  void clear_config();
  const std::string& config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config();
  std::string* release_config();
  void set_allocated_config(std::string* config);
  private:
  const std::string& _internal_config() const;
  void _internal_set_config(const std::string& value);
  std::string* _internal_mutable_config();
  public:

  // @@protoc_insertion_point(class_scope:config.GetServiceConfigurationByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class GetServicesConfigurationsByNameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.GetServicesConfigurationsByNameRequest) */ {
 public:
  inline GetServicesConfigurationsByNameRequest() : GetServicesConfigurationsByNameRequest(nullptr) {}
  ~GetServicesConfigurationsByNameRequest() override;
  explicit constexpr GetServicesConfigurationsByNameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServicesConfigurationsByNameRequest(const GetServicesConfigurationsByNameRequest& from);
  GetServicesConfigurationsByNameRequest(GetServicesConfigurationsByNameRequest&& from) noexcept
    : GetServicesConfigurationsByNameRequest() {
    *this = ::std::move(from);
  }

  inline GetServicesConfigurationsByNameRequest& operator=(const GetServicesConfigurationsByNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServicesConfigurationsByNameRequest& operator=(GetServicesConfigurationsByNameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServicesConfigurationsByNameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServicesConfigurationsByNameRequest* internal_default_instance() {
    return reinterpret_cast<const GetServicesConfigurationsByNameRequest*>(
               &_GetServicesConfigurationsByNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetServicesConfigurationsByNameRequest& a, GetServicesConfigurationsByNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServicesConfigurationsByNameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServicesConfigurationsByNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServicesConfigurationsByNameRequest* New() const final {
    return CreateMaybeMessage<GetServicesConfigurationsByNameRequest>(nullptr);
  }

  GetServicesConfigurationsByNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServicesConfigurationsByNameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServicesConfigurationsByNameRequest& from);
  void MergeFrom(const GetServicesConfigurationsByNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServicesConfigurationsByNameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.GetServicesConfigurationsByNameRequest";
  }
  protected:
  explicit GetServicesConfigurationsByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:config.GetServicesConfigurationsByNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class GetServicesConfigurationsByNameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.GetServicesConfigurationsByNameResponse) */ {
 public:
  inline GetServicesConfigurationsByNameResponse() : GetServicesConfigurationsByNameResponse(nullptr) {}
  ~GetServicesConfigurationsByNameResponse() override;
  explicit constexpr GetServicesConfigurationsByNameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServicesConfigurationsByNameResponse(const GetServicesConfigurationsByNameResponse& from);
  GetServicesConfigurationsByNameResponse(GetServicesConfigurationsByNameResponse&& from) noexcept
    : GetServicesConfigurationsByNameResponse() {
    *this = ::std::move(from);
  }

  inline GetServicesConfigurationsByNameResponse& operator=(const GetServicesConfigurationsByNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServicesConfigurationsByNameResponse& operator=(GetServicesConfigurationsByNameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServicesConfigurationsByNameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServicesConfigurationsByNameResponse* internal_default_instance() {
    return reinterpret_cast<const GetServicesConfigurationsByNameResponse*>(
               &_GetServicesConfigurationsByNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetServicesConfigurationsByNameResponse& a, GetServicesConfigurationsByNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServicesConfigurationsByNameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServicesConfigurationsByNameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServicesConfigurationsByNameResponse* New() const final {
    return CreateMaybeMessage<GetServicesConfigurationsByNameResponse>(nullptr);
  }

  GetServicesConfigurationsByNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServicesConfigurationsByNameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServicesConfigurationsByNameResponse& from);
  void MergeFrom(const GetServicesConfigurationsByNameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServicesConfigurationsByNameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.GetServicesConfigurationsByNameResponse";
  }
  protected:
  explicit GetServicesConfigurationsByNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigsFieldNumber = 1,
  };
  // repeated string configs = 1;
  int configs_size() const;
  private:
  int _internal_configs_size() const;
  public:
  void clear_configs();
  const std::string& configs(int index) const;
  std::string* mutable_configs(int index);
  void set_configs(int index, const std::string& value);
  void set_configs(int index, std::string&& value);
  void set_configs(int index, const char* value);
  void set_configs(int index, const char* value, size_t size);
  std::string* add_configs();
  void add_configs(const std::string& value);
  void add_configs(std::string&& value);
  void add_configs(const char* value);
  void add_configs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& configs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_configs();
  private:
  const std::string& _internal_configs(int index) const;
  std::string* _internal_add_configs();
  public:

  // @@protoc_insertion_point(class_scope:config.GetServicesConfigurationsByNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class GetServicesConfigurationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.GetServicesConfigurationsRequest) */ {
 public:
  inline GetServicesConfigurationsRequest() : GetServicesConfigurationsRequest(nullptr) {}
  ~GetServicesConfigurationsRequest() override;
  explicit constexpr GetServicesConfigurationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServicesConfigurationsRequest(const GetServicesConfigurationsRequest& from);
  GetServicesConfigurationsRequest(GetServicesConfigurationsRequest&& from) noexcept
    : GetServicesConfigurationsRequest() {
    *this = ::std::move(from);
  }

  inline GetServicesConfigurationsRequest& operator=(const GetServicesConfigurationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServicesConfigurationsRequest& operator=(GetServicesConfigurationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServicesConfigurationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServicesConfigurationsRequest* internal_default_instance() {
    return reinterpret_cast<const GetServicesConfigurationsRequest*>(
               &_GetServicesConfigurationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetServicesConfigurationsRequest& a, GetServicesConfigurationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServicesConfigurationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServicesConfigurationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServicesConfigurationsRequest* New() const final {
    return CreateMaybeMessage<GetServicesConfigurationsRequest>(nullptr);
  }

  GetServicesConfigurationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServicesConfigurationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServicesConfigurationsRequest& from);
  void MergeFrom(const GetServicesConfigurationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServicesConfigurationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.GetServicesConfigurationsRequest";
  }
  protected:
  explicit GetServicesConfigurationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:config.GetServicesConfigurationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class GetServicesConfigurationsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.GetServicesConfigurationsResponse) */ {
 public:
  inline GetServicesConfigurationsResponse() : GetServicesConfigurationsResponse(nullptr) {}
  ~GetServicesConfigurationsResponse() override;
  explicit constexpr GetServicesConfigurationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServicesConfigurationsResponse(const GetServicesConfigurationsResponse& from);
  GetServicesConfigurationsResponse(GetServicesConfigurationsResponse&& from) noexcept
    : GetServicesConfigurationsResponse() {
    *this = ::std::move(from);
  }

  inline GetServicesConfigurationsResponse& operator=(const GetServicesConfigurationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServicesConfigurationsResponse& operator=(GetServicesConfigurationsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServicesConfigurationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServicesConfigurationsResponse* internal_default_instance() {
    return reinterpret_cast<const GetServicesConfigurationsResponse*>(
               &_GetServicesConfigurationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetServicesConfigurationsResponse& a, GetServicesConfigurationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServicesConfigurationsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServicesConfigurationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServicesConfigurationsResponse* New() const final {
    return CreateMaybeMessage<GetServicesConfigurationsResponse>(nullptr);
  }

  GetServicesConfigurationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServicesConfigurationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServicesConfigurationsResponse& from);
  void MergeFrom(const GetServicesConfigurationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServicesConfigurationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.GetServicesConfigurationsResponse";
  }
  protected:
  explicit GetServicesConfigurationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigsFieldNumber = 1,
  };
  // repeated string configs = 1;
  int configs_size() const;
  private:
  int _internal_configs_size() const;
  public:
  void clear_configs();
  const std::string& configs(int index) const;
  std::string* mutable_configs(int index);
  void set_configs(int index, const std::string& value);
  void set_configs(int index, std::string&& value);
  void set_configs(int index, const char* value);
  void set_configs(int index, const char* value, size_t size);
  std::string* add_configs();
  void add_configs(const std::string& value);
  void add_configs(std::string&& value);
  void add_configs(const char* value);
  void add_configs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& configs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_configs();
  private:
  const std::string& _internal_configs(int index) const;
  std::string* _internal_add_configs();
  public:

  // @@protoc_insertion_point(class_scope:config.GetServicesConfigurationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetServiceConfigurationRequest

// string config = 1;
inline void SetServiceConfigurationRequest::clear_config() {
  config_.ClearToEmpty();
}
inline const std::string& SetServiceConfigurationRequest::config() const {
  // @@protoc_insertion_point(field_get:config.SetServiceConfigurationRequest.config)
  return _internal_config();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void SetServiceConfigurationRequest::set_config(ArgT0&& arg0, ArgT... args) {
 
 config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:config.SetServiceConfigurationRequest.config)
}
inline std::string* SetServiceConfigurationRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:config.SetServiceConfigurationRequest.config)
  return _internal_mutable_config();
}
inline const std::string& SetServiceConfigurationRequest::_internal_config() const {
  return config_.Get();
}
inline void SetServiceConfigurationRequest::_internal_set_config(const std::string& value) {
  
  config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* SetServiceConfigurationRequest::_internal_mutable_config() {
  
  return config_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetServiceConfigurationRequest::release_config() {
  // @@protoc_insertion_point(field_release:config.SetServiceConfigurationRequest.config)
  return config_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetServiceConfigurationRequest::set_allocated_config(std::string* config) {
  if (config != nullptr) {
    
  } else {
    
  }
  config_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:config.SetServiceConfigurationRequest.config)
}

// -------------------------------------------------------------------

// SetServiceConfigurationResponse

// -------------------------------------------------------------------

// GetServiceConfigurationRequest

// string path = 1;
inline void GetServiceConfigurationRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& GetServiceConfigurationRequest::path() const {
  // @@protoc_insertion_point(field_get:config.GetServiceConfigurationRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void GetServiceConfigurationRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:config.GetServiceConfigurationRequest.path)
}
inline std::string* GetServiceConfigurationRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:config.GetServiceConfigurationRequest.path)
  return _internal_mutable_path();
}
inline const std::string& GetServiceConfigurationRequest::_internal_path() const {
  return path_.Get();
}
inline void GetServiceConfigurationRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* GetServiceConfigurationRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceConfigurationRequest::release_path() {
  // @@protoc_insertion_point(field_release:config.GetServiceConfigurationRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceConfigurationRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:config.GetServiceConfigurationRequest.path)
}

// -------------------------------------------------------------------

// GetServiceConfigurationResponse

// string config = 1;
inline void GetServiceConfigurationResponse::clear_config() {
  config_.ClearToEmpty();
}
inline const std::string& GetServiceConfigurationResponse::config() const {
  // @@protoc_insertion_point(field_get:config.GetServiceConfigurationResponse.config)
  return _internal_config();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void GetServiceConfigurationResponse::set_config(ArgT0&& arg0, ArgT... args) {
 
 config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:config.GetServiceConfigurationResponse.config)
}
inline std::string* GetServiceConfigurationResponse::mutable_config() {
  // @@protoc_insertion_point(field_mutable:config.GetServiceConfigurationResponse.config)
  return _internal_mutable_config();
}
inline const std::string& GetServiceConfigurationResponse::_internal_config() const {
  return config_.Get();
}
inline void GetServiceConfigurationResponse::_internal_set_config(const std::string& value) {
  
  config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* GetServiceConfigurationResponse::_internal_mutable_config() {
  
  return config_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceConfigurationResponse::release_config() {
  // @@protoc_insertion_point(field_release:config.GetServiceConfigurationResponse.config)
  return config_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceConfigurationResponse::set_allocated_config(std::string* config) {
  if (config != nullptr) {
    
  } else {
    
  }
  config_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:config.GetServiceConfigurationResponse.config)
}

// -------------------------------------------------------------------

// GetServiceConfigurationByIdRequest

// string id = 1;
inline void GetServiceConfigurationByIdRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetServiceConfigurationByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:config.GetServiceConfigurationByIdRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void GetServiceConfigurationByIdRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:config.GetServiceConfigurationByIdRequest.id)
}
inline std::string* GetServiceConfigurationByIdRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:config.GetServiceConfigurationByIdRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetServiceConfigurationByIdRequest::_internal_id() const {
  return id_.Get();
}
inline void GetServiceConfigurationByIdRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* GetServiceConfigurationByIdRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceConfigurationByIdRequest::release_id() {
  // @@protoc_insertion_point(field_release:config.GetServiceConfigurationByIdRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceConfigurationByIdRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:config.GetServiceConfigurationByIdRequest.id)
}

// -------------------------------------------------------------------

// GetServiceConfigurationByIdResponse

// string config = 1;
inline void GetServiceConfigurationByIdResponse::clear_config() {
  config_.ClearToEmpty();
}
inline const std::string& GetServiceConfigurationByIdResponse::config() const {
  // @@protoc_insertion_point(field_get:config.GetServiceConfigurationByIdResponse.config)
  return _internal_config();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void GetServiceConfigurationByIdResponse::set_config(ArgT0&& arg0, ArgT... args) {
 
 config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:config.GetServiceConfigurationByIdResponse.config)
}
inline std::string* GetServiceConfigurationByIdResponse::mutable_config() {
  // @@protoc_insertion_point(field_mutable:config.GetServiceConfigurationByIdResponse.config)
  return _internal_mutable_config();
}
inline const std::string& GetServiceConfigurationByIdResponse::_internal_config() const {
  return config_.Get();
}
inline void GetServiceConfigurationByIdResponse::_internal_set_config(const std::string& value) {
  
  config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* GetServiceConfigurationByIdResponse::_internal_mutable_config() {
  
  return config_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServiceConfigurationByIdResponse::release_config() {
  // @@protoc_insertion_point(field_release:config.GetServiceConfigurationByIdResponse.config)
  return config_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServiceConfigurationByIdResponse::set_allocated_config(std::string* config) {
  if (config != nullptr) {
    
  } else {
    
  }
  config_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:config.GetServiceConfigurationByIdResponse.config)
}

// -------------------------------------------------------------------

// GetServicesConfigurationsByNameRequest

// string name = 1;
inline void GetServicesConfigurationsByNameRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetServicesConfigurationsByNameRequest::name() const {
  // @@protoc_insertion_point(field_get:config.GetServicesConfigurationsByNameRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void GetServicesConfigurationsByNameRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:config.GetServicesConfigurationsByNameRequest.name)
}
inline std::string* GetServicesConfigurationsByNameRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:config.GetServicesConfigurationsByNameRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetServicesConfigurationsByNameRequest::_internal_name() const {
  return name_.Get();
}
inline void GetServicesConfigurationsByNameRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* GetServicesConfigurationsByNameRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetServicesConfigurationsByNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:config.GetServicesConfigurationsByNameRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetServicesConfigurationsByNameRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:config.GetServicesConfigurationsByNameRequest.name)
}

// -------------------------------------------------------------------

// GetServicesConfigurationsByNameResponse

// repeated string configs = 1;
inline int GetServicesConfigurationsByNameResponse::_internal_configs_size() const {
  return configs_.size();
}
inline int GetServicesConfigurationsByNameResponse::configs_size() const {
  return _internal_configs_size();
}
inline void GetServicesConfigurationsByNameResponse::clear_configs() {
  configs_.Clear();
}
inline std::string* GetServicesConfigurationsByNameResponse::add_configs() {
  // @@protoc_insertion_point(field_add_mutable:config.GetServicesConfigurationsByNameResponse.configs)
  return _internal_add_configs();
}
inline const std::string& GetServicesConfigurationsByNameResponse::_internal_configs(int index) const {
  return configs_.Get(index);
}
inline const std::string& GetServicesConfigurationsByNameResponse::configs(int index) const {
  // @@protoc_insertion_point(field_get:config.GetServicesConfigurationsByNameResponse.configs)
  return _internal_configs(index);
}
inline std::string* GetServicesConfigurationsByNameResponse::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:config.GetServicesConfigurationsByNameResponse.configs)
  return configs_.Mutable(index);
}
inline void GetServicesConfigurationsByNameResponse::set_configs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:config.GetServicesConfigurationsByNameResponse.configs)
  configs_.Mutable(index)->assign(value);
}
inline void GetServicesConfigurationsByNameResponse::set_configs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:config.GetServicesConfigurationsByNameResponse.configs)
  configs_.Mutable(index)->assign(std::move(value));
}
inline void GetServicesConfigurationsByNameResponse::set_configs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  configs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:config.GetServicesConfigurationsByNameResponse.configs)
}
inline void GetServicesConfigurationsByNameResponse::set_configs(int index, const char* value, size_t size) {
  configs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:config.GetServicesConfigurationsByNameResponse.configs)
}
inline std::string* GetServicesConfigurationsByNameResponse::_internal_add_configs() {
  return configs_.Add();
}
inline void GetServicesConfigurationsByNameResponse::add_configs(const std::string& value) {
  configs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:config.GetServicesConfigurationsByNameResponse.configs)
}
inline void GetServicesConfigurationsByNameResponse::add_configs(std::string&& value) {
  configs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:config.GetServicesConfigurationsByNameResponse.configs)
}
inline void GetServicesConfigurationsByNameResponse::add_configs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  configs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:config.GetServicesConfigurationsByNameResponse.configs)
}
inline void GetServicesConfigurationsByNameResponse::add_configs(const char* value, size_t size) {
  configs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:config.GetServicesConfigurationsByNameResponse.configs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetServicesConfigurationsByNameResponse::configs() const {
  // @@protoc_insertion_point(field_list:config.GetServicesConfigurationsByNameResponse.configs)
  return configs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetServicesConfigurationsByNameResponse::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:config.GetServicesConfigurationsByNameResponse.configs)
  return &configs_;
}

// -------------------------------------------------------------------

// GetServicesConfigurationsRequest

// -------------------------------------------------------------------

// GetServicesConfigurationsResponse

// repeated string configs = 1;
inline int GetServicesConfigurationsResponse::_internal_configs_size() const {
  return configs_.size();
}
inline int GetServicesConfigurationsResponse::configs_size() const {
  return _internal_configs_size();
}
inline void GetServicesConfigurationsResponse::clear_configs() {
  configs_.Clear();
}
inline std::string* GetServicesConfigurationsResponse::add_configs() {
  // @@protoc_insertion_point(field_add_mutable:config.GetServicesConfigurationsResponse.configs)
  return _internal_add_configs();
}
inline const std::string& GetServicesConfigurationsResponse::_internal_configs(int index) const {
  return configs_.Get(index);
}
inline const std::string& GetServicesConfigurationsResponse::configs(int index) const {
  // @@protoc_insertion_point(field_get:config.GetServicesConfigurationsResponse.configs)
  return _internal_configs(index);
}
inline std::string* GetServicesConfigurationsResponse::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:config.GetServicesConfigurationsResponse.configs)
  return configs_.Mutable(index);
}
inline void GetServicesConfigurationsResponse::set_configs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:config.GetServicesConfigurationsResponse.configs)
  configs_.Mutable(index)->assign(value);
}
inline void GetServicesConfigurationsResponse::set_configs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:config.GetServicesConfigurationsResponse.configs)
  configs_.Mutable(index)->assign(std::move(value));
}
inline void GetServicesConfigurationsResponse::set_configs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  configs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:config.GetServicesConfigurationsResponse.configs)
}
inline void GetServicesConfigurationsResponse::set_configs(int index, const char* value, size_t size) {
  configs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:config.GetServicesConfigurationsResponse.configs)
}
inline std::string* GetServicesConfigurationsResponse::_internal_add_configs() {
  return configs_.Add();
}
inline void GetServicesConfigurationsResponse::add_configs(const std::string& value) {
  configs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:config.GetServicesConfigurationsResponse.configs)
}
inline void GetServicesConfigurationsResponse::add_configs(std::string&& value) {
  configs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:config.GetServicesConfigurationsResponse.configs)
}
inline void GetServicesConfigurationsResponse::add_configs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  configs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:config.GetServicesConfigurationsResponse.configs)
}
inline void GetServicesConfigurationsResponse::add_configs(const char* value, size_t size) {
  configs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:config.GetServicesConfigurationsResponse.configs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetServicesConfigurationsResponse::configs() const {
  // @@protoc_insertion_point(field_list:config.GetServicesConfigurationsResponse.configs)
  return configs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetServicesConfigurationsResponse::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:config.GetServicesConfigurationsResponse.configs)
  return &configs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
