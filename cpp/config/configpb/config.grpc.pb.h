// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: config.proto
// Original file comments:
// *
// The configuatioon service.
//
#ifndef GRPC_config_2eproto__INCLUDED
#define GRPC_config_2eproto__INCLUDED

#include "config.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace config {

// The configuration service
class ConfigService final {
 public:
  static constexpr char const* service_full_name() {
    return "config.ConfigService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Set a service configuration.
    virtual ::grpc::Status SetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::config::SetServiceConfigurationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::SetServiceConfigurationResponse>> AsyncSetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::SetServiceConfigurationResponse>>(AsyncSetServiceConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::SetServiceConfigurationResponse>> PrepareAsyncSetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::SetServiceConfigurationResponse>>(PrepareAsyncSetServiceConfigurationRaw(context, request, cq));
    }
    // Get the configuration at a given path on the server.
    virtual ::grpc::Status GetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::config::GetServiceConfigurationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationResponse>> AsyncGetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationResponse>>(AsyncGetServiceConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationResponse>> PrepareAsyncGetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationResponse>>(PrepareAsyncGetServiceConfigurationRaw(context, request, cq));
    }
    // Get service configuration with a given id.
    virtual ::grpc::Status GetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::config::GetServiceConfigurationByIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationByIdResponse>> AsyncGetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationByIdResponse>>(AsyncGetServiceConfigurationByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationByIdResponse>> PrepareAsyncGetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationByIdResponse>>(PrepareAsyncGetServiceConfigurationByIdRaw(context, request, cq));
    }
    // Get list of service configuration with a given name
    virtual ::grpc::Status GetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::config::GetServicesConfigurationsByNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsByNameResponse>> AsyncGetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsByNameResponse>>(AsyncGetServicesConfigurationsByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsByNameResponse>> PrepareAsyncGetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsByNameResponse>>(PrepareAsyncGetServicesConfigurationsByNameRaw(context, request, cq));
    }
    // Get the list of all services configurations
    virtual ::grpc::Status GetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::config::GetServicesConfigurationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsResponse>> AsyncGetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsResponse>>(AsyncGetServicesConfigurationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsResponse>> PrepareAsyncGetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsResponse>>(PrepareAsyncGetServicesConfigurationsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Set a service configuration.
      virtual void SetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest* request, ::config::SetServiceConfigurationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest* request, ::config::SetServiceConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest* request, ::config::SetServiceConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get the configuration at a given path on the server.
      virtual void GetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest* request, ::config::GetServiceConfigurationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest* request, ::config::GetServiceConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest* request, ::config::GetServiceConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get service configuration with a given id.
      virtual void GetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest* request, ::config::GetServiceConfigurationByIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest* request, ::config::GetServiceConfigurationByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest* request, ::config::GetServiceConfigurationByIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get list of service configuration with a given name
      virtual void GetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest* request, ::config::GetServicesConfigurationsByNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest* request, ::config::GetServicesConfigurationsByNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest* request, ::config::GetServicesConfigurationsByNameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get the list of all services configurations
      virtual void GetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest* request, ::config::GetServicesConfigurationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest* request, ::config::GetServicesConfigurationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest* request, ::config::GetServicesConfigurationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::SetServiceConfigurationResponse>* AsyncSetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::SetServiceConfigurationResponse>* PrepareAsyncSetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationResponse>* AsyncGetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationResponse>* PrepareAsyncGetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationByIdResponse>* AsyncGetServiceConfigurationByIdRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServiceConfigurationByIdResponse>* PrepareAsyncGetServiceConfigurationByIdRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsByNameResponse>* AsyncGetServicesConfigurationsByNameRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsByNameResponse>* PrepareAsyncGetServicesConfigurationsByNameRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsResponse>* AsyncGetServicesConfigurationsRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesConfigurationsResponse>* PrepareAsyncGetServicesConfigurationsRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::config::SetServiceConfigurationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::SetServiceConfigurationResponse>> AsyncSetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::SetServiceConfigurationResponse>>(AsyncSetServiceConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::SetServiceConfigurationResponse>> PrepareAsyncSetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::SetServiceConfigurationResponse>>(PrepareAsyncSetServiceConfigurationRaw(context, request, cq));
    }
    ::grpc::Status GetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::config::GetServiceConfigurationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationResponse>> AsyncGetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationResponse>>(AsyncGetServiceConfigurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationResponse>> PrepareAsyncGetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationResponse>>(PrepareAsyncGetServiceConfigurationRaw(context, request, cq));
    }
    ::grpc::Status GetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::config::GetServiceConfigurationByIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationByIdResponse>> AsyncGetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationByIdResponse>>(AsyncGetServiceConfigurationByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationByIdResponse>> PrepareAsyncGetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationByIdResponse>>(PrepareAsyncGetServiceConfigurationByIdRaw(context, request, cq));
    }
    ::grpc::Status GetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::config::GetServicesConfigurationsByNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsByNameResponse>> AsyncGetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsByNameResponse>>(AsyncGetServicesConfigurationsByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsByNameResponse>> PrepareAsyncGetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsByNameResponse>>(PrepareAsyncGetServicesConfigurationsByNameRaw(context, request, cq));
    }
    ::grpc::Status GetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::config::GetServicesConfigurationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsResponse>> AsyncGetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsResponse>>(AsyncGetServicesConfigurationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsResponse>> PrepareAsyncGetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsResponse>>(PrepareAsyncGetServicesConfigurationsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest* request, ::config::SetServiceConfigurationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest* request, ::config::SetServiceConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetServiceConfiguration(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest* request, ::config::SetServiceConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest* request, ::config::GetServiceConfigurationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest* request, ::config::GetServiceConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServiceConfiguration(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest* request, ::config::GetServiceConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest* request, ::config::GetServiceConfigurationByIdResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest* request, ::config::GetServiceConfigurationByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServiceConfigurationById(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest* request, ::config::GetServiceConfigurationByIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest* request, ::config::GetServicesConfigurationsByNameResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest* request, ::config::GetServicesConfigurationsByNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServicesConfigurationsByName(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest* request, ::config::GetServicesConfigurationsByNameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest* request, ::config::GetServicesConfigurationsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest* request, ::config::GetServicesConfigurationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServicesConfigurations(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest* request, ::config::GetServicesConfigurationsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::config::SetServiceConfigurationResponse>* AsyncSetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::SetServiceConfigurationResponse>* PrepareAsyncSetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::SetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationResponse>* AsyncGetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationResponse>* PrepareAsyncGetServiceConfigurationRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationByIdResponse>* AsyncGetServiceConfigurationByIdRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::GetServiceConfigurationByIdResponse>* PrepareAsyncGetServiceConfigurationByIdRaw(::grpc::ClientContext* context, const ::config::GetServiceConfigurationByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsByNameResponse>* AsyncGetServicesConfigurationsByNameRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsByNameResponse>* PrepareAsyncGetServicesConfigurationsByNameRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsByNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsResponse>* AsyncGetServicesConfigurationsRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::GetServicesConfigurationsResponse>* PrepareAsyncGetServicesConfigurationsRaw(::grpc::ClientContext* context, const ::config::GetServicesConfigurationsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetServiceConfiguration_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceConfiguration_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceConfigurationById_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServicesConfigurationsByName_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServicesConfigurations_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Set a service configuration.
    virtual ::grpc::Status SetServiceConfiguration(::grpc::ServerContext* context, const ::config::SetServiceConfigurationRequest* request, ::config::SetServiceConfigurationResponse* response);
    // Get the configuration at a given path on the server.
    virtual ::grpc::Status GetServiceConfiguration(::grpc::ServerContext* context, const ::config::GetServiceConfigurationRequest* request, ::config::GetServiceConfigurationResponse* response);
    // Get service configuration with a given id.
    virtual ::grpc::Status GetServiceConfigurationById(::grpc::ServerContext* context, const ::config::GetServiceConfigurationByIdRequest* request, ::config::GetServiceConfigurationByIdResponse* response);
    // Get list of service configuration with a given name
    virtual ::grpc::Status GetServicesConfigurationsByName(::grpc::ServerContext* context, const ::config::GetServicesConfigurationsByNameRequest* request, ::config::GetServicesConfigurationsByNameResponse* response);
    // Get the list of all services configurations
    virtual ::grpc::Status GetServicesConfigurations(::grpc::ServerContext* context, const ::config::GetServicesConfigurationsRequest* request, ::config::GetServicesConfigurationsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetServiceConfiguration() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::SetServiceConfigurationRequest* /*request*/, ::config::SetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetServiceConfiguration(::grpc::ServerContext* context, ::config::SetServiceConfigurationRequest* request, ::grpc::ServerAsyncResponseWriter< ::config::SetServiceConfigurationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceConfiguration() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationRequest* /*request*/, ::config::GetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceConfiguration(::grpc::ServerContext* context, ::config::GetServiceConfigurationRequest* request, ::grpc::ServerAsyncResponseWriter< ::config::GetServiceConfigurationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceConfigurationById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceConfigurationById() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetServiceConfigurationById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfigurationById(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationByIdRequest* /*request*/, ::config::GetServiceConfigurationByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceConfigurationById(::grpc::ServerContext* context, ::config::GetServiceConfigurationByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::config::GetServiceConfigurationByIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServicesConfigurationsByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServicesConfigurationsByName() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetServicesConfigurationsByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServicesConfigurationsByName(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsByNameRequest* /*request*/, ::config::GetServicesConfigurationsByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServicesConfigurationsByName(::grpc::ServerContext* context, ::config::GetServicesConfigurationsByNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::config::GetServicesConfigurationsByNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServicesConfigurations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServicesConfigurations() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetServicesConfigurations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServicesConfigurations(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsRequest* /*request*/, ::config::GetServicesConfigurationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServicesConfigurations(::grpc::ServerContext* context, ::config::GetServicesConfigurationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::config::GetServicesConfigurationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetServiceConfiguration<WithAsyncMethod_GetServiceConfiguration<WithAsyncMethod_GetServiceConfigurationById<WithAsyncMethod_GetServicesConfigurationsByName<WithAsyncMethod_GetServicesConfigurations<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetServiceConfiguration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::config::SetServiceConfigurationRequest, ::config::SetServiceConfigurationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::config::SetServiceConfigurationRequest* request, ::config::SetServiceConfigurationResponse* response) { return this->SetServiceConfiguration(context, request, response); }));}
    void SetMessageAllocatorFor_SetServiceConfiguration(
        ::grpc::experimental::MessageAllocator< ::config::SetServiceConfigurationRequest, ::config::SetServiceConfigurationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::config::SetServiceConfigurationRequest, ::config::SetServiceConfigurationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::SetServiceConfigurationRequest* /*request*/, ::config::SetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetServiceConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::config::SetServiceConfigurationRequest* /*request*/, ::config::SetServiceConfigurationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetServiceConfiguration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::config::SetServiceConfigurationRequest* /*request*/, ::config::SetServiceConfigurationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServiceConfiguration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::config::GetServiceConfigurationRequest, ::config::GetServiceConfigurationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::config::GetServiceConfigurationRequest* request, ::config::GetServiceConfigurationResponse* response) { return this->GetServiceConfiguration(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceConfiguration(
        ::grpc::experimental::MessageAllocator< ::config::GetServiceConfigurationRequest, ::config::GetServiceConfigurationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::config::GetServiceConfigurationRequest, ::config::GetServiceConfigurationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationRequest* /*request*/, ::config::GetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::config::GetServiceConfigurationRequest* /*request*/, ::config::GetServiceConfigurationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceConfiguration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::config::GetServiceConfigurationRequest* /*request*/, ::config::GetServiceConfigurationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServiceConfigurationById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServiceConfigurationById() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::config::GetServiceConfigurationByIdRequest, ::config::GetServiceConfigurationByIdResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::config::GetServiceConfigurationByIdRequest* request, ::config::GetServiceConfigurationByIdResponse* response) { return this->GetServiceConfigurationById(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceConfigurationById(
        ::grpc::experimental::MessageAllocator< ::config::GetServiceConfigurationByIdRequest, ::config::GetServiceConfigurationByIdResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::config::GetServiceConfigurationByIdRequest, ::config::GetServiceConfigurationByIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServiceConfigurationById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfigurationById(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationByIdRequest* /*request*/, ::config::GetServiceConfigurationByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceConfigurationById(
      ::grpc::CallbackServerContext* /*context*/, const ::config::GetServiceConfigurationByIdRequest* /*request*/, ::config::GetServiceConfigurationByIdResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceConfigurationById(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::config::GetServiceConfigurationByIdRequest* /*request*/, ::config::GetServiceConfigurationByIdResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServicesConfigurationsByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServicesConfigurationsByName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::config::GetServicesConfigurationsByNameRequest, ::config::GetServicesConfigurationsByNameResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::config::GetServicesConfigurationsByNameRequest* request, ::config::GetServicesConfigurationsByNameResponse* response) { return this->GetServicesConfigurationsByName(context, request, response); }));}
    void SetMessageAllocatorFor_GetServicesConfigurationsByName(
        ::grpc::experimental::MessageAllocator< ::config::GetServicesConfigurationsByNameRequest, ::config::GetServicesConfigurationsByNameResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::config::GetServicesConfigurationsByNameRequest, ::config::GetServicesConfigurationsByNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServicesConfigurationsByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServicesConfigurationsByName(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsByNameRequest* /*request*/, ::config::GetServicesConfigurationsByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServicesConfigurationsByName(
      ::grpc::CallbackServerContext* /*context*/, const ::config::GetServicesConfigurationsByNameRequest* /*request*/, ::config::GetServicesConfigurationsByNameResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServicesConfigurationsByName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::config::GetServicesConfigurationsByNameRequest* /*request*/, ::config::GetServicesConfigurationsByNameResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServicesConfigurations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServicesConfigurations() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::config::GetServicesConfigurationsRequest, ::config::GetServicesConfigurationsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::config::GetServicesConfigurationsRequest* request, ::config::GetServicesConfigurationsResponse* response) { return this->GetServicesConfigurations(context, request, response); }));}
    void SetMessageAllocatorFor_GetServicesConfigurations(
        ::grpc::experimental::MessageAllocator< ::config::GetServicesConfigurationsRequest, ::config::GetServicesConfigurationsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::config::GetServicesConfigurationsRequest, ::config::GetServicesConfigurationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServicesConfigurations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServicesConfigurations(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsRequest* /*request*/, ::config::GetServicesConfigurationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServicesConfigurations(
      ::grpc::CallbackServerContext* /*context*/, const ::config::GetServicesConfigurationsRequest* /*request*/, ::config::GetServicesConfigurationsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServicesConfigurations(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::config::GetServicesConfigurationsRequest* /*request*/, ::config::GetServicesConfigurationsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SetServiceConfiguration<ExperimentalWithCallbackMethod_GetServiceConfiguration<ExperimentalWithCallbackMethod_GetServiceConfigurationById<ExperimentalWithCallbackMethod_GetServicesConfigurationsByName<ExperimentalWithCallbackMethod_GetServicesConfigurations<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SetServiceConfiguration<ExperimentalWithCallbackMethod_GetServiceConfiguration<ExperimentalWithCallbackMethod_GetServiceConfigurationById<ExperimentalWithCallbackMethod_GetServicesConfigurationsByName<ExperimentalWithCallbackMethod_GetServicesConfigurations<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetServiceConfiguration() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::SetServiceConfigurationRequest* /*request*/, ::config::SetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceConfiguration() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationRequest* /*request*/, ::config::GetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceConfigurationById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceConfigurationById() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetServiceConfigurationById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfigurationById(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationByIdRequest* /*request*/, ::config::GetServiceConfigurationByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServicesConfigurationsByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServicesConfigurationsByName() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetServicesConfigurationsByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServicesConfigurationsByName(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsByNameRequest* /*request*/, ::config::GetServicesConfigurationsByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServicesConfigurations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServicesConfigurations() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetServicesConfigurations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServicesConfigurations(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsRequest* /*request*/, ::config::GetServicesConfigurationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetServiceConfiguration() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::SetServiceConfigurationRequest* /*request*/, ::config::SetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetServiceConfiguration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceConfiguration() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationRequest* /*request*/, ::config::GetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceConfiguration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceConfigurationById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceConfigurationById() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetServiceConfigurationById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfigurationById(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationByIdRequest* /*request*/, ::config::GetServiceConfigurationByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceConfigurationById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServicesConfigurationsByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServicesConfigurationsByName() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetServicesConfigurationsByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServicesConfigurationsByName(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsByNameRequest* /*request*/, ::config::GetServicesConfigurationsByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServicesConfigurationsByName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServicesConfigurations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServicesConfigurations() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetServicesConfigurations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServicesConfigurations(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsRequest* /*request*/, ::config::GetServicesConfigurationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServicesConfigurations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetServiceConfiguration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetServiceConfiguration(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::SetServiceConfigurationRequest* /*request*/, ::config::SetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetServiceConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetServiceConfiguration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServiceConfiguration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceConfiguration(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationRequest* /*request*/, ::config::GetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceConfiguration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceConfiguration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServiceConfigurationById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServiceConfigurationById() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceConfigurationById(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServiceConfigurationById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceConfigurationById(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationByIdRequest* /*request*/, ::config::GetServiceConfigurationByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceConfigurationById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceConfigurationById(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServicesConfigurationsByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServicesConfigurationsByName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServicesConfigurationsByName(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServicesConfigurationsByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServicesConfigurationsByName(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsByNameRequest* /*request*/, ::config::GetServicesConfigurationsByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServicesConfigurationsByName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServicesConfigurationsByName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServicesConfigurations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServicesConfigurations() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServicesConfigurations(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServicesConfigurations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServicesConfigurations(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsRequest* /*request*/, ::config::GetServicesConfigurationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServicesConfigurations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServicesConfigurations(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetServiceConfiguration() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::config::SetServiceConfigurationRequest, ::config::SetServiceConfigurationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::config::SetServiceConfigurationRequest, ::config::SetServiceConfigurationResponse>* streamer) {
                       return this->StreamedSetServiceConfiguration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::SetServiceConfigurationRequest* /*request*/, ::config::SetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetServiceConfiguration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::config::SetServiceConfigurationRequest,::config::SetServiceConfigurationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceConfiguration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceConfiguration() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::config::GetServiceConfigurationRequest, ::config::GetServiceConfigurationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::config::GetServiceConfigurationRequest, ::config::GetServiceConfigurationResponse>* streamer) {
                       return this->StreamedGetServiceConfiguration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceConfiguration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceConfiguration(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationRequest* /*request*/, ::config::GetServiceConfigurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceConfiguration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::config::GetServiceConfigurationRequest,::config::GetServiceConfigurationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceConfigurationById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceConfigurationById() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::config::GetServiceConfigurationByIdRequest, ::config::GetServiceConfigurationByIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::config::GetServiceConfigurationByIdRequest, ::config::GetServiceConfigurationByIdResponse>* streamer) {
                       return this->StreamedGetServiceConfigurationById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceConfigurationById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceConfigurationById(::grpc::ServerContext* /*context*/, const ::config::GetServiceConfigurationByIdRequest* /*request*/, ::config::GetServiceConfigurationByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceConfigurationById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::config::GetServiceConfigurationByIdRequest,::config::GetServiceConfigurationByIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServicesConfigurationsByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServicesConfigurationsByName() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::config::GetServicesConfigurationsByNameRequest, ::config::GetServicesConfigurationsByNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::config::GetServicesConfigurationsByNameRequest, ::config::GetServicesConfigurationsByNameResponse>* streamer) {
                       return this->StreamedGetServicesConfigurationsByName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServicesConfigurationsByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServicesConfigurationsByName(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsByNameRequest* /*request*/, ::config::GetServicesConfigurationsByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServicesConfigurationsByName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::config::GetServicesConfigurationsByNameRequest,::config::GetServicesConfigurationsByNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServicesConfigurations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServicesConfigurations() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::config::GetServicesConfigurationsRequest, ::config::GetServicesConfigurationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::config::GetServicesConfigurationsRequest, ::config::GetServicesConfigurationsResponse>* streamer) {
                       return this->StreamedGetServicesConfigurations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServicesConfigurations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServicesConfigurations(::grpc::ServerContext* /*context*/, const ::config::GetServicesConfigurationsRequest* /*request*/, ::config::GetServicesConfigurationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServicesConfigurations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::config::GetServicesConfigurationsRequest,::config::GetServicesConfigurationsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetServiceConfiguration<WithStreamedUnaryMethod_GetServiceConfiguration<WithStreamedUnaryMethod_GetServiceConfigurationById<WithStreamedUnaryMethod_GetServicesConfigurationsByName<WithStreamedUnaryMethod_GetServicesConfigurations<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetServiceConfiguration<WithStreamedUnaryMethod_GetServiceConfiguration<WithStreamedUnaryMethod_GetServiceConfigurationById<WithStreamedUnaryMethod_GetServicesConfigurationsByName<WithStreamedUnaryMethod_GetServicesConfigurations<Service > > > > > StreamedService;
};

}  // namespace config


#endif  // GRPC_config_2eproto__INCLUDED
