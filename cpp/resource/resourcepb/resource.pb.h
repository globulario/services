// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resource.proto

#ifndef PROTOBUF_INCLUDED_resource_2eproto
#define PROTOBUF_INCLUDED_resource_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_resource_2eproto 

namespace protobuf_resource_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[151];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_resource_2eproto
namespace resource {
class AcceptPeerRqst;
class AcceptPeerRqstDefaultTypeInternal;
extern AcceptPeerRqstDefaultTypeInternal _AcceptPeerRqst_default_instance_;
class AcceptPeerRsp;
class AcceptPeerRspDefaultTypeInternal;
extern AcceptPeerRspDefaultTypeInternal _AcceptPeerRsp_default_instance_;
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class AccountExistRqst;
class AccountExistRqstDefaultTypeInternal;
extern AccountExistRqstDefaultTypeInternal _AccountExistRqst_default_instance_;
class AccountExistRsp;
class AccountExistRspDefaultTypeInternal;
extern AccountExistRspDefaultTypeInternal _AccountExistRsp_default_instance_;
class AddAccountRoleRqst;
class AddAccountRoleRqstDefaultTypeInternal;
extern AddAccountRoleRqstDefaultTypeInternal _AddAccountRoleRqst_default_instance_;
class AddAccountRoleRsp;
class AddAccountRoleRspDefaultTypeInternal;
extern AddAccountRoleRspDefaultTypeInternal _AddAccountRoleRsp_default_instance_;
class AddApplicationActionsRqst;
class AddApplicationActionsRqstDefaultTypeInternal;
extern AddApplicationActionsRqstDefaultTypeInternal _AddApplicationActionsRqst_default_instance_;
class AddApplicationActionsRsp;
class AddApplicationActionsRspDefaultTypeInternal;
extern AddApplicationActionsRspDefaultTypeInternal _AddApplicationActionsRsp_default_instance_;
class AddGroupMemberAccountRqst;
class AddGroupMemberAccountRqstDefaultTypeInternal;
extern AddGroupMemberAccountRqstDefaultTypeInternal _AddGroupMemberAccountRqst_default_instance_;
class AddGroupMemberAccountRsp;
class AddGroupMemberAccountRspDefaultTypeInternal;
extern AddGroupMemberAccountRspDefaultTypeInternal _AddGroupMemberAccountRsp_default_instance_;
class AddOrganizationAccountRqst;
class AddOrganizationAccountRqstDefaultTypeInternal;
extern AddOrganizationAccountRqstDefaultTypeInternal _AddOrganizationAccountRqst_default_instance_;
class AddOrganizationAccountRsp;
class AddOrganizationAccountRspDefaultTypeInternal;
extern AddOrganizationAccountRspDefaultTypeInternal _AddOrganizationAccountRsp_default_instance_;
class AddOrganizationApplicationRqst;
class AddOrganizationApplicationRqstDefaultTypeInternal;
extern AddOrganizationApplicationRqstDefaultTypeInternal _AddOrganizationApplicationRqst_default_instance_;
class AddOrganizationApplicationRsp;
class AddOrganizationApplicationRspDefaultTypeInternal;
extern AddOrganizationApplicationRspDefaultTypeInternal _AddOrganizationApplicationRsp_default_instance_;
class AddOrganizationGroupRqst;
class AddOrganizationGroupRqstDefaultTypeInternal;
extern AddOrganizationGroupRqstDefaultTypeInternal _AddOrganizationGroupRqst_default_instance_;
class AddOrganizationGroupRsp;
class AddOrganizationGroupRspDefaultTypeInternal;
extern AddOrganizationGroupRspDefaultTypeInternal _AddOrganizationGroupRsp_default_instance_;
class AddOrganizationRoleRqst;
class AddOrganizationRoleRqstDefaultTypeInternal;
extern AddOrganizationRoleRqstDefaultTypeInternal _AddOrganizationRoleRqst_default_instance_;
class AddOrganizationRoleRsp;
class AddOrganizationRoleRspDefaultTypeInternal;
extern AddOrganizationRoleRspDefaultTypeInternal _AddOrganizationRoleRsp_default_instance_;
class AddPeerActionsRqst;
class AddPeerActionsRqstDefaultTypeInternal;
extern AddPeerActionsRqstDefaultTypeInternal _AddPeerActionsRqst_default_instance_;
class AddPeerActionsRsp;
class AddPeerActionsRspDefaultTypeInternal;
extern AddPeerActionsRspDefaultTypeInternal _AddPeerActionsRsp_default_instance_;
class AddRoleActionsRqst;
class AddRoleActionsRqstDefaultTypeInternal;
extern AddRoleActionsRqstDefaultTypeInternal _AddRoleActionsRqst_default_instance_;
class AddRoleActionsRsp;
class AddRoleActionsRspDefaultTypeInternal;
extern AddRoleActionsRspDefaultTypeInternal _AddRoleActionsRsp_default_instance_;
class Application;
class ApplicationDefaultTypeInternal;
extern ApplicationDefaultTypeInternal _Application_default_instance_;
class ClearAllNotificationsRqst;
class ClearAllNotificationsRqstDefaultTypeInternal;
extern ClearAllNotificationsRqstDefaultTypeInternal _ClearAllNotificationsRqst_default_instance_;
class ClearAllNotificationsRsp;
class ClearAllNotificationsRspDefaultTypeInternal;
extern ClearAllNotificationsRspDefaultTypeInternal _ClearAllNotificationsRsp_default_instance_;
class ClearNotificationsByTypeRqst;
class ClearNotificationsByTypeRqstDefaultTypeInternal;
extern ClearNotificationsByTypeRqstDefaultTypeInternal _ClearNotificationsByTypeRqst_default_instance_;
class ClearNotificationsByTypeRsp;
class ClearNotificationsByTypeRspDefaultTypeInternal;
extern ClearNotificationsByTypeRspDefaultTypeInternal _ClearNotificationsByTypeRsp_default_instance_;
class Contact;
class ContactDefaultTypeInternal;
extern ContactDefaultTypeInternal _Contact_default_instance_;
class CreateApplicationRqst;
class CreateApplicationRqstDefaultTypeInternal;
extern CreateApplicationRqstDefaultTypeInternal _CreateApplicationRqst_default_instance_;
class CreateApplicationRsp;
class CreateApplicationRspDefaultTypeInternal;
extern CreateApplicationRspDefaultTypeInternal _CreateApplicationRsp_default_instance_;
class CreateGroupRqst;
class CreateGroupRqstDefaultTypeInternal;
extern CreateGroupRqstDefaultTypeInternal _CreateGroupRqst_default_instance_;
class CreateGroupRsp;
class CreateGroupRspDefaultTypeInternal;
extern CreateGroupRspDefaultTypeInternal _CreateGroupRsp_default_instance_;
class CreateNotificationRqst;
class CreateNotificationRqstDefaultTypeInternal;
extern CreateNotificationRqstDefaultTypeInternal _CreateNotificationRqst_default_instance_;
class CreateNotificationRsp;
class CreateNotificationRspDefaultTypeInternal;
extern CreateNotificationRspDefaultTypeInternal _CreateNotificationRsp_default_instance_;
class CreateOrganizationRqst;
class CreateOrganizationRqstDefaultTypeInternal;
extern CreateOrganizationRqstDefaultTypeInternal _CreateOrganizationRqst_default_instance_;
class CreateOrganizationRsp;
class CreateOrganizationRspDefaultTypeInternal;
extern CreateOrganizationRspDefaultTypeInternal _CreateOrganizationRsp_default_instance_;
class CreateRoleRqst;
class CreateRoleRqstDefaultTypeInternal;
extern CreateRoleRqstDefaultTypeInternal _CreateRoleRqst_default_instance_;
class CreateRoleRsp;
class CreateRoleRspDefaultTypeInternal;
extern CreateRoleRspDefaultTypeInternal _CreateRoleRsp_default_instance_;
class DeleteAccountRqst;
class DeleteAccountRqstDefaultTypeInternal;
extern DeleteAccountRqstDefaultTypeInternal _DeleteAccountRqst_default_instance_;
class DeleteAccountRsp;
class DeleteAccountRspDefaultTypeInternal;
extern DeleteAccountRspDefaultTypeInternal _DeleteAccountRsp_default_instance_;
class DeleteApplicationRqst;
class DeleteApplicationRqstDefaultTypeInternal;
extern DeleteApplicationRqstDefaultTypeInternal _DeleteApplicationRqst_default_instance_;
class DeleteApplicationRsp;
class DeleteApplicationRspDefaultTypeInternal;
extern DeleteApplicationRspDefaultTypeInternal _DeleteApplicationRsp_default_instance_;
class DeleteGroupRqst;
class DeleteGroupRqstDefaultTypeInternal;
extern DeleteGroupRqstDefaultTypeInternal _DeleteGroupRqst_default_instance_;
class DeleteGroupRsp;
class DeleteGroupRspDefaultTypeInternal;
extern DeleteGroupRspDefaultTypeInternal _DeleteGroupRsp_default_instance_;
class DeleteNotificationRqst;
class DeleteNotificationRqstDefaultTypeInternal;
extern DeleteNotificationRqstDefaultTypeInternal _DeleteNotificationRqst_default_instance_;
class DeleteNotificationRsp;
class DeleteNotificationRspDefaultTypeInternal;
extern DeleteNotificationRspDefaultTypeInternal _DeleteNotificationRsp_default_instance_;
class DeleteOrganizationRqst;
class DeleteOrganizationRqstDefaultTypeInternal;
extern DeleteOrganizationRqstDefaultTypeInternal _DeleteOrganizationRqst_default_instance_;
class DeleteOrganizationRsp;
class DeleteOrganizationRspDefaultTypeInternal;
extern DeleteOrganizationRspDefaultTypeInternal _DeleteOrganizationRsp_default_instance_;
class DeletePeerRqst;
class DeletePeerRqstDefaultTypeInternal;
extern DeletePeerRqstDefaultTypeInternal _DeletePeerRqst_default_instance_;
class DeletePeerRsp;
class DeletePeerRspDefaultTypeInternal;
extern DeletePeerRspDefaultTypeInternal _DeletePeerRsp_default_instance_;
class DeleteRoleRqst;
class DeleteRoleRqstDefaultTypeInternal;
extern DeleteRoleRqstDefaultTypeInternal _DeleteRoleRqst_default_instance_;
class DeleteRoleRsp;
class DeleteRoleRspDefaultTypeInternal;
extern DeleteRoleRspDefaultTypeInternal _DeleteRoleRsp_default_instance_;
class FindPackagesDescriptorRequest;
class FindPackagesDescriptorRequestDefaultTypeInternal;
extern FindPackagesDescriptorRequestDefaultTypeInternal _FindPackagesDescriptorRequest_default_instance_;
class FindPackagesDescriptorResponse;
class FindPackagesDescriptorResponseDefaultTypeInternal;
extern FindPackagesDescriptorResponseDefaultTypeInternal _FindPackagesDescriptorResponse_default_instance_;
class GetAccountRqst;
class GetAccountRqstDefaultTypeInternal;
extern GetAccountRqstDefaultTypeInternal _GetAccountRqst_default_instance_;
class GetAccountRsp;
class GetAccountRspDefaultTypeInternal;
extern GetAccountRspDefaultTypeInternal _GetAccountRsp_default_instance_;
class GetAccountsRqst;
class GetAccountsRqstDefaultTypeInternal;
extern GetAccountsRqstDefaultTypeInternal _GetAccountsRqst_default_instance_;
class GetAccountsRsp;
class GetAccountsRspDefaultTypeInternal;
extern GetAccountsRspDefaultTypeInternal _GetAccountsRsp_default_instance_;
class GetApplicationAliasRqst;
class GetApplicationAliasRqstDefaultTypeInternal;
extern GetApplicationAliasRqstDefaultTypeInternal _GetApplicationAliasRqst_default_instance_;
class GetApplicationAliasRsp;
class GetApplicationAliasRspDefaultTypeInternal;
extern GetApplicationAliasRspDefaultTypeInternal _GetApplicationAliasRsp_default_instance_;
class GetApplicationIconRqst;
class GetApplicationIconRqstDefaultTypeInternal;
extern GetApplicationIconRqstDefaultTypeInternal _GetApplicationIconRqst_default_instance_;
class GetApplicationIconRsp;
class GetApplicationIconRspDefaultTypeInternal;
extern GetApplicationIconRspDefaultTypeInternal _GetApplicationIconRsp_default_instance_;
class GetApplicationVersionRqst;
class GetApplicationVersionRqstDefaultTypeInternal;
extern GetApplicationVersionRqstDefaultTypeInternal _GetApplicationVersionRqst_default_instance_;
class GetApplicationVersionRsp;
class GetApplicationVersionRspDefaultTypeInternal;
extern GetApplicationVersionRspDefaultTypeInternal _GetApplicationVersionRsp_default_instance_;
class GetApplicationsRqst;
class GetApplicationsRqstDefaultTypeInternal;
extern GetApplicationsRqstDefaultTypeInternal _GetApplicationsRqst_default_instance_;
class GetApplicationsRsp;
class GetApplicationsRspDefaultTypeInternal;
extern GetApplicationsRspDefaultTypeInternal _GetApplicationsRsp_default_instance_;
class GetGroupsRqst;
class GetGroupsRqstDefaultTypeInternal;
extern GetGroupsRqstDefaultTypeInternal _GetGroupsRqst_default_instance_;
class GetGroupsRsp;
class GetGroupsRspDefaultTypeInternal;
extern GetGroupsRspDefaultTypeInternal _GetGroupsRsp_default_instance_;
class GetNotificationsRqst;
class GetNotificationsRqstDefaultTypeInternal;
extern GetNotificationsRqstDefaultTypeInternal _GetNotificationsRqst_default_instance_;
class GetNotificationsRsp;
class GetNotificationsRspDefaultTypeInternal;
extern GetNotificationsRspDefaultTypeInternal _GetNotificationsRsp_default_instance_;
class GetOrganizationsRqst;
class GetOrganizationsRqstDefaultTypeInternal;
extern GetOrganizationsRqstDefaultTypeInternal _GetOrganizationsRqst_default_instance_;
class GetOrganizationsRsp;
class GetOrganizationsRspDefaultTypeInternal;
extern GetOrganizationsRspDefaultTypeInternal _GetOrganizationsRsp_default_instance_;
class GetPackageBundleChecksumRequest;
class GetPackageBundleChecksumRequestDefaultTypeInternal;
extern GetPackageBundleChecksumRequestDefaultTypeInternal _GetPackageBundleChecksumRequest_default_instance_;
class GetPackageBundleChecksumResponse;
class GetPackageBundleChecksumResponseDefaultTypeInternal;
extern GetPackageBundleChecksumResponseDefaultTypeInternal _GetPackageBundleChecksumResponse_default_instance_;
class GetPackageDescriptorRequest;
class GetPackageDescriptorRequestDefaultTypeInternal;
extern GetPackageDescriptorRequestDefaultTypeInternal _GetPackageDescriptorRequest_default_instance_;
class GetPackageDescriptorResponse;
class GetPackageDescriptorResponseDefaultTypeInternal;
extern GetPackageDescriptorResponseDefaultTypeInternal _GetPackageDescriptorResponse_default_instance_;
class GetPackagesDescriptorRequest;
class GetPackagesDescriptorRequestDefaultTypeInternal;
extern GetPackagesDescriptorRequestDefaultTypeInternal _GetPackagesDescriptorRequest_default_instance_;
class GetPackagesDescriptorResponse;
class GetPackagesDescriptorResponseDefaultTypeInternal;
extern GetPackagesDescriptorResponseDefaultTypeInternal _GetPackagesDescriptorResponse_default_instance_;
class GetPeerApprovalStateRqst;
class GetPeerApprovalStateRqstDefaultTypeInternal;
extern GetPeerApprovalStateRqstDefaultTypeInternal _GetPeerApprovalStateRqst_default_instance_;
class GetPeerApprovalStateRsp;
class GetPeerApprovalStateRspDefaultTypeInternal;
extern GetPeerApprovalStateRspDefaultTypeInternal _GetPeerApprovalStateRsp_default_instance_;
class GetPeerPublicKeyRqst;
class GetPeerPublicKeyRqstDefaultTypeInternal;
extern GetPeerPublicKeyRqstDefaultTypeInternal _GetPeerPublicKeyRqst_default_instance_;
class GetPeerPublicKeyRsp;
class GetPeerPublicKeyRspDefaultTypeInternal;
extern GetPeerPublicKeyRspDefaultTypeInternal _GetPeerPublicKeyRsp_default_instance_;
class GetPeersRqst;
class GetPeersRqstDefaultTypeInternal;
extern GetPeersRqstDefaultTypeInternal _GetPeersRqst_default_instance_;
class GetPeersRsp;
class GetPeersRspDefaultTypeInternal;
extern GetPeersRspDefaultTypeInternal _GetPeersRsp_default_instance_;
class GetRolesRqst;
class GetRolesRqstDefaultTypeInternal;
extern GetRolesRqstDefaultTypeInternal _GetRolesRqst_default_instance_;
class GetRolesRsp;
class GetRolesRspDefaultTypeInternal;
extern GetRolesRspDefaultTypeInternal _GetRolesRsp_default_instance_;
class GetSessionRequest;
class GetSessionRequestDefaultTypeInternal;
extern GetSessionRequestDefaultTypeInternal _GetSessionRequest_default_instance_;
class GetSessionResponse;
class GetSessionResponseDefaultTypeInternal;
extern GetSessionResponseDefaultTypeInternal _GetSessionResponse_default_instance_;
class GetSessionsRequest;
class GetSessionsRequestDefaultTypeInternal;
extern GetSessionsRequestDefaultTypeInternal _GetSessionsRequest_default_instance_;
class GetSessionsResponse;
class GetSessionsResponseDefaultTypeInternal;
extern GetSessionsResponseDefaultTypeInternal _GetSessionsResponse_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class IsOrgnanizationMemberRqst;
class IsOrgnanizationMemberRqstDefaultTypeInternal;
extern IsOrgnanizationMemberRqstDefaultTypeInternal _IsOrgnanizationMemberRqst_default_instance_;
class IsOrgnanizationMemberRsp;
class IsOrgnanizationMemberRspDefaultTypeInternal;
extern IsOrgnanizationMemberRspDefaultTypeInternal _IsOrgnanizationMemberRsp_default_instance_;
class Notification;
class NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class Organization;
class OrganizationDefaultTypeInternal;
extern OrganizationDefaultTypeInternal _Organization_default_instance_;
class PackageBundle;
class PackageBundleDefaultTypeInternal;
extern PackageBundleDefaultTypeInternal _PackageBundle_default_instance_;
class PackageDescriptor;
class PackageDescriptorDefaultTypeInternal;
extern PackageDescriptorDefaultTypeInternal _PackageDescriptor_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class RegisterAccountRqst;
class RegisterAccountRqstDefaultTypeInternal;
extern RegisterAccountRqstDefaultTypeInternal _RegisterAccountRqst_default_instance_;
class RegisterAccountRsp;
class RegisterAccountRspDefaultTypeInternal;
extern RegisterAccountRspDefaultTypeInternal _RegisterAccountRsp_default_instance_;
class RegisterPeerRqst;
class RegisterPeerRqstDefaultTypeInternal;
extern RegisterPeerRqstDefaultTypeInternal _RegisterPeerRqst_default_instance_;
class RegisterPeerRsp;
class RegisterPeerRspDefaultTypeInternal;
extern RegisterPeerRspDefaultTypeInternal _RegisterPeerRsp_default_instance_;
class RejectPeerRqst;
class RejectPeerRqstDefaultTypeInternal;
extern RejectPeerRqstDefaultTypeInternal _RejectPeerRqst_default_instance_;
class RejectPeerRsp;
class RejectPeerRspDefaultTypeInternal;
extern RejectPeerRspDefaultTypeInternal _RejectPeerRsp_default_instance_;
class RemoveAccountRoleRqst;
class RemoveAccountRoleRqstDefaultTypeInternal;
extern RemoveAccountRoleRqstDefaultTypeInternal _RemoveAccountRoleRqst_default_instance_;
class RemoveAccountRoleRsp;
class RemoveAccountRoleRspDefaultTypeInternal;
extern RemoveAccountRoleRspDefaultTypeInternal _RemoveAccountRoleRsp_default_instance_;
class RemoveApplicationActionRqst;
class RemoveApplicationActionRqstDefaultTypeInternal;
extern RemoveApplicationActionRqstDefaultTypeInternal _RemoveApplicationActionRqst_default_instance_;
class RemoveApplicationActionRsp;
class RemoveApplicationActionRspDefaultTypeInternal;
extern RemoveApplicationActionRspDefaultTypeInternal _RemoveApplicationActionRsp_default_instance_;
class RemoveApplicationsActionRqst;
class RemoveApplicationsActionRqstDefaultTypeInternal;
extern RemoveApplicationsActionRqstDefaultTypeInternal _RemoveApplicationsActionRqst_default_instance_;
class RemoveApplicationsActionRsp;
class RemoveApplicationsActionRspDefaultTypeInternal;
extern RemoveApplicationsActionRspDefaultTypeInternal _RemoveApplicationsActionRsp_default_instance_;
class RemoveGroupMemberAccountRqst;
class RemoveGroupMemberAccountRqstDefaultTypeInternal;
extern RemoveGroupMemberAccountRqstDefaultTypeInternal _RemoveGroupMemberAccountRqst_default_instance_;
class RemoveGroupMemberAccountRsp;
class RemoveGroupMemberAccountRspDefaultTypeInternal;
extern RemoveGroupMemberAccountRspDefaultTypeInternal _RemoveGroupMemberAccountRsp_default_instance_;
class RemoveOrganizationAccountRqst;
class RemoveOrganizationAccountRqstDefaultTypeInternal;
extern RemoveOrganizationAccountRqstDefaultTypeInternal _RemoveOrganizationAccountRqst_default_instance_;
class RemoveOrganizationAccountRsp;
class RemoveOrganizationAccountRspDefaultTypeInternal;
extern RemoveOrganizationAccountRspDefaultTypeInternal _RemoveOrganizationAccountRsp_default_instance_;
class RemoveOrganizationApplicationRqst;
class RemoveOrganizationApplicationRqstDefaultTypeInternal;
extern RemoveOrganizationApplicationRqstDefaultTypeInternal _RemoveOrganizationApplicationRqst_default_instance_;
class RemoveOrganizationApplicationRsp;
class RemoveOrganizationApplicationRspDefaultTypeInternal;
extern RemoveOrganizationApplicationRspDefaultTypeInternal _RemoveOrganizationApplicationRsp_default_instance_;
class RemoveOrganizationGroupRqst;
class RemoveOrganizationGroupRqstDefaultTypeInternal;
extern RemoveOrganizationGroupRqstDefaultTypeInternal _RemoveOrganizationGroupRqst_default_instance_;
class RemoveOrganizationGroupRsp;
class RemoveOrganizationGroupRspDefaultTypeInternal;
extern RemoveOrganizationGroupRspDefaultTypeInternal _RemoveOrganizationGroupRsp_default_instance_;
class RemoveOrganizationRoleRqst;
class RemoveOrganizationRoleRqstDefaultTypeInternal;
extern RemoveOrganizationRoleRqstDefaultTypeInternal _RemoveOrganizationRoleRqst_default_instance_;
class RemoveOrganizationRoleRsp;
class RemoveOrganizationRoleRspDefaultTypeInternal;
extern RemoveOrganizationRoleRspDefaultTypeInternal _RemoveOrganizationRoleRsp_default_instance_;
class RemovePeerActionRqst;
class RemovePeerActionRqstDefaultTypeInternal;
extern RemovePeerActionRqstDefaultTypeInternal _RemovePeerActionRqst_default_instance_;
class RemovePeerActionRsp;
class RemovePeerActionRspDefaultTypeInternal;
extern RemovePeerActionRspDefaultTypeInternal _RemovePeerActionRsp_default_instance_;
class RemovePeersActionRqst;
class RemovePeersActionRqstDefaultTypeInternal;
extern RemovePeersActionRqstDefaultTypeInternal _RemovePeersActionRqst_default_instance_;
class RemovePeersActionRsp;
class RemovePeersActionRspDefaultTypeInternal;
extern RemovePeersActionRspDefaultTypeInternal _RemovePeersActionRsp_default_instance_;
class RemoveRoleActionRqst;
class RemoveRoleActionRqstDefaultTypeInternal;
extern RemoveRoleActionRqstDefaultTypeInternal _RemoveRoleActionRqst_default_instance_;
class RemoveRoleActionRsp;
class RemoveRoleActionRspDefaultTypeInternal;
extern RemoveRoleActionRspDefaultTypeInternal _RemoveRoleActionRsp_default_instance_;
class RemoveRolesActionRqst;
class RemoveRolesActionRqstDefaultTypeInternal;
extern RemoveRolesActionRqstDefaultTypeInternal _RemoveRolesActionRqst_default_instance_;
class RemoveRolesActionRsp;
class RemoveRolesActionRspDefaultTypeInternal;
extern RemoveRolesActionRspDefaultTypeInternal _RemoveRolesActionRsp_default_instance_;
class RemoveSessionRequest;
class RemoveSessionRequestDefaultTypeInternal;
extern RemoveSessionRequestDefaultTypeInternal _RemoveSessionRequest_default_instance_;
class RemoveSessionResponse;
class RemoveSessionResponseDefaultTypeInternal;
extern RemoveSessionResponseDefaultTypeInternal _RemoveSessionResponse_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SetAccountContactRqst;
class SetAccountContactRqstDefaultTypeInternal;
extern SetAccountContactRqstDefaultTypeInternal _SetAccountContactRqst_default_instance_;
class SetAccountContactRsp;
class SetAccountContactRspDefaultTypeInternal;
extern SetAccountContactRspDefaultTypeInternal _SetAccountContactRsp_default_instance_;
class SetAccountPasswordRqst;
class SetAccountPasswordRqstDefaultTypeInternal;
extern SetAccountPasswordRqstDefaultTypeInternal _SetAccountPasswordRqst_default_instance_;
class SetAccountPasswordRsp;
class SetAccountPasswordRspDefaultTypeInternal;
extern SetAccountPasswordRspDefaultTypeInternal _SetAccountPasswordRsp_default_instance_;
class SetEmailRequest;
class SetEmailRequestDefaultTypeInternal;
extern SetEmailRequestDefaultTypeInternal _SetEmailRequest_default_instance_;
class SetEmailResponse;
class SetEmailResponseDefaultTypeInternal;
extern SetEmailResponseDefaultTypeInternal _SetEmailResponse_default_instance_;
class SetPackageBundleRequest;
class SetPackageBundleRequestDefaultTypeInternal;
extern SetPackageBundleRequestDefaultTypeInternal _SetPackageBundleRequest_default_instance_;
class SetPackageBundleResponse;
class SetPackageBundleResponseDefaultTypeInternal;
extern SetPackageBundleResponseDefaultTypeInternal _SetPackageBundleResponse_default_instance_;
class SetPackageDescriptorRequest;
class SetPackageDescriptorRequestDefaultTypeInternal;
extern SetPackageDescriptorRequestDefaultTypeInternal _SetPackageDescriptorRequest_default_instance_;
class SetPackageDescriptorResponse;
class SetPackageDescriptorResponseDefaultTypeInternal;
extern SetPackageDescriptorResponseDefaultTypeInternal _SetPackageDescriptorResponse_default_instance_;
class UpdateApplicationRqst;
class UpdateApplicationRqstDefaultTypeInternal;
extern UpdateApplicationRqstDefaultTypeInternal _UpdateApplicationRqst_default_instance_;
class UpdateApplicationRsp;
class UpdateApplicationRspDefaultTypeInternal;
extern UpdateApplicationRspDefaultTypeInternal _UpdateApplicationRsp_default_instance_;
class UpdateGroupRqst;
class UpdateGroupRqstDefaultTypeInternal;
extern UpdateGroupRqstDefaultTypeInternal _UpdateGroupRqst_default_instance_;
class UpdateGroupRsp;
class UpdateGroupRspDefaultTypeInternal;
extern UpdateGroupRspDefaultTypeInternal _UpdateGroupRsp_default_instance_;
class UpdateOrganizationRqst;
class UpdateOrganizationRqstDefaultTypeInternal;
extern UpdateOrganizationRqstDefaultTypeInternal _UpdateOrganizationRqst_default_instance_;
class UpdateOrganizationRsp;
class UpdateOrganizationRspDefaultTypeInternal;
extern UpdateOrganizationRspDefaultTypeInternal _UpdateOrganizationRsp_default_instance_;
class UpdateSessionRequest;
class UpdateSessionRequestDefaultTypeInternal;
extern UpdateSessionRequestDefaultTypeInternal _UpdateSessionRequest_default_instance_;
class UpdateSessionResponse;
class UpdateSessionResponseDefaultTypeInternal;
extern UpdateSessionResponseDefaultTypeInternal _UpdateSessionResponse_default_instance_;
}  // namespace resource
namespace google {
namespace protobuf {
template<> ::resource::AcceptPeerRqst* Arena::CreateMaybeMessage<::resource::AcceptPeerRqst>(Arena*);
template<> ::resource::AcceptPeerRsp* Arena::CreateMaybeMessage<::resource::AcceptPeerRsp>(Arena*);
template<> ::resource::Account* Arena::CreateMaybeMessage<::resource::Account>(Arena*);
template<> ::resource::AccountExistRqst* Arena::CreateMaybeMessage<::resource::AccountExistRqst>(Arena*);
template<> ::resource::AccountExistRsp* Arena::CreateMaybeMessage<::resource::AccountExistRsp>(Arena*);
template<> ::resource::AddAccountRoleRqst* Arena::CreateMaybeMessage<::resource::AddAccountRoleRqst>(Arena*);
template<> ::resource::AddAccountRoleRsp* Arena::CreateMaybeMessage<::resource::AddAccountRoleRsp>(Arena*);
template<> ::resource::AddApplicationActionsRqst* Arena::CreateMaybeMessage<::resource::AddApplicationActionsRqst>(Arena*);
template<> ::resource::AddApplicationActionsRsp* Arena::CreateMaybeMessage<::resource::AddApplicationActionsRsp>(Arena*);
template<> ::resource::AddGroupMemberAccountRqst* Arena::CreateMaybeMessage<::resource::AddGroupMemberAccountRqst>(Arena*);
template<> ::resource::AddGroupMemberAccountRsp* Arena::CreateMaybeMessage<::resource::AddGroupMemberAccountRsp>(Arena*);
template<> ::resource::AddOrganizationAccountRqst* Arena::CreateMaybeMessage<::resource::AddOrganizationAccountRqst>(Arena*);
template<> ::resource::AddOrganizationAccountRsp* Arena::CreateMaybeMessage<::resource::AddOrganizationAccountRsp>(Arena*);
template<> ::resource::AddOrganizationApplicationRqst* Arena::CreateMaybeMessage<::resource::AddOrganizationApplicationRqst>(Arena*);
template<> ::resource::AddOrganizationApplicationRsp* Arena::CreateMaybeMessage<::resource::AddOrganizationApplicationRsp>(Arena*);
template<> ::resource::AddOrganizationGroupRqst* Arena::CreateMaybeMessage<::resource::AddOrganizationGroupRqst>(Arena*);
template<> ::resource::AddOrganizationGroupRsp* Arena::CreateMaybeMessage<::resource::AddOrganizationGroupRsp>(Arena*);
template<> ::resource::AddOrganizationRoleRqst* Arena::CreateMaybeMessage<::resource::AddOrganizationRoleRqst>(Arena*);
template<> ::resource::AddOrganizationRoleRsp* Arena::CreateMaybeMessage<::resource::AddOrganizationRoleRsp>(Arena*);
template<> ::resource::AddPeerActionsRqst* Arena::CreateMaybeMessage<::resource::AddPeerActionsRqst>(Arena*);
template<> ::resource::AddPeerActionsRsp* Arena::CreateMaybeMessage<::resource::AddPeerActionsRsp>(Arena*);
template<> ::resource::AddRoleActionsRqst* Arena::CreateMaybeMessage<::resource::AddRoleActionsRqst>(Arena*);
template<> ::resource::AddRoleActionsRsp* Arena::CreateMaybeMessage<::resource::AddRoleActionsRsp>(Arena*);
template<> ::resource::Application* Arena::CreateMaybeMessage<::resource::Application>(Arena*);
template<> ::resource::ClearAllNotificationsRqst* Arena::CreateMaybeMessage<::resource::ClearAllNotificationsRqst>(Arena*);
template<> ::resource::ClearAllNotificationsRsp* Arena::CreateMaybeMessage<::resource::ClearAllNotificationsRsp>(Arena*);
template<> ::resource::ClearNotificationsByTypeRqst* Arena::CreateMaybeMessage<::resource::ClearNotificationsByTypeRqst>(Arena*);
template<> ::resource::ClearNotificationsByTypeRsp* Arena::CreateMaybeMessage<::resource::ClearNotificationsByTypeRsp>(Arena*);
template<> ::resource::Contact* Arena::CreateMaybeMessage<::resource::Contact>(Arena*);
template<> ::resource::CreateApplicationRqst* Arena::CreateMaybeMessage<::resource::CreateApplicationRqst>(Arena*);
template<> ::resource::CreateApplicationRsp* Arena::CreateMaybeMessage<::resource::CreateApplicationRsp>(Arena*);
template<> ::resource::CreateGroupRqst* Arena::CreateMaybeMessage<::resource::CreateGroupRqst>(Arena*);
template<> ::resource::CreateGroupRsp* Arena::CreateMaybeMessage<::resource::CreateGroupRsp>(Arena*);
template<> ::resource::CreateNotificationRqst* Arena::CreateMaybeMessage<::resource::CreateNotificationRqst>(Arena*);
template<> ::resource::CreateNotificationRsp* Arena::CreateMaybeMessage<::resource::CreateNotificationRsp>(Arena*);
template<> ::resource::CreateOrganizationRqst* Arena::CreateMaybeMessage<::resource::CreateOrganizationRqst>(Arena*);
template<> ::resource::CreateOrganizationRsp* Arena::CreateMaybeMessage<::resource::CreateOrganizationRsp>(Arena*);
template<> ::resource::CreateRoleRqst* Arena::CreateMaybeMessage<::resource::CreateRoleRqst>(Arena*);
template<> ::resource::CreateRoleRsp* Arena::CreateMaybeMessage<::resource::CreateRoleRsp>(Arena*);
template<> ::resource::DeleteAccountRqst* Arena::CreateMaybeMessage<::resource::DeleteAccountRqst>(Arena*);
template<> ::resource::DeleteAccountRsp* Arena::CreateMaybeMessage<::resource::DeleteAccountRsp>(Arena*);
template<> ::resource::DeleteApplicationRqst* Arena::CreateMaybeMessage<::resource::DeleteApplicationRqst>(Arena*);
template<> ::resource::DeleteApplicationRsp* Arena::CreateMaybeMessage<::resource::DeleteApplicationRsp>(Arena*);
template<> ::resource::DeleteGroupRqst* Arena::CreateMaybeMessage<::resource::DeleteGroupRqst>(Arena*);
template<> ::resource::DeleteGroupRsp* Arena::CreateMaybeMessage<::resource::DeleteGroupRsp>(Arena*);
template<> ::resource::DeleteNotificationRqst* Arena::CreateMaybeMessage<::resource::DeleteNotificationRqst>(Arena*);
template<> ::resource::DeleteNotificationRsp* Arena::CreateMaybeMessage<::resource::DeleteNotificationRsp>(Arena*);
template<> ::resource::DeleteOrganizationRqst* Arena::CreateMaybeMessage<::resource::DeleteOrganizationRqst>(Arena*);
template<> ::resource::DeleteOrganizationRsp* Arena::CreateMaybeMessage<::resource::DeleteOrganizationRsp>(Arena*);
template<> ::resource::DeletePeerRqst* Arena::CreateMaybeMessage<::resource::DeletePeerRqst>(Arena*);
template<> ::resource::DeletePeerRsp* Arena::CreateMaybeMessage<::resource::DeletePeerRsp>(Arena*);
template<> ::resource::DeleteRoleRqst* Arena::CreateMaybeMessage<::resource::DeleteRoleRqst>(Arena*);
template<> ::resource::DeleteRoleRsp* Arena::CreateMaybeMessage<::resource::DeleteRoleRsp>(Arena*);
template<> ::resource::FindPackagesDescriptorRequest* Arena::CreateMaybeMessage<::resource::FindPackagesDescriptorRequest>(Arena*);
template<> ::resource::FindPackagesDescriptorResponse* Arena::CreateMaybeMessage<::resource::FindPackagesDescriptorResponse>(Arena*);
template<> ::resource::GetAccountRqst* Arena::CreateMaybeMessage<::resource::GetAccountRqst>(Arena*);
template<> ::resource::GetAccountRsp* Arena::CreateMaybeMessage<::resource::GetAccountRsp>(Arena*);
template<> ::resource::GetAccountsRqst* Arena::CreateMaybeMessage<::resource::GetAccountsRqst>(Arena*);
template<> ::resource::GetAccountsRsp* Arena::CreateMaybeMessage<::resource::GetAccountsRsp>(Arena*);
template<> ::resource::GetApplicationAliasRqst* Arena::CreateMaybeMessage<::resource::GetApplicationAliasRqst>(Arena*);
template<> ::resource::GetApplicationAliasRsp* Arena::CreateMaybeMessage<::resource::GetApplicationAliasRsp>(Arena*);
template<> ::resource::GetApplicationIconRqst* Arena::CreateMaybeMessage<::resource::GetApplicationIconRqst>(Arena*);
template<> ::resource::GetApplicationIconRsp* Arena::CreateMaybeMessage<::resource::GetApplicationIconRsp>(Arena*);
template<> ::resource::GetApplicationVersionRqst* Arena::CreateMaybeMessage<::resource::GetApplicationVersionRqst>(Arena*);
template<> ::resource::GetApplicationVersionRsp* Arena::CreateMaybeMessage<::resource::GetApplicationVersionRsp>(Arena*);
template<> ::resource::GetApplicationsRqst* Arena::CreateMaybeMessage<::resource::GetApplicationsRqst>(Arena*);
template<> ::resource::GetApplicationsRsp* Arena::CreateMaybeMessage<::resource::GetApplicationsRsp>(Arena*);
template<> ::resource::GetGroupsRqst* Arena::CreateMaybeMessage<::resource::GetGroupsRqst>(Arena*);
template<> ::resource::GetGroupsRsp* Arena::CreateMaybeMessage<::resource::GetGroupsRsp>(Arena*);
template<> ::resource::GetNotificationsRqst* Arena::CreateMaybeMessage<::resource::GetNotificationsRqst>(Arena*);
template<> ::resource::GetNotificationsRsp* Arena::CreateMaybeMessage<::resource::GetNotificationsRsp>(Arena*);
template<> ::resource::GetOrganizationsRqst* Arena::CreateMaybeMessage<::resource::GetOrganizationsRqst>(Arena*);
template<> ::resource::GetOrganizationsRsp* Arena::CreateMaybeMessage<::resource::GetOrganizationsRsp>(Arena*);
template<> ::resource::GetPackageBundleChecksumRequest* Arena::CreateMaybeMessage<::resource::GetPackageBundleChecksumRequest>(Arena*);
template<> ::resource::GetPackageBundleChecksumResponse* Arena::CreateMaybeMessage<::resource::GetPackageBundleChecksumResponse>(Arena*);
template<> ::resource::GetPackageDescriptorRequest* Arena::CreateMaybeMessage<::resource::GetPackageDescriptorRequest>(Arena*);
template<> ::resource::GetPackageDescriptorResponse* Arena::CreateMaybeMessage<::resource::GetPackageDescriptorResponse>(Arena*);
template<> ::resource::GetPackagesDescriptorRequest* Arena::CreateMaybeMessage<::resource::GetPackagesDescriptorRequest>(Arena*);
template<> ::resource::GetPackagesDescriptorResponse* Arena::CreateMaybeMessage<::resource::GetPackagesDescriptorResponse>(Arena*);
template<> ::resource::GetPeerApprovalStateRqst* Arena::CreateMaybeMessage<::resource::GetPeerApprovalStateRqst>(Arena*);
template<> ::resource::GetPeerApprovalStateRsp* Arena::CreateMaybeMessage<::resource::GetPeerApprovalStateRsp>(Arena*);
template<> ::resource::GetPeerPublicKeyRqst* Arena::CreateMaybeMessage<::resource::GetPeerPublicKeyRqst>(Arena*);
template<> ::resource::GetPeerPublicKeyRsp* Arena::CreateMaybeMessage<::resource::GetPeerPublicKeyRsp>(Arena*);
template<> ::resource::GetPeersRqst* Arena::CreateMaybeMessage<::resource::GetPeersRqst>(Arena*);
template<> ::resource::GetPeersRsp* Arena::CreateMaybeMessage<::resource::GetPeersRsp>(Arena*);
template<> ::resource::GetRolesRqst* Arena::CreateMaybeMessage<::resource::GetRolesRqst>(Arena*);
template<> ::resource::GetRolesRsp* Arena::CreateMaybeMessage<::resource::GetRolesRsp>(Arena*);
template<> ::resource::GetSessionRequest* Arena::CreateMaybeMessage<::resource::GetSessionRequest>(Arena*);
template<> ::resource::GetSessionResponse* Arena::CreateMaybeMessage<::resource::GetSessionResponse>(Arena*);
template<> ::resource::GetSessionsRequest* Arena::CreateMaybeMessage<::resource::GetSessionsRequest>(Arena*);
template<> ::resource::GetSessionsResponse* Arena::CreateMaybeMessage<::resource::GetSessionsResponse>(Arena*);
template<> ::resource::Group* Arena::CreateMaybeMessage<::resource::Group>(Arena*);
template<> ::resource::IsOrgnanizationMemberRqst* Arena::CreateMaybeMessage<::resource::IsOrgnanizationMemberRqst>(Arena*);
template<> ::resource::IsOrgnanizationMemberRsp* Arena::CreateMaybeMessage<::resource::IsOrgnanizationMemberRsp>(Arena*);
template<> ::resource::Notification* Arena::CreateMaybeMessage<::resource::Notification>(Arena*);
template<> ::resource::Organization* Arena::CreateMaybeMessage<::resource::Organization>(Arena*);
template<> ::resource::PackageBundle* Arena::CreateMaybeMessage<::resource::PackageBundle>(Arena*);
template<> ::resource::PackageDescriptor* Arena::CreateMaybeMessage<::resource::PackageDescriptor>(Arena*);
template<> ::resource::Peer* Arena::CreateMaybeMessage<::resource::Peer>(Arena*);
template<> ::resource::RegisterAccountRqst* Arena::CreateMaybeMessage<::resource::RegisterAccountRqst>(Arena*);
template<> ::resource::RegisterAccountRsp* Arena::CreateMaybeMessage<::resource::RegisterAccountRsp>(Arena*);
template<> ::resource::RegisterPeerRqst* Arena::CreateMaybeMessage<::resource::RegisterPeerRqst>(Arena*);
template<> ::resource::RegisterPeerRsp* Arena::CreateMaybeMessage<::resource::RegisterPeerRsp>(Arena*);
template<> ::resource::RejectPeerRqst* Arena::CreateMaybeMessage<::resource::RejectPeerRqst>(Arena*);
template<> ::resource::RejectPeerRsp* Arena::CreateMaybeMessage<::resource::RejectPeerRsp>(Arena*);
template<> ::resource::RemoveAccountRoleRqst* Arena::CreateMaybeMessage<::resource::RemoveAccountRoleRqst>(Arena*);
template<> ::resource::RemoveAccountRoleRsp* Arena::CreateMaybeMessage<::resource::RemoveAccountRoleRsp>(Arena*);
template<> ::resource::RemoveApplicationActionRqst* Arena::CreateMaybeMessage<::resource::RemoveApplicationActionRqst>(Arena*);
template<> ::resource::RemoveApplicationActionRsp* Arena::CreateMaybeMessage<::resource::RemoveApplicationActionRsp>(Arena*);
template<> ::resource::RemoveApplicationsActionRqst* Arena::CreateMaybeMessage<::resource::RemoveApplicationsActionRqst>(Arena*);
template<> ::resource::RemoveApplicationsActionRsp* Arena::CreateMaybeMessage<::resource::RemoveApplicationsActionRsp>(Arena*);
template<> ::resource::RemoveGroupMemberAccountRqst* Arena::CreateMaybeMessage<::resource::RemoveGroupMemberAccountRqst>(Arena*);
template<> ::resource::RemoveGroupMemberAccountRsp* Arena::CreateMaybeMessage<::resource::RemoveGroupMemberAccountRsp>(Arena*);
template<> ::resource::RemoveOrganizationAccountRqst* Arena::CreateMaybeMessage<::resource::RemoveOrganizationAccountRqst>(Arena*);
template<> ::resource::RemoveOrganizationAccountRsp* Arena::CreateMaybeMessage<::resource::RemoveOrganizationAccountRsp>(Arena*);
template<> ::resource::RemoveOrganizationApplicationRqst* Arena::CreateMaybeMessage<::resource::RemoveOrganizationApplicationRqst>(Arena*);
template<> ::resource::RemoveOrganizationApplicationRsp* Arena::CreateMaybeMessage<::resource::RemoveOrganizationApplicationRsp>(Arena*);
template<> ::resource::RemoveOrganizationGroupRqst* Arena::CreateMaybeMessage<::resource::RemoveOrganizationGroupRqst>(Arena*);
template<> ::resource::RemoveOrganizationGroupRsp* Arena::CreateMaybeMessage<::resource::RemoveOrganizationGroupRsp>(Arena*);
template<> ::resource::RemoveOrganizationRoleRqst* Arena::CreateMaybeMessage<::resource::RemoveOrganizationRoleRqst>(Arena*);
template<> ::resource::RemoveOrganizationRoleRsp* Arena::CreateMaybeMessage<::resource::RemoveOrganizationRoleRsp>(Arena*);
template<> ::resource::RemovePeerActionRqst* Arena::CreateMaybeMessage<::resource::RemovePeerActionRqst>(Arena*);
template<> ::resource::RemovePeerActionRsp* Arena::CreateMaybeMessage<::resource::RemovePeerActionRsp>(Arena*);
template<> ::resource::RemovePeersActionRqst* Arena::CreateMaybeMessage<::resource::RemovePeersActionRqst>(Arena*);
template<> ::resource::RemovePeersActionRsp* Arena::CreateMaybeMessage<::resource::RemovePeersActionRsp>(Arena*);
template<> ::resource::RemoveRoleActionRqst* Arena::CreateMaybeMessage<::resource::RemoveRoleActionRqst>(Arena*);
template<> ::resource::RemoveRoleActionRsp* Arena::CreateMaybeMessage<::resource::RemoveRoleActionRsp>(Arena*);
template<> ::resource::RemoveRolesActionRqst* Arena::CreateMaybeMessage<::resource::RemoveRolesActionRqst>(Arena*);
template<> ::resource::RemoveRolesActionRsp* Arena::CreateMaybeMessage<::resource::RemoveRolesActionRsp>(Arena*);
template<> ::resource::RemoveSessionRequest* Arena::CreateMaybeMessage<::resource::RemoveSessionRequest>(Arena*);
template<> ::resource::RemoveSessionResponse* Arena::CreateMaybeMessage<::resource::RemoveSessionResponse>(Arena*);
template<> ::resource::Role* Arena::CreateMaybeMessage<::resource::Role>(Arena*);
template<> ::resource::Session* Arena::CreateMaybeMessage<::resource::Session>(Arena*);
template<> ::resource::SetAccountContactRqst* Arena::CreateMaybeMessage<::resource::SetAccountContactRqst>(Arena*);
template<> ::resource::SetAccountContactRsp* Arena::CreateMaybeMessage<::resource::SetAccountContactRsp>(Arena*);
template<> ::resource::SetAccountPasswordRqst* Arena::CreateMaybeMessage<::resource::SetAccountPasswordRqst>(Arena*);
template<> ::resource::SetAccountPasswordRsp* Arena::CreateMaybeMessage<::resource::SetAccountPasswordRsp>(Arena*);
template<> ::resource::SetEmailRequest* Arena::CreateMaybeMessage<::resource::SetEmailRequest>(Arena*);
template<> ::resource::SetEmailResponse* Arena::CreateMaybeMessage<::resource::SetEmailResponse>(Arena*);
template<> ::resource::SetPackageBundleRequest* Arena::CreateMaybeMessage<::resource::SetPackageBundleRequest>(Arena*);
template<> ::resource::SetPackageBundleResponse* Arena::CreateMaybeMessage<::resource::SetPackageBundleResponse>(Arena*);
template<> ::resource::SetPackageDescriptorRequest* Arena::CreateMaybeMessage<::resource::SetPackageDescriptorRequest>(Arena*);
template<> ::resource::SetPackageDescriptorResponse* Arena::CreateMaybeMessage<::resource::SetPackageDescriptorResponse>(Arena*);
template<> ::resource::UpdateApplicationRqst* Arena::CreateMaybeMessage<::resource::UpdateApplicationRqst>(Arena*);
template<> ::resource::UpdateApplicationRsp* Arena::CreateMaybeMessage<::resource::UpdateApplicationRsp>(Arena*);
template<> ::resource::UpdateGroupRqst* Arena::CreateMaybeMessage<::resource::UpdateGroupRqst>(Arena*);
template<> ::resource::UpdateGroupRsp* Arena::CreateMaybeMessage<::resource::UpdateGroupRsp>(Arena*);
template<> ::resource::UpdateOrganizationRqst* Arena::CreateMaybeMessage<::resource::UpdateOrganizationRqst>(Arena*);
template<> ::resource::UpdateOrganizationRsp* Arena::CreateMaybeMessage<::resource::UpdateOrganizationRsp>(Arena*);
template<> ::resource::UpdateSessionRequest* Arena::CreateMaybeMessage<::resource::UpdateSessionRequest>(Arena*);
template<> ::resource::UpdateSessionResponse* Arena::CreateMaybeMessage<::resource::UpdateSessionResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace resource {

enum PackageType {
  UNKNOW_TYPE = 0,
  SERVICE_TYPE = 1,
  APPLICATION_TYPE = 2,
  PackageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PackageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PackageType_IsValid(int value);
const PackageType PackageType_MIN = UNKNOW_TYPE;
const PackageType PackageType_MAX = APPLICATION_TYPE;
const int PackageType_ARRAYSIZE = PackageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PackageType_descriptor();
inline const ::std::string& PackageType_Name(PackageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PackageType_descriptor(), value);
}
inline bool PackageType_Parse(
    const ::std::string& name, PackageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PackageType>(
    PackageType_descriptor(), name, value);
}
enum PeerApprovalState {
  PEER_PENDING = 0,
  PEER_ACCETEP = 1,
  PEER_REJECTED = 2,
  PeerApprovalState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PeerApprovalState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PeerApprovalState_IsValid(int value);
const PeerApprovalState PeerApprovalState_MIN = PEER_PENDING;
const PeerApprovalState PeerApprovalState_MAX = PEER_REJECTED;
const int PeerApprovalState_ARRAYSIZE = PeerApprovalState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerApprovalState_descriptor();
inline const ::std::string& PeerApprovalState_Name(PeerApprovalState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerApprovalState_descriptor(), value);
}
inline bool PeerApprovalState_Parse(
    const ::std::string& name, PeerApprovalState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerApprovalState>(
    PeerApprovalState_descriptor(), name, value);
}
enum NotificationType {
  USER_NOTIFICATION = 0,
  APPLICATION_NOTIFICATION = 1,
  SYSTEM_NOTIFICATION = 2,
  NotificationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NotificationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NotificationType_IsValid(int value);
const NotificationType NotificationType_MIN = USER_NOTIFICATION;
const NotificationType NotificationType_MAX = SYSTEM_NOTIFICATION;
const int NotificationType_ARRAYSIZE = NotificationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotificationType_descriptor();
inline const ::std::string& NotificationType_Name(NotificationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotificationType_descriptor(), value);
}
inline bool NotificationType_Parse(
    const ::std::string& name, NotificationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotificationType>(
    NotificationType_descriptor(), name, value);
}
enum SessionState {
  ONLINE = 0,
  OFFLINE = 1,
  AWAY = 2,
  SessionState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SessionState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SessionState_IsValid(int value);
const SessionState SessionState_MIN = ONLINE;
const SessionState SessionState_MAX = AWAY;
const int SessionState_ARRAYSIZE = SessionState_MAX + 1;

const ::google::protobuf::EnumDescriptor* SessionState_descriptor();
inline const ::std::string& SessionState_Name(SessionState value) {
  return ::google::protobuf::internal::NameOfEnum(
    SessionState_descriptor(), value);
}
inline bool SessionState_Parse(
    const ::std::string& name, SessionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SessionState>(
    SessionState_descriptor(), name, value);
}
// ===================================================================

class PackageBundle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.PackageBundle) */ {
 public:
  PackageBundle();
  virtual ~PackageBundle();

  PackageBundle(const PackageBundle& from);

  inline PackageBundle& operator=(const PackageBundle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackageBundle(PackageBundle&& from) noexcept
    : PackageBundle() {
    *this = ::std::move(from);
  }

  inline PackageBundle& operator=(PackageBundle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageBundle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageBundle* internal_default_instance() {
    return reinterpret_cast<const PackageBundle*>(
               &_PackageBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PackageBundle* other);
  friend void swap(PackageBundle& a, PackageBundle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackageBundle* New() const final {
    return CreateMaybeMessage<PackageBundle>(NULL);
  }

  PackageBundle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackageBundle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackageBundle& from);
  void MergeFrom(const PackageBundle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageBundle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string checksum = 2;
  void clear_checksum();
  static const int kChecksumFieldNumber = 2;
  const ::std::string& checksum() const;
  void set_checksum(const ::std::string& value);
  #if LANG_CXX11
  void set_checksum(::std::string&& value);
  #endif
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  ::std::string* mutable_checksum();
  ::std::string* release_checksum();
  void set_allocated_checksum(::std::string* checksum);

  // string plaform = 3;
  void clear_plaform();
  static const int kPlaformFieldNumber = 3;
  const ::std::string& plaform() const;
  void set_plaform(const ::std::string& value);
  #if LANG_CXX11
  void set_plaform(::std::string&& value);
  #endif
  void set_plaform(const char* value);
  void set_plaform(const char* value, size_t size);
  ::std::string* mutable_plaform();
  ::std::string* release_plaform();
  void set_allocated_plaform(::std::string* plaform);

  // bytes Binairies = 6;
  void clear_binairies();
  static const int kBinairiesFieldNumber = 6;
  const ::std::string& binairies() const;
  void set_binairies(const ::std::string& value);
  #if LANG_CXX11
  void set_binairies(::std::string&& value);
  #endif
  void set_binairies(const char* value);
  void set_binairies(const void* value, size_t size);
  ::std::string* mutable_binairies();
  ::std::string* release_binairies();
  void set_allocated_binairies(::std::string* binairies);

  // string mac = 7;
  void clear_mac();
  static const int kMacFieldNumber = 7;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // .resource.PackageDescriptor packageDescriptor = 1;
  bool has_packagedescriptor() const;
  void clear_packagedescriptor();
  static const int kPackageDescriptorFieldNumber = 1;
  private:
  const ::resource::PackageDescriptor& _internal_packagedescriptor() const;
  public:
  const ::resource::PackageDescriptor& packagedescriptor() const;
  ::resource::PackageDescriptor* release_packagedescriptor();
  ::resource::PackageDescriptor* mutable_packagedescriptor();
  void set_allocated_packagedescriptor(::resource::PackageDescriptor* packagedescriptor);

  // int64 modified = 5;
  void clear_modified();
  static const int kModifiedFieldNumber = 5;
  ::google::protobuf::int64 modified() const;
  void set_modified(::google::protobuf::int64 value);

  // int32 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:resource.PackageBundle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr checksum_;
  ::google::protobuf::internal::ArenaStringPtr plaform_;
  ::google::protobuf::internal::ArenaStringPtr binairies_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::resource::PackageDescriptor* packagedescriptor_;
  ::google::protobuf::int64 modified_;
  ::google::protobuf::int32 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPackageBundleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.SetPackageBundleRequest) */ {
 public:
  SetPackageBundleRequest();
  virtual ~SetPackageBundleRequest();

  SetPackageBundleRequest(const SetPackageBundleRequest& from);

  inline SetPackageBundleRequest& operator=(const SetPackageBundleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetPackageBundleRequest(SetPackageBundleRequest&& from) noexcept
    : SetPackageBundleRequest() {
    *this = ::std::move(from);
  }

  inline SetPackageBundleRequest& operator=(SetPackageBundleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPackageBundleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPackageBundleRequest* internal_default_instance() {
    return reinterpret_cast<const SetPackageBundleRequest*>(
               &_SetPackageBundleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SetPackageBundleRequest* other);
  friend void swap(SetPackageBundleRequest& a, SetPackageBundleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPackageBundleRequest* New() const final {
    return CreateMaybeMessage<SetPackageBundleRequest>(NULL);
  }

  SetPackageBundleRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetPackageBundleRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetPackageBundleRequest& from);
  void MergeFrom(const SetPackageBundleRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPackageBundleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.PackageBundle bundle = 1;
  bool has_bundle() const;
  void clear_bundle();
  static const int kBundleFieldNumber = 1;
  private:
  const ::resource::PackageBundle& _internal_bundle() const;
  public:
  const ::resource::PackageBundle& bundle() const;
  ::resource::PackageBundle* release_bundle();
  ::resource::PackageBundle* mutable_bundle();
  void set_allocated_bundle(::resource::PackageBundle* bundle);

  // @@protoc_insertion_point(class_scope:resource.SetPackageBundleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::PackageBundle* bundle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPackageBundleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.SetPackageBundleResponse) */ {
 public:
  SetPackageBundleResponse();
  virtual ~SetPackageBundleResponse();

  SetPackageBundleResponse(const SetPackageBundleResponse& from);

  inline SetPackageBundleResponse& operator=(const SetPackageBundleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetPackageBundleResponse(SetPackageBundleResponse&& from) noexcept
    : SetPackageBundleResponse() {
    *this = ::std::move(from);
  }

  inline SetPackageBundleResponse& operator=(SetPackageBundleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPackageBundleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPackageBundleResponse* internal_default_instance() {
    return reinterpret_cast<const SetPackageBundleResponse*>(
               &_SetPackageBundleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SetPackageBundleResponse* other);
  friend void swap(SetPackageBundleResponse& a, SetPackageBundleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPackageBundleResponse* New() const final {
    return CreateMaybeMessage<SetPackageBundleResponse>(NULL);
  }

  SetPackageBundleResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetPackageBundleResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetPackageBundleResponse& from);
  void MergeFrom(const SetPackageBundleResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPackageBundleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.SetPackageBundleResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPackageBundleChecksumRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPackageBundleChecksumRequest) */ {
 public:
  GetPackageBundleChecksumRequest();
  virtual ~GetPackageBundleChecksumRequest();

  GetPackageBundleChecksumRequest(const GetPackageBundleChecksumRequest& from);

  inline GetPackageBundleChecksumRequest& operator=(const GetPackageBundleChecksumRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPackageBundleChecksumRequest(GetPackageBundleChecksumRequest&& from) noexcept
    : GetPackageBundleChecksumRequest() {
    *this = ::std::move(from);
  }

  inline GetPackageBundleChecksumRequest& operator=(GetPackageBundleChecksumRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPackageBundleChecksumRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPackageBundleChecksumRequest* internal_default_instance() {
    return reinterpret_cast<const GetPackageBundleChecksumRequest*>(
               &_GetPackageBundleChecksumRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetPackageBundleChecksumRequest* other);
  friend void swap(GetPackageBundleChecksumRequest& a, GetPackageBundleChecksumRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPackageBundleChecksumRequest* New() const final {
    return CreateMaybeMessage<GetPackageBundleChecksumRequest>(NULL);
  }

  GetPackageBundleChecksumRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPackageBundleChecksumRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPackageBundleChecksumRequest& from);
  void MergeFrom(const GetPackageBundleChecksumRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPackageBundleChecksumRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:resource.GetPackageBundleChecksumRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPackageBundleChecksumResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPackageBundleChecksumResponse) */ {
 public:
  GetPackageBundleChecksumResponse();
  virtual ~GetPackageBundleChecksumResponse();

  GetPackageBundleChecksumResponse(const GetPackageBundleChecksumResponse& from);

  inline GetPackageBundleChecksumResponse& operator=(const GetPackageBundleChecksumResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPackageBundleChecksumResponse(GetPackageBundleChecksumResponse&& from) noexcept
    : GetPackageBundleChecksumResponse() {
    *this = ::std::move(from);
  }

  inline GetPackageBundleChecksumResponse& operator=(GetPackageBundleChecksumResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPackageBundleChecksumResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPackageBundleChecksumResponse* internal_default_instance() {
    return reinterpret_cast<const GetPackageBundleChecksumResponse*>(
               &_GetPackageBundleChecksumResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetPackageBundleChecksumResponse* other);
  friend void swap(GetPackageBundleChecksumResponse& a, GetPackageBundleChecksumResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPackageBundleChecksumResponse* New() const final {
    return CreateMaybeMessage<GetPackageBundleChecksumResponse>(NULL);
  }

  GetPackageBundleChecksumResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPackageBundleChecksumResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPackageBundleChecksumResponse& from);
  void MergeFrom(const GetPackageBundleChecksumResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPackageBundleChecksumResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string checksum = 1;
  void clear_checksum();
  static const int kChecksumFieldNumber = 1;
  const ::std::string& checksum() const;
  void set_checksum(const ::std::string& value);
  #if LANG_CXX11
  void set_checksum(::std::string&& value);
  #endif
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  ::std::string* mutable_checksum();
  ::std::string* release_checksum();
  void set_allocated_checksum(::std::string* checksum);

  // @@protoc_insertion_point(class_scope:resource.GetPackageBundleChecksumResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr checksum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackageDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.PackageDescriptor) */ {
 public:
  PackageDescriptor();
  virtual ~PackageDescriptor();

  PackageDescriptor(const PackageDescriptor& from);

  inline PackageDescriptor& operator=(const PackageDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackageDescriptor(PackageDescriptor&& from) noexcept
    : PackageDescriptor() {
    *this = ::std::move(from);
  }

  inline PackageDescriptor& operator=(PackageDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageDescriptor* internal_default_instance() {
    return reinterpret_cast<const PackageDescriptor*>(
               &_PackageDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PackageDescriptor* other);
  friend void swap(PackageDescriptor& a, PackageDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackageDescriptor* New() const final {
    return CreateMaybeMessage<PackageDescriptor>(NULL);
  }

  PackageDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackageDescriptor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackageDescriptor& from);
  void MergeFrom(const PackageDescriptor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string repositories = 8;
  int repositories_size() const;
  void clear_repositories();
  static const int kRepositoriesFieldNumber = 8;
  const ::std::string& repositories(int index) const;
  ::std::string* mutable_repositories(int index);
  void set_repositories(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_repositories(int index, ::std::string&& value);
  #endif
  void set_repositories(int index, const char* value);
  void set_repositories(int index, const char* value, size_t size);
  ::std::string* add_repositories();
  void add_repositories(const ::std::string& value);
  #if LANG_CXX11
  void add_repositories(::std::string&& value);
  #endif
  void add_repositories(const char* value);
  void add_repositories(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& repositories() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_repositories();

  // repeated string discoveries = 9;
  int discoveries_size() const;
  void clear_discoveries();
  static const int kDiscoveriesFieldNumber = 9;
  const ::std::string& discoveries(int index) const;
  ::std::string* mutable_discoveries(int index);
  void set_discoveries(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_discoveries(int index, ::std::string&& value);
  #endif
  void set_discoveries(int index, const char* value);
  void set_discoveries(int index, const char* value, size_t size);
  ::std::string* add_discoveries();
  void add_discoveries(const ::std::string& value);
  #if LANG_CXX11
  void add_discoveries(::std::string&& value);
  #endif
  void add_discoveries(const char* value);
  void add_discoveries(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& discoveries() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_discoveries();

  // repeated string keywords = 10;
  int keywords_size() const;
  void clear_keywords();
  static const int kKeywordsFieldNumber = 10;
  const ::std::string& keywords(int index) const;
  ::std::string* mutable_keywords(int index);
  void set_keywords(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keywords(int index, ::std::string&& value);
  #endif
  void set_keywords(int index, const char* value);
  void set_keywords(int index, const char* value, size_t size);
  ::std::string* add_keywords();
  void add_keywords(const ::std::string& value);
  #if LANG_CXX11
  void add_keywords(::std::string&& value);
  #endif
  void add_keywords(const char* value);
  void add_keywords(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keywords() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keywords();

  // repeated string actions = 11;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 11;
  const ::std::string& actions(int index) const;
  ::std::string* mutable_actions(int index);
  void set_actions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_actions(int index, ::std::string&& value);
  #endif
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  ::std::string* add_actions();
  void add_actions(const ::std::string& value);
  #if LANG_CXX11
  void add_actions(::std::string&& value);
  #endif
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& actions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_actions();

  // repeated .resource.Role roles = 12;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 12;
  ::resource::Role* mutable_roles(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::Role >*
      mutable_roles();
  const ::resource::Role& roles(int index) const;
  ::resource::Role* add_roles();
  const ::google::protobuf::RepeatedPtrField< ::resource::Role >&
      roles() const;

  // repeated .resource.Group groups = 13;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 13;
  ::resource::Group* mutable_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::Group >*
      mutable_groups();
  const ::resource::Group& groups(int index) const;
  ::resource::Group* add_groups();
  const ::google::protobuf::RepeatedPtrField< ::resource::Group >&
      groups() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string PublisherID = 4;
  void clear_PublisherID();
  static const int kPublisherIDFieldNumber = 4;
  const ::std::string& PublisherID() const;
  void set_PublisherID(const ::std::string& value);
  #if LANG_CXX11
  void set_PublisherID(::std::string&& value);
  #endif
  void set_PublisherID(const char* value);
  void set_PublisherID(const char* value, size_t size);
  ::std::string* mutable_PublisherID();
  ::std::string* release_PublisherID();
  void set_allocated_PublisherID(::std::string* PublisherID);

  // string version = 6;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string description = 7;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string icon = 14;
  void clear_icon();
  static const int kIconFieldNumber = 14;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // string alias = 15;
  void clear_alias();
  static const int kAliasFieldNumber = 15;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // .resource.PackageType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::resource::PackageType type() const;
  void set_type(::resource::PackageType value);

  // @@protoc_insertion_point(class_scope:resource.PackageDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> repositories_;
  ::google::protobuf::RepeatedPtrField< ::std::string> discoveries_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keywords_;
  ::google::protobuf::RepeatedPtrField< ::std::string> actions_;
  ::google::protobuf::RepeatedPtrField< ::resource::Role > roles_;
  ::google::protobuf::RepeatedPtrField< ::resource::Group > groups_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr PublisherID_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPackageDescriptorRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPackageDescriptorRequest) */ {
 public:
  GetPackageDescriptorRequest();
  virtual ~GetPackageDescriptorRequest();

  GetPackageDescriptorRequest(const GetPackageDescriptorRequest& from);

  inline GetPackageDescriptorRequest& operator=(const GetPackageDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPackageDescriptorRequest(GetPackageDescriptorRequest&& from) noexcept
    : GetPackageDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetPackageDescriptorRequest& operator=(GetPackageDescriptorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPackageDescriptorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPackageDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetPackageDescriptorRequest*>(
               &_GetPackageDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetPackageDescriptorRequest* other);
  friend void swap(GetPackageDescriptorRequest& a, GetPackageDescriptorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPackageDescriptorRequest* New() const final {
    return CreateMaybeMessage<GetPackageDescriptorRequest>(NULL);
  }

  GetPackageDescriptorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPackageDescriptorRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPackageDescriptorRequest& from);
  void MergeFrom(const GetPackageDescriptorRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPackageDescriptorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serviceId = 1;
  void clear_serviceid();
  static const int kServiceIdFieldNumber = 1;
  const ::std::string& serviceid() const;
  void set_serviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_serviceid(::std::string&& value);
  #endif
  void set_serviceid(const char* value);
  void set_serviceid(const char* value, size_t size);
  ::std::string* mutable_serviceid();
  ::std::string* release_serviceid();
  void set_allocated_serviceid(::std::string* serviceid);

  // string PublisherID = 2;
  void clear_PublisherID();
  static const int kPublisherIDFieldNumber = 2;
  const ::std::string& PublisherID() const;
  void set_PublisherID(const ::std::string& value);
  #if LANG_CXX11
  void set_PublisherID(::std::string&& value);
  #endif
  void set_PublisherID(const char* value);
  void set_PublisherID(const char* value, size_t size);
  ::std::string* mutable_PublisherID();
  ::std::string* release_PublisherID();
  void set_allocated_PublisherID(::std::string* PublisherID);

  // @@protoc_insertion_point(class_scope:resource.GetPackageDescriptorRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serviceid_;
  ::google::protobuf::internal::ArenaStringPtr PublisherID_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPackageDescriptorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPackageDescriptorResponse) */ {
 public:
  GetPackageDescriptorResponse();
  virtual ~GetPackageDescriptorResponse();

  GetPackageDescriptorResponse(const GetPackageDescriptorResponse& from);

  inline GetPackageDescriptorResponse& operator=(const GetPackageDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPackageDescriptorResponse(GetPackageDescriptorResponse&& from) noexcept
    : GetPackageDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline GetPackageDescriptorResponse& operator=(GetPackageDescriptorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPackageDescriptorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPackageDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const GetPackageDescriptorResponse*>(
               &_GetPackageDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetPackageDescriptorResponse* other);
  friend void swap(GetPackageDescriptorResponse& a, GetPackageDescriptorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPackageDescriptorResponse* New() const final {
    return CreateMaybeMessage<GetPackageDescriptorResponse>(NULL);
  }

  GetPackageDescriptorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPackageDescriptorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPackageDescriptorResponse& from);
  void MergeFrom(const GetPackageDescriptorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPackageDescriptorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .resource.PackageDescriptor results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::resource::PackageDescriptor* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >*
      mutable_results();
  const ::resource::PackageDescriptor& results(int index) const;
  ::resource::PackageDescriptor* add_results();
  const ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >&
      results() const;

  // @@protoc_insertion_point(class_scope:resource.GetPackageDescriptorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPackagesDescriptorRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPackagesDescriptorRequest) */ {
 public:
  GetPackagesDescriptorRequest();
  virtual ~GetPackagesDescriptorRequest();

  GetPackagesDescriptorRequest(const GetPackagesDescriptorRequest& from);

  inline GetPackagesDescriptorRequest& operator=(const GetPackagesDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPackagesDescriptorRequest(GetPackagesDescriptorRequest&& from) noexcept
    : GetPackagesDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetPackagesDescriptorRequest& operator=(GetPackagesDescriptorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPackagesDescriptorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPackagesDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetPackagesDescriptorRequest*>(
               &_GetPackagesDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetPackagesDescriptorRequest* other);
  friend void swap(GetPackagesDescriptorRequest& a, GetPackagesDescriptorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPackagesDescriptorRequest* New() const final {
    return CreateMaybeMessage<GetPackagesDescriptorRequest>(NULL);
  }

  GetPackagesDescriptorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPackagesDescriptorRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPackagesDescriptorRequest& from);
  void MergeFrom(const GetPackagesDescriptorRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPackagesDescriptorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string options = 2;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::std::string& options() const;
  void set_options(const ::std::string& value);
  #if LANG_CXX11
  void set_options(::std::string&& value);
  #endif
  void set_options(const char* value);
  void set_options(const char* value, size_t size);
  ::std::string* mutable_options();
  ::std::string* release_options();
  void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:resource.GetPackagesDescriptorRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr options_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPackagesDescriptorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPackagesDescriptorResponse) */ {
 public:
  GetPackagesDescriptorResponse();
  virtual ~GetPackagesDescriptorResponse();

  GetPackagesDescriptorResponse(const GetPackagesDescriptorResponse& from);

  inline GetPackagesDescriptorResponse& operator=(const GetPackagesDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPackagesDescriptorResponse(GetPackagesDescriptorResponse&& from) noexcept
    : GetPackagesDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline GetPackagesDescriptorResponse& operator=(GetPackagesDescriptorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPackagesDescriptorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPackagesDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const GetPackagesDescriptorResponse*>(
               &_GetPackagesDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetPackagesDescriptorResponse* other);
  friend void swap(GetPackagesDescriptorResponse& a, GetPackagesDescriptorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPackagesDescriptorResponse* New() const final {
    return CreateMaybeMessage<GetPackagesDescriptorResponse>(NULL);
  }

  GetPackagesDescriptorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPackagesDescriptorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPackagesDescriptorResponse& from);
  void MergeFrom(const GetPackagesDescriptorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPackagesDescriptorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .resource.PackageDescriptor results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::resource::PackageDescriptor* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >*
      mutable_results();
  const ::resource::PackageDescriptor& results(int index) const;
  ::resource::PackageDescriptor* add_results();
  const ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >&
      results() const;

  // @@protoc_insertion_point(class_scope:resource.GetPackagesDescriptorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPackageDescriptorRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.SetPackageDescriptorRequest) */ {
 public:
  SetPackageDescriptorRequest();
  virtual ~SetPackageDescriptorRequest();

  SetPackageDescriptorRequest(const SetPackageDescriptorRequest& from);

  inline SetPackageDescriptorRequest& operator=(const SetPackageDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetPackageDescriptorRequest(SetPackageDescriptorRequest&& from) noexcept
    : SetPackageDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline SetPackageDescriptorRequest& operator=(SetPackageDescriptorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPackageDescriptorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPackageDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const SetPackageDescriptorRequest*>(
               &_SetPackageDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SetPackageDescriptorRequest* other);
  friend void swap(SetPackageDescriptorRequest& a, SetPackageDescriptorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPackageDescriptorRequest* New() const final {
    return CreateMaybeMessage<SetPackageDescriptorRequest>(NULL);
  }

  SetPackageDescriptorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetPackageDescriptorRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetPackageDescriptorRequest& from);
  void MergeFrom(const SetPackageDescriptorRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPackageDescriptorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.PackageDescriptor packageDescriptor = 1;
  bool has_packagedescriptor() const;
  void clear_packagedescriptor();
  static const int kPackageDescriptorFieldNumber = 1;
  private:
  const ::resource::PackageDescriptor& _internal_packagedescriptor() const;
  public:
  const ::resource::PackageDescriptor& packagedescriptor() const;
  ::resource::PackageDescriptor* release_packagedescriptor();
  ::resource::PackageDescriptor* mutable_packagedescriptor();
  void set_allocated_packagedescriptor(::resource::PackageDescriptor* packagedescriptor);

  // @@protoc_insertion_point(class_scope:resource.SetPackageDescriptorRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::PackageDescriptor* packagedescriptor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPackageDescriptorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.SetPackageDescriptorResponse) */ {
 public:
  SetPackageDescriptorResponse();
  virtual ~SetPackageDescriptorResponse();

  SetPackageDescriptorResponse(const SetPackageDescriptorResponse& from);

  inline SetPackageDescriptorResponse& operator=(const SetPackageDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetPackageDescriptorResponse(SetPackageDescriptorResponse&& from) noexcept
    : SetPackageDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline SetPackageDescriptorResponse& operator=(SetPackageDescriptorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPackageDescriptorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPackageDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const SetPackageDescriptorResponse*>(
               &_SetPackageDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SetPackageDescriptorResponse* other);
  friend void swap(SetPackageDescriptorResponse& a, SetPackageDescriptorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPackageDescriptorResponse* New() const final {
    return CreateMaybeMessage<SetPackageDescriptorResponse>(NULL);
  }

  SetPackageDescriptorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetPackageDescriptorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetPackageDescriptorResponse& from);
  void MergeFrom(const SetPackageDescriptorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPackageDescriptorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.SetPackageDescriptorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FindPackagesDescriptorRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.FindPackagesDescriptorRequest) */ {
 public:
  FindPackagesDescriptorRequest();
  virtual ~FindPackagesDescriptorRequest();

  FindPackagesDescriptorRequest(const FindPackagesDescriptorRequest& from);

  inline FindPackagesDescriptorRequest& operator=(const FindPackagesDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FindPackagesDescriptorRequest(FindPackagesDescriptorRequest&& from) noexcept
    : FindPackagesDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline FindPackagesDescriptorRequest& operator=(FindPackagesDescriptorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindPackagesDescriptorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindPackagesDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const FindPackagesDescriptorRequest*>(
               &_FindPackagesDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(FindPackagesDescriptorRequest* other);
  friend void swap(FindPackagesDescriptorRequest& a, FindPackagesDescriptorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FindPackagesDescriptorRequest* New() const final {
    return CreateMaybeMessage<FindPackagesDescriptorRequest>(NULL);
  }

  FindPackagesDescriptorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FindPackagesDescriptorRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FindPackagesDescriptorRequest& from);
  void MergeFrom(const FindPackagesDescriptorRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPackagesDescriptorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string keywords = 1;
  int keywords_size() const;
  void clear_keywords();
  static const int kKeywordsFieldNumber = 1;
  const ::std::string& keywords(int index) const;
  ::std::string* mutable_keywords(int index);
  void set_keywords(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keywords(int index, ::std::string&& value);
  #endif
  void set_keywords(int index, const char* value);
  void set_keywords(int index, const char* value, size_t size);
  ::std::string* add_keywords();
  void add_keywords(const ::std::string& value);
  #if LANG_CXX11
  void add_keywords(::std::string&& value);
  #endif
  void add_keywords(const char* value);
  void add_keywords(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keywords() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keywords();

  // @@protoc_insertion_point(class_scope:resource.FindPackagesDescriptorRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keywords_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FindPackagesDescriptorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.FindPackagesDescriptorResponse) */ {
 public:
  FindPackagesDescriptorResponse();
  virtual ~FindPackagesDescriptorResponse();

  FindPackagesDescriptorResponse(const FindPackagesDescriptorResponse& from);

  inline FindPackagesDescriptorResponse& operator=(const FindPackagesDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FindPackagesDescriptorResponse(FindPackagesDescriptorResponse&& from) noexcept
    : FindPackagesDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline FindPackagesDescriptorResponse& operator=(FindPackagesDescriptorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindPackagesDescriptorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindPackagesDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const FindPackagesDescriptorResponse*>(
               &_FindPackagesDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(FindPackagesDescriptorResponse* other);
  friend void swap(FindPackagesDescriptorResponse& a, FindPackagesDescriptorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FindPackagesDescriptorResponse* New() const final {
    return CreateMaybeMessage<FindPackagesDescriptorResponse>(NULL);
  }

  FindPackagesDescriptorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FindPackagesDescriptorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FindPackagesDescriptorResponse& from);
  void MergeFrom(const FindPackagesDescriptorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPackagesDescriptorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .resource.PackageDescriptor results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::resource::PackageDescriptor* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >*
      mutable_results();
  const ::resource::PackageDescriptor& results(int index) const;
  ::resource::PackageDescriptor* add_results();
  const ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >&
      results() const;

  // @@protoc_insertion_point(class_scope:resource.FindPackagesDescriptorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Role : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Role* other);
  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(NULL);
  }

  Role* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string actions = 5;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 5;
  const ::std::string& actions(int index) const;
  ::std::string* mutable_actions(int index);
  void set_actions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_actions(int index, ::std::string&& value);
  #endif
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  ::std::string* add_actions();
  void add_actions(const ::std::string& value);
  #if LANG_CXX11
  void add_actions(::std::string&& value);
  #endif
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& actions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_actions();

  // repeated string members = 6;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 6;
  const ::std::string& members(int index) const;
  ::std::string* mutable_members(int index);
  void set_members(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_members(int index, ::std::string&& value);
  #endif
  void set_members(int index, const char* value);
  void set_members(int index, const char* value, size_t size);
  ::std::string* add_members();
  void add_members(const ::std::string& value);
  #if LANG_CXX11
  void add_members(::std::string&& value);
  #endif
  void add_members(const char* value);
  void add_members(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& members() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_members();

  // repeated string organizations = 7;
  int organizations_size() const;
  void clear_organizations();
  static const int kOrganizationsFieldNumber = 7;
  const ::std::string& organizations(int index) const;
  ::std::string* mutable_organizations(int index);
  void set_organizations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_organizations(int index, ::std::string&& value);
  #endif
  void set_organizations(int index, const char* value);
  void set_organizations(int index, const char* value, size_t size);
  ::std::string* add_organizations();
  void add_organizations(const ::std::string& value);
  #if LANG_CXX11
  void add_organizations(::std::string&& value);
  #endif
  void add_organizations(const char* value);
  void add_organizations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& organizations() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_organizations();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string domain = 3;
  void clear_domain();
  static const int kDomainFieldNumber = 3;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:resource.Role)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> actions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> members_;
  ::google::protobuf::RepeatedPtrField< ::std::string> organizations_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddRoleActionsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddRoleActionsRqst) */ {
 public:
  AddRoleActionsRqst();
  virtual ~AddRoleActionsRqst();

  AddRoleActionsRqst(const AddRoleActionsRqst& from);

  inline AddRoleActionsRqst& operator=(const AddRoleActionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddRoleActionsRqst(AddRoleActionsRqst&& from) noexcept
    : AddRoleActionsRqst() {
    *this = ::std::move(from);
  }

  inline AddRoleActionsRqst& operator=(AddRoleActionsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRoleActionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRoleActionsRqst* internal_default_instance() {
    return reinterpret_cast<const AddRoleActionsRqst*>(
               &_AddRoleActionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(AddRoleActionsRqst* other);
  friend void swap(AddRoleActionsRqst& a, AddRoleActionsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddRoleActionsRqst* New() const final {
    return CreateMaybeMessage<AddRoleActionsRqst>(NULL);
  }

  AddRoleActionsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddRoleActionsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddRoleActionsRqst& from);
  void MergeFrom(const AddRoleActionsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRoleActionsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string actions = 2;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 2;
  const ::std::string& actions(int index) const;
  ::std::string* mutable_actions(int index);
  void set_actions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_actions(int index, ::std::string&& value);
  #endif
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  ::std::string* add_actions();
  void add_actions(const ::std::string& value);
  #if LANG_CXX11
  void add_actions(::std::string&& value);
  #endif
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& actions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_actions();

  // string roleId = 1;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  const ::std::string& roleid() const;
  void set_roleid(const ::std::string& value);
  #if LANG_CXX11
  void set_roleid(::std::string&& value);
  #endif
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  ::std::string* mutable_roleid();
  ::std::string* release_roleid();
  void set_allocated_roleid(::std::string* roleid);

  // @@protoc_insertion_point(class_scope:resource.AddRoleActionsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> actions_;
  ::google::protobuf::internal::ArenaStringPtr roleid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddRoleActionsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddRoleActionsRsp) */ {
 public:
  AddRoleActionsRsp();
  virtual ~AddRoleActionsRsp();

  AddRoleActionsRsp(const AddRoleActionsRsp& from);

  inline AddRoleActionsRsp& operator=(const AddRoleActionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddRoleActionsRsp(AddRoleActionsRsp&& from) noexcept
    : AddRoleActionsRsp() {
    *this = ::std::move(from);
  }

  inline AddRoleActionsRsp& operator=(AddRoleActionsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRoleActionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRoleActionsRsp* internal_default_instance() {
    return reinterpret_cast<const AddRoleActionsRsp*>(
               &_AddRoleActionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(AddRoleActionsRsp* other);
  friend void swap(AddRoleActionsRsp& a, AddRoleActionsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddRoleActionsRsp* New() const final {
    return CreateMaybeMessage<AddRoleActionsRsp>(NULL);
  }

  AddRoleActionsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddRoleActionsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddRoleActionsRsp& from);
  void MergeFrom(const AddRoleActionsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRoleActionsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.AddRoleActionsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveRoleActionRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveRoleActionRqst) */ {
 public:
  RemoveRoleActionRqst();
  virtual ~RemoveRoleActionRqst();

  RemoveRoleActionRqst(const RemoveRoleActionRqst& from);

  inline RemoveRoleActionRqst& operator=(const RemoveRoleActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveRoleActionRqst(RemoveRoleActionRqst&& from) noexcept
    : RemoveRoleActionRqst() {
    *this = ::std::move(from);
  }

  inline RemoveRoleActionRqst& operator=(RemoveRoleActionRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveRoleActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRoleActionRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveRoleActionRqst*>(
               &_RemoveRoleActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(RemoveRoleActionRqst* other);
  friend void swap(RemoveRoleActionRqst& a, RemoveRoleActionRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveRoleActionRqst* New() const final {
    return CreateMaybeMessage<RemoveRoleActionRqst>(NULL);
  }

  RemoveRoleActionRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRoleActionRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveRoleActionRqst& from);
  void MergeFrom(const RemoveRoleActionRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRoleActionRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roleId = 1;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  const ::std::string& roleid() const;
  void set_roleid(const ::std::string& value);
  #if LANG_CXX11
  void set_roleid(::std::string&& value);
  #endif
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  ::std::string* mutable_roleid();
  ::std::string* release_roleid();
  void set_allocated_roleid(::std::string* roleid);

  // string action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // @@protoc_insertion_point(class_scope:resource.RemoveRoleActionRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr roleid_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveRoleActionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveRoleActionRsp) */ {
 public:
  RemoveRoleActionRsp();
  virtual ~RemoveRoleActionRsp();

  RemoveRoleActionRsp(const RemoveRoleActionRsp& from);

  inline RemoveRoleActionRsp& operator=(const RemoveRoleActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveRoleActionRsp(RemoveRoleActionRsp&& from) noexcept
    : RemoveRoleActionRsp() {
    *this = ::std::move(from);
  }

  inline RemoveRoleActionRsp& operator=(RemoveRoleActionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveRoleActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRoleActionRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveRoleActionRsp*>(
               &_RemoveRoleActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(RemoveRoleActionRsp* other);
  friend void swap(RemoveRoleActionRsp& a, RemoveRoleActionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveRoleActionRsp* New() const final {
    return CreateMaybeMessage<RemoveRoleActionRsp>(NULL);
  }

  RemoveRoleActionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRoleActionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveRoleActionRsp& from);
  void MergeFrom(const RemoveRoleActionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRoleActionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemoveRoleActionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveRolesActionRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveRolesActionRqst) */ {
 public:
  RemoveRolesActionRqst();
  virtual ~RemoveRolesActionRqst();

  RemoveRolesActionRqst(const RemoveRolesActionRqst& from);

  inline RemoveRolesActionRqst& operator=(const RemoveRolesActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveRolesActionRqst(RemoveRolesActionRqst&& from) noexcept
    : RemoveRolesActionRqst() {
    *this = ::std::move(from);
  }

  inline RemoveRolesActionRqst& operator=(RemoveRolesActionRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveRolesActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRolesActionRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveRolesActionRqst*>(
               &_RemoveRolesActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(RemoveRolesActionRqst* other);
  friend void swap(RemoveRolesActionRqst& a, RemoveRolesActionRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveRolesActionRqst* New() const final {
    return CreateMaybeMessage<RemoveRolesActionRqst>(NULL);
  }

  RemoveRolesActionRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRolesActionRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveRolesActionRqst& from);
  void MergeFrom(const RemoveRolesActionRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRolesActionRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // @@protoc_insertion_point(class_scope:resource.RemoveRolesActionRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveRolesActionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveRolesActionRsp) */ {
 public:
  RemoveRolesActionRsp();
  virtual ~RemoveRolesActionRsp();

  RemoveRolesActionRsp(const RemoveRolesActionRsp& from);

  inline RemoveRolesActionRsp& operator=(const RemoveRolesActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveRolesActionRsp(RemoveRolesActionRsp&& from) noexcept
    : RemoveRolesActionRsp() {
    *this = ::std::move(from);
  }

  inline RemoveRolesActionRsp& operator=(RemoveRolesActionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveRolesActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRolesActionRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveRolesActionRsp*>(
               &_RemoveRolesActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(RemoveRolesActionRsp* other);
  friend void swap(RemoveRolesActionRsp& a, RemoveRolesActionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveRolesActionRsp* New() const final {
    return CreateMaybeMessage<RemoveRolesActionRsp>(NULL);
  }

  RemoveRolesActionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRolesActionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveRolesActionRsp& from);
  void MergeFrom(const RemoveRolesActionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRolesActionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemoveRolesActionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Account : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.Account) */ {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(Account&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Account* other);
  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(NULL);
  }

  Account* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string organizations = 6;
  int organizations_size() const;
  void clear_organizations();
  static const int kOrganizationsFieldNumber = 6;
  const ::std::string& organizations(int index) const;
  ::std::string* mutable_organizations(int index);
  void set_organizations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_organizations(int index, ::std::string&& value);
  #endif
  void set_organizations(int index, const char* value);
  void set_organizations(int index, const char* value, size_t size);
  ::std::string* add_organizations();
  void add_organizations(const ::std::string& value);
  #if LANG_CXX11
  void add_organizations(::std::string&& value);
  #endif
  void add_organizations(const char* value);
  void add_organizations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& organizations() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_organizations();

  // repeated string groups = 7;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 7;
  const ::std::string& groups(int index) const;
  ::std::string* mutable_groups(int index);
  void set_groups(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_groups(int index, ::std::string&& value);
  #endif
  void set_groups(int index, const char* value);
  void set_groups(int index, const char* value, size_t size);
  ::std::string* add_groups();
  void add_groups(const ::std::string& value);
  #if LANG_CXX11
  void add_groups(::std::string&& value);
  #endif
  void add_groups(const char* value);
  void add_groups(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& groups() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_groups();

  // repeated string roles = 8;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 8;
  const ::std::string& roles(int index) const;
  ::std::string* mutable_roles(int index);
  void set_roles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_roles(int index, ::std::string&& value);
  #endif
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, size_t size);
  ::std::string* add_roles();
  void add_roles(const ::std::string& value);
  #if LANG_CXX11
  void add_roles(::std::string&& value);
  #endif
  void add_roles(const char* value);
  void add_roles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& roles() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_roles();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 3;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string password = 4;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string domain = 5;
  void clear_domain();
  static const int kDomainFieldNumber = 5;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // @@protoc_insertion_point(class_scope:resource.Account)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> organizations_;
  ::google::protobuf::RepeatedPtrField< ::std::string> groups_;
  ::google::protobuf::RepeatedPtrField< ::std::string> roles_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterAccountRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RegisterAccountRqst) */ {
 public:
  RegisterAccountRqst();
  virtual ~RegisterAccountRqst();

  RegisterAccountRqst(const RegisterAccountRqst& from);

  inline RegisterAccountRqst& operator=(const RegisterAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterAccountRqst(RegisterAccountRqst&& from) noexcept
    : RegisterAccountRqst() {
    *this = ::std::move(from);
  }

  inline RegisterAccountRqst& operator=(RegisterAccountRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountRqst* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountRqst*>(
               &_RegisterAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(RegisterAccountRqst* other);
  friend void swap(RegisterAccountRqst& a, RegisterAccountRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountRqst* New() const final {
    return CreateMaybeMessage<RegisterAccountRqst>(NULL);
  }

  RegisterAccountRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterAccountRqst& from);
  void MergeFrom(const RegisterAccountRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string confirm_password = 3;
  void clear_confirm_password();
  static const int kConfirmPasswordFieldNumber = 3;
  const ::std::string& confirm_password() const;
  void set_confirm_password(const ::std::string& value);
  #if LANG_CXX11
  void set_confirm_password(::std::string&& value);
  #endif
  void set_confirm_password(const char* value);
  void set_confirm_password(const char* value, size_t size);
  ::std::string* mutable_confirm_password();
  ::std::string* release_confirm_password();
  void set_allocated_confirm_password(::std::string* confirm_password);

  // .resource.Account account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  private:
  const ::resource::Account& _internal_account() const;
  public:
  const ::resource::Account& account() const;
  ::resource::Account* release_account();
  ::resource::Account* mutable_account();
  void set_allocated_account(::resource::Account* account);

  // @@protoc_insertion_point(class_scope:resource.RegisterAccountRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr confirm_password_;
  ::resource::Account* account_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterAccountRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RegisterAccountRsp) */ {
 public:
  RegisterAccountRsp();
  virtual ~RegisterAccountRsp();

  RegisterAccountRsp(const RegisterAccountRsp& from);

  inline RegisterAccountRsp& operator=(const RegisterAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterAccountRsp(RegisterAccountRsp&& from) noexcept
    : RegisterAccountRsp() {
    *this = ::std::move(from);
  }

  inline RegisterAccountRsp& operator=(RegisterAccountRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAccountRsp* internal_default_instance() {
    return reinterpret_cast<const RegisterAccountRsp*>(
               &_RegisterAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(RegisterAccountRsp* other);
  friend void swap(RegisterAccountRsp& a, RegisterAccountRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterAccountRsp* New() const final {
    return CreateMaybeMessage<RegisterAccountRsp>(NULL);
  }

  RegisterAccountRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAccountRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterAccountRsp& from);
  void MergeFrom(const RegisterAccountRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAccountRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:resource.RegisterAccountRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountExistRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AccountExistRqst) */ {
 public:
  AccountExistRqst();
  virtual ~AccountExistRqst();

  AccountExistRqst(const AccountExistRqst& from);

  inline AccountExistRqst& operator=(const AccountExistRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountExistRqst(AccountExistRqst&& from) noexcept
    : AccountExistRqst() {
    *this = ::std::move(from);
  }

  inline AccountExistRqst& operator=(AccountExistRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountExistRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountExistRqst* internal_default_instance() {
    return reinterpret_cast<const AccountExistRqst*>(
               &_AccountExistRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(AccountExistRqst* other);
  friend void swap(AccountExistRqst& a, AccountExistRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountExistRqst* New() const final {
    return CreateMaybeMessage<AccountExistRqst>(NULL);
  }

  AccountExistRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountExistRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountExistRqst& from);
  void MergeFrom(const AccountExistRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountExistRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:resource.AccountExistRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountExistRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AccountExistRsp) */ {
 public:
  AccountExistRsp();
  virtual ~AccountExistRsp();

  AccountExistRsp(const AccountExistRsp& from);

  inline AccountExistRsp& operator=(const AccountExistRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountExistRsp(AccountExistRsp&& from) noexcept
    : AccountExistRsp() {
    *this = ::std::move(from);
  }

  inline AccountExistRsp& operator=(AccountExistRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountExistRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountExistRsp* internal_default_instance() {
    return reinterpret_cast<const AccountExistRsp*>(
               &_AccountExistRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(AccountExistRsp* other);
  friend void swap(AccountExistRsp& a, AccountExistRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountExistRsp* New() const final {
    return CreateMaybeMessage<AccountExistRsp>(NULL);
  }

  AccountExistRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountExistRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountExistRsp& from);
  void MergeFrom(const AccountExistRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountExistRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.AccountExistRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAccountsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetAccountsRqst) */ {
 public:
  GetAccountsRqst();
  virtual ~GetAccountsRqst();

  GetAccountsRqst(const GetAccountsRqst& from);

  inline GetAccountsRqst& operator=(const GetAccountsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAccountsRqst(GetAccountsRqst&& from) noexcept
    : GetAccountsRqst() {
    *this = ::std::move(from);
  }

  inline GetAccountsRqst& operator=(GetAccountsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountsRqst* internal_default_instance() {
    return reinterpret_cast<const GetAccountsRqst*>(
               &_GetAccountsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(GetAccountsRqst* other);
  friend void swap(GetAccountsRqst& a, GetAccountsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccountsRqst* New() const final {
    return CreateMaybeMessage<GetAccountsRqst>(NULL);
  }

  GetAccountsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAccountsRqst& from);
  void MergeFrom(const GetAccountsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string options = 2;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::std::string& options() const;
  void set_options(const ::std::string& value);
  #if LANG_CXX11
  void set_options(::std::string&& value);
  #endif
  void set_options(const char* value);
  void set_options(const char* value, size_t size);
  ::std::string* mutable_options();
  ::std::string* release_options();
  void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:resource.GetAccountsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr options_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAccountsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetAccountsRsp) */ {
 public:
  GetAccountsRsp();
  virtual ~GetAccountsRsp();

  GetAccountsRsp(const GetAccountsRsp& from);

  inline GetAccountsRsp& operator=(const GetAccountsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAccountsRsp(GetAccountsRsp&& from) noexcept
    : GetAccountsRsp() {
    *this = ::std::move(from);
  }

  inline GetAccountsRsp& operator=(GetAccountsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountsRsp* internal_default_instance() {
    return reinterpret_cast<const GetAccountsRsp*>(
               &_GetAccountsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(GetAccountsRsp* other);
  friend void swap(GetAccountsRsp& a, GetAccountsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccountsRsp* New() const final {
    return CreateMaybeMessage<GetAccountsRsp>(NULL);
  }

  GetAccountsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAccountsRsp& from);
  void MergeFrom(const GetAccountsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .resource.Account accounts = 1;
  int accounts_size() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 1;
  ::resource::Account* mutable_accounts(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::Account >*
      mutable_accounts();
  const ::resource::Account& accounts(int index) const;
  ::resource::Account* add_accounts();
  const ::google::protobuf::RepeatedPtrField< ::resource::Account >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:resource.GetAccountsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::resource::Account > accounts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAccountRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetAccountRqst) */ {
 public:
  GetAccountRqst();
  virtual ~GetAccountRqst();

  GetAccountRqst(const GetAccountRqst& from);

  inline GetAccountRqst& operator=(const GetAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAccountRqst(GetAccountRqst&& from) noexcept
    : GetAccountRqst() {
    *this = ::std::move(from);
  }

  inline GetAccountRqst& operator=(GetAccountRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountRqst* internal_default_instance() {
    return reinterpret_cast<const GetAccountRqst*>(
               &_GetAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(GetAccountRqst* other);
  friend void swap(GetAccountRqst& a, GetAccountRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccountRqst* New() const final {
    return CreateMaybeMessage<GetAccountRqst>(NULL);
  }

  GetAccountRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAccountRqst& from);
  void MergeFrom(const GetAccountRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accountId = 1;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 1;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // @@protoc_insertion_point(class_scope:resource.GetAccountRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAccountRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetAccountRsp) */ {
 public:
  GetAccountRsp();
  virtual ~GetAccountRsp();

  GetAccountRsp(const GetAccountRsp& from);

  inline GetAccountRsp& operator=(const GetAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAccountRsp(GetAccountRsp&& from) noexcept
    : GetAccountRsp() {
    *this = ::std::move(from);
  }

  inline GetAccountRsp& operator=(GetAccountRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAccountRsp* internal_default_instance() {
    return reinterpret_cast<const GetAccountRsp*>(
               &_GetAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(GetAccountRsp* other);
  friend void swap(GetAccountRsp& a, GetAccountRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAccountRsp* New() const final {
    return CreateMaybeMessage<GetAccountRsp>(NULL);
  }

  GetAccountRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAccountRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAccountRsp& from);
  void MergeFrom(const GetAccountRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccountRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.Account account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  private:
  const ::resource::Account& _internal_account() const;
  public:
  const ::resource::Account& account() const;
  ::resource::Account* release_account();
  ::resource::Account* mutable_account();
  void set_allocated_account(::resource::Account* account);

  // @@protoc_insertion_point(class_scope:resource.GetAccountRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::Account* account_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetAccountPasswordRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.SetAccountPasswordRqst) */ {
 public:
  SetAccountPasswordRqst();
  virtual ~SetAccountPasswordRqst();

  SetAccountPasswordRqst(const SetAccountPasswordRqst& from);

  inline SetAccountPasswordRqst& operator=(const SetAccountPasswordRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetAccountPasswordRqst(SetAccountPasswordRqst&& from) noexcept
    : SetAccountPasswordRqst() {
    *this = ::std::move(from);
  }

  inline SetAccountPasswordRqst& operator=(SetAccountPasswordRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetAccountPasswordRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAccountPasswordRqst* internal_default_instance() {
    return reinterpret_cast<const SetAccountPasswordRqst*>(
               &_SetAccountPasswordRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(SetAccountPasswordRqst* other);
  friend void swap(SetAccountPasswordRqst& a, SetAccountPasswordRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAccountPasswordRqst* New() const final {
    return CreateMaybeMessage<SetAccountPasswordRqst>(NULL);
  }

  SetAccountPasswordRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetAccountPasswordRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetAccountPasswordRqst& from);
  void MergeFrom(const SetAccountPasswordRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAccountPasswordRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accountId = 1;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 1;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // string old_password = 2;
  void clear_old_password();
  static const int kOldPasswordFieldNumber = 2;
  const ::std::string& old_password() const;
  void set_old_password(const ::std::string& value);
  #if LANG_CXX11
  void set_old_password(::std::string&& value);
  #endif
  void set_old_password(const char* value);
  void set_old_password(const char* value, size_t size);
  ::std::string* mutable_old_password();
  ::std::string* release_old_password();
  void set_allocated_old_password(::std::string* old_password);

  // string new_password = 3;
  void clear_new_password();
  static const int kNewPasswordFieldNumber = 3;
  const ::std::string& new_password() const;
  void set_new_password(const ::std::string& value);
  #if LANG_CXX11
  void set_new_password(::std::string&& value);
  #endif
  void set_new_password(const char* value);
  void set_new_password(const char* value, size_t size);
  ::std::string* mutable_new_password();
  ::std::string* release_new_password();
  void set_allocated_new_password(::std::string* new_password);

  // @@protoc_insertion_point(class_scope:resource.SetAccountPasswordRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  ::google::protobuf::internal::ArenaStringPtr old_password_;
  ::google::protobuf::internal::ArenaStringPtr new_password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetAccountPasswordRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.SetAccountPasswordRsp) */ {
 public:
  SetAccountPasswordRsp();
  virtual ~SetAccountPasswordRsp();

  SetAccountPasswordRsp(const SetAccountPasswordRsp& from);

  inline SetAccountPasswordRsp& operator=(const SetAccountPasswordRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetAccountPasswordRsp(SetAccountPasswordRsp&& from) noexcept
    : SetAccountPasswordRsp() {
    *this = ::std::move(from);
  }

  inline SetAccountPasswordRsp& operator=(SetAccountPasswordRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetAccountPasswordRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAccountPasswordRsp* internal_default_instance() {
    return reinterpret_cast<const SetAccountPasswordRsp*>(
               &_SetAccountPasswordRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(SetAccountPasswordRsp* other);
  friend void swap(SetAccountPasswordRsp& a, SetAccountPasswordRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAccountPasswordRsp* New() const final {
    return CreateMaybeMessage<SetAccountPasswordRsp>(NULL);
  }

  SetAccountPasswordRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetAccountPasswordRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetAccountPasswordRsp& from);
  void MergeFrom(const SetAccountPasswordRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAccountPasswordRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:resource.SetAccountPasswordRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetEmailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.SetEmailRequest) */ {
 public:
  SetEmailRequest();
  virtual ~SetEmailRequest();

  SetEmailRequest(const SetEmailRequest& from);

  inline SetEmailRequest& operator=(const SetEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetEmailRequest(SetEmailRequest&& from) noexcept
    : SetEmailRequest() {
    *this = ::std::move(from);
  }

  inline SetEmailRequest& operator=(SetEmailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetEmailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEmailRequest* internal_default_instance() {
    return reinterpret_cast<const SetEmailRequest*>(
               &_SetEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(SetEmailRequest* other);
  friend void swap(SetEmailRequest& a, SetEmailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetEmailRequest* New() const final {
    return CreateMaybeMessage<SetEmailRequest>(NULL);
  }

  SetEmailRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetEmailRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetEmailRequest& from);
  void MergeFrom(const SetEmailRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEmailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accountId = 1;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 1;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // string oldEmail = 2;
  void clear_oldemail();
  static const int kOldEmailFieldNumber = 2;
  const ::std::string& oldemail() const;
  void set_oldemail(const ::std::string& value);
  #if LANG_CXX11
  void set_oldemail(::std::string&& value);
  #endif
  void set_oldemail(const char* value);
  void set_oldemail(const char* value, size_t size);
  ::std::string* mutable_oldemail();
  ::std::string* release_oldemail();
  void set_allocated_oldemail(::std::string* oldemail);

  // string newEmail = 3;
  void clear_newemail();
  static const int kNewEmailFieldNumber = 3;
  const ::std::string& newemail() const;
  void set_newemail(const ::std::string& value);
  #if LANG_CXX11
  void set_newemail(::std::string&& value);
  #endif
  void set_newemail(const char* value);
  void set_newemail(const char* value, size_t size);
  ::std::string* mutable_newemail();
  ::std::string* release_newemail();
  void set_allocated_newemail(::std::string* newemail);

  // @@protoc_insertion_point(class_scope:resource.SetEmailRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  ::google::protobuf::internal::ArenaStringPtr oldemail_;
  ::google::protobuf::internal::ArenaStringPtr newemail_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetEmailResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.SetEmailResponse) */ {
 public:
  SetEmailResponse();
  virtual ~SetEmailResponse();

  SetEmailResponse(const SetEmailResponse& from);

  inline SetEmailResponse& operator=(const SetEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetEmailResponse(SetEmailResponse&& from) noexcept
    : SetEmailResponse() {
    *this = ::std::move(from);
  }

  inline SetEmailResponse& operator=(SetEmailResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetEmailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEmailResponse* internal_default_instance() {
    return reinterpret_cast<const SetEmailResponse*>(
               &_SetEmailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(SetEmailResponse* other);
  friend void swap(SetEmailResponse& a, SetEmailResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetEmailResponse* New() const final {
    return CreateMaybeMessage<SetEmailResponse>(NULL);
  }

  SetEmailResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetEmailResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetEmailResponse& from);
  void MergeFrom(const SetEmailResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEmailResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:resource.SetEmailResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteAccountRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteAccountRqst) */ {
 public:
  DeleteAccountRqst();
  virtual ~DeleteAccountRqst();

  DeleteAccountRqst(const DeleteAccountRqst& from);

  inline DeleteAccountRqst& operator=(const DeleteAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteAccountRqst(DeleteAccountRqst&& from) noexcept
    : DeleteAccountRqst() {
    *this = ::std::move(from);
  }

  inline DeleteAccountRqst& operator=(DeleteAccountRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAccountRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteAccountRqst*>(
               &_DeleteAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(DeleteAccountRqst* other);
  friend void swap(DeleteAccountRqst& a, DeleteAccountRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteAccountRqst* New() const final {
    return CreateMaybeMessage<DeleteAccountRqst>(NULL);
  }

  DeleteAccountRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAccountRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteAccountRqst& from);
  void MergeFrom(const DeleteAccountRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAccountRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:resource.DeleteAccountRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteAccountRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteAccountRsp) */ {
 public:
  DeleteAccountRsp();
  virtual ~DeleteAccountRsp();

  DeleteAccountRsp(const DeleteAccountRsp& from);

  inline DeleteAccountRsp& operator=(const DeleteAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteAccountRsp(DeleteAccountRsp&& from) noexcept
    : DeleteAccountRsp() {
    *this = ::std::move(from);
  }

  inline DeleteAccountRsp& operator=(DeleteAccountRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAccountRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteAccountRsp*>(
               &_DeleteAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(DeleteAccountRsp* other);
  friend void swap(DeleteAccountRsp& a, DeleteAccountRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteAccountRsp* New() const final {
    return CreateMaybeMessage<DeleteAccountRsp>(NULL);
  }

  DeleteAccountRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAccountRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteAccountRsp& from);
  void MergeFrom(const DeleteAccountRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAccountRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:resource.DeleteAccountRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddAccountRoleRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddAccountRoleRqst) */ {
 public:
  AddAccountRoleRqst();
  virtual ~AddAccountRoleRqst();

  AddAccountRoleRqst(const AddAccountRoleRqst& from);

  inline AddAccountRoleRqst& operator=(const AddAccountRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddAccountRoleRqst(AddAccountRoleRqst&& from) noexcept
    : AddAccountRoleRqst() {
    *this = ::std::move(from);
  }

  inline AddAccountRoleRqst& operator=(AddAccountRoleRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddAccountRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddAccountRoleRqst* internal_default_instance() {
    return reinterpret_cast<const AddAccountRoleRqst*>(
               &_AddAccountRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(AddAccountRoleRqst* other);
  friend void swap(AddAccountRoleRqst& a, AddAccountRoleRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddAccountRoleRqst* New() const final {
    return CreateMaybeMessage<AddAccountRoleRqst>(NULL);
  }

  AddAccountRoleRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddAccountRoleRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddAccountRoleRqst& from);
  void MergeFrom(const AddAccountRoleRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddAccountRoleRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accountId = 1;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 1;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // string roleId = 2;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  const ::std::string& roleid() const;
  void set_roleid(const ::std::string& value);
  #if LANG_CXX11
  void set_roleid(::std::string&& value);
  #endif
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  ::std::string* mutable_roleid();
  ::std::string* release_roleid();
  void set_allocated_roleid(::std::string* roleid);

  // @@protoc_insertion_point(class_scope:resource.AddAccountRoleRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  ::google::protobuf::internal::ArenaStringPtr roleid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddAccountRoleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddAccountRoleRsp) */ {
 public:
  AddAccountRoleRsp();
  virtual ~AddAccountRoleRsp();

  AddAccountRoleRsp(const AddAccountRoleRsp& from);

  inline AddAccountRoleRsp& operator=(const AddAccountRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddAccountRoleRsp(AddAccountRoleRsp&& from) noexcept
    : AddAccountRoleRsp() {
    *this = ::std::move(from);
  }

  inline AddAccountRoleRsp& operator=(AddAccountRoleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddAccountRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddAccountRoleRsp* internal_default_instance() {
    return reinterpret_cast<const AddAccountRoleRsp*>(
               &_AddAccountRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(AddAccountRoleRsp* other);
  friend void swap(AddAccountRoleRsp& a, AddAccountRoleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddAccountRoleRsp* New() const final {
    return CreateMaybeMessage<AddAccountRoleRsp>(NULL);
  }

  AddAccountRoleRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddAccountRoleRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddAccountRoleRsp& from);
  void MergeFrom(const AddAccountRoleRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddAccountRoleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.AddAccountRoleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveAccountRoleRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveAccountRoleRqst) */ {
 public:
  RemoveAccountRoleRqst();
  virtual ~RemoveAccountRoleRqst();

  RemoveAccountRoleRqst(const RemoveAccountRoleRqst& from);

  inline RemoveAccountRoleRqst& operator=(const RemoveAccountRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveAccountRoleRqst(RemoveAccountRoleRqst&& from) noexcept
    : RemoveAccountRoleRqst() {
    *this = ::std::move(from);
  }

  inline RemoveAccountRoleRqst& operator=(RemoveAccountRoleRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveAccountRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAccountRoleRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveAccountRoleRqst*>(
               &_RemoveAccountRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(RemoveAccountRoleRqst* other);
  friend void swap(RemoveAccountRoleRqst& a, RemoveAccountRoleRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveAccountRoleRqst* New() const final {
    return CreateMaybeMessage<RemoveAccountRoleRqst>(NULL);
  }

  RemoveAccountRoleRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAccountRoleRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveAccountRoleRqst& from);
  void MergeFrom(const RemoveAccountRoleRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAccountRoleRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accountId = 1;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 1;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // string roleId = 2;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  const ::std::string& roleid() const;
  void set_roleid(const ::std::string& value);
  #if LANG_CXX11
  void set_roleid(::std::string&& value);
  #endif
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  ::std::string* mutable_roleid();
  ::std::string* release_roleid();
  void set_allocated_roleid(::std::string* roleid);

  // @@protoc_insertion_point(class_scope:resource.RemoveAccountRoleRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  ::google::protobuf::internal::ArenaStringPtr roleid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveAccountRoleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveAccountRoleRsp) */ {
 public:
  RemoveAccountRoleRsp();
  virtual ~RemoveAccountRoleRsp();

  RemoveAccountRoleRsp(const RemoveAccountRoleRsp& from);

  inline RemoveAccountRoleRsp& operator=(const RemoveAccountRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveAccountRoleRsp(RemoveAccountRoleRsp&& from) noexcept
    : RemoveAccountRoleRsp() {
    *this = ::std::move(from);
  }

  inline RemoveAccountRoleRsp& operator=(RemoveAccountRoleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveAccountRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAccountRoleRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveAccountRoleRsp*>(
               &_RemoveAccountRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(RemoveAccountRoleRsp* other);
  friend void swap(RemoveAccountRoleRsp& a, RemoveAccountRoleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveAccountRoleRsp* New() const final {
    return CreateMaybeMessage<RemoveAccountRoleRsp>(NULL);
  }

  RemoveAccountRoleRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAccountRoleRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveAccountRoleRsp& from);
  void MergeFrom(const RemoveAccountRoleRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAccountRoleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemoveAccountRoleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Contact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.Contact) */ {
 public:
  Contact();
  virtual ~Contact();

  Contact(const Contact& from);

  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Contact(Contact&& from) noexcept
    : Contact() {
    *this = ::std::move(from);
  }

  inline Contact& operator=(Contact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Contact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Contact* internal_default_instance() {
    return reinterpret_cast<const Contact*>(
               &_Contact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(Contact* other);
  friend void swap(Contact& a, Contact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Contact* New() const final {
    return CreateMaybeMessage<Contact>(NULL);
  }

  Contact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Contact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // int64 invitationTime = 2;
  void clear_invitationtime();
  static const int kInvitationTimeFieldNumber = 2;
  ::google::protobuf::int64 invitationtime() const;
  void set_invitationtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:resource.Contact)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::int64 invitationtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetAccountContactRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.SetAccountContactRqst) */ {
 public:
  SetAccountContactRqst();
  virtual ~SetAccountContactRqst();

  SetAccountContactRqst(const SetAccountContactRqst& from);

  inline SetAccountContactRqst& operator=(const SetAccountContactRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetAccountContactRqst(SetAccountContactRqst&& from) noexcept
    : SetAccountContactRqst() {
    *this = ::std::move(from);
  }

  inline SetAccountContactRqst& operator=(SetAccountContactRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetAccountContactRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAccountContactRqst* internal_default_instance() {
    return reinterpret_cast<const SetAccountContactRqst*>(
               &_SetAccountContactRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(SetAccountContactRqst* other);
  friend void swap(SetAccountContactRqst& a, SetAccountContactRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAccountContactRqst* New() const final {
    return CreateMaybeMessage<SetAccountContactRqst>(NULL);
  }

  SetAccountContactRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetAccountContactRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetAccountContactRqst& from);
  void MergeFrom(const SetAccountContactRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAccountContactRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accountId = 1;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 1;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // .resource.Contact contact = 2;
  bool has_contact() const;
  void clear_contact();
  static const int kContactFieldNumber = 2;
  private:
  const ::resource::Contact& _internal_contact() const;
  public:
  const ::resource::Contact& contact() const;
  ::resource::Contact* release_contact();
  ::resource::Contact* mutable_contact();
  void set_allocated_contact(::resource::Contact* contact);

  // @@protoc_insertion_point(class_scope:resource.SetAccountContactRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  ::resource::Contact* contact_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetAccountContactRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.SetAccountContactRsp) */ {
 public:
  SetAccountContactRsp();
  virtual ~SetAccountContactRsp();

  SetAccountContactRsp(const SetAccountContactRsp& from);

  inline SetAccountContactRsp& operator=(const SetAccountContactRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetAccountContactRsp(SetAccountContactRsp&& from) noexcept
    : SetAccountContactRsp() {
    *this = ::std::move(from);
  }

  inline SetAccountContactRsp& operator=(SetAccountContactRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetAccountContactRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAccountContactRsp* internal_default_instance() {
    return reinterpret_cast<const SetAccountContactRsp*>(
               &_SetAccountContactRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(SetAccountContactRsp* other);
  friend void swap(SetAccountContactRsp& a, SetAccountContactRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAccountContactRsp* New() const final {
    return CreateMaybeMessage<SetAccountContactRsp>(NULL);
  }

  SetAccountContactRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetAccountContactRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetAccountContactRsp& from);
  void MergeFrom(const SetAccountContactRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAccountContactRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.SetAccountContactRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRoleRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.CreateRoleRqst) */ {
 public:
  CreateRoleRqst();
  virtual ~CreateRoleRqst();

  CreateRoleRqst(const CreateRoleRqst& from);

  inline CreateRoleRqst& operator=(const CreateRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRoleRqst(CreateRoleRqst&& from) noexcept
    : CreateRoleRqst() {
    *this = ::std::move(from);
  }

  inline CreateRoleRqst& operator=(CreateRoleRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoleRqst* internal_default_instance() {
    return reinterpret_cast<const CreateRoleRqst*>(
               &_CreateRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(CreateRoleRqst* other);
  friend void swap(CreateRoleRqst& a, CreateRoleRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleRqst* New() const final {
    return CreateMaybeMessage<CreateRoleRqst>(NULL);
  }

  CreateRoleRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateRoleRqst& from);
  void MergeFrom(const CreateRoleRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.Role role = 1;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 1;
  private:
  const ::resource::Role& _internal_role() const;
  public:
  const ::resource::Role& role() const;
  ::resource::Role* release_role();
  ::resource::Role* mutable_role();
  void set_allocated_role(::resource::Role* role);

  // @@protoc_insertion_point(class_scope:resource.CreateRoleRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::Role* role_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRoleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.CreateRoleRsp) */ {
 public:
  CreateRoleRsp();
  virtual ~CreateRoleRsp();

  CreateRoleRsp(const CreateRoleRsp& from);

  inline CreateRoleRsp& operator=(const CreateRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRoleRsp(CreateRoleRsp&& from) noexcept
    : CreateRoleRsp() {
    *this = ::std::move(from);
  }

  inline CreateRoleRsp& operator=(CreateRoleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoleRsp* internal_default_instance() {
    return reinterpret_cast<const CreateRoleRsp*>(
               &_CreateRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(CreateRoleRsp* other);
  friend void swap(CreateRoleRsp& a, CreateRoleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleRsp* New() const final {
    return CreateMaybeMessage<CreateRoleRsp>(NULL);
  }

  CreateRoleRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateRoleRsp& from);
  void MergeFrom(const CreateRoleRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.CreateRoleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRolesRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetRolesRqst) */ {
 public:
  GetRolesRqst();
  virtual ~GetRolesRqst();

  GetRolesRqst(const GetRolesRqst& from);

  inline GetRolesRqst& operator=(const GetRolesRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRolesRqst(GetRolesRqst&& from) noexcept
    : GetRolesRqst() {
    *this = ::std::move(from);
  }

  inline GetRolesRqst& operator=(GetRolesRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRolesRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRolesRqst* internal_default_instance() {
    return reinterpret_cast<const GetRolesRqst*>(
               &_GetRolesRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(GetRolesRqst* other);
  friend void swap(GetRolesRqst& a, GetRolesRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRolesRqst* New() const final {
    return CreateMaybeMessage<GetRolesRqst>(NULL);
  }

  GetRolesRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRolesRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRolesRqst& from);
  void MergeFrom(const GetRolesRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRolesRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string options = 2;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::std::string& options() const;
  void set_options(const ::std::string& value);
  #if LANG_CXX11
  void set_options(::std::string&& value);
  #endif
  void set_options(const char* value);
  void set_options(const char* value, size_t size);
  ::std::string* mutable_options();
  ::std::string* release_options();
  void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:resource.GetRolesRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr options_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRolesRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetRolesRsp) */ {
 public:
  GetRolesRsp();
  virtual ~GetRolesRsp();

  GetRolesRsp(const GetRolesRsp& from);

  inline GetRolesRsp& operator=(const GetRolesRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRolesRsp(GetRolesRsp&& from) noexcept
    : GetRolesRsp() {
    *this = ::std::move(from);
  }

  inline GetRolesRsp& operator=(GetRolesRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRolesRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRolesRsp* internal_default_instance() {
    return reinterpret_cast<const GetRolesRsp*>(
               &_GetRolesRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(GetRolesRsp* other);
  friend void swap(GetRolesRsp& a, GetRolesRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRolesRsp* New() const final {
    return CreateMaybeMessage<GetRolesRsp>(NULL);
  }

  GetRolesRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRolesRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRolesRsp& from);
  void MergeFrom(const GetRolesRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRolesRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .resource.Role roles = 1;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 1;
  ::resource::Role* mutable_roles(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::Role >*
      mutable_roles();
  const ::resource::Role& roles(int index) const;
  ::resource::Role* add_roles();
  const ::google::protobuf::RepeatedPtrField< ::resource::Role >&
      roles() const;

  // @@protoc_insertion_point(class_scope:resource.GetRolesRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::resource::Role > roles_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRoleRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteRoleRqst) */ {
 public:
  DeleteRoleRqst();
  virtual ~DeleteRoleRqst();

  DeleteRoleRqst(const DeleteRoleRqst& from);

  inline DeleteRoleRqst& operator=(const DeleteRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRoleRqst(DeleteRoleRqst&& from) noexcept
    : DeleteRoleRqst() {
    *this = ::std::move(from);
  }

  inline DeleteRoleRqst& operator=(DeleteRoleRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRoleRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleRqst*>(
               &_DeleteRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(DeleteRoleRqst* other);
  friend void swap(DeleteRoleRqst& a, DeleteRoleRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleRqst* New() const final {
    return CreateMaybeMessage<DeleteRoleRqst>(NULL);
  }

  DeleteRoleRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteRoleRqst& from);
  void MergeFrom(const DeleteRoleRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roleId = 1;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  const ::std::string& roleid() const;
  void set_roleid(const ::std::string& value);
  #if LANG_CXX11
  void set_roleid(::std::string&& value);
  #endif
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  ::std::string* mutable_roleid();
  ::std::string* release_roleid();
  void set_allocated_roleid(::std::string* roleid);

  // @@protoc_insertion_point(class_scope:resource.DeleteRoleRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr roleid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRoleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteRoleRsp) */ {
 public:
  DeleteRoleRsp();
  virtual ~DeleteRoleRsp();

  DeleteRoleRsp(const DeleteRoleRsp& from);

  inline DeleteRoleRsp& operator=(const DeleteRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRoleRsp(DeleteRoleRsp&& from) noexcept
    : DeleteRoleRsp() {
    *this = ::std::move(from);
  }

  inline DeleteRoleRsp& operator=(DeleteRoleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRoleRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleRsp*>(
               &_DeleteRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(DeleteRoleRsp* other);
  friend void swap(DeleteRoleRsp& a, DeleteRoleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleRsp* New() const final {
    return CreateMaybeMessage<DeleteRoleRsp>(NULL);
  }

  DeleteRoleRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteRoleRsp& from);
  void MergeFrom(const DeleteRoleRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.DeleteRoleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Application : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.Application) */ {
 public:
  Application();
  virtual ~Application();

  Application(const Application& from);

  inline Application& operator=(const Application& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Application(Application&& from) noexcept
    : Application() {
    *this = ::std::move(from);
  }

  inline Application& operator=(Application&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Application& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Application* internal_default_instance() {
    return reinterpret_cast<const Application*>(
               &_Application_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(Application* other);
  friend void swap(Application& a, Application& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Application* New() const final {
    return CreateMaybeMessage<Application>(NULL);
  }

  Application* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Application>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Application& from);
  void MergeFrom(const Application& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Application* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string actions = 8;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 8;
  const ::std::string& actions(int index) const;
  ::std::string* mutable_actions(int index);
  void set_actions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_actions(int index, ::std::string&& value);
  #endif
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  ::std::string* add_actions();
  void add_actions(const ::std::string& value);
  #if LANG_CXX11
  void add_actions(::std::string&& value);
  #endif
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& actions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_actions();

  // repeated string keywords = 9;
  int keywords_size() const;
  void clear_keywords();
  static const int kKeywordsFieldNumber = 9;
  const ::std::string& keywords(int index) const;
  ::std::string* mutable_keywords(int index);
  void set_keywords(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keywords(int index, ::std::string&& value);
  #endif
  void set_keywords(int index, const char* value);
  void set_keywords(int index, const char* value, size_t size);
  ::std::string* add_keywords();
  void add_keywords(const ::std::string& value);
  #if LANG_CXX11
  void add_keywords(::std::string&& value);
  #endif
  void add_keywords(const char* value);
  void add_keywords(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keywords() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keywords();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string domain = 3;
  void clear_domain();
  static const int kDomainFieldNumber = 3;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string password = 4;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string path = 5;
  void clear_path();
  static const int kPathFieldNumber = 5;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string version = 6;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string description = 7;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string icon = 10;
  void clear_icon();
  static const int kIconFieldNumber = 10;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // string alias = 11;
  void clear_alias();
  static const int kAliasFieldNumber = 11;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string PublisherID = 12;
  void clear_PublisherID();
  static const int kPublisherIDFieldNumber = 12;
  const ::std::string& PublisherID() const;
  void set_PublisherID(const ::std::string& value);
  #if LANG_CXX11
  void set_PublisherID(::std::string&& value);
  #endif
  void set_PublisherID(const char* value);
  void set_PublisherID(const char* value, size_t size);
  ::std::string* mutable_PublisherID();
  ::std::string* release_PublisherID();
  void set_allocated_PublisherID(::std::string* PublisherID);

  // int64 creation_date = 13;
  void clear_creation_date();
  static const int kCreationDateFieldNumber = 13;
  ::google::protobuf::int64 creation_date() const;
  void set_creation_date(::google::protobuf::int64 value);

  // int64 last_deployed = 14;
  void clear_last_deployed();
  static const int kLastDeployedFieldNumber = 14;
  ::google::protobuf::int64 last_deployed() const;
  void set_last_deployed(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:resource.Application)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> actions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keywords_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr PublisherID_;
  ::google::protobuf::int64 creation_date_;
  ::google::protobuf::int64 last_deployed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateApplicationRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.CreateApplicationRqst) */ {
 public:
  CreateApplicationRqst();
  virtual ~CreateApplicationRqst();

  CreateApplicationRqst(const CreateApplicationRqst& from);

  inline CreateApplicationRqst& operator=(const CreateApplicationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateApplicationRqst(CreateApplicationRqst&& from) noexcept
    : CreateApplicationRqst() {
    *this = ::std::move(from);
  }

  inline CreateApplicationRqst& operator=(CreateApplicationRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateApplicationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateApplicationRqst* internal_default_instance() {
    return reinterpret_cast<const CreateApplicationRqst*>(
               &_CreateApplicationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(CreateApplicationRqst* other);
  friend void swap(CreateApplicationRqst& a, CreateApplicationRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateApplicationRqst* New() const final {
    return CreateMaybeMessage<CreateApplicationRqst>(NULL);
  }

  CreateApplicationRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateApplicationRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateApplicationRqst& from);
  void MergeFrom(const CreateApplicationRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateApplicationRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.Application application = 1;
  bool has_application() const;
  void clear_application();
  static const int kApplicationFieldNumber = 1;
  private:
  const ::resource::Application& _internal_application() const;
  public:
  const ::resource::Application& application() const;
  ::resource::Application* release_application();
  ::resource::Application* mutable_application();
  void set_allocated_application(::resource::Application* application);

  // @@protoc_insertion_point(class_scope:resource.CreateApplicationRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::Application* application_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateApplicationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.CreateApplicationRsp) */ {
 public:
  CreateApplicationRsp();
  virtual ~CreateApplicationRsp();

  CreateApplicationRsp(const CreateApplicationRsp& from);

  inline CreateApplicationRsp& operator=(const CreateApplicationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateApplicationRsp(CreateApplicationRsp&& from) noexcept
    : CreateApplicationRsp() {
    *this = ::std::move(from);
  }

  inline CreateApplicationRsp& operator=(CreateApplicationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateApplicationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateApplicationRsp* internal_default_instance() {
    return reinterpret_cast<const CreateApplicationRsp*>(
               &_CreateApplicationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(CreateApplicationRsp* other);
  friend void swap(CreateApplicationRsp& a, CreateApplicationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateApplicationRsp* New() const final {
    return CreateMaybeMessage<CreateApplicationRsp>(NULL);
  }

  CreateApplicationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateApplicationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateApplicationRsp& from);
  void MergeFrom(const CreateApplicationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateApplicationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:resource.CreateApplicationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateApplicationRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.UpdateApplicationRqst) */ {
 public:
  UpdateApplicationRqst();
  virtual ~UpdateApplicationRqst();

  UpdateApplicationRqst(const UpdateApplicationRqst& from);

  inline UpdateApplicationRqst& operator=(const UpdateApplicationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateApplicationRqst(UpdateApplicationRqst&& from) noexcept
    : UpdateApplicationRqst() {
    *this = ::std::move(from);
  }

  inline UpdateApplicationRqst& operator=(UpdateApplicationRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateApplicationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateApplicationRqst* internal_default_instance() {
    return reinterpret_cast<const UpdateApplicationRqst*>(
               &_UpdateApplicationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(UpdateApplicationRqst* other);
  friend void swap(UpdateApplicationRqst& a, UpdateApplicationRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateApplicationRqst* New() const final {
    return CreateMaybeMessage<UpdateApplicationRqst>(NULL);
  }

  UpdateApplicationRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateApplicationRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateApplicationRqst& from);
  void MergeFrom(const UpdateApplicationRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateApplicationRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string applicationId = 1;
  void clear_applicationid();
  static const int kApplicationIdFieldNumber = 1;
  const ::std::string& applicationid() const;
  void set_applicationid(const ::std::string& value);
  #if LANG_CXX11
  void set_applicationid(::std::string&& value);
  #endif
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  ::std::string* mutable_applicationid();
  ::std::string* release_applicationid();
  void set_allocated_applicationid(::std::string* applicationid);

  // string values = 2;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::std::string& values() const;
  void set_values(const ::std::string& value);
  #if LANG_CXX11
  void set_values(::std::string&& value);
  #endif
  void set_values(const char* value);
  void set_values(const char* value, size_t size);
  ::std::string* mutable_values();
  ::std::string* release_values();
  void set_allocated_values(::std::string* values);

  // @@protoc_insertion_point(class_scope:resource.UpdateApplicationRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr applicationid_;
  ::google::protobuf::internal::ArenaStringPtr values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateApplicationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.UpdateApplicationRsp) */ {
 public:
  UpdateApplicationRsp();
  virtual ~UpdateApplicationRsp();

  UpdateApplicationRsp(const UpdateApplicationRsp& from);

  inline UpdateApplicationRsp& operator=(const UpdateApplicationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateApplicationRsp(UpdateApplicationRsp&& from) noexcept
    : UpdateApplicationRsp() {
    *this = ::std::move(from);
  }

  inline UpdateApplicationRsp& operator=(UpdateApplicationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateApplicationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateApplicationRsp* internal_default_instance() {
    return reinterpret_cast<const UpdateApplicationRsp*>(
               &_UpdateApplicationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(UpdateApplicationRsp* other);
  friend void swap(UpdateApplicationRsp& a, UpdateApplicationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateApplicationRsp* New() const final {
    return CreateMaybeMessage<UpdateApplicationRsp>(NULL);
  }

  UpdateApplicationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateApplicationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateApplicationRsp& from);
  void MergeFrom(const UpdateApplicationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateApplicationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.UpdateApplicationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteApplicationRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteApplicationRqst) */ {
 public:
  DeleteApplicationRqst();
  virtual ~DeleteApplicationRqst();

  DeleteApplicationRqst(const DeleteApplicationRqst& from);

  inline DeleteApplicationRqst& operator=(const DeleteApplicationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteApplicationRqst(DeleteApplicationRqst&& from) noexcept
    : DeleteApplicationRqst() {
    *this = ::std::move(from);
  }

  inline DeleteApplicationRqst& operator=(DeleteApplicationRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteApplicationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteApplicationRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteApplicationRqst*>(
               &_DeleteApplicationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(DeleteApplicationRqst* other);
  friend void swap(DeleteApplicationRqst& a, DeleteApplicationRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteApplicationRqst* New() const final {
    return CreateMaybeMessage<DeleteApplicationRqst>(NULL);
  }

  DeleteApplicationRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteApplicationRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteApplicationRqst& from);
  void MergeFrom(const DeleteApplicationRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteApplicationRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string applicationId = 1;
  void clear_applicationid();
  static const int kApplicationIdFieldNumber = 1;
  const ::std::string& applicationid() const;
  void set_applicationid(const ::std::string& value);
  #if LANG_CXX11
  void set_applicationid(::std::string&& value);
  #endif
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  ::std::string* mutable_applicationid();
  ::std::string* release_applicationid();
  void set_allocated_applicationid(::std::string* applicationid);

  // @@protoc_insertion_point(class_scope:resource.DeleteApplicationRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr applicationid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteApplicationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteApplicationRsp) */ {
 public:
  DeleteApplicationRsp();
  virtual ~DeleteApplicationRsp();

  DeleteApplicationRsp(const DeleteApplicationRsp& from);

  inline DeleteApplicationRsp& operator=(const DeleteApplicationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteApplicationRsp(DeleteApplicationRsp&& from) noexcept
    : DeleteApplicationRsp() {
    *this = ::std::move(from);
  }

  inline DeleteApplicationRsp& operator=(DeleteApplicationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteApplicationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteApplicationRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteApplicationRsp*>(
               &_DeleteApplicationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(DeleteApplicationRsp* other);
  friend void swap(DeleteApplicationRsp& a, DeleteApplicationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteApplicationRsp* New() const final {
    return CreateMaybeMessage<DeleteApplicationRsp>(NULL);
  }

  DeleteApplicationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteApplicationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteApplicationRsp& from);
  void MergeFrom(const DeleteApplicationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteApplicationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.DeleteApplicationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddApplicationActionsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddApplicationActionsRqst) */ {
 public:
  AddApplicationActionsRqst();
  virtual ~AddApplicationActionsRqst();

  AddApplicationActionsRqst(const AddApplicationActionsRqst& from);

  inline AddApplicationActionsRqst& operator=(const AddApplicationActionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddApplicationActionsRqst(AddApplicationActionsRqst&& from) noexcept
    : AddApplicationActionsRqst() {
    *this = ::std::move(from);
  }

  inline AddApplicationActionsRqst& operator=(AddApplicationActionsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddApplicationActionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddApplicationActionsRqst* internal_default_instance() {
    return reinterpret_cast<const AddApplicationActionsRqst*>(
               &_AddApplicationActionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(AddApplicationActionsRqst* other);
  friend void swap(AddApplicationActionsRqst& a, AddApplicationActionsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddApplicationActionsRqst* New() const final {
    return CreateMaybeMessage<AddApplicationActionsRqst>(NULL);
  }

  AddApplicationActionsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddApplicationActionsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddApplicationActionsRqst& from);
  void MergeFrom(const AddApplicationActionsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddApplicationActionsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string actions = 2;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 2;
  const ::std::string& actions(int index) const;
  ::std::string* mutable_actions(int index);
  void set_actions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_actions(int index, ::std::string&& value);
  #endif
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  ::std::string* add_actions();
  void add_actions(const ::std::string& value);
  #if LANG_CXX11
  void add_actions(::std::string&& value);
  #endif
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& actions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_actions();

  // string applicationId = 1;
  void clear_applicationid();
  static const int kApplicationIdFieldNumber = 1;
  const ::std::string& applicationid() const;
  void set_applicationid(const ::std::string& value);
  #if LANG_CXX11
  void set_applicationid(::std::string&& value);
  #endif
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  ::std::string* mutable_applicationid();
  ::std::string* release_applicationid();
  void set_allocated_applicationid(::std::string* applicationid);

  // @@protoc_insertion_point(class_scope:resource.AddApplicationActionsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> actions_;
  ::google::protobuf::internal::ArenaStringPtr applicationid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddApplicationActionsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddApplicationActionsRsp) */ {
 public:
  AddApplicationActionsRsp();
  virtual ~AddApplicationActionsRsp();

  AddApplicationActionsRsp(const AddApplicationActionsRsp& from);

  inline AddApplicationActionsRsp& operator=(const AddApplicationActionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddApplicationActionsRsp(AddApplicationActionsRsp&& from) noexcept
    : AddApplicationActionsRsp() {
    *this = ::std::move(from);
  }

  inline AddApplicationActionsRsp& operator=(AddApplicationActionsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddApplicationActionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddApplicationActionsRsp* internal_default_instance() {
    return reinterpret_cast<const AddApplicationActionsRsp*>(
               &_AddApplicationActionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(AddApplicationActionsRsp* other);
  friend void swap(AddApplicationActionsRsp& a, AddApplicationActionsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddApplicationActionsRsp* New() const final {
    return CreateMaybeMessage<AddApplicationActionsRsp>(NULL);
  }

  AddApplicationActionsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddApplicationActionsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddApplicationActionsRsp& from);
  void MergeFrom(const AddApplicationActionsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddApplicationActionsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.AddApplicationActionsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveApplicationActionRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveApplicationActionRqst) */ {
 public:
  RemoveApplicationActionRqst();
  virtual ~RemoveApplicationActionRqst();

  RemoveApplicationActionRqst(const RemoveApplicationActionRqst& from);

  inline RemoveApplicationActionRqst& operator=(const RemoveApplicationActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveApplicationActionRqst(RemoveApplicationActionRqst&& from) noexcept
    : RemoveApplicationActionRqst() {
    *this = ::std::move(from);
  }

  inline RemoveApplicationActionRqst& operator=(RemoveApplicationActionRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveApplicationActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveApplicationActionRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveApplicationActionRqst*>(
               &_RemoveApplicationActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(RemoveApplicationActionRqst* other);
  friend void swap(RemoveApplicationActionRqst& a, RemoveApplicationActionRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveApplicationActionRqst* New() const final {
    return CreateMaybeMessage<RemoveApplicationActionRqst>(NULL);
  }

  RemoveApplicationActionRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveApplicationActionRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveApplicationActionRqst& from);
  void MergeFrom(const RemoveApplicationActionRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveApplicationActionRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string applicationId = 1;
  void clear_applicationid();
  static const int kApplicationIdFieldNumber = 1;
  const ::std::string& applicationid() const;
  void set_applicationid(const ::std::string& value);
  #if LANG_CXX11
  void set_applicationid(::std::string&& value);
  #endif
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  ::std::string* mutable_applicationid();
  ::std::string* release_applicationid();
  void set_allocated_applicationid(::std::string* applicationid);

  // string action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // @@protoc_insertion_point(class_scope:resource.RemoveApplicationActionRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr applicationid_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveApplicationActionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveApplicationActionRsp) */ {
 public:
  RemoveApplicationActionRsp();
  virtual ~RemoveApplicationActionRsp();

  RemoveApplicationActionRsp(const RemoveApplicationActionRsp& from);

  inline RemoveApplicationActionRsp& operator=(const RemoveApplicationActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveApplicationActionRsp(RemoveApplicationActionRsp&& from) noexcept
    : RemoveApplicationActionRsp() {
    *this = ::std::move(from);
  }

  inline RemoveApplicationActionRsp& operator=(RemoveApplicationActionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveApplicationActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveApplicationActionRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveApplicationActionRsp*>(
               &_RemoveApplicationActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(RemoveApplicationActionRsp* other);
  friend void swap(RemoveApplicationActionRsp& a, RemoveApplicationActionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveApplicationActionRsp* New() const final {
    return CreateMaybeMessage<RemoveApplicationActionRsp>(NULL);
  }

  RemoveApplicationActionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveApplicationActionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveApplicationActionRsp& from);
  void MergeFrom(const RemoveApplicationActionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveApplicationActionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemoveApplicationActionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveApplicationsActionRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveApplicationsActionRqst) */ {
 public:
  RemoveApplicationsActionRqst();
  virtual ~RemoveApplicationsActionRqst();

  RemoveApplicationsActionRqst(const RemoveApplicationsActionRqst& from);

  inline RemoveApplicationsActionRqst& operator=(const RemoveApplicationsActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveApplicationsActionRqst(RemoveApplicationsActionRqst&& from) noexcept
    : RemoveApplicationsActionRqst() {
    *this = ::std::move(from);
  }

  inline RemoveApplicationsActionRqst& operator=(RemoveApplicationsActionRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveApplicationsActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveApplicationsActionRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveApplicationsActionRqst*>(
               &_RemoveApplicationsActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(RemoveApplicationsActionRqst* other);
  friend void swap(RemoveApplicationsActionRqst& a, RemoveApplicationsActionRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveApplicationsActionRqst* New() const final {
    return CreateMaybeMessage<RemoveApplicationsActionRqst>(NULL);
  }

  RemoveApplicationsActionRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveApplicationsActionRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveApplicationsActionRqst& from);
  void MergeFrom(const RemoveApplicationsActionRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveApplicationsActionRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // @@protoc_insertion_point(class_scope:resource.RemoveApplicationsActionRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveApplicationsActionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveApplicationsActionRsp) */ {
 public:
  RemoveApplicationsActionRsp();
  virtual ~RemoveApplicationsActionRsp();

  RemoveApplicationsActionRsp(const RemoveApplicationsActionRsp& from);

  inline RemoveApplicationsActionRsp& operator=(const RemoveApplicationsActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveApplicationsActionRsp(RemoveApplicationsActionRsp&& from) noexcept
    : RemoveApplicationsActionRsp() {
    *this = ::std::move(from);
  }

  inline RemoveApplicationsActionRsp& operator=(RemoveApplicationsActionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveApplicationsActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveApplicationsActionRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveApplicationsActionRsp*>(
               &_RemoveApplicationsActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(RemoveApplicationsActionRsp* other);
  friend void swap(RemoveApplicationsActionRsp& a, RemoveApplicationsActionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveApplicationsActionRsp* New() const final {
    return CreateMaybeMessage<RemoveApplicationsActionRsp>(NULL);
  }

  RemoveApplicationsActionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveApplicationsActionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveApplicationsActionRsp& from);
  void MergeFrom(const RemoveApplicationsActionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveApplicationsActionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemoveApplicationsActionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetApplicationsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetApplicationsRqst) */ {
 public:
  GetApplicationsRqst();
  virtual ~GetApplicationsRqst();

  GetApplicationsRqst(const GetApplicationsRqst& from);

  inline GetApplicationsRqst& operator=(const GetApplicationsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetApplicationsRqst(GetApplicationsRqst&& from) noexcept
    : GetApplicationsRqst() {
    *this = ::std::move(from);
  }

  inline GetApplicationsRqst& operator=(GetApplicationsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetApplicationsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetApplicationsRqst* internal_default_instance() {
    return reinterpret_cast<const GetApplicationsRqst*>(
               &_GetApplicationsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(GetApplicationsRqst* other);
  friend void swap(GetApplicationsRqst& a, GetApplicationsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationsRqst* New() const final {
    return CreateMaybeMessage<GetApplicationsRqst>(NULL);
  }

  GetApplicationsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetApplicationsRqst& from);
  void MergeFrom(const GetApplicationsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string options = 2;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::std::string& options() const;
  void set_options(const ::std::string& value);
  #if LANG_CXX11
  void set_options(::std::string&& value);
  #endif
  void set_options(const char* value);
  void set_options(const char* value, size_t size);
  ::std::string* mutable_options();
  ::std::string* release_options();
  void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:resource.GetApplicationsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr options_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetApplicationsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetApplicationsRsp) */ {
 public:
  GetApplicationsRsp();
  virtual ~GetApplicationsRsp();

  GetApplicationsRsp(const GetApplicationsRsp& from);

  inline GetApplicationsRsp& operator=(const GetApplicationsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetApplicationsRsp(GetApplicationsRsp&& from) noexcept
    : GetApplicationsRsp() {
    *this = ::std::move(from);
  }

  inline GetApplicationsRsp& operator=(GetApplicationsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetApplicationsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetApplicationsRsp* internal_default_instance() {
    return reinterpret_cast<const GetApplicationsRsp*>(
               &_GetApplicationsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(GetApplicationsRsp* other);
  friend void swap(GetApplicationsRsp& a, GetApplicationsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationsRsp* New() const final {
    return CreateMaybeMessage<GetApplicationsRsp>(NULL);
  }

  GetApplicationsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetApplicationsRsp& from);
  void MergeFrom(const GetApplicationsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .resource.Application applications = 1;
  int applications_size() const;
  void clear_applications();
  static const int kApplicationsFieldNumber = 1;
  ::resource::Application* mutable_applications(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::Application >*
      mutable_applications();
  const ::resource::Application& applications(int index) const;
  ::resource::Application* add_applications();
  const ::google::protobuf::RepeatedPtrField< ::resource::Application >&
      applications() const;

  // @@protoc_insertion_point(class_scope:resource.GetApplicationsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::resource::Application > applications_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetApplicationVersionRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetApplicationVersionRqst) */ {
 public:
  GetApplicationVersionRqst();
  virtual ~GetApplicationVersionRqst();

  GetApplicationVersionRqst(const GetApplicationVersionRqst& from);

  inline GetApplicationVersionRqst& operator=(const GetApplicationVersionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetApplicationVersionRqst(GetApplicationVersionRqst&& from) noexcept
    : GetApplicationVersionRqst() {
    *this = ::std::move(from);
  }

  inline GetApplicationVersionRqst& operator=(GetApplicationVersionRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetApplicationVersionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetApplicationVersionRqst* internal_default_instance() {
    return reinterpret_cast<const GetApplicationVersionRqst*>(
               &_GetApplicationVersionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(GetApplicationVersionRqst* other);
  friend void swap(GetApplicationVersionRqst& a, GetApplicationVersionRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationVersionRqst* New() const final {
    return CreateMaybeMessage<GetApplicationVersionRqst>(NULL);
  }

  GetApplicationVersionRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationVersionRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetApplicationVersionRqst& from);
  void MergeFrom(const GetApplicationVersionRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationVersionRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:resource.GetApplicationVersionRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetApplicationVersionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetApplicationVersionRsp) */ {
 public:
  GetApplicationVersionRsp();
  virtual ~GetApplicationVersionRsp();

  GetApplicationVersionRsp(const GetApplicationVersionRsp& from);

  inline GetApplicationVersionRsp& operator=(const GetApplicationVersionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetApplicationVersionRsp(GetApplicationVersionRsp&& from) noexcept
    : GetApplicationVersionRsp() {
    *this = ::std::move(from);
  }

  inline GetApplicationVersionRsp& operator=(GetApplicationVersionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetApplicationVersionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetApplicationVersionRsp* internal_default_instance() {
    return reinterpret_cast<const GetApplicationVersionRsp*>(
               &_GetApplicationVersionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(GetApplicationVersionRsp* other);
  friend void swap(GetApplicationVersionRsp& a, GetApplicationVersionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationVersionRsp* New() const final {
    return CreateMaybeMessage<GetApplicationVersionRsp>(NULL);
  }

  GetApplicationVersionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationVersionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetApplicationVersionRsp& from);
  void MergeFrom(const GetApplicationVersionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationVersionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:resource.GetApplicationVersionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetApplicationIconRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetApplicationIconRqst) */ {
 public:
  GetApplicationIconRqst();
  virtual ~GetApplicationIconRqst();

  GetApplicationIconRqst(const GetApplicationIconRqst& from);

  inline GetApplicationIconRqst& operator=(const GetApplicationIconRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetApplicationIconRqst(GetApplicationIconRqst&& from) noexcept
    : GetApplicationIconRqst() {
    *this = ::std::move(from);
  }

  inline GetApplicationIconRqst& operator=(GetApplicationIconRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetApplicationIconRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetApplicationIconRqst* internal_default_instance() {
    return reinterpret_cast<const GetApplicationIconRqst*>(
               &_GetApplicationIconRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(GetApplicationIconRqst* other);
  friend void swap(GetApplicationIconRqst& a, GetApplicationIconRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationIconRqst* New() const final {
    return CreateMaybeMessage<GetApplicationIconRqst>(NULL);
  }

  GetApplicationIconRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationIconRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetApplicationIconRqst& from);
  void MergeFrom(const GetApplicationIconRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationIconRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:resource.GetApplicationIconRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetApplicationIconRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetApplicationIconRsp) */ {
 public:
  GetApplicationIconRsp();
  virtual ~GetApplicationIconRsp();

  GetApplicationIconRsp(const GetApplicationIconRsp& from);

  inline GetApplicationIconRsp& operator=(const GetApplicationIconRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetApplicationIconRsp(GetApplicationIconRsp&& from) noexcept
    : GetApplicationIconRsp() {
    *this = ::std::move(from);
  }

  inline GetApplicationIconRsp& operator=(GetApplicationIconRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetApplicationIconRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetApplicationIconRsp* internal_default_instance() {
    return reinterpret_cast<const GetApplicationIconRsp*>(
               &_GetApplicationIconRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(GetApplicationIconRsp* other);
  friend void swap(GetApplicationIconRsp& a, GetApplicationIconRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationIconRsp* New() const final {
    return CreateMaybeMessage<GetApplicationIconRsp>(NULL);
  }

  GetApplicationIconRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationIconRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetApplicationIconRsp& from);
  void MergeFrom(const GetApplicationIconRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationIconRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string icon = 1;
  void clear_icon();
  static const int kIconFieldNumber = 1;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // @@protoc_insertion_point(class_scope:resource.GetApplicationIconRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetApplicationAliasRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetApplicationAliasRqst) */ {
 public:
  GetApplicationAliasRqst();
  virtual ~GetApplicationAliasRqst();

  GetApplicationAliasRqst(const GetApplicationAliasRqst& from);

  inline GetApplicationAliasRqst& operator=(const GetApplicationAliasRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetApplicationAliasRqst(GetApplicationAliasRqst&& from) noexcept
    : GetApplicationAliasRqst() {
    *this = ::std::move(from);
  }

  inline GetApplicationAliasRqst& operator=(GetApplicationAliasRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetApplicationAliasRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetApplicationAliasRqst* internal_default_instance() {
    return reinterpret_cast<const GetApplicationAliasRqst*>(
               &_GetApplicationAliasRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(GetApplicationAliasRqst* other);
  friend void swap(GetApplicationAliasRqst& a, GetApplicationAliasRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationAliasRqst* New() const final {
    return CreateMaybeMessage<GetApplicationAliasRqst>(NULL);
  }

  GetApplicationAliasRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationAliasRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetApplicationAliasRqst& from);
  void MergeFrom(const GetApplicationAliasRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationAliasRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:resource.GetApplicationAliasRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetApplicationAliasRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetApplicationAliasRsp) */ {
 public:
  GetApplicationAliasRsp();
  virtual ~GetApplicationAliasRsp();

  GetApplicationAliasRsp(const GetApplicationAliasRsp& from);

  inline GetApplicationAliasRsp& operator=(const GetApplicationAliasRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetApplicationAliasRsp(GetApplicationAliasRsp&& from) noexcept
    : GetApplicationAliasRsp() {
    *this = ::std::move(from);
  }

  inline GetApplicationAliasRsp& operator=(GetApplicationAliasRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetApplicationAliasRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetApplicationAliasRsp* internal_default_instance() {
    return reinterpret_cast<const GetApplicationAliasRsp*>(
               &_GetApplicationAliasRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(GetApplicationAliasRsp* other);
  friend void swap(GetApplicationAliasRsp& a, GetApplicationAliasRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationAliasRsp* New() const final {
    return CreateMaybeMessage<GetApplicationAliasRsp>(NULL);
  }

  GetApplicationAliasRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationAliasRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetApplicationAliasRsp& from);
  void MergeFrom(const GetApplicationAliasRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationAliasRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // @@protoc_insertion_point(class_scope:resource.GetApplicationAliasRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.Group) */ {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(Group* other);
  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Group* New() const final {
    return CreateMaybeMessage<Group>(NULL);
  }

  Group* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string members = 5;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 5;
  const ::std::string& members(int index) const;
  ::std::string* mutable_members(int index);
  void set_members(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_members(int index, ::std::string&& value);
  #endif
  void set_members(int index, const char* value);
  void set_members(int index, const char* value, size_t size);
  ::std::string* add_members();
  void add_members(const ::std::string& value);
  #if LANG_CXX11
  void add_members(::std::string&& value);
  #endif
  void add_members(const char* value);
  void add_members(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& members() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_members();

  // repeated string organizations = 6;
  int organizations_size() const;
  void clear_organizations();
  static const int kOrganizationsFieldNumber = 6;
  const ::std::string& organizations(int index) const;
  ::std::string* mutable_organizations(int index);
  void set_organizations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_organizations(int index, ::std::string&& value);
  #endif
  void set_organizations(int index, const char* value);
  void set_organizations(int index, const char* value, size_t size);
  ::std::string* add_organizations();
  void add_organizations(const ::std::string& value);
  #if LANG_CXX11
  void add_organizations(::std::string&& value);
  #endif
  void add_organizations(const char* value);
  void add_organizations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& organizations() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_organizations();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string domain = 3;
  void clear_domain();
  static const int kDomainFieldNumber = 3;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:resource.Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> members_;
  ::google::protobuf::RepeatedPtrField< ::std::string> organizations_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateGroupRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.CreateGroupRqst) */ {
 public:
  CreateGroupRqst();
  virtual ~CreateGroupRqst();

  CreateGroupRqst(const CreateGroupRqst& from);

  inline CreateGroupRqst& operator=(const CreateGroupRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateGroupRqst(CreateGroupRqst&& from) noexcept
    : CreateGroupRqst() {
    *this = ::std::move(from);
  }

  inline CreateGroupRqst& operator=(CreateGroupRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroupRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupRqst* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRqst*>(
               &_CreateGroupRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(CreateGroupRqst* other);
  friend void swap(CreateGroupRqst& a, CreateGroupRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupRqst* New() const final {
    return CreateMaybeMessage<CreateGroupRqst>(NULL);
  }

  CreateGroupRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateGroupRqst& from);
  void MergeFrom(const CreateGroupRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.Group group = 1;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  private:
  const ::resource::Group& _internal_group() const;
  public:
  const ::resource::Group& group() const;
  ::resource::Group* release_group();
  ::resource::Group* mutable_group();
  void set_allocated_group(::resource::Group* group);

  // @@protoc_insertion_point(class_scope:resource.CreateGroupRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::Group* group_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.CreateGroupRsp) */ {
 public:
  CreateGroupRsp();
  virtual ~CreateGroupRsp();

  CreateGroupRsp(const CreateGroupRsp& from);

  inline CreateGroupRsp& operator=(const CreateGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateGroupRsp(CreateGroupRsp&& from) noexcept
    : CreateGroupRsp() {
    *this = ::std::move(from);
  }

  inline CreateGroupRsp& operator=(CreateGroupRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupRsp* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRsp*>(
               &_CreateGroupRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(CreateGroupRsp* other);
  friend void swap(CreateGroupRsp& a, CreateGroupRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupRsp* New() const final {
    return CreateMaybeMessage<CreateGroupRsp>(NULL);
  }

  CreateGroupRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateGroupRsp& from);
  void MergeFrom(const CreateGroupRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.CreateGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateGroupRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.UpdateGroupRqst) */ {
 public:
  UpdateGroupRqst();
  virtual ~UpdateGroupRqst();

  UpdateGroupRqst(const UpdateGroupRqst& from);

  inline UpdateGroupRqst& operator=(const UpdateGroupRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateGroupRqst(UpdateGroupRqst&& from) noexcept
    : UpdateGroupRqst() {
    *this = ::std::move(from);
  }

  inline UpdateGroupRqst& operator=(UpdateGroupRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateGroupRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGroupRqst* internal_default_instance() {
    return reinterpret_cast<const UpdateGroupRqst*>(
               &_UpdateGroupRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(UpdateGroupRqst* other);
  friend void swap(UpdateGroupRqst& a, UpdateGroupRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateGroupRqst* New() const final {
    return CreateMaybeMessage<UpdateGroupRqst>(NULL);
  }

  UpdateGroupRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGroupRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateGroupRqst& from);
  void MergeFrom(const UpdateGroupRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGroupRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string groupId = 1;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // string values = 2;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::std::string& values() const;
  void set_values(const ::std::string& value);
  #if LANG_CXX11
  void set_values(::std::string&& value);
  #endif
  void set_values(const char* value);
  void set_values(const char* value, size_t size);
  ::std::string* mutable_values();
  ::std::string* release_values();
  void set_allocated_values(::std::string* values);

  // @@protoc_insertion_point(class_scope:resource.UpdateGroupRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.UpdateGroupRsp) */ {
 public:
  UpdateGroupRsp();
  virtual ~UpdateGroupRsp();

  UpdateGroupRsp(const UpdateGroupRsp& from);

  inline UpdateGroupRsp& operator=(const UpdateGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateGroupRsp(UpdateGroupRsp&& from) noexcept
    : UpdateGroupRsp() {
    *this = ::std::move(from);
  }

  inline UpdateGroupRsp& operator=(UpdateGroupRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGroupRsp* internal_default_instance() {
    return reinterpret_cast<const UpdateGroupRsp*>(
               &_UpdateGroupRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(UpdateGroupRsp* other);
  friend void swap(UpdateGroupRsp& a, UpdateGroupRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateGroupRsp* New() const final {
    return CreateMaybeMessage<UpdateGroupRsp>(NULL);
  }

  UpdateGroupRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGroupRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateGroupRsp& from);
  void MergeFrom(const UpdateGroupRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGroupRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.UpdateGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetGroupsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetGroupsRqst) */ {
 public:
  GetGroupsRqst();
  virtual ~GetGroupsRqst();

  GetGroupsRqst(const GetGroupsRqst& from);

  inline GetGroupsRqst& operator=(const GetGroupsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGroupsRqst(GetGroupsRqst&& from) noexcept
    : GetGroupsRqst() {
    *this = ::std::move(from);
  }

  inline GetGroupsRqst& operator=(GetGroupsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGroupsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupsRqst* internal_default_instance() {
    return reinterpret_cast<const GetGroupsRqst*>(
               &_GetGroupsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(GetGroupsRqst* other);
  friend void swap(GetGroupsRqst& a, GetGroupsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGroupsRqst* New() const final {
    return CreateMaybeMessage<GetGroupsRqst>(NULL);
  }

  GetGroupsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetGroupsRqst& from);
  void MergeFrom(const GetGroupsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string options = 2;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::std::string& options() const;
  void set_options(const ::std::string& value);
  #if LANG_CXX11
  void set_options(::std::string&& value);
  #endif
  void set_options(const char* value);
  void set_options(const char* value, size_t size);
  ::std::string* mutable_options();
  ::std::string* release_options();
  void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:resource.GetGroupsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr options_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetGroupsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetGroupsRsp) */ {
 public:
  GetGroupsRsp();
  virtual ~GetGroupsRsp();

  GetGroupsRsp(const GetGroupsRsp& from);

  inline GetGroupsRsp& operator=(const GetGroupsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGroupsRsp(GetGroupsRsp&& from) noexcept
    : GetGroupsRsp() {
    *this = ::std::move(from);
  }

  inline GetGroupsRsp& operator=(GetGroupsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGroupsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupsRsp* internal_default_instance() {
    return reinterpret_cast<const GetGroupsRsp*>(
               &_GetGroupsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(GetGroupsRsp* other);
  friend void swap(GetGroupsRsp& a, GetGroupsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGroupsRsp* New() const final {
    return CreateMaybeMessage<GetGroupsRsp>(NULL);
  }

  GetGroupsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetGroupsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetGroupsRsp& from);
  void MergeFrom(const GetGroupsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .resource.Group groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  ::resource::Group* mutable_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::Group >*
      mutable_groups();
  const ::resource::Group& groups(int index) const;
  ::resource::Group* add_groups();
  const ::google::protobuf::RepeatedPtrField< ::resource::Group >&
      groups() const;

  // @@protoc_insertion_point(class_scope:resource.GetGroupsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::resource::Group > groups_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteGroupRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteGroupRqst) */ {
 public:
  DeleteGroupRqst();
  virtual ~DeleteGroupRqst();

  DeleteGroupRqst(const DeleteGroupRqst& from);

  inline DeleteGroupRqst& operator=(const DeleteGroupRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteGroupRqst(DeleteGroupRqst&& from) noexcept
    : DeleteGroupRqst() {
    *this = ::std::move(from);
  }

  inline DeleteGroupRqst& operator=(DeleteGroupRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteGroupRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGroupRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupRqst*>(
               &_DeleteGroupRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(DeleteGroupRqst* other);
  friend void swap(DeleteGroupRqst& a, DeleteGroupRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteGroupRqst* New() const final {
    return CreateMaybeMessage<DeleteGroupRqst>(NULL);
  }

  DeleteGroupRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGroupRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteGroupRqst& from);
  void MergeFrom(const DeleteGroupRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group = 1;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // @@protoc_insertion_point(class_scope:resource.DeleteGroupRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteGroupRsp) */ {
 public:
  DeleteGroupRsp();
  virtual ~DeleteGroupRsp();

  DeleteGroupRsp(const DeleteGroupRsp& from);

  inline DeleteGroupRsp& operator=(const DeleteGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteGroupRsp(DeleteGroupRsp&& from) noexcept
    : DeleteGroupRsp() {
    *this = ::std::move(from);
  }

  inline DeleteGroupRsp& operator=(DeleteGroupRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGroupRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupRsp*>(
               &_DeleteGroupRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(DeleteGroupRsp* other);
  friend void swap(DeleteGroupRsp& a, DeleteGroupRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteGroupRsp* New() const final {
    return CreateMaybeMessage<DeleteGroupRsp>(NULL);
  }

  DeleteGroupRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGroupRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteGroupRsp& from);
  void MergeFrom(const DeleteGroupRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGroupRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.DeleteGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddGroupMemberAccountRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddGroupMemberAccountRqst) */ {
 public:
  AddGroupMemberAccountRqst();
  virtual ~AddGroupMemberAccountRqst();

  AddGroupMemberAccountRqst(const AddGroupMemberAccountRqst& from);

  inline AddGroupMemberAccountRqst& operator=(const AddGroupMemberAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddGroupMemberAccountRqst(AddGroupMemberAccountRqst&& from) noexcept
    : AddGroupMemberAccountRqst() {
    *this = ::std::move(from);
  }

  inline AddGroupMemberAccountRqst& operator=(AddGroupMemberAccountRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddGroupMemberAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroupMemberAccountRqst* internal_default_instance() {
    return reinterpret_cast<const AddGroupMemberAccountRqst*>(
               &_AddGroupMemberAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(AddGroupMemberAccountRqst* other);
  friend void swap(AddGroupMemberAccountRqst& a, AddGroupMemberAccountRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddGroupMemberAccountRqst* New() const final {
    return CreateMaybeMessage<AddGroupMemberAccountRqst>(NULL);
  }

  AddGroupMemberAccountRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupMemberAccountRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddGroupMemberAccountRqst& from);
  void MergeFrom(const AddGroupMemberAccountRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupMemberAccountRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string groupId = 1;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // string accountId = 2;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 2;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // @@protoc_insertion_point(class_scope:resource.AddGroupMemberAccountRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddGroupMemberAccountRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddGroupMemberAccountRsp) */ {
 public:
  AddGroupMemberAccountRsp();
  virtual ~AddGroupMemberAccountRsp();

  AddGroupMemberAccountRsp(const AddGroupMemberAccountRsp& from);

  inline AddGroupMemberAccountRsp& operator=(const AddGroupMemberAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddGroupMemberAccountRsp(AddGroupMemberAccountRsp&& from) noexcept
    : AddGroupMemberAccountRsp() {
    *this = ::std::move(from);
  }

  inline AddGroupMemberAccountRsp& operator=(AddGroupMemberAccountRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddGroupMemberAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroupMemberAccountRsp* internal_default_instance() {
    return reinterpret_cast<const AddGroupMemberAccountRsp*>(
               &_AddGroupMemberAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(AddGroupMemberAccountRsp* other);
  friend void swap(AddGroupMemberAccountRsp& a, AddGroupMemberAccountRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddGroupMemberAccountRsp* New() const final {
    return CreateMaybeMessage<AddGroupMemberAccountRsp>(NULL);
  }

  AddGroupMemberAccountRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupMemberAccountRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddGroupMemberAccountRsp& from);
  void MergeFrom(const AddGroupMemberAccountRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupMemberAccountRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.AddGroupMemberAccountRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveGroupMemberAccountRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveGroupMemberAccountRqst) */ {
 public:
  RemoveGroupMemberAccountRqst();
  virtual ~RemoveGroupMemberAccountRqst();

  RemoveGroupMemberAccountRqst(const RemoveGroupMemberAccountRqst& from);

  inline RemoveGroupMemberAccountRqst& operator=(const RemoveGroupMemberAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveGroupMemberAccountRqst(RemoveGroupMemberAccountRqst&& from) noexcept
    : RemoveGroupMemberAccountRqst() {
    *this = ::std::move(from);
  }

  inline RemoveGroupMemberAccountRqst& operator=(RemoveGroupMemberAccountRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveGroupMemberAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveGroupMemberAccountRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveGroupMemberAccountRqst*>(
               &_RemoveGroupMemberAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(RemoveGroupMemberAccountRqst* other);
  friend void swap(RemoveGroupMemberAccountRqst& a, RemoveGroupMemberAccountRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveGroupMemberAccountRqst* New() const final {
    return CreateMaybeMessage<RemoveGroupMemberAccountRqst>(NULL);
  }

  RemoveGroupMemberAccountRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveGroupMemberAccountRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveGroupMemberAccountRqst& from);
  void MergeFrom(const RemoveGroupMemberAccountRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveGroupMemberAccountRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string groupId = 1;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // string accountId = 2;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 2;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // @@protoc_insertion_point(class_scope:resource.RemoveGroupMemberAccountRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveGroupMemberAccountRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveGroupMemberAccountRsp) */ {
 public:
  RemoveGroupMemberAccountRsp();
  virtual ~RemoveGroupMemberAccountRsp();

  RemoveGroupMemberAccountRsp(const RemoveGroupMemberAccountRsp& from);

  inline RemoveGroupMemberAccountRsp& operator=(const RemoveGroupMemberAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveGroupMemberAccountRsp(RemoveGroupMemberAccountRsp&& from) noexcept
    : RemoveGroupMemberAccountRsp() {
    *this = ::std::move(from);
  }

  inline RemoveGroupMemberAccountRsp& operator=(RemoveGroupMemberAccountRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveGroupMemberAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveGroupMemberAccountRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveGroupMemberAccountRsp*>(
               &_RemoveGroupMemberAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(RemoveGroupMemberAccountRsp* other);
  friend void swap(RemoveGroupMemberAccountRsp& a, RemoveGroupMemberAccountRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveGroupMemberAccountRsp* New() const final {
    return CreateMaybeMessage<RemoveGroupMemberAccountRsp>(NULL);
  }

  RemoveGroupMemberAccountRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveGroupMemberAccountRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveGroupMemberAccountRsp& from);
  void MergeFrom(const RemoveGroupMemberAccountRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveGroupMemberAccountRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemoveGroupMemberAccountRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Organization : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.Organization) */ {
 public:
  Organization();
  virtual ~Organization();

  Organization(const Organization& from);

  inline Organization& operator=(const Organization& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Organization(Organization&& from) noexcept
    : Organization() {
    *this = ::std::move(from);
  }

  inline Organization& operator=(Organization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Organization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Organization* internal_default_instance() {
    return reinterpret_cast<const Organization*>(
               &_Organization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(Organization* other);
  friend void swap(Organization& a, Organization& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Organization* New() const final {
    return CreateMaybeMessage<Organization>(NULL);
  }

  Organization* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Organization>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Organization& from);
  void MergeFrom(const Organization& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Organization* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string accounts = 7;
  int accounts_size() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 7;
  const ::std::string& accounts(int index) const;
  ::std::string* mutable_accounts(int index);
  void set_accounts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_accounts(int index, ::std::string&& value);
  #endif
  void set_accounts(int index, const char* value);
  void set_accounts(int index, const char* value, size_t size);
  ::std::string* add_accounts();
  void add_accounts(const ::std::string& value);
  #if LANG_CXX11
  void add_accounts(::std::string&& value);
  #endif
  void add_accounts(const char* value);
  void add_accounts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& accounts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_accounts();

  // repeated string groups = 8;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 8;
  const ::std::string& groups(int index) const;
  ::std::string* mutable_groups(int index);
  void set_groups(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_groups(int index, ::std::string&& value);
  #endif
  void set_groups(int index, const char* value);
  void set_groups(int index, const char* value, size_t size);
  ::std::string* add_groups();
  void add_groups(const ::std::string& value);
  #if LANG_CXX11
  void add_groups(::std::string&& value);
  #endif
  void add_groups(const char* value);
  void add_groups(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& groups() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_groups();

  // repeated string roles = 9;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 9;
  const ::std::string& roles(int index) const;
  ::std::string* mutable_roles(int index);
  void set_roles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_roles(int index, ::std::string&& value);
  #endif
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, size_t size);
  ::std::string* add_roles();
  void add_roles(const ::std::string& value);
  #if LANG_CXX11
  void add_roles(::std::string&& value);
  #endif
  void add_roles(const char* value);
  void add_roles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& roles() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_roles();

  // repeated string applications = 10;
  int applications_size() const;
  void clear_applications();
  static const int kApplicationsFieldNumber = 10;
  const ::std::string& applications(int index) const;
  ::std::string* mutable_applications(int index);
  void set_applications(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_applications(int index, ::std::string&& value);
  #endif
  void set_applications(int index, const char* value);
  void set_applications(int index, const char* value, size_t size);
  ::std::string* add_applications();
  void add_applications(const ::std::string& value);
  #if LANG_CXX11
  void add_applications(::std::string&& value);
  #endif
  void add_applications(const char* value);
  void add_applications(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& applications() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_applications();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 4;
  void clear_email();
  static const int kEmailFieldNumber = 4;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string icon = 5;
  void clear_icon();
  static const int kIconFieldNumber = 5;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // string description = 6;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:resource.Organization)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> accounts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> groups_;
  ::google::protobuf::RepeatedPtrField< ::std::string> roles_;
  ::google::protobuf::RepeatedPtrField< ::std::string> applications_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateOrganizationRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.CreateOrganizationRqst) */ {
 public:
  CreateOrganizationRqst();
  virtual ~CreateOrganizationRqst();

  CreateOrganizationRqst(const CreateOrganizationRqst& from);

  inline CreateOrganizationRqst& operator=(const CreateOrganizationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateOrganizationRqst(CreateOrganizationRqst&& from) noexcept
    : CreateOrganizationRqst() {
    *this = ::std::move(from);
  }

  inline CreateOrganizationRqst& operator=(CreateOrganizationRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOrganizationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOrganizationRqst* internal_default_instance() {
    return reinterpret_cast<const CreateOrganizationRqst*>(
               &_CreateOrganizationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(CreateOrganizationRqst* other);
  friend void swap(CreateOrganizationRqst& a, CreateOrganizationRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateOrganizationRqst* New() const final {
    return CreateMaybeMessage<CreateOrganizationRqst>(NULL);
  }

  CreateOrganizationRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrganizationRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateOrganizationRqst& from);
  void MergeFrom(const CreateOrganizationRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrganizationRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.Organization organization = 1;
  bool has_organization() const;
  void clear_organization();
  static const int kOrganizationFieldNumber = 1;
  private:
  const ::resource::Organization& _internal_organization() const;
  public:
  const ::resource::Organization& organization() const;
  ::resource::Organization* release_organization();
  ::resource::Organization* mutable_organization();
  void set_allocated_organization(::resource::Organization* organization);

  // @@protoc_insertion_point(class_scope:resource.CreateOrganizationRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::Organization* organization_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateOrganizationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.CreateOrganizationRsp) */ {
 public:
  CreateOrganizationRsp();
  virtual ~CreateOrganizationRsp();

  CreateOrganizationRsp(const CreateOrganizationRsp& from);

  inline CreateOrganizationRsp& operator=(const CreateOrganizationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateOrganizationRsp(CreateOrganizationRsp&& from) noexcept
    : CreateOrganizationRsp() {
    *this = ::std::move(from);
  }

  inline CreateOrganizationRsp& operator=(CreateOrganizationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOrganizationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateOrganizationRsp* internal_default_instance() {
    return reinterpret_cast<const CreateOrganizationRsp*>(
               &_CreateOrganizationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void Swap(CreateOrganizationRsp* other);
  friend void swap(CreateOrganizationRsp& a, CreateOrganizationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateOrganizationRsp* New() const final {
    return CreateMaybeMessage<CreateOrganizationRsp>(NULL);
  }

  CreateOrganizationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateOrganizationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateOrganizationRsp& from);
  void MergeFrom(const CreateOrganizationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOrganizationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.CreateOrganizationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateOrganizationRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.UpdateOrganizationRqst) */ {
 public:
  UpdateOrganizationRqst();
  virtual ~UpdateOrganizationRqst();

  UpdateOrganizationRqst(const UpdateOrganizationRqst& from);

  inline UpdateOrganizationRqst& operator=(const UpdateOrganizationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateOrganizationRqst(UpdateOrganizationRqst&& from) noexcept
    : UpdateOrganizationRqst() {
    *this = ::std::move(from);
  }

  inline UpdateOrganizationRqst& operator=(UpdateOrganizationRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateOrganizationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOrganizationRqst* internal_default_instance() {
    return reinterpret_cast<const UpdateOrganizationRqst*>(
               &_UpdateOrganizationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(UpdateOrganizationRqst* other);
  friend void swap(UpdateOrganizationRqst& a, UpdateOrganizationRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateOrganizationRqst* New() const final {
    return CreateMaybeMessage<UpdateOrganizationRqst>(NULL);
  }

  UpdateOrganizationRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOrganizationRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateOrganizationRqst& from);
  void MergeFrom(const UpdateOrganizationRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrganizationRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organizationId = 1;
  void clear_organizationid();
  static const int kOrganizationIdFieldNumber = 1;
  const ::std::string& organizationid() const;
  void set_organizationid(const ::std::string& value);
  #if LANG_CXX11
  void set_organizationid(::std::string&& value);
  #endif
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  ::std::string* mutable_organizationid();
  ::std::string* release_organizationid();
  void set_allocated_organizationid(::std::string* organizationid);

  // string values = 2;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::std::string& values() const;
  void set_values(const ::std::string& value);
  #if LANG_CXX11
  void set_values(::std::string&& value);
  #endif
  void set_values(const char* value);
  void set_values(const char* value, size_t size);
  ::std::string* mutable_values();
  ::std::string* release_values();
  void set_allocated_values(::std::string* values);

  // @@protoc_insertion_point(class_scope:resource.UpdateOrganizationRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr organizationid_;
  ::google::protobuf::internal::ArenaStringPtr values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateOrganizationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.UpdateOrganizationRsp) */ {
 public:
  UpdateOrganizationRsp();
  virtual ~UpdateOrganizationRsp();

  UpdateOrganizationRsp(const UpdateOrganizationRsp& from);

  inline UpdateOrganizationRsp& operator=(const UpdateOrganizationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateOrganizationRsp(UpdateOrganizationRsp&& from) noexcept
    : UpdateOrganizationRsp() {
    *this = ::std::move(from);
  }

  inline UpdateOrganizationRsp& operator=(UpdateOrganizationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateOrganizationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOrganizationRsp* internal_default_instance() {
    return reinterpret_cast<const UpdateOrganizationRsp*>(
               &_UpdateOrganizationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(UpdateOrganizationRsp* other);
  friend void swap(UpdateOrganizationRsp& a, UpdateOrganizationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateOrganizationRsp* New() const final {
    return CreateMaybeMessage<UpdateOrganizationRsp>(NULL);
  }

  UpdateOrganizationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOrganizationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateOrganizationRsp& from);
  void MergeFrom(const UpdateOrganizationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrganizationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.UpdateOrganizationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOrganizationsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetOrganizationsRqst) */ {
 public:
  GetOrganizationsRqst();
  virtual ~GetOrganizationsRqst();

  GetOrganizationsRqst(const GetOrganizationsRqst& from);

  inline GetOrganizationsRqst& operator=(const GetOrganizationsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOrganizationsRqst(GetOrganizationsRqst&& from) noexcept
    : GetOrganizationsRqst() {
    *this = ::std::move(from);
  }

  inline GetOrganizationsRqst& operator=(GetOrganizationsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOrganizationsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOrganizationsRqst* internal_default_instance() {
    return reinterpret_cast<const GetOrganizationsRqst*>(
               &_GetOrganizationsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(GetOrganizationsRqst* other);
  friend void swap(GetOrganizationsRqst& a, GetOrganizationsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOrganizationsRqst* New() const final {
    return CreateMaybeMessage<GetOrganizationsRqst>(NULL);
  }

  GetOrganizationsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetOrganizationsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetOrganizationsRqst& from);
  void MergeFrom(const GetOrganizationsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrganizationsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string options = 2;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::std::string& options() const;
  void set_options(const ::std::string& value);
  #if LANG_CXX11
  void set_options(::std::string&& value);
  #endif
  void set_options(const char* value);
  void set_options(const char* value, size_t size);
  ::std::string* mutable_options();
  ::std::string* release_options();
  void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:resource.GetOrganizationsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr options_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOrganizationsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetOrganizationsRsp) */ {
 public:
  GetOrganizationsRsp();
  virtual ~GetOrganizationsRsp();

  GetOrganizationsRsp(const GetOrganizationsRsp& from);

  inline GetOrganizationsRsp& operator=(const GetOrganizationsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOrganizationsRsp(GetOrganizationsRsp&& from) noexcept
    : GetOrganizationsRsp() {
    *this = ::std::move(from);
  }

  inline GetOrganizationsRsp& operator=(GetOrganizationsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOrganizationsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOrganizationsRsp* internal_default_instance() {
    return reinterpret_cast<const GetOrganizationsRsp*>(
               &_GetOrganizationsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(GetOrganizationsRsp* other);
  friend void swap(GetOrganizationsRsp& a, GetOrganizationsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOrganizationsRsp* New() const final {
    return CreateMaybeMessage<GetOrganizationsRsp>(NULL);
  }

  GetOrganizationsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetOrganizationsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetOrganizationsRsp& from);
  void MergeFrom(const GetOrganizationsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrganizationsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .resource.Organization organizations = 1;
  int organizations_size() const;
  void clear_organizations();
  static const int kOrganizationsFieldNumber = 1;
  ::resource::Organization* mutable_organizations(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::Organization >*
      mutable_organizations();
  const ::resource::Organization& organizations(int index) const;
  ::resource::Organization* add_organizations();
  const ::google::protobuf::RepeatedPtrField< ::resource::Organization >&
      organizations() const;

  // @@protoc_insertion_point(class_scope:resource.GetOrganizationsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::resource::Organization > organizations_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddOrganizationAccountRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationAccountRqst) */ {
 public:
  AddOrganizationAccountRqst();
  virtual ~AddOrganizationAccountRqst();

  AddOrganizationAccountRqst(const AddOrganizationAccountRqst& from);

  inline AddOrganizationAccountRqst& operator=(const AddOrganizationAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddOrganizationAccountRqst(AddOrganizationAccountRqst&& from) noexcept
    : AddOrganizationAccountRqst() {
    *this = ::std::move(from);
  }

  inline AddOrganizationAccountRqst& operator=(AddOrganizationAccountRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddOrganizationAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationAccountRqst* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationAccountRqst*>(
               &_AddOrganizationAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  void Swap(AddOrganizationAccountRqst* other);
  friend void swap(AddOrganizationAccountRqst& a, AddOrganizationAccountRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationAccountRqst* New() const final {
    return CreateMaybeMessage<AddOrganizationAccountRqst>(NULL);
  }

  AddOrganizationAccountRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationAccountRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddOrganizationAccountRqst& from);
  void MergeFrom(const AddOrganizationAccountRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationAccountRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organizationId = 1;
  void clear_organizationid();
  static const int kOrganizationIdFieldNumber = 1;
  const ::std::string& organizationid() const;
  void set_organizationid(const ::std::string& value);
  #if LANG_CXX11
  void set_organizationid(::std::string&& value);
  #endif
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  ::std::string* mutable_organizationid();
  ::std::string* release_organizationid();
  void set_allocated_organizationid(::std::string* organizationid);

  // string accountId = 2;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 2;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationAccountRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr organizationid_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddOrganizationAccountRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationAccountRsp) */ {
 public:
  AddOrganizationAccountRsp();
  virtual ~AddOrganizationAccountRsp();

  AddOrganizationAccountRsp(const AddOrganizationAccountRsp& from);

  inline AddOrganizationAccountRsp& operator=(const AddOrganizationAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddOrganizationAccountRsp(AddOrganizationAccountRsp&& from) noexcept
    : AddOrganizationAccountRsp() {
    *this = ::std::move(from);
  }

  inline AddOrganizationAccountRsp& operator=(AddOrganizationAccountRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddOrganizationAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationAccountRsp* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationAccountRsp*>(
               &_AddOrganizationAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  void Swap(AddOrganizationAccountRsp* other);
  friend void swap(AddOrganizationAccountRsp& a, AddOrganizationAccountRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationAccountRsp* New() const final {
    return CreateMaybeMessage<AddOrganizationAccountRsp>(NULL);
  }

  AddOrganizationAccountRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationAccountRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddOrganizationAccountRsp& from);
  void MergeFrom(const AddOrganizationAccountRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationAccountRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationAccountRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddOrganizationGroupRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationGroupRqst) */ {
 public:
  AddOrganizationGroupRqst();
  virtual ~AddOrganizationGroupRqst();

  AddOrganizationGroupRqst(const AddOrganizationGroupRqst& from);

  inline AddOrganizationGroupRqst& operator=(const AddOrganizationGroupRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddOrganizationGroupRqst(AddOrganizationGroupRqst&& from) noexcept
    : AddOrganizationGroupRqst() {
    *this = ::std::move(from);
  }

  inline AddOrganizationGroupRqst& operator=(AddOrganizationGroupRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddOrganizationGroupRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationGroupRqst* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationGroupRqst*>(
               &_AddOrganizationGroupRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  void Swap(AddOrganizationGroupRqst* other);
  friend void swap(AddOrganizationGroupRqst& a, AddOrganizationGroupRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationGroupRqst* New() const final {
    return CreateMaybeMessage<AddOrganizationGroupRqst>(NULL);
  }

  AddOrganizationGroupRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationGroupRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddOrganizationGroupRqst& from);
  void MergeFrom(const AddOrganizationGroupRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationGroupRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organizationId = 1;
  void clear_organizationid();
  static const int kOrganizationIdFieldNumber = 1;
  const ::std::string& organizationid() const;
  void set_organizationid(const ::std::string& value);
  #if LANG_CXX11
  void set_organizationid(::std::string&& value);
  #endif
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  ::std::string* mutable_organizationid();
  ::std::string* release_organizationid();
  void set_allocated_organizationid(::std::string* organizationid);

  // string groupId = 2;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationGroupRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr organizationid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddOrganizationGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationGroupRsp) */ {
 public:
  AddOrganizationGroupRsp();
  virtual ~AddOrganizationGroupRsp();

  AddOrganizationGroupRsp(const AddOrganizationGroupRsp& from);

  inline AddOrganizationGroupRsp& operator=(const AddOrganizationGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddOrganizationGroupRsp(AddOrganizationGroupRsp&& from) noexcept
    : AddOrganizationGroupRsp() {
    *this = ::std::move(from);
  }

  inline AddOrganizationGroupRsp& operator=(AddOrganizationGroupRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddOrganizationGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationGroupRsp* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationGroupRsp*>(
               &_AddOrganizationGroupRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  void Swap(AddOrganizationGroupRsp* other);
  friend void swap(AddOrganizationGroupRsp& a, AddOrganizationGroupRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationGroupRsp* New() const final {
    return CreateMaybeMessage<AddOrganizationGroupRsp>(NULL);
  }

  AddOrganizationGroupRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationGroupRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddOrganizationGroupRsp& from);
  void MergeFrom(const AddOrganizationGroupRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationGroupRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddOrganizationRoleRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationRoleRqst) */ {
 public:
  AddOrganizationRoleRqst();
  virtual ~AddOrganizationRoleRqst();

  AddOrganizationRoleRqst(const AddOrganizationRoleRqst& from);

  inline AddOrganizationRoleRqst& operator=(const AddOrganizationRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddOrganizationRoleRqst(AddOrganizationRoleRqst&& from) noexcept
    : AddOrganizationRoleRqst() {
    *this = ::std::move(from);
  }

  inline AddOrganizationRoleRqst& operator=(AddOrganizationRoleRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddOrganizationRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationRoleRqst* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationRoleRqst*>(
               &_AddOrganizationRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  void Swap(AddOrganizationRoleRqst* other);
  friend void swap(AddOrganizationRoleRqst& a, AddOrganizationRoleRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationRoleRqst* New() const final {
    return CreateMaybeMessage<AddOrganizationRoleRqst>(NULL);
  }

  AddOrganizationRoleRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationRoleRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddOrganizationRoleRqst& from);
  void MergeFrom(const AddOrganizationRoleRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationRoleRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organizationId = 1;
  void clear_organizationid();
  static const int kOrganizationIdFieldNumber = 1;
  const ::std::string& organizationid() const;
  void set_organizationid(const ::std::string& value);
  #if LANG_CXX11
  void set_organizationid(::std::string&& value);
  #endif
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  ::std::string* mutable_organizationid();
  ::std::string* release_organizationid();
  void set_allocated_organizationid(::std::string* organizationid);

  // string roleId = 2;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  const ::std::string& roleid() const;
  void set_roleid(const ::std::string& value);
  #if LANG_CXX11
  void set_roleid(::std::string&& value);
  #endif
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  ::std::string* mutable_roleid();
  ::std::string* release_roleid();
  void set_allocated_roleid(::std::string* roleid);

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationRoleRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr organizationid_;
  ::google::protobuf::internal::ArenaStringPtr roleid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddOrganizationRoleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationRoleRsp) */ {
 public:
  AddOrganizationRoleRsp();
  virtual ~AddOrganizationRoleRsp();

  AddOrganizationRoleRsp(const AddOrganizationRoleRsp& from);

  inline AddOrganizationRoleRsp& operator=(const AddOrganizationRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddOrganizationRoleRsp(AddOrganizationRoleRsp&& from) noexcept
    : AddOrganizationRoleRsp() {
    *this = ::std::move(from);
  }

  inline AddOrganizationRoleRsp& operator=(AddOrganizationRoleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddOrganizationRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationRoleRsp* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationRoleRsp*>(
               &_AddOrganizationRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  void Swap(AddOrganizationRoleRsp* other);
  friend void swap(AddOrganizationRoleRsp& a, AddOrganizationRoleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationRoleRsp* New() const final {
    return CreateMaybeMessage<AddOrganizationRoleRsp>(NULL);
  }

  AddOrganizationRoleRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationRoleRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddOrganizationRoleRsp& from);
  void MergeFrom(const AddOrganizationRoleRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationRoleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationRoleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddOrganizationApplicationRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationApplicationRqst) */ {
 public:
  AddOrganizationApplicationRqst();
  virtual ~AddOrganizationApplicationRqst();

  AddOrganizationApplicationRqst(const AddOrganizationApplicationRqst& from);

  inline AddOrganizationApplicationRqst& operator=(const AddOrganizationApplicationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddOrganizationApplicationRqst(AddOrganizationApplicationRqst&& from) noexcept
    : AddOrganizationApplicationRqst() {
    *this = ::std::move(from);
  }

  inline AddOrganizationApplicationRqst& operator=(AddOrganizationApplicationRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddOrganizationApplicationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationApplicationRqst* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationApplicationRqst*>(
               &_AddOrganizationApplicationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  void Swap(AddOrganizationApplicationRqst* other);
  friend void swap(AddOrganizationApplicationRqst& a, AddOrganizationApplicationRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationApplicationRqst* New() const final {
    return CreateMaybeMessage<AddOrganizationApplicationRqst>(NULL);
  }

  AddOrganizationApplicationRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationApplicationRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddOrganizationApplicationRqst& from);
  void MergeFrom(const AddOrganizationApplicationRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationApplicationRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organizationId = 1;
  void clear_organizationid();
  static const int kOrganizationIdFieldNumber = 1;
  const ::std::string& organizationid() const;
  void set_organizationid(const ::std::string& value);
  #if LANG_CXX11
  void set_organizationid(::std::string&& value);
  #endif
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  ::std::string* mutable_organizationid();
  ::std::string* release_organizationid();
  void set_allocated_organizationid(::std::string* organizationid);

  // string applicationId = 2;
  void clear_applicationid();
  static const int kApplicationIdFieldNumber = 2;
  const ::std::string& applicationid() const;
  void set_applicationid(const ::std::string& value);
  #if LANG_CXX11
  void set_applicationid(::std::string&& value);
  #endif
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  ::std::string* mutable_applicationid();
  ::std::string* release_applicationid();
  void set_allocated_applicationid(::std::string* applicationid);

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationApplicationRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr organizationid_;
  ::google::protobuf::internal::ArenaStringPtr applicationid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddOrganizationApplicationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddOrganizationApplicationRsp) */ {
 public:
  AddOrganizationApplicationRsp();
  virtual ~AddOrganizationApplicationRsp();

  AddOrganizationApplicationRsp(const AddOrganizationApplicationRsp& from);

  inline AddOrganizationApplicationRsp& operator=(const AddOrganizationApplicationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddOrganizationApplicationRsp(AddOrganizationApplicationRsp&& from) noexcept
    : AddOrganizationApplicationRsp() {
    *this = ::std::move(from);
  }

  inline AddOrganizationApplicationRsp& operator=(AddOrganizationApplicationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddOrganizationApplicationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddOrganizationApplicationRsp* internal_default_instance() {
    return reinterpret_cast<const AddOrganizationApplicationRsp*>(
               &_AddOrganizationApplicationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  void Swap(AddOrganizationApplicationRsp* other);
  friend void swap(AddOrganizationApplicationRsp& a, AddOrganizationApplicationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddOrganizationApplicationRsp* New() const final {
    return CreateMaybeMessage<AddOrganizationApplicationRsp>(NULL);
  }

  AddOrganizationApplicationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddOrganizationApplicationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddOrganizationApplicationRsp& from);
  void MergeFrom(const AddOrganizationApplicationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrganizationApplicationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.AddOrganizationApplicationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveOrganizationGroupRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationGroupRqst) */ {
 public:
  RemoveOrganizationGroupRqst();
  virtual ~RemoveOrganizationGroupRqst();

  RemoveOrganizationGroupRqst(const RemoveOrganizationGroupRqst& from);

  inline RemoveOrganizationGroupRqst& operator=(const RemoveOrganizationGroupRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveOrganizationGroupRqst(RemoveOrganizationGroupRqst&& from) noexcept
    : RemoveOrganizationGroupRqst() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationGroupRqst& operator=(RemoveOrganizationGroupRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveOrganizationGroupRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationGroupRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationGroupRqst*>(
               &_RemoveOrganizationGroupRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  void Swap(RemoveOrganizationGroupRqst* other);
  friend void swap(RemoveOrganizationGroupRqst& a, RemoveOrganizationGroupRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationGroupRqst* New() const final {
    return CreateMaybeMessage<RemoveOrganizationGroupRqst>(NULL);
  }

  RemoveOrganizationGroupRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationGroupRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveOrganizationGroupRqst& from);
  void MergeFrom(const RemoveOrganizationGroupRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationGroupRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organizationId = 1;
  void clear_organizationid();
  static const int kOrganizationIdFieldNumber = 1;
  const ::std::string& organizationid() const;
  void set_organizationid(const ::std::string& value);
  #if LANG_CXX11
  void set_organizationid(::std::string&& value);
  #endif
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  ::std::string* mutable_organizationid();
  ::std::string* release_organizationid();
  void set_allocated_organizationid(::std::string* organizationid);

  // string groupId = 2;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationGroupRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr organizationid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveOrganizationGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationGroupRsp) */ {
 public:
  RemoveOrganizationGroupRsp();
  virtual ~RemoveOrganizationGroupRsp();

  RemoveOrganizationGroupRsp(const RemoveOrganizationGroupRsp& from);

  inline RemoveOrganizationGroupRsp& operator=(const RemoveOrganizationGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveOrganizationGroupRsp(RemoveOrganizationGroupRsp&& from) noexcept
    : RemoveOrganizationGroupRsp() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationGroupRsp& operator=(RemoveOrganizationGroupRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveOrganizationGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationGroupRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationGroupRsp*>(
               &_RemoveOrganizationGroupRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  void Swap(RemoveOrganizationGroupRsp* other);
  friend void swap(RemoveOrganizationGroupRsp& a, RemoveOrganizationGroupRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationGroupRsp* New() const final {
    return CreateMaybeMessage<RemoveOrganizationGroupRsp>(NULL);
  }

  RemoveOrganizationGroupRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationGroupRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveOrganizationGroupRsp& from);
  void MergeFrom(const RemoveOrganizationGroupRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationGroupRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveOrganizationRoleRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationRoleRqst) */ {
 public:
  RemoveOrganizationRoleRqst();
  virtual ~RemoveOrganizationRoleRqst();

  RemoveOrganizationRoleRqst(const RemoveOrganizationRoleRqst& from);

  inline RemoveOrganizationRoleRqst& operator=(const RemoveOrganizationRoleRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveOrganizationRoleRqst(RemoveOrganizationRoleRqst&& from) noexcept
    : RemoveOrganizationRoleRqst() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationRoleRqst& operator=(RemoveOrganizationRoleRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveOrganizationRoleRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationRoleRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationRoleRqst*>(
               &_RemoveOrganizationRoleRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  void Swap(RemoveOrganizationRoleRqst* other);
  friend void swap(RemoveOrganizationRoleRqst& a, RemoveOrganizationRoleRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationRoleRqst* New() const final {
    return CreateMaybeMessage<RemoveOrganizationRoleRqst>(NULL);
  }

  RemoveOrganizationRoleRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationRoleRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveOrganizationRoleRqst& from);
  void MergeFrom(const RemoveOrganizationRoleRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationRoleRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organizationId = 1;
  void clear_organizationid();
  static const int kOrganizationIdFieldNumber = 1;
  const ::std::string& organizationid() const;
  void set_organizationid(const ::std::string& value);
  #if LANG_CXX11
  void set_organizationid(::std::string&& value);
  #endif
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  ::std::string* mutable_organizationid();
  ::std::string* release_organizationid();
  void set_allocated_organizationid(::std::string* organizationid);

  // string roleId = 2;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  const ::std::string& roleid() const;
  void set_roleid(const ::std::string& value);
  #if LANG_CXX11
  void set_roleid(::std::string&& value);
  #endif
  void set_roleid(const char* value);
  void set_roleid(const char* value, size_t size);
  ::std::string* mutable_roleid();
  ::std::string* release_roleid();
  void set_allocated_roleid(::std::string* roleid);

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationRoleRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr organizationid_;
  ::google::protobuf::internal::ArenaStringPtr roleid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveOrganizationRoleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationRoleRsp) */ {
 public:
  RemoveOrganizationRoleRsp();
  virtual ~RemoveOrganizationRoleRsp();

  RemoveOrganizationRoleRsp(const RemoveOrganizationRoleRsp& from);

  inline RemoveOrganizationRoleRsp& operator=(const RemoveOrganizationRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveOrganizationRoleRsp(RemoveOrganizationRoleRsp&& from) noexcept
    : RemoveOrganizationRoleRsp() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationRoleRsp& operator=(RemoveOrganizationRoleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveOrganizationRoleRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationRoleRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationRoleRsp*>(
               &_RemoveOrganizationRoleRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  void Swap(RemoveOrganizationRoleRsp* other);
  friend void swap(RemoveOrganizationRoleRsp& a, RemoveOrganizationRoleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationRoleRsp* New() const final {
    return CreateMaybeMessage<RemoveOrganizationRoleRsp>(NULL);
  }

  RemoveOrganizationRoleRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationRoleRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveOrganizationRoleRsp& from);
  void MergeFrom(const RemoveOrganizationRoleRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationRoleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationRoleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveOrganizationApplicationRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationApplicationRqst) */ {
 public:
  RemoveOrganizationApplicationRqst();
  virtual ~RemoveOrganizationApplicationRqst();

  RemoveOrganizationApplicationRqst(const RemoveOrganizationApplicationRqst& from);

  inline RemoveOrganizationApplicationRqst& operator=(const RemoveOrganizationApplicationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveOrganizationApplicationRqst(RemoveOrganizationApplicationRqst&& from) noexcept
    : RemoveOrganizationApplicationRqst() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationApplicationRqst& operator=(RemoveOrganizationApplicationRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveOrganizationApplicationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationApplicationRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationApplicationRqst*>(
               &_RemoveOrganizationApplicationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  void Swap(RemoveOrganizationApplicationRqst* other);
  friend void swap(RemoveOrganizationApplicationRqst& a, RemoveOrganizationApplicationRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationApplicationRqst* New() const final {
    return CreateMaybeMessage<RemoveOrganizationApplicationRqst>(NULL);
  }

  RemoveOrganizationApplicationRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationApplicationRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveOrganizationApplicationRqst& from);
  void MergeFrom(const RemoveOrganizationApplicationRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationApplicationRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organizationId = 1;
  void clear_organizationid();
  static const int kOrganizationIdFieldNumber = 1;
  const ::std::string& organizationid() const;
  void set_organizationid(const ::std::string& value);
  #if LANG_CXX11
  void set_organizationid(::std::string&& value);
  #endif
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  ::std::string* mutable_organizationid();
  ::std::string* release_organizationid();
  void set_allocated_organizationid(::std::string* organizationid);

  // string applicationId = 2;
  void clear_applicationid();
  static const int kApplicationIdFieldNumber = 2;
  const ::std::string& applicationid() const;
  void set_applicationid(const ::std::string& value);
  #if LANG_CXX11
  void set_applicationid(::std::string&& value);
  #endif
  void set_applicationid(const char* value);
  void set_applicationid(const char* value, size_t size);
  ::std::string* mutable_applicationid();
  ::std::string* release_applicationid();
  void set_allocated_applicationid(::std::string* applicationid);

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationApplicationRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr organizationid_;
  ::google::protobuf::internal::ArenaStringPtr applicationid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveOrganizationApplicationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationApplicationRsp) */ {
 public:
  RemoveOrganizationApplicationRsp();
  virtual ~RemoveOrganizationApplicationRsp();

  RemoveOrganizationApplicationRsp(const RemoveOrganizationApplicationRsp& from);

  inline RemoveOrganizationApplicationRsp& operator=(const RemoveOrganizationApplicationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveOrganizationApplicationRsp(RemoveOrganizationApplicationRsp&& from) noexcept
    : RemoveOrganizationApplicationRsp() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationApplicationRsp& operator=(RemoveOrganizationApplicationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveOrganizationApplicationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationApplicationRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationApplicationRsp*>(
               &_RemoveOrganizationApplicationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  void Swap(RemoveOrganizationApplicationRsp* other);
  friend void swap(RemoveOrganizationApplicationRsp& a, RemoveOrganizationApplicationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationApplicationRsp* New() const final {
    return CreateMaybeMessage<RemoveOrganizationApplicationRsp>(NULL);
  }

  RemoveOrganizationApplicationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationApplicationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveOrganizationApplicationRsp& from);
  void MergeFrom(const RemoveOrganizationApplicationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationApplicationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationApplicationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveOrganizationAccountRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationAccountRqst) */ {
 public:
  RemoveOrganizationAccountRqst();
  virtual ~RemoveOrganizationAccountRqst();

  RemoveOrganizationAccountRqst(const RemoveOrganizationAccountRqst& from);

  inline RemoveOrganizationAccountRqst& operator=(const RemoveOrganizationAccountRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveOrganizationAccountRqst(RemoveOrganizationAccountRqst&& from) noexcept
    : RemoveOrganizationAccountRqst() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationAccountRqst& operator=(RemoveOrganizationAccountRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveOrganizationAccountRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationAccountRqst* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationAccountRqst*>(
               &_RemoveOrganizationAccountRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  void Swap(RemoveOrganizationAccountRqst* other);
  friend void swap(RemoveOrganizationAccountRqst& a, RemoveOrganizationAccountRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationAccountRqst* New() const final {
    return CreateMaybeMessage<RemoveOrganizationAccountRqst>(NULL);
  }

  RemoveOrganizationAccountRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationAccountRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveOrganizationAccountRqst& from);
  void MergeFrom(const RemoveOrganizationAccountRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationAccountRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organizationId = 1;
  void clear_organizationid();
  static const int kOrganizationIdFieldNumber = 1;
  const ::std::string& organizationid() const;
  void set_organizationid(const ::std::string& value);
  #if LANG_CXX11
  void set_organizationid(::std::string&& value);
  #endif
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  ::std::string* mutable_organizationid();
  ::std::string* release_organizationid();
  void set_allocated_organizationid(::std::string* organizationid);

  // string accountId = 2;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 2;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationAccountRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr organizationid_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveOrganizationAccountRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveOrganizationAccountRsp) */ {
 public:
  RemoveOrganizationAccountRsp();
  virtual ~RemoveOrganizationAccountRsp();

  RemoveOrganizationAccountRsp(const RemoveOrganizationAccountRsp& from);

  inline RemoveOrganizationAccountRsp& operator=(const RemoveOrganizationAccountRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveOrganizationAccountRsp(RemoveOrganizationAccountRsp&& from) noexcept
    : RemoveOrganizationAccountRsp() {
    *this = ::std::move(from);
  }

  inline RemoveOrganizationAccountRsp& operator=(RemoveOrganizationAccountRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveOrganizationAccountRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveOrganizationAccountRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveOrganizationAccountRsp*>(
               &_RemoveOrganizationAccountRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  void Swap(RemoveOrganizationAccountRsp* other);
  friend void swap(RemoveOrganizationAccountRsp& a, RemoveOrganizationAccountRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveOrganizationAccountRsp* New() const final {
    return CreateMaybeMessage<RemoveOrganizationAccountRsp>(NULL);
  }

  RemoveOrganizationAccountRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveOrganizationAccountRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveOrganizationAccountRsp& from);
  void MergeFrom(const RemoveOrganizationAccountRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrganizationAccountRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemoveOrganizationAccountRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IsOrgnanizationMemberRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.IsOrgnanizationMemberRqst) */ {
 public:
  IsOrgnanizationMemberRqst();
  virtual ~IsOrgnanizationMemberRqst();

  IsOrgnanizationMemberRqst(const IsOrgnanizationMemberRqst& from);

  inline IsOrgnanizationMemberRqst& operator=(const IsOrgnanizationMemberRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IsOrgnanizationMemberRqst(IsOrgnanizationMemberRqst&& from) noexcept
    : IsOrgnanizationMemberRqst() {
    *this = ::std::move(from);
  }

  inline IsOrgnanizationMemberRqst& operator=(IsOrgnanizationMemberRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IsOrgnanizationMemberRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsOrgnanizationMemberRqst* internal_default_instance() {
    return reinterpret_cast<const IsOrgnanizationMemberRqst*>(
               &_IsOrgnanizationMemberRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  void Swap(IsOrgnanizationMemberRqst* other);
  friend void swap(IsOrgnanizationMemberRqst& a, IsOrgnanizationMemberRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IsOrgnanizationMemberRqst* New() const final {
    return CreateMaybeMessage<IsOrgnanizationMemberRqst>(NULL);
  }

  IsOrgnanizationMemberRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IsOrgnanizationMemberRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IsOrgnanizationMemberRqst& from);
  void MergeFrom(const IsOrgnanizationMemberRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsOrgnanizationMemberRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organizationId = 1;
  void clear_organizationid();
  static const int kOrganizationIdFieldNumber = 1;
  const ::std::string& organizationid() const;
  void set_organizationid(const ::std::string& value);
  #if LANG_CXX11
  void set_organizationid(::std::string&& value);
  #endif
  void set_organizationid(const char* value);
  void set_organizationid(const char* value, size_t size);
  ::std::string* mutable_organizationid();
  ::std::string* release_organizationid();
  void set_allocated_organizationid(::std::string* organizationid);

  // string accountId = 2;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 2;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // @@protoc_insertion_point(class_scope:resource.IsOrgnanizationMemberRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr organizationid_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IsOrgnanizationMemberRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.IsOrgnanizationMemberRsp) */ {
 public:
  IsOrgnanizationMemberRsp();
  virtual ~IsOrgnanizationMemberRsp();

  IsOrgnanizationMemberRsp(const IsOrgnanizationMemberRsp& from);

  inline IsOrgnanizationMemberRsp& operator=(const IsOrgnanizationMemberRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IsOrgnanizationMemberRsp(IsOrgnanizationMemberRsp&& from) noexcept
    : IsOrgnanizationMemberRsp() {
    *this = ::std::move(from);
  }

  inline IsOrgnanizationMemberRsp& operator=(IsOrgnanizationMemberRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IsOrgnanizationMemberRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsOrgnanizationMemberRsp* internal_default_instance() {
    return reinterpret_cast<const IsOrgnanizationMemberRsp*>(
               &_IsOrgnanizationMemberRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  void Swap(IsOrgnanizationMemberRsp* other);
  friend void swap(IsOrgnanizationMemberRsp& a, IsOrgnanizationMemberRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IsOrgnanizationMemberRsp* New() const final {
    return CreateMaybeMessage<IsOrgnanizationMemberRsp>(NULL);
  }

  IsOrgnanizationMemberRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IsOrgnanizationMemberRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IsOrgnanizationMemberRsp& from);
  void MergeFrom(const IsOrgnanizationMemberRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsOrgnanizationMemberRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.IsOrgnanizationMemberRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteOrganizationRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteOrganizationRqst) */ {
 public:
  DeleteOrganizationRqst();
  virtual ~DeleteOrganizationRqst();

  DeleteOrganizationRqst(const DeleteOrganizationRqst& from);

  inline DeleteOrganizationRqst& operator=(const DeleteOrganizationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteOrganizationRqst(DeleteOrganizationRqst&& from) noexcept
    : DeleteOrganizationRqst() {
    *this = ::std::move(from);
  }

  inline DeleteOrganizationRqst& operator=(DeleteOrganizationRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteOrganizationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOrganizationRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteOrganizationRqst*>(
               &_DeleteOrganizationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  void Swap(DeleteOrganizationRqst* other);
  friend void swap(DeleteOrganizationRqst& a, DeleteOrganizationRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteOrganizationRqst* New() const final {
    return CreateMaybeMessage<DeleteOrganizationRqst>(NULL);
  }

  DeleteOrganizationRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOrganizationRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteOrganizationRqst& from);
  void MergeFrom(const DeleteOrganizationRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOrganizationRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organization = 1;
  void clear_organization();
  static const int kOrganizationFieldNumber = 1;
  const ::std::string& organization() const;
  void set_organization(const ::std::string& value);
  #if LANG_CXX11
  void set_organization(::std::string&& value);
  #endif
  void set_organization(const char* value);
  void set_organization(const char* value, size_t size);
  ::std::string* mutable_organization();
  ::std::string* release_organization();
  void set_allocated_organization(::std::string* organization);

  // @@protoc_insertion_point(class_scope:resource.DeleteOrganizationRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr organization_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteOrganizationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteOrganizationRsp) */ {
 public:
  DeleteOrganizationRsp();
  virtual ~DeleteOrganizationRsp();

  DeleteOrganizationRsp(const DeleteOrganizationRsp& from);

  inline DeleteOrganizationRsp& operator=(const DeleteOrganizationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteOrganizationRsp(DeleteOrganizationRsp&& from) noexcept
    : DeleteOrganizationRsp() {
    *this = ::std::move(from);
  }

  inline DeleteOrganizationRsp& operator=(DeleteOrganizationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteOrganizationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOrganizationRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteOrganizationRsp*>(
               &_DeleteOrganizationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  void Swap(DeleteOrganizationRsp* other);
  friend void swap(DeleteOrganizationRsp& a, DeleteOrganizationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteOrganizationRsp* New() const final {
    return CreateMaybeMessage<DeleteOrganizationRsp>(NULL);
  }

  DeleteOrganizationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOrganizationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteOrganizationRsp& from);
  void MergeFrom(const DeleteOrganizationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOrganizationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.DeleteOrganizationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Peer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.Peer) */ {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  void Swap(Peer* other);
  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const final {
    return CreateMaybeMessage<Peer>(NULL);
  }

  Peer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Peer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Peer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string actions = 8;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 8;
  const ::std::string& actions(int index) const;
  ::std::string* mutable_actions(int index);
  void set_actions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_actions(int index, ::std::string&& value);
  #endif
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  ::std::string* add_actions();
  void add_actions(const ::std::string& value);
  #if LANG_CXX11
  void add_actions(::std::string&& value);
  #endif
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& actions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_actions();

  // string hostname = 1;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string domain = 3;
  void clear_domain();
  static const int kDomainFieldNumber = 3;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string external_ip_address = 4;
  void clear_external_ip_address();
  static const int kExternalIPAddressFieldNumber = 4;
  const ::std::string& external_ip_address() const;
  void set_external_ip_address(const ::std::string& value);
  #if LANG_CXX11
  void set_external_ip_address(::std::string&& value);
  #endif
  void set_external_ip_address(const char* value);
  void set_external_ip_address(const char* value, size_t size);
  ::std::string* mutable_external_ip_address();
  ::std::string* release_external_ip_address();
  void set_allocated_external_ip_address(::std::string* external_ip_address);

  // string local_ip_address = 5;
  void clear_local_ip_address();
  static const int kLocalIPAddressFieldNumber = 5;
  const ::std::string& local_ip_address() const;
  void set_local_ip_address(const ::std::string& value);
  #if LANG_CXX11
  void set_local_ip_address(::std::string&& value);
  #endif
  void set_local_ip_address(const char* value);
  void set_local_ip_address(const char* value, size_t size);
  ::std::string* mutable_local_ip_address();
  ::std::string* release_local_ip_address();
  void set_allocated_local_ip_address(::std::string* local_ip_address);

  // string mac = 6;
  void clear_mac();
  static const int kMacFieldNumber = 6;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // .resource.PeerApprovalState state = 7;
  void clear_state();
  static const int kStateFieldNumber = 7;
  ::resource::PeerApprovalState state() const;
  void set_state(::resource::PeerApprovalState value);

  // @@protoc_insertion_point(class_scope:resource.Peer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> actions_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr external_ip_address_;
  ::google::protobuf::internal::ArenaStringPtr local_ip_address_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerApprovalStateRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPeerApprovalStateRqst) */ {
 public:
  GetPeerApprovalStateRqst();
  virtual ~GetPeerApprovalStateRqst();

  GetPeerApprovalStateRqst(const GetPeerApprovalStateRqst& from);

  inline GetPeerApprovalStateRqst& operator=(const GetPeerApprovalStateRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerApprovalStateRqst(GetPeerApprovalStateRqst&& from) noexcept
    : GetPeerApprovalStateRqst() {
    *this = ::std::move(from);
  }

  inline GetPeerApprovalStateRqst& operator=(GetPeerApprovalStateRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerApprovalStateRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerApprovalStateRqst* internal_default_instance() {
    return reinterpret_cast<const GetPeerApprovalStateRqst*>(
               &_GetPeerApprovalStateRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  void Swap(GetPeerApprovalStateRqst* other);
  friend void swap(GetPeerApprovalStateRqst& a, GetPeerApprovalStateRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerApprovalStateRqst* New() const final {
    return CreateMaybeMessage<GetPeerApprovalStateRqst>(NULL);
  }

  GetPeerApprovalStateRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerApprovalStateRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerApprovalStateRqst& from);
  void MergeFrom(const GetPeerApprovalStateRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerApprovalStateRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mac = 1;
  void clear_mac();
  static const int kMacFieldNumber = 1;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string remote_peer_address = 2;
  void clear_remote_peer_address();
  static const int kRemotePeerAddressFieldNumber = 2;
  const ::std::string& remote_peer_address() const;
  void set_remote_peer_address(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_peer_address(::std::string&& value);
  #endif
  void set_remote_peer_address(const char* value);
  void set_remote_peer_address(const char* value, size_t size);
  ::std::string* mutable_remote_peer_address();
  ::std::string* release_remote_peer_address();
  void set_allocated_remote_peer_address(::std::string* remote_peer_address);

  // @@protoc_insertion_point(class_scope:resource.GetPeerApprovalStateRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr remote_peer_address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerApprovalStateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPeerApprovalStateRsp) */ {
 public:
  GetPeerApprovalStateRsp();
  virtual ~GetPeerApprovalStateRsp();

  GetPeerApprovalStateRsp(const GetPeerApprovalStateRsp& from);

  inline GetPeerApprovalStateRsp& operator=(const GetPeerApprovalStateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerApprovalStateRsp(GetPeerApprovalStateRsp&& from) noexcept
    : GetPeerApprovalStateRsp() {
    *this = ::std::move(from);
  }

  inline GetPeerApprovalStateRsp& operator=(GetPeerApprovalStateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerApprovalStateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerApprovalStateRsp* internal_default_instance() {
    return reinterpret_cast<const GetPeerApprovalStateRsp*>(
               &_GetPeerApprovalStateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  void Swap(GetPeerApprovalStateRsp* other);
  friend void swap(GetPeerApprovalStateRsp& a, GetPeerApprovalStateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerApprovalStateRsp* New() const final {
    return CreateMaybeMessage<GetPeerApprovalStateRsp>(NULL);
  }

  GetPeerApprovalStateRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerApprovalStateRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerApprovalStateRsp& from);
  void MergeFrom(const GetPeerApprovalStateRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerApprovalStateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.PeerApprovalState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::resource::PeerApprovalState state() const;
  void set_state(::resource::PeerApprovalState value);

  // @@protoc_insertion_point(class_scope:resource.GetPeerApprovalStateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerPublicKeyRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPeerPublicKeyRqst) */ {
 public:
  GetPeerPublicKeyRqst();
  virtual ~GetPeerPublicKeyRqst();

  GetPeerPublicKeyRqst(const GetPeerPublicKeyRqst& from);

  inline GetPeerPublicKeyRqst& operator=(const GetPeerPublicKeyRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerPublicKeyRqst(GetPeerPublicKeyRqst&& from) noexcept
    : GetPeerPublicKeyRqst() {
    *this = ::std::move(from);
  }

  inline GetPeerPublicKeyRqst& operator=(GetPeerPublicKeyRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerPublicKeyRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerPublicKeyRqst* internal_default_instance() {
    return reinterpret_cast<const GetPeerPublicKeyRqst*>(
               &_GetPeerPublicKeyRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  void Swap(GetPeerPublicKeyRqst* other);
  friend void swap(GetPeerPublicKeyRqst& a, GetPeerPublicKeyRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerPublicKeyRqst* New() const final {
    return CreateMaybeMessage<GetPeerPublicKeyRqst>(NULL);
  }

  GetPeerPublicKeyRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerPublicKeyRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerPublicKeyRqst& from);
  void MergeFrom(const GetPeerPublicKeyRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerPublicKeyRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mac = 1;
  void clear_mac();
  static const int kMacFieldNumber = 1;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string remote_peer_address = 2;
  void clear_remote_peer_address();
  static const int kRemotePeerAddressFieldNumber = 2;
  const ::std::string& remote_peer_address() const;
  void set_remote_peer_address(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_peer_address(::std::string&& value);
  #endif
  void set_remote_peer_address(const char* value);
  void set_remote_peer_address(const char* value, size_t size);
  ::std::string* mutable_remote_peer_address();
  ::std::string* release_remote_peer_address();
  void set_allocated_remote_peer_address(::std::string* remote_peer_address);

  // @@protoc_insertion_point(class_scope:resource.GetPeerPublicKeyRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr remote_peer_address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerPublicKeyRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPeerPublicKeyRsp) */ {
 public:
  GetPeerPublicKeyRsp();
  virtual ~GetPeerPublicKeyRsp();

  GetPeerPublicKeyRsp(const GetPeerPublicKeyRsp& from);

  inline GetPeerPublicKeyRsp& operator=(const GetPeerPublicKeyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerPublicKeyRsp(GetPeerPublicKeyRsp&& from) noexcept
    : GetPeerPublicKeyRsp() {
    *this = ::std::move(from);
  }

  inline GetPeerPublicKeyRsp& operator=(GetPeerPublicKeyRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerPublicKeyRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerPublicKeyRsp* internal_default_instance() {
    return reinterpret_cast<const GetPeerPublicKeyRsp*>(
               &_GetPeerPublicKeyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  void Swap(GetPeerPublicKeyRsp* other);
  friend void swap(GetPeerPublicKeyRsp& a, GetPeerPublicKeyRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerPublicKeyRsp* New() const final {
    return CreateMaybeMessage<GetPeerPublicKeyRsp>(NULL);
  }

  GetPeerPublicKeyRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerPublicKeyRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerPublicKeyRsp& from);
  void MergeFrom(const GetPeerPublicKeyRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerPublicKeyRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:resource.GetPeerPublicKeyRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterPeerRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RegisterPeerRqst) */ {
 public:
  RegisterPeerRqst();
  virtual ~RegisterPeerRqst();

  RegisterPeerRqst(const RegisterPeerRqst& from);

  inline RegisterPeerRqst& operator=(const RegisterPeerRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterPeerRqst(RegisterPeerRqst&& from) noexcept
    : RegisterPeerRqst() {
    *this = ::std::move(from);
  }

  inline RegisterPeerRqst& operator=(RegisterPeerRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterPeerRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPeerRqst* internal_default_instance() {
    return reinterpret_cast<const RegisterPeerRqst*>(
               &_RegisterPeerRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  void Swap(RegisterPeerRqst* other);
  friend void swap(RegisterPeerRqst& a, RegisterPeerRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterPeerRqst* New() const final {
    return CreateMaybeMessage<RegisterPeerRqst>(NULL);
  }

  RegisterPeerRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPeerRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterPeerRqst& from);
  void MergeFrom(const RegisterPeerRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPeerRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string public_key = 2;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // .resource.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  private:
  const ::resource::Peer& _internal_peer() const;
  public:
  const ::resource::Peer& peer() const;
  ::resource::Peer* release_peer();
  ::resource::Peer* mutable_peer();
  void set_allocated_peer(::resource::Peer* peer);

  // @@protoc_insertion_point(class_scope:resource.RegisterPeerRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::resource::Peer* peer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterPeerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RegisterPeerRsp) */ {
 public:
  RegisterPeerRsp();
  virtual ~RegisterPeerRsp();

  RegisterPeerRsp(const RegisterPeerRsp& from);

  inline RegisterPeerRsp& operator=(const RegisterPeerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterPeerRsp(RegisterPeerRsp&& from) noexcept
    : RegisterPeerRsp() {
    *this = ::std::move(from);
  }

  inline RegisterPeerRsp& operator=(RegisterPeerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterPeerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPeerRsp* internal_default_instance() {
    return reinterpret_cast<const RegisterPeerRsp*>(
               &_RegisterPeerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  void Swap(RegisterPeerRsp* other);
  friend void swap(RegisterPeerRsp& a, RegisterPeerRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterPeerRsp* New() const final {
    return CreateMaybeMessage<RegisterPeerRsp>(NULL);
  }

  RegisterPeerRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPeerRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterPeerRsp& from);
  void MergeFrom(const RegisterPeerRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPeerRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string public_key = 2;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // .resource.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  private:
  const ::resource::Peer& _internal_peer() const;
  public:
  const ::resource::Peer& peer() const;
  ::resource::Peer* release_peer();
  ::resource::Peer* mutable_peer();
  void set_allocated_peer(::resource::Peer* peer);

  // @@protoc_insertion_point(class_scope:resource.RegisterPeerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::resource::Peer* peer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeersRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPeersRqst) */ {
 public:
  GetPeersRqst();
  virtual ~GetPeersRqst();

  GetPeersRqst(const GetPeersRqst& from);

  inline GetPeersRqst& operator=(const GetPeersRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeersRqst(GetPeersRqst&& from) noexcept
    : GetPeersRqst() {
    *this = ::std::move(from);
  }

  inline GetPeersRqst& operator=(GetPeersRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeersRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeersRqst* internal_default_instance() {
    return reinterpret_cast<const GetPeersRqst*>(
               &_GetPeersRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  void Swap(GetPeersRqst* other);
  friend void swap(GetPeersRqst& a, GetPeersRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeersRqst* New() const final {
    return CreateMaybeMessage<GetPeersRqst>(NULL);
  }

  GetPeersRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeersRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeersRqst& from);
  void MergeFrom(const GetPeersRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeersRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string options = 2;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::std::string& options() const;
  void set_options(const ::std::string& value);
  #if LANG_CXX11
  void set_options(::std::string&& value);
  #endif
  void set_options(const char* value);
  void set_options(const char* value, size_t size);
  ::std::string* mutable_options();
  ::std::string* release_options();
  void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:resource.GetPeersRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr options_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeersRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetPeersRsp) */ {
 public:
  GetPeersRsp();
  virtual ~GetPeersRsp();

  GetPeersRsp(const GetPeersRsp& from);

  inline GetPeersRsp& operator=(const GetPeersRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeersRsp(GetPeersRsp&& from) noexcept
    : GetPeersRsp() {
    *this = ::std::move(from);
  }

  inline GetPeersRsp& operator=(GetPeersRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeersRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeersRsp* internal_default_instance() {
    return reinterpret_cast<const GetPeersRsp*>(
               &_GetPeersRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  void Swap(GetPeersRsp* other);
  friend void swap(GetPeersRsp& a, GetPeersRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeersRsp* New() const final {
    return CreateMaybeMessage<GetPeersRsp>(NULL);
  }

  GetPeersRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeersRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeersRsp& from);
  void MergeFrom(const GetPeersRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeersRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .resource.Peer peers = 1;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 1;
  ::resource::Peer* mutable_peers(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::Peer >*
      mutable_peers();
  const ::resource::Peer& peers(int index) const;
  ::resource::Peer* add_peers();
  const ::google::protobuf::RepeatedPtrField< ::resource::Peer >&
      peers() const;

  // @@protoc_insertion_point(class_scope:resource.GetPeersRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::resource::Peer > peers_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeletePeerRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeletePeerRqst) */ {
 public:
  DeletePeerRqst();
  virtual ~DeletePeerRqst();

  DeletePeerRqst(const DeletePeerRqst& from);

  inline DeletePeerRqst& operator=(const DeletePeerRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeletePeerRqst(DeletePeerRqst&& from) noexcept
    : DeletePeerRqst() {
    *this = ::std::move(from);
  }

  inline DeletePeerRqst& operator=(DeletePeerRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePeerRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePeerRqst* internal_default_instance() {
    return reinterpret_cast<const DeletePeerRqst*>(
               &_DeletePeerRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  void Swap(DeletePeerRqst* other);
  friend void swap(DeletePeerRqst& a, DeletePeerRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePeerRqst* New() const final {
    return CreateMaybeMessage<DeletePeerRqst>(NULL);
  }

  DeletePeerRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeletePeerRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeletePeerRqst& from);
  void MergeFrom(const DeletePeerRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePeerRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  private:
  const ::resource::Peer& _internal_peer() const;
  public:
  const ::resource::Peer& peer() const;
  ::resource::Peer* release_peer();
  ::resource::Peer* mutable_peer();
  void set_allocated_peer(::resource::Peer* peer);

  // @@protoc_insertion_point(class_scope:resource.DeletePeerRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::Peer* peer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeletePeerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeletePeerRsp) */ {
 public:
  DeletePeerRsp();
  virtual ~DeletePeerRsp();

  DeletePeerRsp(const DeletePeerRsp& from);

  inline DeletePeerRsp& operator=(const DeletePeerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeletePeerRsp(DeletePeerRsp&& from) noexcept
    : DeletePeerRsp() {
    *this = ::std::move(from);
  }

  inline DeletePeerRsp& operator=(DeletePeerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePeerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePeerRsp* internal_default_instance() {
    return reinterpret_cast<const DeletePeerRsp*>(
               &_DeletePeerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  void Swap(DeletePeerRsp* other);
  friend void swap(DeletePeerRsp& a, DeletePeerRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePeerRsp* New() const final {
    return CreateMaybeMessage<DeletePeerRsp>(NULL);
  }

  DeletePeerRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeletePeerRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeletePeerRsp& from);
  void MergeFrom(const DeletePeerRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePeerRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.DeletePeerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddPeerActionsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddPeerActionsRqst) */ {
 public:
  AddPeerActionsRqst();
  virtual ~AddPeerActionsRqst();

  AddPeerActionsRqst(const AddPeerActionsRqst& from);

  inline AddPeerActionsRqst& operator=(const AddPeerActionsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPeerActionsRqst(AddPeerActionsRqst&& from) noexcept
    : AddPeerActionsRqst() {
    *this = ::std::move(from);
  }

  inline AddPeerActionsRqst& operator=(AddPeerActionsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPeerActionsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPeerActionsRqst* internal_default_instance() {
    return reinterpret_cast<const AddPeerActionsRqst*>(
               &_AddPeerActionsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  void Swap(AddPeerActionsRqst* other);
  friend void swap(AddPeerActionsRqst& a, AddPeerActionsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPeerActionsRqst* New() const final {
    return CreateMaybeMessage<AddPeerActionsRqst>(NULL);
  }

  AddPeerActionsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerActionsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddPeerActionsRqst& from);
  void MergeFrom(const AddPeerActionsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerActionsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string actions = 2;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 2;
  const ::std::string& actions(int index) const;
  ::std::string* mutable_actions(int index);
  void set_actions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_actions(int index, ::std::string&& value);
  #endif
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  ::std::string* add_actions();
  void add_actions(const ::std::string& value);
  #if LANG_CXX11
  void add_actions(::std::string&& value);
  #endif
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& actions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_actions();

  // string mac = 1;
  void clear_mac();
  static const int kMacFieldNumber = 1;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // @@protoc_insertion_point(class_scope:resource.AddPeerActionsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> actions_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddPeerActionsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AddPeerActionsRsp) */ {
 public:
  AddPeerActionsRsp();
  virtual ~AddPeerActionsRsp();

  AddPeerActionsRsp(const AddPeerActionsRsp& from);

  inline AddPeerActionsRsp& operator=(const AddPeerActionsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPeerActionsRsp(AddPeerActionsRsp&& from) noexcept
    : AddPeerActionsRsp() {
    *this = ::std::move(from);
  }

  inline AddPeerActionsRsp& operator=(AddPeerActionsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPeerActionsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPeerActionsRsp* internal_default_instance() {
    return reinterpret_cast<const AddPeerActionsRsp*>(
               &_AddPeerActionsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  void Swap(AddPeerActionsRsp* other);
  friend void swap(AddPeerActionsRsp& a, AddPeerActionsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPeerActionsRsp* New() const final {
    return CreateMaybeMessage<AddPeerActionsRsp>(NULL);
  }

  AddPeerActionsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerActionsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddPeerActionsRsp& from);
  void MergeFrom(const AddPeerActionsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerActionsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.AddPeerActionsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemovePeerActionRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemovePeerActionRqst) */ {
 public:
  RemovePeerActionRqst();
  virtual ~RemovePeerActionRqst();

  RemovePeerActionRqst(const RemovePeerActionRqst& from);

  inline RemovePeerActionRqst& operator=(const RemovePeerActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemovePeerActionRqst(RemovePeerActionRqst&& from) noexcept
    : RemovePeerActionRqst() {
    *this = ::std::move(from);
  }

  inline RemovePeerActionRqst& operator=(RemovePeerActionRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeerActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeerActionRqst* internal_default_instance() {
    return reinterpret_cast<const RemovePeerActionRqst*>(
               &_RemovePeerActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  void Swap(RemovePeerActionRqst* other);
  friend void swap(RemovePeerActionRqst& a, RemovePeerActionRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemovePeerActionRqst* New() const final {
    return CreateMaybeMessage<RemovePeerActionRqst>(NULL);
  }

  RemovePeerActionRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeerActionRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemovePeerActionRqst& from);
  void MergeFrom(const RemovePeerActionRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeerActionRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mac = 1;
  void clear_mac();
  static const int kMacFieldNumber = 1;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // @@protoc_insertion_point(class_scope:resource.RemovePeerActionRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemovePeerActionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemovePeerActionRsp) */ {
 public:
  RemovePeerActionRsp();
  virtual ~RemovePeerActionRsp();

  RemovePeerActionRsp(const RemovePeerActionRsp& from);

  inline RemovePeerActionRsp& operator=(const RemovePeerActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemovePeerActionRsp(RemovePeerActionRsp&& from) noexcept
    : RemovePeerActionRsp() {
    *this = ::std::move(from);
  }

  inline RemovePeerActionRsp& operator=(RemovePeerActionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeerActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeerActionRsp* internal_default_instance() {
    return reinterpret_cast<const RemovePeerActionRsp*>(
               &_RemovePeerActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  void Swap(RemovePeerActionRsp* other);
  friend void swap(RemovePeerActionRsp& a, RemovePeerActionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemovePeerActionRsp* New() const final {
    return CreateMaybeMessage<RemovePeerActionRsp>(NULL);
  }

  RemovePeerActionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeerActionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemovePeerActionRsp& from);
  void MergeFrom(const RemovePeerActionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeerActionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemovePeerActionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemovePeersActionRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemovePeersActionRqst) */ {
 public:
  RemovePeersActionRqst();
  virtual ~RemovePeersActionRqst();

  RemovePeersActionRqst(const RemovePeersActionRqst& from);

  inline RemovePeersActionRqst& operator=(const RemovePeersActionRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemovePeersActionRqst(RemovePeersActionRqst&& from) noexcept
    : RemovePeersActionRqst() {
    *this = ::std::move(from);
  }

  inline RemovePeersActionRqst& operator=(RemovePeersActionRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeersActionRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeersActionRqst* internal_default_instance() {
    return reinterpret_cast<const RemovePeersActionRqst*>(
               &_RemovePeersActionRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  void Swap(RemovePeersActionRqst* other);
  friend void swap(RemovePeersActionRqst& a, RemovePeersActionRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemovePeersActionRqst* New() const final {
    return CreateMaybeMessage<RemovePeersActionRqst>(NULL);
  }

  RemovePeersActionRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeersActionRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemovePeersActionRqst& from);
  void MergeFrom(const RemovePeersActionRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeersActionRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // @@protoc_insertion_point(class_scope:resource.RemovePeersActionRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemovePeersActionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemovePeersActionRsp) */ {
 public:
  RemovePeersActionRsp();
  virtual ~RemovePeersActionRsp();

  RemovePeersActionRsp(const RemovePeersActionRsp& from);

  inline RemovePeersActionRsp& operator=(const RemovePeersActionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemovePeersActionRsp(RemovePeersActionRsp&& from) noexcept
    : RemovePeersActionRsp() {
    *this = ::std::move(from);
  }

  inline RemovePeersActionRsp& operator=(RemovePeersActionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeersActionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeersActionRsp* internal_default_instance() {
    return reinterpret_cast<const RemovePeersActionRsp*>(
               &_RemovePeersActionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  void Swap(RemovePeersActionRsp* other);
  friend void swap(RemovePeersActionRsp& a, RemovePeersActionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemovePeersActionRsp* New() const final {
    return CreateMaybeMessage<RemovePeersActionRsp>(NULL);
  }

  RemovePeersActionRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeersActionRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemovePeersActionRsp& from);
  void MergeFrom(const RemovePeersActionRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeersActionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RemovePeersActionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AcceptPeerRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AcceptPeerRqst) */ {
 public:
  AcceptPeerRqst();
  virtual ~AcceptPeerRqst();

  AcceptPeerRqst(const AcceptPeerRqst& from);

  inline AcceptPeerRqst& operator=(const AcceptPeerRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcceptPeerRqst(AcceptPeerRqst&& from) noexcept
    : AcceptPeerRqst() {
    *this = ::std::move(from);
  }

  inline AcceptPeerRqst& operator=(AcceptPeerRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptPeerRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptPeerRqst* internal_default_instance() {
    return reinterpret_cast<const AcceptPeerRqst*>(
               &_AcceptPeerRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  void Swap(AcceptPeerRqst* other);
  friend void swap(AcceptPeerRqst& a, AcceptPeerRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceptPeerRqst* New() const final {
    return CreateMaybeMessage<AcceptPeerRqst>(NULL);
  }

  AcceptPeerRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AcceptPeerRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AcceptPeerRqst& from);
  void MergeFrom(const AcceptPeerRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptPeerRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  private:
  const ::resource::Peer& _internal_peer() const;
  public:
  const ::resource::Peer& peer() const;
  ::resource::Peer* release_peer();
  ::resource::Peer* mutable_peer();
  void set_allocated_peer(::resource::Peer* peer);

  // @@protoc_insertion_point(class_scope:resource.AcceptPeerRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::Peer* peer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AcceptPeerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.AcceptPeerRsp) */ {
 public:
  AcceptPeerRsp();
  virtual ~AcceptPeerRsp();

  AcceptPeerRsp(const AcceptPeerRsp& from);

  inline AcceptPeerRsp& operator=(const AcceptPeerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcceptPeerRsp(AcceptPeerRsp&& from) noexcept
    : AcceptPeerRsp() {
    *this = ::std::move(from);
  }

  inline AcceptPeerRsp& operator=(AcceptPeerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptPeerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptPeerRsp* internal_default_instance() {
    return reinterpret_cast<const AcceptPeerRsp*>(
               &_AcceptPeerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  void Swap(AcceptPeerRsp* other);
  friend void swap(AcceptPeerRsp& a, AcceptPeerRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceptPeerRsp* New() const final {
    return CreateMaybeMessage<AcceptPeerRsp>(NULL);
  }

  AcceptPeerRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AcceptPeerRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AcceptPeerRsp& from);
  void MergeFrom(const AcceptPeerRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptPeerRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.AcceptPeerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RejectPeerRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RejectPeerRqst) */ {
 public:
  RejectPeerRqst();
  virtual ~RejectPeerRqst();

  RejectPeerRqst(const RejectPeerRqst& from);

  inline RejectPeerRqst& operator=(const RejectPeerRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RejectPeerRqst(RejectPeerRqst&& from) noexcept
    : RejectPeerRqst() {
    *this = ::std::move(from);
  }

  inline RejectPeerRqst& operator=(RejectPeerRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RejectPeerRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RejectPeerRqst* internal_default_instance() {
    return reinterpret_cast<const RejectPeerRqst*>(
               &_RejectPeerRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  void Swap(RejectPeerRqst* other);
  friend void swap(RejectPeerRqst& a, RejectPeerRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RejectPeerRqst* New() const final {
    return CreateMaybeMessage<RejectPeerRqst>(NULL);
  }

  RejectPeerRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RejectPeerRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RejectPeerRqst& from);
  void MergeFrom(const RejectPeerRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RejectPeerRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  private:
  const ::resource::Peer& _internal_peer() const;
  public:
  const ::resource::Peer& peer() const;
  ::resource::Peer* release_peer();
  ::resource::Peer* mutable_peer();
  void set_allocated_peer(::resource::Peer* peer);

  // @@protoc_insertion_point(class_scope:resource.RejectPeerRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::Peer* peer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RejectPeerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RejectPeerRsp) */ {
 public:
  RejectPeerRsp();
  virtual ~RejectPeerRsp();

  RejectPeerRsp(const RejectPeerRsp& from);

  inline RejectPeerRsp& operator=(const RejectPeerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RejectPeerRsp(RejectPeerRsp&& from) noexcept
    : RejectPeerRsp() {
    *this = ::std::move(from);
  }

  inline RejectPeerRsp& operator=(RejectPeerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RejectPeerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RejectPeerRsp* internal_default_instance() {
    return reinterpret_cast<const RejectPeerRsp*>(
               &_RejectPeerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  void Swap(RejectPeerRsp* other);
  friend void swap(RejectPeerRsp& a, RejectPeerRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RejectPeerRsp* New() const final {
    return CreateMaybeMessage<RejectPeerRsp>(NULL);
  }

  RejectPeerRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RejectPeerRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RejectPeerRsp& from);
  void MergeFrom(const RejectPeerRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RejectPeerRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:resource.RejectPeerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.Notification) */ {
 public:
  Notification();
  virtual ~Notification();

  Notification(const Notification& from);

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  void Swap(Notification* other);
  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Notification* New() const final {
    return CreateMaybeMessage<Notification>(NULL);
  }

  Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string recipient = 4;
  void clear_recipient();
  static const int kRecipientFieldNumber = 4;
  const ::std::string& recipient() const;
  void set_recipient(const ::std::string& value);
  #if LANG_CXX11
  void set_recipient(::std::string&& value);
  #endif
  void set_recipient(const char* value);
  void set_recipient(const char* value, size_t size);
  ::std::string* mutable_recipient();
  ::std::string* release_recipient();
  void set_allocated_recipient(::std::string* recipient);

  // string sender = 5;
  void clear_sender();
  static const int kSenderFieldNumber = 5;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // int64 date = 2;
  void clear_date();
  static const int kDateFieldNumber = 2;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // .resource.NotificationType notification_type = 6;
  void clear_notification_type();
  static const int kNotificationTypeFieldNumber = 6;
  ::resource::NotificationType notification_type() const;
  void set_notification_type(::resource::NotificationType value);

  // @@protoc_insertion_point(class_scope:resource.Notification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr recipient_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::int64 date_;
  int notification_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateNotificationRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.CreateNotificationRqst) */ {
 public:
  CreateNotificationRqst();
  virtual ~CreateNotificationRqst();

  CreateNotificationRqst(const CreateNotificationRqst& from);

  inline CreateNotificationRqst& operator=(const CreateNotificationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateNotificationRqst(CreateNotificationRqst&& from) noexcept
    : CreateNotificationRqst() {
    *this = ::std::move(from);
  }

  inline CreateNotificationRqst& operator=(CreateNotificationRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateNotificationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateNotificationRqst* internal_default_instance() {
    return reinterpret_cast<const CreateNotificationRqst*>(
               &_CreateNotificationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  void Swap(CreateNotificationRqst* other);
  friend void swap(CreateNotificationRqst& a, CreateNotificationRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateNotificationRqst* New() const final {
    return CreateMaybeMessage<CreateNotificationRqst>(NULL);
  }

  CreateNotificationRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateNotificationRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateNotificationRqst& from);
  void MergeFrom(const CreateNotificationRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNotificationRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.Notification notification = 1;
  bool has_notification() const;
  void clear_notification();
  static const int kNotificationFieldNumber = 1;
  private:
  const ::resource::Notification& _internal_notification() const;
  public:
  const ::resource::Notification& notification() const;
  ::resource::Notification* release_notification();
  ::resource::Notification* mutable_notification();
  void set_allocated_notification(::resource::Notification* notification);

  // @@protoc_insertion_point(class_scope:resource.CreateNotificationRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::Notification* notification_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateNotificationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.CreateNotificationRsp) */ {
 public:
  CreateNotificationRsp();
  virtual ~CreateNotificationRsp();

  CreateNotificationRsp(const CreateNotificationRsp& from);

  inline CreateNotificationRsp& operator=(const CreateNotificationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateNotificationRsp(CreateNotificationRsp&& from) noexcept
    : CreateNotificationRsp() {
    *this = ::std::move(from);
  }

  inline CreateNotificationRsp& operator=(CreateNotificationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateNotificationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateNotificationRsp* internal_default_instance() {
    return reinterpret_cast<const CreateNotificationRsp*>(
               &_CreateNotificationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  void Swap(CreateNotificationRsp* other);
  friend void swap(CreateNotificationRsp& a, CreateNotificationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateNotificationRsp* New() const final {
    return CreateMaybeMessage<CreateNotificationRsp>(NULL);
  }

  CreateNotificationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateNotificationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateNotificationRsp& from);
  void MergeFrom(const CreateNotificationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNotificationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:resource.CreateNotificationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNotificationsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetNotificationsRqst) */ {
 public:
  GetNotificationsRqst();
  virtual ~GetNotificationsRqst();

  GetNotificationsRqst(const GetNotificationsRqst& from);

  inline GetNotificationsRqst& operator=(const GetNotificationsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNotificationsRqst(GetNotificationsRqst&& from) noexcept
    : GetNotificationsRqst() {
    *this = ::std::move(from);
  }

  inline GetNotificationsRqst& operator=(GetNotificationsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNotificationsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNotificationsRqst* internal_default_instance() {
    return reinterpret_cast<const GetNotificationsRqst*>(
               &_GetNotificationsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  void Swap(GetNotificationsRqst* other);
  friend void swap(GetNotificationsRqst& a, GetNotificationsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNotificationsRqst* New() const final {
    return CreateMaybeMessage<GetNotificationsRqst>(NULL);
  }

  GetNotificationsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNotificationsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNotificationsRqst& from);
  void MergeFrom(const GetNotificationsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string recipient = 1;
  void clear_recipient();
  static const int kRecipientFieldNumber = 1;
  const ::std::string& recipient() const;
  void set_recipient(const ::std::string& value);
  #if LANG_CXX11
  void set_recipient(::std::string&& value);
  #endif
  void set_recipient(const char* value);
  void set_recipient(const char* value, size_t size);
  ::std::string* mutable_recipient();
  ::std::string* release_recipient();
  void set_allocated_recipient(::std::string* recipient);

  // @@protoc_insertion_point(class_scope:resource.GetNotificationsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr recipient_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNotificationsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetNotificationsRsp) */ {
 public:
  GetNotificationsRsp();
  virtual ~GetNotificationsRsp();

  GetNotificationsRsp(const GetNotificationsRsp& from);

  inline GetNotificationsRsp& operator=(const GetNotificationsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNotificationsRsp(GetNotificationsRsp&& from) noexcept
    : GetNotificationsRsp() {
    *this = ::std::move(from);
  }

  inline GetNotificationsRsp& operator=(GetNotificationsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNotificationsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNotificationsRsp* internal_default_instance() {
    return reinterpret_cast<const GetNotificationsRsp*>(
               &_GetNotificationsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  void Swap(GetNotificationsRsp* other);
  friend void swap(GetNotificationsRsp& a, GetNotificationsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNotificationsRsp* New() const final {
    return CreateMaybeMessage<GetNotificationsRsp>(NULL);
  }

  GetNotificationsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNotificationsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNotificationsRsp& from);
  void MergeFrom(const GetNotificationsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .resource.Notification notifications = 1;
  int notifications_size() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 1;
  ::resource::Notification* mutable_notifications(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::Notification >*
      mutable_notifications();
  const ::resource::Notification& notifications(int index) const;
  ::resource::Notification* add_notifications();
  const ::google::protobuf::RepeatedPtrField< ::resource::Notification >&
      notifications() const;

  // @@protoc_insertion_point(class_scope:resource.GetNotificationsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::resource::Notification > notifications_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteNotificationRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteNotificationRqst) */ {
 public:
  DeleteNotificationRqst();
  virtual ~DeleteNotificationRqst();

  DeleteNotificationRqst(const DeleteNotificationRqst& from);

  inline DeleteNotificationRqst& operator=(const DeleteNotificationRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteNotificationRqst(DeleteNotificationRqst&& from) noexcept
    : DeleteNotificationRqst() {
    *this = ::std::move(from);
  }

  inline DeleteNotificationRqst& operator=(DeleteNotificationRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNotificationRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteNotificationRqst* internal_default_instance() {
    return reinterpret_cast<const DeleteNotificationRqst*>(
               &_DeleteNotificationRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  void Swap(DeleteNotificationRqst* other);
  friend void swap(DeleteNotificationRqst& a, DeleteNotificationRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteNotificationRqst* New() const final {
    return CreateMaybeMessage<DeleteNotificationRqst>(NULL);
  }

  DeleteNotificationRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteNotificationRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteNotificationRqst& from);
  void MergeFrom(const DeleteNotificationRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNotificationRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string recipient = 2;
  void clear_recipient();
  static const int kRecipientFieldNumber = 2;
  const ::std::string& recipient() const;
  void set_recipient(const ::std::string& value);
  #if LANG_CXX11
  void set_recipient(::std::string&& value);
  #endif
  void set_recipient(const char* value);
  void set_recipient(const char* value, size_t size);
  ::std::string* mutable_recipient();
  ::std::string* release_recipient();
  void set_allocated_recipient(::std::string* recipient);

  // @@protoc_insertion_point(class_scope:resource.DeleteNotificationRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr recipient_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteNotificationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.DeleteNotificationRsp) */ {
 public:
  DeleteNotificationRsp();
  virtual ~DeleteNotificationRsp();

  DeleteNotificationRsp(const DeleteNotificationRsp& from);

  inline DeleteNotificationRsp& operator=(const DeleteNotificationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteNotificationRsp(DeleteNotificationRsp&& from) noexcept
    : DeleteNotificationRsp() {
    *this = ::std::move(from);
  }

  inline DeleteNotificationRsp& operator=(DeleteNotificationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNotificationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteNotificationRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteNotificationRsp*>(
               &_DeleteNotificationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  void Swap(DeleteNotificationRsp* other);
  friend void swap(DeleteNotificationRsp& a, DeleteNotificationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteNotificationRsp* New() const final {
    return CreateMaybeMessage<DeleteNotificationRsp>(NULL);
  }

  DeleteNotificationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteNotificationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteNotificationRsp& from);
  void MergeFrom(const DeleteNotificationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNotificationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:resource.DeleteNotificationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearAllNotificationsRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.ClearAllNotificationsRqst) */ {
 public:
  ClearAllNotificationsRqst();
  virtual ~ClearAllNotificationsRqst();

  ClearAllNotificationsRqst(const ClearAllNotificationsRqst& from);

  inline ClearAllNotificationsRqst& operator=(const ClearAllNotificationsRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearAllNotificationsRqst(ClearAllNotificationsRqst&& from) noexcept
    : ClearAllNotificationsRqst() {
    *this = ::std::move(from);
  }

  inline ClearAllNotificationsRqst& operator=(ClearAllNotificationsRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearAllNotificationsRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearAllNotificationsRqst* internal_default_instance() {
    return reinterpret_cast<const ClearAllNotificationsRqst*>(
               &_ClearAllNotificationsRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  void Swap(ClearAllNotificationsRqst* other);
  friend void swap(ClearAllNotificationsRqst& a, ClearAllNotificationsRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearAllNotificationsRqst* New() const final {
    return CreateMaybeMessage<ClearAllNotificationsRqst>(NULL);
  }

  ClearAllNotificationsRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClearAllNotificationsRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClearAllNotificationsRqst& from);
  void MergeFrom(const ClearAllNotificationsRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearAllNotificationsRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string recipient = 1;
  void clear_recipient();
  static const int kRecipientFieldNumber = 1;
  const ::std::string& recipient() const;
  void set_recipient(const ::std::string& value);
  #if LANG_CXX11
  void set_recipient(::std::string&& value);
  #endif
  void set_recipient(const char* value);
  void set_recipient(const char* value, size_t size);
  ::std::string* mutable_recipient();
  ::std::string* release_recipient();
  void set_allocated_recipient(::std::string* recipient);

  // @@protoc_insertion_point(class_scope:resource.ClearAllNotificationsRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr recipient_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearAllNotificationsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.ClearAllNotificationsRsp) */ {
 public:
  ClearAllNotificationsRsp();
  virtual ~ClearAllNotificationsRsp();

  ClearAllNotificationsRsp(const ClearAllNotificationsRsp& from);

  inline ClearAllNotificationsRsp& operator=(const ClearAllNotificationsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearAllNotificationsRsp(ClearAllNotificationsRsp&& from) noexcept
    : ClearAllNotificationsRsp() {
    *this = ::std::move(from);
  }

  inline ClearAllNotificationsRsp& operator=(ClearAllNotificationsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearAllNotificationsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearAllNotificationsRsp* internal_default_instance() {
    return reinterpret_cast<const ClearAllNotificationsRsp*>(
               &_ClearAllNotificationsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  void Swap(ClearAllNotificationsRsp* other);
  friend void swap(ClearAllNotificationsRsp& a, ClearAllNotificationsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearAllNotificationsRsp* New() const final {
    return CreateMaybeMessage<ClearAllNotificationsRsp>(NULL);
  }

  ClearAllNotificationsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClearAllNotificationsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClearAllNotificationsRsp& from);
  void MergeFrom(const ClearAllNotificationsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearAllNotificationsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:resource.ClearAllNotificationsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearNotificationsByTypeRqst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.ClearNotificationsByTypeRqst) */ {
 public:
  ClearNotificationsByTypeRqst();
  virtual ~ClearNotificationsByTypeRqst();

  ClearNotificationsByTypeRqst(const ClearNotificationsByTypeRqst& from);

  inline ClearNotificationsByTypeRqst& operator=(const ClearNotificationsByTypeRqst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearNotificationsByTypeRqst(ClearNotificationsByTypeRqst&& from) noexcept
    : ClearNotificationsByTypeRqst() {
    *this = ::std::move(from);
  }

  inline ClearNotificationsByTypeRqst& operator=(ClearNotificationsByTypeRqst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearNotificationsByTypeRqst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearNotificationsByTypeRqst* internal_default_instance() {
    return reinterpret_cast<const ClearNotificationsByTypeRqst*>(
               &_ClearNotificationsByTypeRqst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  void Swap(ClearNotificationsByTypeRqst* other);
  friend void swap(ClearNotificationsByTypeRqst& a, ClearNotificationsByTypeRqst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearNotificationsByTypeRqst* New() const final {
    return CreateMaybeMessage<ClearNotificationsByTypeRqst>(NULL);
  }

  ClearNotificationsByTypeRqst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClearNotificationsByTypeRqst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClearNotificationsByTypeRqst& from);
  void MergeFrom(const ClearNotificationsByTypeRqst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearNotificationsByTypeRqst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string recipient = 1;
  void clear_recipient();
  static const int kRecipientFieldNumber = 1;
  const ::std::string& recipient() const;
  void set_recipient(const ::std::string& value);
  #if LANG_CXX11
  void set_recipient(::std::string&& value);
  #endif
  void set_recipient(const char* value);
  void set_recipient(const char* value, size_t size);
  ::std::string* mutable_recipient();
  ::std::string* release_recipient();
  void set_allocated_recipient(::std::string* recipient);

  // .resource.NotificationType notification_type = 2;
  void clear_notification_type();
  static const int kNotificationTypeFieldNumber = 2;
  ::resource::NotificationType notification_type() const;
  void set_notification_type(::resource::NotificationType value);

  // @@protoc_insertion_point(class_scope:resource.ClearNotificationsByTypeRqst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr recipient_;
  int notification_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClearNotificationsByTypeRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.ClearNotificationsByTypeRsp) */ {
 public:
  ClearNotificationsByTypeRsp();
  virtual ~ClearNotificationsByTypeRsp();

  ClearNotificationsByTypeRsp(const ClearNotificationsByTypeRsp& from);

  inline ClearNotificationsByTypeRsp& operator=(const ClearNotificationsByTypeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearNotificationsByTypeRsp(ClearNotificationsByTypeRsp&& from) noexcept
    : ClearNotificationsByTypeRsp() {
    *this = ::std::move(from);
  }

  inline ClearNotificationsByTypeRsp& operator=(ClearNotificationsByTypeRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearNotificationsByTypeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearNotificationsByTypeRsp* internal_default_instance() {
    return reinterpret_cast<const ClearNotificationsByTypeRsp*>(
               &_ClearNotificationsByTypeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  void Swap(ClearNotificationsByTypeRsp* other);
  friend void swap(ClearNotificationsByTypeRsp& a, ClearNotificationsByTypeRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearNotificationsByTypeRsp* New() const final {
    return CreateMaybeMessage<ClearNotificationsByTypeRsp>(NULL);
  }

  ClearNotificationsByTypeRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClearNotificationsByTypeRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClearNotificationsByTypeRsp& from);
  void MergeFrom(const ClearNotificationsByTypeRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearNotificationsByTypeRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:resource.ClearNotificationsByTypeRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Session : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  void Swap(Session* other);
  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(NULL);
  }

  Session* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accountId = 1;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 1;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // int64 last_state_time = 3;
  void clear_last_state_time();
  static const int kLastStateTimeFieldNumber = 3;
  ::google::protobuf::int64 last_state_time() const;
  void set_last_state_time(::google::protobuf::int64 value);

  // int64 expire_at = 4;
  void clear_expire_at();
  static const int kExpireAtFieldNumber = 4;
  ::google::protobuf::int64 expire_at() const;
  void set_expire_at(::google::protobuf::int64 value);

  // .resource.SessionState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::resource::SessionState state() const;
  void set_state(::resource::SessionState value);

  // @@protoc_insertion_point(class_scope:resource.Session)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  ::google::protobuf::int64 last_state_time_;
  ::google::protobuf::int64 expire_at_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.UpdateSessionRequest) */ {
 public:
  UpdateSessionRequest();
  virtual ~UpdateSessionRequest();

  UpdateSessionRequest(const UpdateSessionRequest& from);

  inline UpdateSessionRequest& operator=(const UpdateSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateSessionRequest(UpdateSessionRequest&& from) noexcept
    : UpdateSessionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSessionRequest& operator=(UpdateSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSessionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSessionRequest*>(
               &_UpdateSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  void Swap(UpdateSessionRequest* other);
  friend void swap(UpdateSessionRequest& a, UpdateSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSessionRequest* New() const final {
    return CreateMaybeMessage<UpdateSessionRequest>(NULL);
  }

  UpdateSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateSessionRequest& from);
  void MergeFrom(const UpdateSessionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.Session session = 1;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 1;
  private:
  const ::resource::Session& _internal_session() const;
  public:
  const ::resource::Session& session() const;
  ::resource::Session* release_session();
  ::resource::Session* mutable_session();
  void set_allocated_session(::resource::Session* session);

  // @@protoc_insertion_point(class_scope:resource.UpdateSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::Session* session_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateSessionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.UpdateSessionResponse) */ {
 public:
  UpdateSessionResponse();
  virtual ~UpdateSessionResponse();

  UpdateSessionResponse(const UpdateSessionResponse& from);

  inline UpdateSessionResponse& operator=(const UpdateSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateSessionResponse(UpdateSessionResponse&& from) noexcept
    : UpdateSessionResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSessionResponse& operator=(UpdateSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSessionResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSessionResponse*>(
               &_UpdateSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  void Swap(UpdateSessionResponse* other);
  friend void swap(UpdateSessionResponse& a, UpdateSessionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSessionResponse* New() const final {
    return CreateMaybeMessage<UpdateSessionResponse>(NULL);
  }

  UpdateSessionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSessionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateSessionResponse& from);
  void MergeFrom(const UpdateSessionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:resource.UpdateSessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveSessionRequest) */ {
 public:
  RemoveSessionRequest();
  virtual ~RemoveSessionRequest();

  RemoveSessionRequest(const RemoveSessionRequest& from);

  inline RemoveSessionRequest& operator=(const RemoveSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveSessionRequest(RemoveSessionRequest&& from) noexcept
    : RemoveSessionRequest() {
    *this = ::std::move(from);
  }

  inline RemoveSessionRequest& operator=(RemoveSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveSessionRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveSessionRequest*>(
               &_RemoveSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  void Swap(RemoveSessionRequest* other);
  friend void swap(RemoveSessionRequest& a, RemoveSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveSessionRequest* New() const final {
    return CreateMaybeMessage<RemoveSessionRequest>(NULL);
  }

  RemoveSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveSessionRequest& from);
  void MergeFrom(const RemoveSessionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accountId = 1;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 1;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // @@protoc_insertion_point(class_scope:resource.RemoveSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveSessionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.RemoveSessionResponse) */ {
 public:
  RemoveSessionResponse();
  virtual ~RemoveSessionResponse();

  RemoveSessionResponse(const RemoveSessionResponse& from);

  inline RemoveSessionResponse& operator=(const RemoveSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveSessionResponse(RemoveSessionResponse&& from) noexcept
    : RemoveSessionResponse() {
    *this = ::std::move(from);
  }

  inline RemoveSessionResponse& operator=(RemoveSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveSessionResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveSessionResponse*>(
               &_RemoveSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  void Swap(RemoveSessionResponse* other);
  friend void swap(RemoveSessionResponse& a, RemoveSessionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveSessionResponse* New() const final {
    return CreateMaybeMessage<RemoveSessionResponse>(NULL);
  }

  RemoveSessionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveSessionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveSessionResponse& from);
  void MergeFrom(const RemoveSessionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:resource.RemoveSessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSessionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetSessionsRequest) */ {
 public:
  GetSessionsRequest();
  virtual ~GetSessionsRequest();

  GetSessionsRequest(const GetSessionsRequest& from);

  inline GetSessionsRequest& operator=(const GetSessionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSessionsRequest(GetSessionsRequest&& from) noexcept
    : GetSessionsRequest() {
    *this = ::std::move(from);
  }

  inline GetSessionsRequest& operator=(GetSessionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSessionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSessionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetSessionsRequest*>(
               &_GetSessionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  void Swap(GetSessionsRequest* other);
  friend void swap(GetSessionsRequest& a, GetSessionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSessionsRequest* New() const final {
    return CreateMaybeMessage<GetSessionsRequest>(NULL);
  }

  GetSessionsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSessionsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSessionsRequest& from);
  void MergeFrom(const GetSessionsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSessionsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string options = 2;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::std::string& options() const;
  void set_options(const ::std::string& value);
  #if LANG_CXX11
  void set_options(::std::string&& value);
  #endif
  void set_options(const char* value);
  void set_options(const char* value, size_t size);
  ::std::string* mutable_options();
  ::std::string* release_options();
  void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:resource.GetSessionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr options_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSessionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetSessionsResponse) */ {
 public:
  GetSessionsResponse();
  virtual ~GetSessionsResponse();

  GetSessionsResponse(const GetSessionsResponse& from);

  inline GetSessionsResponse& operator=(const GetSessionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSessionsResponse(GetSessionsResponse&& from) noexcept
    : GetSessionsResponse() {
    *this = ::std::move(from);
  }

  inline GetSessionsResponse& operator=(GetSessionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSessionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSessionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetSessionsResponse*>(
               &_GetSessionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  void Swap(GetSessionsResponse* other);
  friend void swap(GetSessionsResponse& a, GetSessionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSessionsResponse* New() const final {
    return CreateMaybeMessage<GetSessionsResponse>(NULL);
  }

  GetSessionsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSessionsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSessionsResponse& from);
  void MergeFrom(const GetSessionsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSessionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .resource.Session sessions = 1;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::resource::Session* mutable_sessions(int index);
  ::google::protobuf::RepeatedPtrField< ::resource::Session >*
      mutable_sessions();
  const ::resource::Session& sessions(int index) const;
  ::resource::Session* add_sessions();
  const ::google::protobuf::RepeatedPtrField< ::resource::Session >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:resource.GetSessionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::resource::Session > sessions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetSessionRequest) */ {
 public:
  GetSessionRequest();
  virtual ~GetSessionRequest();

  GetSessionRequest(const GetSessionRequest& from);

  inline GetSessionRequest& operator=(const GetSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSessionRequest(GetSessionRequest&& from) noexcept
    : GetSessionRequest() {
    *this = ::std::move(from);
  }

  inline GetSessionRequest& operator=(GetSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSessionRequest* internal_default_instance() {
    return reinterpret_cast<const GetSessionRequest*>(
               &_GetSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  void Swap(GetSessionRequest* other);
  friend void swap(GetSessionRequest& a, GetSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSessionRequest* New() const final {
    return CreateMaybeMessage<GetSessionRequest>(NULL);
  }

  GetSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSessionRequest& from);
  void MergeFrom(const GetSessionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accountId = 1;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 1;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  #if LANG_CXX11
  void set_accountid(::std::string&& value);
  #endif
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // @@protoc_insertion_point(class_scope:resource.GetSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSessionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:resource.GetSessionResponse) */ {
 public:
  GetSessionResponse();
  virtual ~GetSessionResponse();

  GetSessionResponse(const GetSessionResponse& from);

  inline GetSessionResponse& operator=(const GetSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSessionResponse(GetSessionResponse&& from) noexcept
    : GetSessionResponse() {
    *this = ::std::move(from);
  }

  inline GetSessionResponse& operator=(GetSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSessionResponse* internal_default_instance() {
    return reinterpret_cast<const GetSessionResponse*>(
               &_GetSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  void Swap(GetSessionResponse* other);
  friend void swap(GetSessionResponse& a, GetSessionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSessionResponse* New() const final {
    return CreateMaybeMessage<GetSessionResponse>(NULL);
  }

  GetSessionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSessionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSessionResponse& from);
  void MergeFrom(const GetSessionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .resource.Session session = 1;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 1;
  private:
  const ::resource::Session& _internal_session() const;
  public:
  const ::resource::Session& session() const;
  ::resource::Session* release_session();
  ::resource::Session* mutable_session();
  void set_allocated_session(::resource::Session* session);

  // @@protoc_insertion_point(class_scope:resource.GetSessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::resource::Session* session_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resource_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackageBundle

// .resource.PackageDescriptor packageDescriptor = 1;
inline bool PackageBundle::has_packagedescriptor() const {
  return this != internal_default_instance() && packagedescriptor_ != NULL;
}
inline void PackageBundle::clear_packagedescriptor() {
  if (GetArenaNoVirtual() == NULL && packagedescriptor_ != NULL) {
    delete packagedescriptor_;
  }
  packagedescriptor_ = NULL;
}
inline const ::resource::PackageDescriptor& PackageBundle::_internal_packagedescriptor() const {
  return *packagedescriptor_;
}
inline const ::resource::PackageDescriptor& PackageBundle::packagedescriptor() const {
  const ::resource::PackageDescriptor* p = packagedescriptor_;
  // @@protoc_insertion_point(field_get:resource.PackageBundle.packageDescriptor)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::PackageDescriptor*>(
      &::resource::_PackageDescriptor_default_instance_);
}
inline ::resource::PackageDescriptor* PackageBundle::release_packagedescriptor() {
  // @@protoc_insertion_point(field_release:resource.PackageBundle.packageDescriptor)
  
  ::resource::PackageDescriptor* temp = packagedescriptor_;
  packagedescriptor_ = NULL;
  return temp;
}
inline ::resource::PackageDescriptor* PackageBundle::mutable_packagedescriptor() {
  
  if (packagedescriptor_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::PackageDescriptor>(GetArenaNoVirtual());
    packagedescriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.PackageBundle.packageDescriptor)
  return packagedescriptor_;
}
inline void PackageBundle::set_allocated_packagedescriptor(::resource::PackageDescriptor* packagedescriptor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete packagedescriptor_;
  }
  if (packagedescriptor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      packagedescriptor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, packagedescriptor, submessage_arena);
    }
    
  } else {
    
  }
  packagedescriptor_ = packagedescriptor;
  // @@protoc_insertion_point(field_set_allocated:resource.PackageBundle.packageDescriptor)
}

// string checksum = 2;
inline void PackageBundle::clear_checksum() {
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageBundle::checksum() const {
  // @@protoc_insertion_point(field_get:resource.PackageBundle.checksum)
  return checksum_.GetNoArena();
}
inline void PackageBundle::set_checksum(const ::std::string& value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.PackageBundle.checksum)
}
#if LANG_CXX11
inline void PackageBundle::set_checksum(::std::string&& value) {
  
  checksum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.PackageBundle.checksum)
}
#endif
inline void PackageBundle::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.PackageBundle.checksum)
}
inline void PackageBundle::set_checksum(const char* value, size_t size) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.PackageBundle.checksum)
}
inline ::std::string* PackageBundle::mutable_checksum() {
  
  // @@protoc_insertion_point(field_mutable:resource.PackageBundle.checksum)
  return checksum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageBundle::release_checksum() {
  // @@protoc_insertion_point(field_release:resource.PackageBundle.checksum)
  
  return checksum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageBundle::set_allocated_checksum(::std::string* checksum) {
  if (checksum != NULL) {
    
  } else {
    
  }
  checksum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum);
  // @@protoc_insertion_point(field_set_allocated:resource.PackageBundle.checksum)
}

// string plaform = 3;
inline void PackageBundle::clear_plaform() {
  plaform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageBundle::plaform() const {
  // @@protoc_insertion_point(field_get:resource.PackageBundle.plaform)
  return plaform_.GetNoArena();
}
inline void PackageBundle::set_plaform(const ::std::string& value) {
  
  plaform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.PackageBundle.plaform)
}
#if LANG_CXX11
inline void PackageBundle::set_plaform(::std::string&& value) {
  
  plaform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.PackageBundle.plaform)
}
#endif
inline void PackageBundle::set_plaform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plaform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.PackageBundle.plaform)
}
inline void PackageBundle::set_plaform(const char* value, size_t size) {
  
  plaform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.PackageBundle.plaform)
}
inline ::std::string* PackageBundle::mutable_plaform() {
  
  // @@protoc_insertion_point(field_mutable:resource.PackageBundle.plaform)
  return plaform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageBundle::release_plaform() {
  // @@protoc_insertion_point(field_release:resource.PackageBundle.plaform)
  
  return plaform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageBundle::set_allocated_plaform(::std::string* plaform) {
  if (plaform != NULL) {
    
  } else {
    
  }
  plaform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plaform);
  // @@protoc_insertion_point(field_set_allocated:resource.PackageBundle.plaform)
}

// int32 size = 4;
inline void PackageBundle::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 PackageBundle::size() const {
  // @@protoc_insertion_point(field_get:resource.PackageBundle.size)
  return size_;
}
inline void PackageBundle::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:resource.PackageBundle.size)
}

// int64 modified = 5;
inline void PackageBundle::clear_modified() {
  modified_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PackageBundle::modified() const {
  // @@protoc_insertion_point(field_get:resource.PackageBundle.modified)
  return modified_;
}
inline void PackageBundle::set_modified(::google::protobuf::int64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:resource.PackageBundle.modified)
}

// bytes Binairies = 6;
inline void PackageBundle::clear_binairies() {
  binairies_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageBundle::binairies() const {
  // @@protoc_insertion_point(field_get:resource.PackageBundle.Binairies)
  return binairies_.GetNoArena();
}
inline void PackageBundle::set_binairies(const ::std::string& value) {
  
  binairies_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.PackageBundle.Binairies)
}
#if LANG_CXX11
inline void PackageBundle::set_binairies(::std::string&& value) {
  
  binairies_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.PackageBundle.Binairies)
}
#endif
inline void PackageBundle::set_binairies(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  binairies_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.PackageBundle.Binairies)
}
inline void PackageBundle::set_binairies(const void* value, size_t size) {
  
  binairies_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.PackageBundle.Binairies)
}
inline ::std::string* PackageBundle::mutable_binairies() {
  
  // @@protoc_insertion_point(field_mutable:resource.PackageBundle.Binairies)
  return binairies_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageBundle::release_binairies() {
  // @@protoc_insertion_point(field_release:resource.PackageBundle.Binairies)
  
  return binairies_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageBundle::set_allocated_binairies(::std::string* binairies) {
  if (binairies != NULL) {
    
  } else {
    
  }
  binairies_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binairies);
  // @@protoc_insertion_point(field_set_allocated:resource.PackageBundle.Binairies)
}

// string mac = 7;
inline void PackageBundle::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageBundle::mac() const {
  // @@protoc_insertion_point(field_get:resource.PackageBundle.mac)
  return mac_.GetNoArena();
}
inline void PackageBundle::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.PackageBundle.mac)
}
#if LANG_CXX11
inline void PackageBundle::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.PackageBundle.mac)
}
#endif
inline void PackageBundle::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.PackageBundle.mac)
}
inline void PackageBundle::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.PackageBundle.mac)
}
inline ::std::string* PackageBundle::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:resource.PackageBundle.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageBundle::release_mac() {
  // @@protoc_insertion_point(field_release:resource.PackageBundle.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageBundle::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:resource.PackageBundle.mac)
}

// -------------------------------------------------------------------

// SetPackageBundleRequest

// .resource.PackageBundle bundle = 1;
inline bool SetPackageBundleRequest::has_bundle() const {
  return this != internal_default_instance() && bundle_ != NULL;
}
inline void SetPackageBundleRequest::clear_bundle() {
  if (GetArenaNoVirtual() == NULL && bundle_ != NULL) {
    delete bundle_;
  }
  bundle_ = NULL;
}
inline const ::resource::PackageBundle& SetPackageBundleRequest::_internal_bundle() const {
  return *bundle_;
}
inline const ::resource::PackageBundle& SetPackageBundleRequest::bundle() const {
  const ::resource::PackageBundle* p = bundle_;
  // @@protoc_insertion_point(field_get:resource.SetPackageBundleRequest.bundle)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::PackageBundle*>(
      &::resource::_PackageBundle_default_instance_);
}
inline ::resource::PackageBundle* SetPackageBundleRequest::release_bundle() {
  // @@protoc_insertion_point(field_release:resource.SetPackageBundleRequest.bundle)
  
  ::resource::PackageBundle* temp = bundle_;
  bundle_ = NULL;
  return temp;
}
inline ::resource::PackageBundle* SetPackageBundleRequest::mutable_bundle() {
  
  if (bundle_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::PackageBundle>(GetArenaNoVirtual());
    bundle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.SetPackageBundleRequest.bundle)
  return bundle_;
}
inline void SetPackageBundleRequest::set_allocated_bundle(::resource::PackageBundle* bundle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bundle_;
  }
  if (bundle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bundle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bundle, submessage_arena);
    }
    
  } else {
    
  }
  bundle_ = bundle;
  // @@protoc_insertion_point(field_set_allocated:resource.SetPackageBundleRequest.bundle)
}

// -------------------------------------------------------------------

// SetPackageBundleResponse

// bool result = 1;
inline void SetPackageBundleResponse::clear_result() {
  result_ = false;
}
inline bool SetPackageBundleResponse::result() const {
  // @@protoc_insertion_point(field_get:resource.SetPackageBundleResponse.result)
  return result_;
}
inline void SetPackageBundleResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.SetPackageBundleResponse.result)
}

// -------------------------------------------------------------------

// GetPackageBundleChecksumRequest

// string id = 1;
inline void GetPackageBundleChecksumRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPackageBundleChecksumRequest::id() const {
  // @@protoc_insertion_point(field_get:resource.GetPackageBundleChecksumRequest.id)
  return id_.GetNoArena();
}
inline void GetPackageBundleChecksumRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPackageBundleChecksumRequest.id)
}
#if LANG_CXX11
inline void GetPackageBundleChecksumRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPackageBundleChecksumRequest.id)
}
#endif
inline void GetPackageBundleChecksumRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPackageBundleChecksumRequest.id)
}
inline void GetPackageBundleChecksumRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPackageBundleChecksumRequest.id)
}
inline ::std::string* GetPackageBundleChecksumRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPackageBundleChecksumRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPackageBundleChecksumRequest::release_id() {
  // @@protoc_insertion_point(field_release:resource.GetPackageBundleChecksumRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPackageBundleChecksumRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPackageBundleChecksumRequest.id)
}

// -------------------------------------------------------------------

// GetPackageBundleChecksumResponse

// string checksum = 1;
inline void GetPackageBundleChecksumResponse::clear_checksum() {
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPackageBundleChecksumResponse::checksum() const {
  // @@protoc_insertion_point(field_get:resource.GetPackageBundleChecksumResponse.checksum)
  return checksum_.GetNoArena();
}
inline void GetPackageBundleChecksumResponse::set_checksum(const ::std::string& value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPackageBundleChecksumResponse.checksum)
}
#if LANG_CXX11
inline void GetPackageBundleChecksumResponse::set_checksum(::std::string&& value) {
  
  checksum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPackageBundleChecksumResponse.checksum)
}
#endif
inline void GetPackageBundleChecksumResponse::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPackageBundleChecksumResponse.checksum)
}
inline void GetPackageBundleChecksumResponse::set_checksum(const char* value, size_t size) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPackageBundleChecksumResponse.checksum)
}
inline ::std::string* GetPackageBundleChecksumResponse::mutable_checksum() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPackageBundleChecksumResponse.checksum)
  return checksum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPackageBundleChecksumResponse::release_checksum() {
  // @@protoc_insertion_point(field_release:resource.GetPackageBundleChecksumResponse.checksum)
  
  return checksum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPackageBundleChecksumResponse::set_allocated_checksum(::std::string* checksum) {
  if (checksum != NULL) {
    
  } else {
    
  }
  checksum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPackageBundleChecksumResponse.checksum)
}

// -------------------------------------------------------------------

// PackageDescriptor

// string id = 1;
inline void PackageDescriptor::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageDescriptor::id() const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.id)
  return id_.GetNoArena();
}
inline void PackageDescriptor::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.id)
}
#if LANG_CXX11
inline void PackageDescriptor::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.PackageDescriptor.id)
}
#endif
inline void PackageDescriptor::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.PackageDescriptor.id)
}
inline void PackageDescriptor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.PackageDescriptor.id)
}
inline ::std::string* PackageDescriptor::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageDescriptor::release_id() {
  // @@protoc_insertion_point(field_release:resource.PackageDescriptor.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageDescriptor::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.PackageDescriptor.id)
}

// string name = 2;
inline void PackageDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageDescriptor::name() const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.name)
  return name_.GetNoArena();
}
inline void PackageDescriptor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.name)
}
#if LANG_CXX11
inline void PackageDescriptor::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.PackageDescriptor.name)
}
#endif
inline void PackageDescriptor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.PackageDescriptor.name)
}
inline void PackageDescriptor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.PackageDescriptor.name)
}
inline ::std::string* PackageDescriptor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:resource.PackageDescriptor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageDescriptor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:resource.PackageDescriptor.name)
}

// .resource.PackageType type = 3;
inline void PackageDescriptor::clear_type() {
  type_ = 0;
}
inline ::resource::PackageType PackageDescriptor::type() const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.type)
  return static_cast< ::resource::PackageType >(type_);
}
inline void PackageDescriptor::set_type(::resource::PackageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.type)
}

// string PublisherID = 4;
inline void PackageDescriptor::clear_PublisherID() {
  PublisherID_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageDescriptor::PublisherID() const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.PublisherID)
  return PublisherID_.GetNoArena();
}
inline void PackageDescriptor::set_PublisherID(const ::std::string& value) {
  
  PublisherID_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.PublisherID)
}
#if LANG_CXX11
inline void PackageDescriptor::set_PublisherID(::std::string&& value) {
  
  PublisherID_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.PackageDescriptor.PublisherID)
}
#endif
inline void PackageDescriptor::set_PublisherID(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  PublisherID_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.PackageDescriptor.PublisherID)
}
inline void PackageDescriptor::set_PublisherID(const char* value, size_t size) {
  
  PublisherID_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.PackageDescriptor.PublisherID)
}
inline ::std::string* PackageDescriptor::mutable_PublisherID() {
  
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.PublisherID)
  return PublisherID_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageDescriptor::release_PublisherID() {
  // @@protoc_insertion_point(field_release:resource.PackageDescriptor.PublisherID)
  
  return PublisherID_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageDescriptor::set_allocated_PublisherID(::std::string* PublisherID) {
  if (PublisherID != NULL) {
    
  } else {
    
  }
  PublisherID_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), PublisherID);
  // @@protoc_insertion_point(field_set_allocated:resource.PackageDescriptor.PublisherID)
}

// string version = 6;
inline void PackageDescriptor::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageDescriptor::version() const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.version)
  return version_.GetNoArena();
}
inline void PackageDescriptor::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.version)
}
#if LANG_CXX11
inline void PackageDescriptor::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.PackageDescriptor.version)
}
#endif
inline void PackageDescriptor::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.PackageDescriptor.version)
}
inline void PackageDescriptor::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.PackageDescriptor.version)
}
inline ::std::string* PackageDescriptor::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageDescriptor::release_version() {
  // @@protoc_insertion_point(field_release:resource.PackageDescriptor.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageDescriptor::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:resource.PackageDescriptor.version)
}

// string description = 7;
inline void PackageDescriptor::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageDescriptor::description() const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.description)
  return description_.GetNoArena();
}
inline void PackageDescriptor::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.description)
}
#if LANG_CXX11
inline void PackageDescriptor::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.PackageDescriptor.description)
}
#endif
inline void PackageDescriptor::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.PackageDescriptor.description)
}
inline void PackageDescriptor::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.PackageDescriptor.description)
}
inline ::std::string* PackageDescriptor::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:resource.PackageDescriptor.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageDescriptor::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:resource.PackageDescriptor.description)
}

// repeated string repositories = 8;
inline int PackageDescriptor::repositories_size() const {
  return repositories_.size();
}
inline void PackageDescriptor::clear_repositories() {
  repositories_.Clear();
}
inline const ::std::string& PackageDescriptor::repositories(int index) const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.repositories)
  return repositories_.Get(index);
}
inline ::std::string* PackageDescriptor::mutable_repositories(int index) {
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.repositories)
  return repositories_.Mutable(index);
}
inline void PackageDescriptor::set_repositories(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.repositories)
  repositories_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PackageDescriptor::set_repositories(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.repositories)
  repositories_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PackageDescriptor::set_repositories(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  repositories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.PackageDescriptor.repositories)
}
inline void PackageDescriptor::set_repositories(int index, const char* value, size_t size) {
  repositories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.PackageDescriptor.repositories)
}
inline ::std::string* PackageDescriptor::add_repositories() {
  // @@protoc_insertion_point(field_add_mutable:resource.PackageDescriptor.repositories)
  return repositories_.Add();
}
inline void PackageDescriptor::add_repositories(const ::std::string& value) {
  repositories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.PackageDescriptor.repositories)
}
#if LANG_CXX11
inline void PackageDescriptor::add_repositories(::std::string&& value) {
  repositories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.PackageDescriptor.repositories)
}
#endif
inline void PackageDescriptor::add_repositories(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  repositories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.PackageDescriptor.repositories)
}
inline void PackageDescriptor::add_repositories(const char* value, size_t size) {
  repositories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.PackageDescriptor.repositories)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackageDescriptor::repositories() const {
  // @@protoc_insertion_point(field_list:resource.PackageDescriptor.repositories)
  return repositories_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PackageDescriptor::mutable_repositories() {
  // @@protoc_insertion_point(field_mutable_list:resource.PackageDescriptor.repositories)
  return &repositories_;
}

// repeated string discoveries = 9;
inline int PackageDescriptor::discoveries_size() const {
  return discoveries_.size();
}
inline void PackageDescriptor::clear_discoveries() {
  discoveries_.Clear();
}
inline const ::std::string& PackageDescriptor::discoveries(int index) const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.discoveries)
  return discoveries_.Get(index);
}
inline ::std::string* PackageDescriptor::mutable_discoveries(int index) {
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.discoveries)
  return discoveries_.Mutable(index);
}
inline void PackageDescriptor::set_discoveries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.discoveries)
  discoveries_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PackageDescriptor::set_discoveries(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.discoveries)
  discoveries_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PackageDescriptor::set_discoveries(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  discoveries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.PackageDescriptor.discoveries)
}
inline void PackageDescriptor::set_discoveries(int index, const char* value, size_t size) {
  discoveries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.PackageDescriptor.discoveries)
}
inline ::std::string* PackageDescriptor::add_discoveries() {
  // @@protoc_insertion_point(field_add_mutable:resource.PackageDescriptor.discoveries)
  return discoveries_.Add();
}
inline void PackageDescriptor::add_discoveries(const ::std::string& value) {
  discoveries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.PackageDescriptor.discoveries)
}
#if LANG_CXX11
inline void PackageDescriptor::add_discoveries(::std::string&& value) {
  discoveries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.PackageDescriptor.discoveries)
}
#endif
inline void PackageDescriptor::add_discoveries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  discoveries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.PackageDescriptor.discoveries)
}
inline void PackageDescriptor::add_discoveries(const char* value, size_t size) {
  discoveries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.PackageDescriptor.discoveries)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackageDescriptor::discoveries() const {
  // @@protoc_insertion_point(field_list:resource.PackageDescriptor.discoveries)
  return discoveries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PackageDescriptor::mutable_discoveries() {
  // @@protoc_insertion_point(field_mutable_list:resource.PackageDescriptor.discoveries)
  return &discoveries_;
}

// repeated string keywords = 10;
inline int PackageDescriptor::keywords_size() const {
  return keywords_.size();
}
inline void PackageDescriptor::clear_keywords() {
  keywords_.Clear();
}
inline const ::std::string& PackageDescriptor::keywords(int index) const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.keywords)
  return keywords_.Get(index);
}
inline ::std::string* PackageDescriptor::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.keywords)
  return keywords_.Mutable(index);
}
inline void PackageDescriptor::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.keywords)
  keywords_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PackageDescriptor::set_keywords(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.keywords)
  keywords_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PackageDescriptor::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.PackageDescriptor.keywords)
}
inline void PackageDescriptor::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.PackageDescriptor.keywords)
}
inline ::std::string* PackageDescriptor::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:resource.PackageDescriptor.keywords)
  return keywords_.Add();
}
inline void PackageDescriptor::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.PackageDescriptor.keywords)
}
#if LANG_CXX11
inline void PackageDescriptor::add_keywords(::std::string&& value) {
  keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.PackageDescriptor.keywords)
}
#endif
inline void PackageDescriptor::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.PackageDescriptor.keywords)
}
inline void PackageDescriptor::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.PackageDescriptor.keywords)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackageDescriptor::keywords() const {
  // @@protoc_insertion_point(field_list:resource.PackageDescriptor.keywords)
  return keywords_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PackageDescriptor::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:resource.PackageDescriptor.keywords)
  return &keywords_;
}

// repeated string actions = 11;
inline int PackageDescriptor::actions_size() const {
  return actions_.size();
}
inline void PackageDescriptor::clear_actions() {
  actions_.Clear();
}
inline const ::std::string& PackageDescriptor::actions(int index) const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.actions)
  return actions_.Get(index);
}
inline ::std::string* PackageDescriptor::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.actions)
  return actions_.Mutable(index);
}
inline void PackageDescriptor::set_actions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.actions)
  actions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PackageDescriptor::set_actions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PackageDescriptor::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.PackageDescriptor.actions)
}
inline void PackageDescriptor::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.PackageDescriptor.actions)
}
inline ::std::string* PackageDescriptor::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:resource.PackageDescriptor.actions)
  return actions_.Add();
}
inline void PackageDescriptor::add_actions(const ::std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.PackageDescriptor.actions)
}
#if LANG_CXX11
inline void PackageDescriptor::add_actions(::std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.PackageDescriptor.actions)
}
#endif
inline void PackageDescriptor::add_actions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.PackageDescriptor.actions)
}
inline void PackageDescriptor::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.PackageDescriptor.actions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackageDescriptor::actions() const {
  // @@protoc_insertion_point(field_list:resource.PackageDescriptor.actions)
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PackageDescriptor::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:resource.PackageDescriptor.actions)
  return &actions_;
}

// repeated .resource.Role roles = 12;
inline int PackageDescriptor::roles_size() const {
  return roles_.size();
}
inline void PackageDescriptor::clear_roles() {
  roles_.Clear();
}
inline ::resource::Role* PackageDescriptor::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.roles)
  return roles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::Role >*
PackageDescriptor::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:resource.PackageDescriptor.roles)
  return &roles_;
}
inline const ::resource::Role& PackageDescriptor::roles(int index) const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.roles)
  return roles_.Get(index);
}
inline ::resource::Role* PackageDescriptor::add_roles() {
  // @@protoc_insertion_point(field_add:resource.PackageDescriptor.roles)
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::Role >&
PackageDescriptor::roles() const {
  // @@protoc_insertion_point(field_list:resource.PackageDescriptor.roles)
  return roles_;
}

// repeated .resource.Group groups = 13;
inline int PackageDescriptor::groups_size() const {
  return groups_.size();
}
inline void PackageDescriptor::clear_groups() {
  groups_.Clear();
}
inline ::resource::Group* PackageDescriptor::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.groups)
  return groups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::Group >*
PackageDescriptor::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:resource.PackageDescriptor.groups)
  return &groups_;
}
inline const ::resource::Group& PackageDescriptor::groups(int index) const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.groups)
  return groups_.Get(index);
}
inline ::resource::Group* PackageDescriptor::add_groups() {
  // @@protoc_insertion_point(field_add:resource.PackageDescriptor.groups)
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::Group >&
PackageDescriptor::groups() const {
  // @@protoc_insertion_point(field_list:resource.PackageDescriptor.groups)
  return groups_;
}

// string icon = 14;
inline void PackageDescriptor::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageDescriptor::icon() const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.icon)
  return icon_.GetNoArena();
}
inline void PackageDescriptor::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.icon)
}
#if LANG_CXX11
inline void PackageDescriptor::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.PackageDescriptor.icon)
}
#endif
inline void PackageDescriptor::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.PackageDescriptor.icon)
}
inline void PackageDescriptor::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.PackageDescriptor.icon)
}
inline ::std::string* PackageDescriptor::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageDescriptor::release_icon() {
  // @@protoc_insertion_point(field_release:resource.PackageDescriptor.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageDescriptor::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:resource.PackageDescriptor.icon)
}

// string alias = 15;
inline void PackageDescriptor::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageDescriptor::alias() const {
  // @@protoc_insertion_point(field_get:resource.PackageDescriptor.alias)
  return alias_.GetNoArena();
}
inline void PackageDescriptor::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.PackageDescriptor.alias)
}
#if LANG_CXX11
inline void PackageDescriptor::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.PackageDescriptor.alias)
}
#endif
inline void PackageDescriptor::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.PackageDescriptor.alias)
}
inline void PackageDescriptor::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.PackageDescriptor.alias)
}
inline ::std::string* PackageDescriptor::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:resource.PackageDescriptor.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageDescriptor::release_alias() {
  // @@protoc_insertion_point(field_release:resource.PackageDescriptor.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageDescriptor::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:resource.PackageDescriptor.alias)
}

// -------------------------------------------------------------------

// GetPackageDescriptorRequest

// string serviceId = 1;
inline void GetPackageDescriptorRequest::clear_serviceid() {
  serviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPackageDescriptorRequest::serviceid() const {
  // @@protoc_insertion_point(field_get:resource.GetPackageDescriptorRequest.serviceId)
  return serviceid_.GetNoArena();
}
inline void GetPackageDescriptorRequest::set_serviceid(const ::std::string& value) {
  
  serviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPackageDescriptorRequest.serviceId)
}
#if LANG_CXX11
inline void GetPackageDescriptorRequest::set_serviceid(::std::string&& value) {
  
  serviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPackageDescriptorRequest.serviceId)
}
#endif
inline void GetPackageDescriptorRequest::set_serviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPackageDescriptorRequest.serviceId)
}
inline void GetPackageDescriptorRequest::set_serviceid(const char* value, size_t size) {
  
  serviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPackageDescriptorRequest.serviceId)
}
inline ::std::string* GetPackageDescriptorRequest::mutable_serviceid() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPackageDescriptorRequest.serviceId)
  return serviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPackageDescriptorRequest::release_serviceid() {
  // @@protoc_insertion_point(field_release:resource.GetPackageDescriptorRequest.serviceId)
  
  return serviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPackageDescriptorRequest::set_allocated_serviceid(::std::string* serviceid) {
  if (serviceid != NULL) {
    
  } else {
    
  }
  serviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serviceid);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPackageDescriptorRequest.serviceId)
}

// string PublisherID = 2;
inline void GetPackageDescriptorRequest::clear_PublisherID() {
  PublisherID_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPackageDescriptorRequest::PublisherID() const {
  // @@protoc_insertion_point(field_get:resource.GetPackageDescriptorRequest.PublisherID)
  return PublisherID_.GetNoArena();
}
inline void GetPackageDescriptorRequest::set_PublisherID(const ::std::string& value) {
  
  PublisherID_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPackageDescriptorRequest.PublisherID)
}
#if LANG_CXX11
inline void GetPackageDescriptorRequest::set_PublisherID(::std::string&& value) {
  
  PublisherID_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPackageDescriptorRequest.PublisherID)
}
#endif
inline void GetPackageDescriptorRequest::set_PublisherID(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  PublisherID_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPackageDescriptorRequest.PublisherID)
}
inline void GetPackageDescriptorRequest::set_PublisherID(const char* value, size_t size) {
  
  PublisherID_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPackageDescriptorRequest.PublisherID)
}
inline ::std::string* GetPackageDescriptorRequest::mutable_PublisherID() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPackageDescriptorRequest.PublisherID)
  return PublisherID_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPackageDescriptorRequest::release_PublisherID() {
  // @@protoc_insertion_point(field_release:resource.GetPackageDescriptorRequest.PublisherID)
  
  return PublisherID_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPackageDescriptorRequest::set_allocated_PublisherID(::std::string* PublisherID) {
  if (PublisherID != NULL) {
    
  } else {
    
  }
  PublisherID_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), PublisherID);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPackageDescriptorRequest.PublisherID)
}

// -------------------------------------------------------------------

// GetPackageDescriptorResponse

// repeated .resource.PackageDescriptor results = 1;
inline int GetPackageDescriptorResponse::results_size() const {
  return results_.size();
}
inline void GetPackageDescriptorResponse::clear_results() {
  results_.Clear();
}
inline ::resource::PackageDescriptor* GetPackageDescriptorResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetPackageDescriptorResponse.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >*
GetPackageDescriptorResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetPackageDescriptorResponse.results)
  return &results_;
}
inline const ::resource::PackageDescriptor& GetPackageDescriptorResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetPackageDescriptorResponse.results)
  return results_.Get(index);
}
inline ::resource::PackageDescriptor* GetPackageDescriptorResponse::add_results() {
  // @@protoc_insertion_point(field_add:resource.GetPackageDescriptorResponse.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >&
GetPackageDescriptorResponse::results() const {
  // @@protoc_insertion_point(field_list:resource.GetPackageDescriptorResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// GetPackagesDescriptorRequest

// string query = 1;
inline void GetPackagesDescriptorRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPackagesDescriptorRequest::query() const {
  // @@protoc_insertion_point(field_get:resource.GetPackagesDescriptorRequest.query)
  return query_.GetNoArena();
}
inline void GetPackagesDescriptorRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPackagesDescriptorRequest.query)
}
#if LANG_CXX11
inline void GetPackagesDescriptorRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPackagesDescriptorRequest.query)
}
#endif
inline void GetPackagesDescriptorRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPackagesDescriptorRequest.query)
}
inline void GetPackagesDescriptorRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPackagesDescriptorRequest.query)
}
inline ::std::string* GetPackagesDescriptorRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPackagesDescriptorRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPackagesDescriptorRequest::release_query() {
  // @@protoc_insertion_point(field_release:resource.GetPackagesDescriptorRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPackagesDescriptorRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPackagesDescriptorRequest.query)
}

// string options = 2;
inline void GetPackagesDescriptorRequest::clear_options() {
  options_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPackagesDescriptorRequest::options() const {
  // @@protoc_insertion_point(field_get:resource.GetPackagesDescriptorRequest.options)
  return options_.GetNoArena();
}
inline void GetPackagesDescriptorRequest::set_options(const ::std::string& value) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPackagesDescriptorRequest.options)
}
#if LANG_CXX11
inline void GetPackagesDescriptorRequest::set_options(::std::string&& value) {
  
  options_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPackagesDescriptorRequest.options)
}
#endif
inline void GetPackagesDescriptorRequest::set_options(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPackagesDescriptorRequest.options)
}
inline void GetPackagesDescriptorRequest::set_options(const char* value, size_t size) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPackagesDescriptorRequest.options)
}
inline ::std::string* GetPackagesDescriptorRequest::mutable_options() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPackagesDescriptorRequest.options)
  return options_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPackagesDescriptorRequest::release_options() {
  // @@protoc_insertion_point(field_release:resource.GetPackagesDescriptorRequest.options)
  
  return options_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPackagesDescriptorRequest::set_allocated_options(::std::string* options) {
  if (options != NULL) {
    
  } else {
    
  }
  options_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), options);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPackagesDescriptorRequest.options)
}

// -------------------------------------------------------------------

// GetPackagesDescriptorResponse

// repeated .resource.PackageDescriptor results = 1;
inline int GetPackagesDescriptorResponse::results_size() const {
  return results_.size();
}
inline void GetPackagesDescriptorResponse::clear_results() {
  results_.Clear();
}
inline ::resource::PackageDescriptor* GetPackagesDescriptorResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetPackagesDescriptorResponse.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >*
GetPackagesDescriptorResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetPackagesDescriptorResponse.results)
  return &results_;
}
inline const ::resource::PackageDescriptor& GetPackagesDescriptorResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetPackagesDescriptorResponse.results)
  return results_.Get(index);
}
inline ::resource::PackageDescriptor* GetPackagesDescriptorResponse::add_results() {
  // @@protoc_insertion_point(field_add:resource.GetPackagesDescriptorResponse.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >&
GetPackagesDescriptorResponse::results() const {
  // @@protoc_insertion_point(field_list:resource.GetPackagesDescriptorResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// SetPackageDescriptorRequest

// .resource.PackageDescriptor packageDescriptor = 1;
inline bool SetPackageDescriptorRequest::has_packagedescriptor() const {
  return this != internal_default_instance() && packagedescriptor_ != NULL;
}
inline void SetPackageDescriptorRequest::clear_packagedescriptor() {
  if (GetArenaNoVirtual() == NULL && packagedescriptor_ != NULL) {
    delete packagedescriptor_;
  }
  packagedescriptor_ = NULL;
}
inline const ::resource::PackageDescriptor& SetPackageDescriptorRequest::_internal_packagedescriptor() const {
  return *packagedescriptor_;
}
inline const ::resource::PackageDescriptor& SetPackageDescriptorRequest::packagedescriptor() const {
  const ::resource::PackageDescriptor* p = packagedescriptor_;
  // @@protoc_insertion_point(field_get:resource.SetPackageDescriptorRequest.packageDescriptor)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::PackageDescriptor*>(
      &::resource::_PackageDescriptor_default_instance_);
}
inline ::resource::PackageDescriptor* SetPackageDescriptorRequest::release_packagedescriptor() {
  // @@protoc_insertion_point(field_release:resource.SetPackageDescriptorRequest.packageDescriptor)
  
  ::resource::PackageDescriptor* temp = packagedescriptor_;
  packagedescriptor_ = NULL;
  return temp;
}
inline ::resource::PackageDescriptor* SetPackageDescriptorRequest::mutable_packagedescriptor() {
  
  if (packagedescriptor_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::PackageDescriptor>(GetArenaNoVirtual());
    packagedescriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.SetPackageDescriptorRequest.packageDescriptor)
  return packagedescriptor_;
}
inline void SetPackageDescriptorRequest::set_allocated_packagedescriptor(::resource::PackageDescriptor* packagedescriptor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete packagedescriptor_;
  }
  if (packagedescriptor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      packagedescriptor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, packagedescriptor, submessage_arena);
    }
    
  } else {
    
  }
  packagedescriptor_ = packagedescriptor;
  // @@protoc_insertion_point(field_set_allocated:resource.SetPackageDescriptorRequest.packageDescriptor)
}

// -------------------------------------------------------------------

// SetPackageDescriptorResponse

// bool result = 1;
inline void SetPackageDescriptorResponse::clear_result() {
  result_ = false;
}
inline bool SetPackageDescriptorResponse::result() const {
  // @@protoc_insertion_point(field_get:resource.SetPackageDescriptorResponse.result)
  return result_;
}
inline void SetPackageDescriptorResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.SetPackageDescriptorResponse.result)
}

// -------------------------------------------------------------------

// FindPackagesDescriptorRequest

// repeated string keywords = 1;
inline int FindPackagesDescriptorRequest::keywords_size() const {
  return keywords_.size();
}
inline void FindPackagesDescriptorRequest::clear_keywords() {
  keywords_.Clear();
}
inline const ::std::string& FindPackagesDescriptorRequest::keywords(int index) const {
  // @@protoc_insertion_point(field_get:resource.FindPackagesDescriptorRequest.keywords)
  return keywords_.Get(index);
}
inline ::std::string* FindPackagesDescriptorRequest::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:resource.FindPackagesDescriptorRequest.keywords)
  return keywords_.Mutable(index);
}
inline void FindPackagesDescriptorRequest::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.FindPackagesDescriptorRequest.keywords)
  keywords_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FindPackagesDescriptorRequest::set_keywords(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.FindPackagesDescriptorRequest.keywords)
  keywords_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FindPackagesDescriptorRequest::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.FindPackagesDescriptorRequest.keywords)
}
inline void FindPackagesDescriptorRequest::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.FindPackagesDescriptorRequest.keywords)
}
inline ::std::string* FindPackagesDescriptorRequest::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:resource.FindPackagesDescriptorRequest.keywords)
  return keywords_.Add();
}
inline void FindPackagesDescriptorRequest::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.FindPackagesDescriptorRequest.keywords)
}
#if LANG_CXX11
inline void FindPackagesDescriptorRequest::add_keywords(::std::string&& value) {
  keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.FindPackagesDescriptorRequest.keywords)
}
#endif
inline void FindPackagesDescriptorRequest::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.FindPackagesDescriptorRequest.keywords)
}
inline void FindPackagesDescriptorRequest::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.FindPackagesDescriptorRequest.keywords)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FindPackagesDescriptorRequest::keywords() const {
  // @@protoc_insertion_point(field_list:resource.FindPackagesDescriptorRequest.keywords)
  return keywords_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FindPackagesDescriptorRequest::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:resource.FindPackagesDescriptorRequest.keywords)
  return &keywords_;
}

// -------------------------------------------------------------------

// FindPackagesDescriptorResponse

// repeated .resource.PackageDescriptor results = 1;
inline int FindPackagesDescriptorResponse::results_size() const {
  return results_.size();
}
inline void FindPackagesDescriptorResponse::clear_results() {
  results_.Clear();
}
inline ::resource::PackageDescriptor* FindPackagesDescriptorResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:resource.FindPackagesDescriptorResponse.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >*
FindPackagesDescriptorResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:resource.FindPackagesDescriptorResponse.results)
  return &results_;
}
inline const ::resource::PackageDescriptor& FindPackagesDescriptorResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:resource.FindPackagesDescriptorResponse.results)
  return results_.Get(index);
}
inline ::resource::PackageDescriptor* FindPackagesDescriptorResponse::add_results() {
  // @@protoc_insertion_point(field_add:resource.FindPackagesDescriptorResponse.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::PackageDescriptor >&
FindPackagesDescriptorResponse::results() const {
  // @@protoc_insertion_point(field_list:resource.FindPackagesDescriptorResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// Role

// string id = 1;
inline void Role::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Role::id() const {
  // @@protoc_insertion_point(field_get:resource.Role.id)
  return id_.GetNoArena();
}
inline void Role::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Role.id)
}
#if LANG_CXX11
inline void Role::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Role.id)
}
#endif
inline void Role::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Role.id)
}
inline void Role::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Role.id)
}
inline ::std::string* Role::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.Role.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Role::release_id() {
  // @@protoc_insertion_point(field_release:resource.Role.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.Role.id)
}

// string name = 2;
inline void Role::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:resource.Role.name)
  return name_.GetNoArena();
}
inline void Role::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Role.name)
}
#if LANG_CXX11
inline void Role::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Role.name)
}
#endif
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Role.name)
}
inline void Role::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Role.name)
}
inline ::std::string* Role::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:resource.Role.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:resource.Role.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:resource.Role.name)
}

// string domain = 3;
inline void Role::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Role::domain() const {
  // @@protoc_insertion_point(field_get:resource.Role.domain)
  return domain_.GetNoArena();
}
inline void Role::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Role.domain)
}
#if LANG_CXX11
inline void Role::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Role.domain)
}
#endif
inline void Role::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Role.domain)
}
inline void Role::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Role.domain)
}
inline ::std::string* Role::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:resource.Role.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Role::release_domain() {
  // @@protoc_insertion_point(field_release:resource.Role.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:resource.Role.domain)
}

// string description = 4;
inline void Role::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Role::description() const {
  // @@protoc_insertion_point(field_get:resource.Role.description)
  return description_.GetNoArena();
}
inline void Role::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Role.description)
}
#if LANG_CXX11
inline void Role::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Role.description)
}
#endif
inline void Role::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Role.description)
}
inline void Role::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Role.description)
}
inline ::std::string* Role::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:resource.Role.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Role::release_description() {
  // @@protoc_insertion_point(field_release:resource.Role.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:resource.Role.description)
}

// repeated string actions = 5;
inline int Role::actions_size() const {
  return actions_.size();
}
inline void Role::clear_actions() {
  actions_.Clear();
}
inline const ::std::string& Role::actions(int index) const {
  // @@protoc_insertion_point(field_get:resource.Role.actions)
  return actions_.Get(index);
}
inline ::std::string* Role::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Role.actions)
  return actions_.Mutable(index);
}
inline void Role::set_actions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Role.actions)
  actions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Role::set_actions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Role.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Role::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Role.actions)
}
inline void Role::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Role.actions)
}
inline ::std::string* Role::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:resource.Role.actions)
  return actions_.Add();
}
inline void Role::add_actions(const ::std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Role.actions)
}
#if LANG_CXX11
inline void Role::add_actions(::std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Role.actions)
}
#endif
inline void Role::add_actions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Role.actions)
}
inline void Role::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Role.actions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Role::actions() const {
  // @@protoc_insertion_point(field_list:resource.Role.actions)
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Role::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:resource.Role.actions)
  return &actions_;
}

// repeated string members = 6;
inline int Role::members_size() const {
  return members_.size();
}
inline void Role::clear_members() {
  members_.Clear();
}
inline const ::std::string& Role::members(int index) const {
  // @@protoc_insertion_point(field_get:resource.Role.members)
  return members_.Get(index);
}
inline ::std::string* Role::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Role.members)
  return members_.Mutable(index);
}
inline void Role::set_members(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Role.members)
  members_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Role::set_members(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Role.members)
  members_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Role::set_members(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Role.members)
}
inline void Role::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Role.members)
}
inline ::std::string* Role::add_members() {
  // @@protoc_insertion_point(field_add_mutable:resource.Role.members)
  return members_.Add();
}
inline void Role::add_members(const ::std::string& value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Role.members)
}
#if LANG_CXX11
inline void Role::add_members(::std::string&& value) {
  members_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Role.members)
}
#endif
inline void Role::add_members(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Role.members)
}
inline void Role::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Role.members)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Role::members() const {
  // @@protoc_insertion_point(field_list:resource.Role.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Role::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:resource.Role.members)
  return &members_;
}

// repeated string organizations = 7;
inline int Role::organizations_size() const {
  return organizations_.size();
}
inline void Role::clear_organizations() {
  organizations_.Clear();
}
inline const ::std::string& Role::organizations(int index) const {
  // @@protoc_insertion_point(field_get:resource.Role.organizations)
  return organizations_.Get(index);
}
inline ::std::string* Role::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Role.organizations)
  return organizations_.Mutable(index);
}
inline void Role::set_organizations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Role.organizations)
  organizations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Role::set_organizations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Role.organizations)
  organizations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Role::set_organizations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  organizations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Role.organizations)
}
inline void Role::set_organizations(int index, const char* value, size_t size) {
  organizations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Role.organizations)
}
inline ::std::string* Role::add_organizations() {
  // @@protoc_insertion_point(field_add_mutable:resource.Role.organizations)
  return organizations_.Add();
}
inline void Role::add_organizations(const ::std::string& value) {
  organizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Role.organizations)
}
#if LANG_CXX11
inline void Role::add_organizations(::std::string&& value) {
  organizations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Role.organizations)
}
#endif
inline void Role::add_organizations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  organizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Role.organizations)
}
inline void Role::add_organizations(const char* value, size_t size) {
  organizations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Role.organizations)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Role::organizations() const {
  // @@protoc_insertion_point(field_list:resource.Role.organizations)
  return organizations_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Role::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:resource.Role.organizations)
  return &organizations_;
}

// -------------------------------------------------------------------

// AddRoleActionsRqst

// string roleId = 1;
inline void AddRoleActionsRqst::clear_roleid() {
  roleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddRoleActionsRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.AddRoleActionsRqst.roleId)
  return roleid_.GetNoArena();
}
inline void AddRoleActionsRqst::set_roleid(const ::std::string& value) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddRoleActionsRqst.roleId)
}
#if LANG_CXX11
inline void AddRoleActionsRqst::set_roleid(::std::string&& value) {
  
  roleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddRoleActionsRqst.roleId)
}
#endif
inline void AddRoleActionsRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddRoleActionsRqst.roleId)
}
inline void AddRoleActionsRqst::set_roleid(const char* value, size_t size) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddRoleActionsRqst.roleId)
}
inline ::std::string* AddRoleActionsRqst::mutable_roleid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddRoleActionsRqst.roleId)
  return roleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddRoleActionsRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.AddRoleActionsRqst.roleId)
  
  return roleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddRoleActionsRqst::set_allocated_roleid(::std::string* roleid) {
  if (roleid != NULL) {
    
  } else {
    
  }
  roleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roleid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddRoleActionsRqst.roleId)
}

// repeated string actions = 2;
inline int AddRoleActionsRqst::actions_size() const {
  return actions_.size();
}
inline void AddRoleActionsRqst::clear_actions() {
  actions_.Clear();
}
inline const ::std::string& AddRoleActionsRqst::actions(int index) const {
  // @@protoc_insertion_point(field_get:resource.AddRoleActionsRqst.actions)
  return actions_.Get(index);
}
inline ::std::string* AddRoleActionsRqst::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:resource.AddRoleActionsRqst.actions)
  return actions_.Mutable(index);
}
inline void AddRoleActionsRqst::set_actions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.AddRoleActionsRqst.actions)
  actions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AddRoleActionsRqst::set_actions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.AddRoleActionsRqst.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AddRoleActionsRqst::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.AddRoleActionsRqst.actions)
}
inline void AddRoleActionsRqst::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.AddRoleActionsRqst.actions)
}
inline ::std::string* AddRoleActionsRqst::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:resource.AddRoleActionsRqst.actions)
  return actions_.Add();
}
inline void AddRoleActionsRqst::add_actions(const ::std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.AddRoleActionsRqst.actions)
}
#if LANG_CXX11
inline void AddRoleActionsRqst::add_actions(::std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.AddRoleActionsRqst.actions)
}
#endif
inline void AddRoleActionsRqst::add_actions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.AddRoleActionsRqst.actions)
}
inline void AddRoleActionsRqst::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.AddRoleActionsRqst.actions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddRoleActionsRqst::actions() const {
  // @@protoc_insertion_point(field_list:resource.AddRoleActionsRqst.actions)
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddRoleActionsRqst::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:resource.AddRoleActionsRqst.actions)
  return &actions_;
}

// -------------------------------------------------------------------

// AddRoleActionsRsp

// bool result = 1;
inline void AddRoleActionsRsp::clear_result() {
  result_ = false;
}
inline bool AddRoleActionsRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddRoleActionsRsp.result)
  return result_;
}
inline void AddRoleActionsRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.AddRoleActionsRsp.result)
}

// -------------------------------------------------------------------

// RemoveRoleActionRqst

// string roleId = 1;
inline void RemoveRoleActionRqst::clear_roleid() {
  roleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveRoleActionRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveRoleActionRqst.roleId)
  return roleid_.GetNoArena();
}
inline void RemoveRoleActionRqst::set_roleid(const ::std::string& value) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveRoleActionRqst.roleId)
}
#if LANG_CXX11
inline void RemoveRoleActionRqst::set_roleid(::std::string&& value) {
  
  roleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveRoleActionRqst.roleId)
}
#endif
inline void RemoveRoleActionRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveRoleActionRqst.roleId)
}
inline void RemoveRoleActionRqst::set_roleid(const char* value, size_t size) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveRoleActionRqst.roleId)
}
inline ::std::string* RemoveRoleActionRqst::mutable_roleid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveRoleActionRqst.roleId)
  return roleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveRoleActionRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.RemoveRoleActionRqst.roleId)
  
  return roleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveRoleActionRqst::set_allocated_roleid(::std::string* roleid) {
  if (roleid != NULL) {
    
  } else {
    
  }
  roleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roleid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveRoleActionRqst.roleId)
}

// string action = 2;
inline void RemoveRoleActionRqst::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveRoleActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.RemoveRoleActionRqst.action)
  return action_.GetNoArena();
}
inline void RemoveRoleActionRqst::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveRoleActionRqst.action)
}
#if LANG_CXX11
inline void RemoveRoleActionRqst::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveRoleActionRqst.action)
}
#endif
inline void RemoveRoleActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveRoleActionRqst.action)
}
inline void RemoveRoleActionRqst::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveRoleActionRqst.action)
}
inline ::std::string* RemoveRoleActionRqst::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveRoleActionRqst.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveRoleActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.RemoveRoleActionRqst.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveRoleActionRqst::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveRoleActionRqst.action)
}

// -------------------------------------------------------------------

// RemoveRoleActionRsp

// bool result = 1;
inline void RemoveRoleActionRsp::clear_result() {
  result_ = false;
}
inline bool RemoveRoleActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveRoleActionRsp.result)
  return result_;
}
inline void RemoveRoleActionRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemoveRoleActionRsp.result)
}

// -------------------------------------------------------------------

// RemoveRolesActionRqst

// string action = 2;
inline void RemoveRolesActionRqst::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveRolesActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.RemoveRolesActionRqst.action)
  return action_.GetNoArena();
}
inline void RemoveRolesActionRqst::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveRolesActionRqst.action)
}
#if LANG_CXX11
inline void RemoveRolesActionRqst::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveRolesActionRqst.action)
}
#endif
inline void RemoveRolesActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveRolesActionRqst.action)
}
inline void RemoveRolesActionRqst::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveRolesActionRqst.action)
}
inline ::std::string* RemoveRolesActionRqst::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveRolesActionRqst.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveRolesActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.RemoveRolesActionRqst.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveRolesActionRqst::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveRolesActionRqst.action)
}

// -------------------------------------------------------------------

// RemoveRolesActionRsp

// bool result = 1;
inline void RemoveRolesActionRsp::clear_result() {
  result_ = false;
}
inline bool RemoveRolesActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveRolesActionRsp.result)
  return result_;
}
inline void RemoveRolesActionRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemoveRolesActionRsp.result)
}

// -------------------------------------------------------------------

// Account

// string id = 1;
inline void Account::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::id() const {
  // @@protoc_insertion_point(field_get:resource.Account.id)
  return id_.GetNoArena();
}
inline void Account::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Account.id)
}
#if LANG_CXX11
inline void Account::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Account.id)
}
#endif
inline void Account::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Account.id)
}
inline void Account::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Account.id)
}
inline ::std::string* Account::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.Account.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_id() {
  // @@protoc_insertion_point(field_release:resource.Account.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.Account.id)
}

// string name = 2;
inline void Account::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::name() const {
  // @@protoc_insertion_point(field_get:resource.Account.name)
  return name_.GetNoArena();
}
inline void Account::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Account.name)
}
#if LANG_CXX11
inline void Account::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Account.name)
}
#endif
inline void Account::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Account.name)
}
inline void Account::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Account.name)
}
inline ::std::string* Account::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:resource.Account.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_name() {
  // @@protoc_insertion_point(field_release:resource.Account.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:resource.Account.name)
}

// string email = 3;
inline void Account::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::email() const {
  // @@protoc_insertion_point(field_get:resource.Account.email)
  return email_.GetNoArena();
}
inline void Account::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Account.email)
}
#if LANG_CXX11
inline void Account::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Account.email)
}
#endif
inline void Account::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Account.email)
}
inline void Account::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Account.email)
}
inline ::std::string* Account::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:resource.Account.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_email() {
  // @@protoc_insertion_point(field_release:resource.Account.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:resource.Account.email)
}

// string password = 4;
inline void Account::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:resource.Account.password)
  return password_.GetNoArena();
}
inline void Account::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Account.password)
}
#if LANG_CXX11
inline void Account::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Account.password)
}
#endif
inline void Account::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Account.password)
}
inline void Account::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Account.password)
}
inline ::std::string* Account::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:resource.Account.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_password() {
  // @@protoc_insertion_point(field_release:resource.Account.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:resource.Account.password)
}

// string domain = 5;
inline void Account::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::domain() const {
  // @@protoc_insertion_point(field_get:resource.Account.domain)
  return domain_.GetNoArena();
}
inline void Account::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Account.domain)
}
#if LANG_CXX11
inline void Account::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Account.domain)
}
#endif
inline void Account::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Account.domain)
}
inline void Account::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Account.domain)
}
inline ::std::string* Account::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:resource.Account.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_domain() {
  // @@protoc_insertion_point(field_release:resource.Account.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:resource.Account.domain)
}

// repeated string organizations = 6;
inline int Account::organizations_size() const {
  return organizations_.size();
}
inline void Account::clear_organizations() {
  organizations_.Clear();
}
inline const ::std::string& Account::organizations(int index) const {
  // @@protoc_insertion_point(field_get:resource.Account.organizations)
  return organizations_.Get(index);
}
inline ::std::string* Account::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Account.organizations)
  return organizations_.Mutable(index);
}
inline void Account::set_organizations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Account.organizations)
  organizations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Account::set_organizations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Account.organizations)
  organizations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Account::set_organizations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  organizations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Account.organizations)
}
inline void Account::set_organizations(int index, const char* value, size_t size) {
  organizations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Account.organizations)
}
inline ::std::string* Account::add_organizations() {
  // @@protoc_insertion_point(field_add_mutable:resource.Account.organizations)
  return organizations_.Add();
}
inline void Account::add_organizations(const ::std::string& value) {
  organizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Account.organizations)
}
#if LANG_CXX11
inline void Account::add_organizations(::std::string&& value) {
  organizations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Account.organizations)
}
#endif
inline void Account::add_organizations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  organizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Account.organizations)
}
inline void Account::add_organizations(const char* value, size_t size) {
  organizations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Account.organizations)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Account::organizations() const {
  // @@protoc_insertion_point(field_list:resource.Account.organizations)
  return organizations_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Account::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:resource.Account.organizations)
  return &organizations_;
}

// repeated string groups = 7;
inline int Account::groups_size() const {
  return groups_.size();
}
inline void Account::clear_groups() {
  groups_.Clear();
}
inline const ::std::string& Account::groups(int index) const {
  // @@protoc_insertion_point(field_get:resource.Account.groups)
  return groups_.Get(index);
}
inline ::std::string* Account::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Account.groups)
  return groups_.Mutable(index);
}
inline void Account::set_groups(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Account.groups)
  groups_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Account::set_groups(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Account.groups)
  groups_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Account::set_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Account.groups)
}
inline void Account::set_groups(int index, const char* value, size_t size) {
  groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Account.groups)
}
inline ::std::string* Account::add_groups() {
  // @@protoc_insertion_point(field_add_mutable:resource.Account.groups)
  return groups_.Add();
}
inline void Account::add_groups(const ::std::string& value) {
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Account.groups)
}
#if LANG_CXX11
inline void Account::add_groups(::std::string&& value) {
  groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Account.groups)
}
#endif
inline void Account::add_groups(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Account.groups)
}
inline void Account::add_groups(const char* value, size_t size) {
  groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Account.groups)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Account::groups() const {
  // @@protoc_insertion_point(field_list:resource.Account.groups)
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Account::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:resource.Account.groups)
  return &groups_;
}

// repeated string roles = 8;
inline int Account::roles_size() const {
  return roles_.size();
}
inline void Account::clear_roles() {
  roles_.Clear();
}
inline const ::std::string& Account::roles(int index) const {
  // @@protoc_insertion_point(field_get:resource.Account.roles)
  return roles_.Get(index);
}
inline ::std::string* Account::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Account.roles)
  return roles_.Mutable(index);
}
inline void Account::set_roles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Account.roles)
  roles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Account::set_roles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Account.roles)
  roles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Account::set_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Account.roles)
}
inline void Account::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Account.roles)
}
inline ::std::string* Account::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:resource.Account.roles)
  return roles_.Add();
}
inline void Account::add_roles(const ::std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Account.roles)
}
#if LANG_CXX11
inline void Account::add_roles(::std::string&& value) {
  roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Account.roles)
}
#endif
inline void Account::add_roles(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Account.roles)
}
inline void Account::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Account.roles)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Account::roles() const {
  // @@protoc_insertion_point(field_list:resource.Account.roles)
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Account::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:resource.Account.roles)
  return &roles_;
}

// -------------------------------------------------------------------

// RegisterAccountRqst

// .resource.Account account = 1;
inline bool RegisterAccountRqst::has_account() const {
  return this != internal_default_instance() && account_ != NULL;
}
inline void RegisterAccountRqst::clear_account() {
  if (GetArenaNoVirtual() == NULL && account_ != NULL) {
    delete account_;
  }
  account_ = NULL;
}
inline const ::resource::Account& RegisterAccountRqst::_internal_account() const {
  return *account_;
}
inline const ::resource::Account& RegisterAccountRqst::account() const {
  const ::resource::Account* p = account_;
  // @@protoc_insertion_point(field_get:resource.RegisterAccountRqst.account)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Account*>(
      &::resource::_Account_default_instance_);
}
inline ::resource::Account* RegisterAccountRqst::release_account() {
  // @@protoc_insertion_point(field_release:resource.RegisterAccountRqst.account)
  
  ::resource::Account* temp = account_;
  account_ = NULL;
  return temp;
}
inline ::resource::Account* RegisterAccountRqst::mutable_account() {
  
  if (account_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Account>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.RegisterAccountRqst.account)
  return account_;
}
inline void RegisterAccountRqst::set_allocated_account(::resource::Account* account) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete account_;
  }
  if (account) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      account = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:resource.RegisterAccountRqst.account)
}

// string confirm_password = 3;
inline void RegisterAccountRqst::clear_confirm_password() {
  confirm_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterAccountRqst::confirm_password() const {
  // @@protoc_insertion_point(field_get:resource.RegisterAccountRqst.confirm_password)
  return confirm_password_.GetNoArena();
}
inline void RegisterAccountRqst::set_confirm_password(const ::std::string& value) {
  
  confirm_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RegisterAccountRqst.confirm_password)
}
#if LANG_CXX11
inline void RegisterAccountRqst::set_confirm_password(::std::string&& value) {
  
  confirm_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RegisterAccountRqst.confirm_password)
}
#endif
inline void RegisterAccountRqst::set_confirm_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  confirm_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RegisterAccountRqst.confirm_password)
}
inline void RegisterAccountRqst::set_confirm_password(const char* value, size_t size) {
  
  confirm_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RegisterAccountRqst.confirm_password)
}
inline ::std::string* RegisterAccountRqst::mutable_confirm_password() {
  
  // @@protoc_insertion_point(field_mutable:resource.RegisterAccountRqst.confirm_password)
  return confirm_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterAccountRqst::release_confirm_password() {
  // @@protoc_insertion_point(field_release:resource.RegisterAccountRqst.confirm_password)
  
  return confirm_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterAccountRqst::set_allocated_confirm_password(::std::string* confirm_password) {
  if (confirm_password != NULL) {
    
  } else {
    
  }
  confirm_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), confirm_password);
  // @@protoc_insertion_point(field_set_allocated:resource.RegisterAccountRqst.confirm_password)
}

// -------------------------------------------------------------------

// RegisterAccountRsp

// string result = 1;
inline void RegisterAccountRsp::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RegisterAccountRsp.result)
  return result_.GetNoArena();
}
inline void RegisterAccountRsp::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RegisterAccountRsp.result)
}
#if LANG_CXX11
inline void RegisterAccountRsp::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RegisterAccountRsp.result)
}
#endif
inline void RegisterAccountRsp::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RegisterAccountRsp.result)
}
inline void RegisterAccountRsp::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RegisterAccountRsp.result)
}
inline ::std::string* RegisterAccountRsp::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:resource.RegisterAccountRsp.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterAccountRsp::release_result() {
  // @@protoc_insertion_point(field_release:resource.RegisterAccountRsp.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterAccountRsp::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:resource.RegisterAccountRsp.result)
}

// -------------------------------------------------------------------

// AccountExistRqst

// string id = 1;
inline void AccountExistRqst::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountExistRqst::id() const {
  // @@protoc_insertion_point(field_get:resource.AccountExistRqst.id)
  return id_.GetNoArena();
}
inline void AccountExistRqst::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AccountExistRqst.id)
}
#if LANG_CXX11
inline void AccountExistRqst::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AccountExistRqst.id)
}
#endif
inline void AccountExistRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AccountExistRqst.id)
}
inline void AccountExistRqst::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AccountExistRqst.id)
}
inline ::std::string* AccountExistRqst::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.AccountExistRqst.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountExistRqst::release_id() {
  // @@protoc_insertion_point(field_release:resource.AccountExistRqst.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountExistRqst::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.AccountExistRqst.id)
}

// -------------------------------------------------------------------

// AccountExistRsp

// bool result = 1;
inline void AccountExistRsp::clear_result() {
  result_ = false;
}
inline bool AccountExistRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AccountExistRsp.result)
  return result_;
}
inline void AccountExistRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.AccountExistRsp.result)
}

// -------------------------------------------------------------------

// GetAccountsRqst

// string query = 1;
inline void GetAccountsRqst::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAccountsRqst::query() const {
  // @@protoc_insertion_point(field_get:resource.GetAccountsRqst.query)
  return query_.GetNoArena();
}
inline void GetAccountsRqst::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetAccountsRqst.query)
}
#if LANG_CXX11
inline void GetAccountsRqst::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetAccountsRqst.query)
}
#endif
inline void GetAccountsRqst::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetAccountsRqst.query)
}
inline void GetAccountsRqst::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetAccountsRqst.query)
}
inline ::std::string* GetAccountsRqst::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetAccountsRqst.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAccountsRqst::release_query() {
  // @@protoc_insertion_point(field_release:resource.GetAccountsRqst.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountsRqst::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:resource.GetAccountsRqst.query)
}

// string options = 2;
inline void GetAccountsRqst::clear_options() {
  options_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAccountsRqst::options() const {
  // @@protoc_insertion_point(field_get:resource.GetAccountsRqst.options)
  return options_.GetNoArena();
}
inline void GetAccountsRqst::set_options(const ::std::string& value) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetAccountsRqst.options)
}
#if LANG_CXX11
inline void GetAccountsRqst::set_options(::std::string&& value) {
  
  options_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetAccountsRqst.options)
}
#endif
inline void GetAccountsRqst::set_options(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetAccountsRqst.options)
}
inline void GetAccountsRqst::set_options(const char* value, size_t size) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetAccountsRqst.options)
}
inline ::std::string* GetAccountsRqst::mutable_options() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetAccountsRqst.options)
  return options_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAccountsRqst::release_options() {
  // @@protoc_insertion_point(field_release:resource.GetAccountsRqst.options)
  
  return options_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountsRqst::set_allocated_options(::std::string* options) {
  if (options != NULL) {
    
  } else {
    
  }
  options_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), options);
  // @@protoc_insertion_point(field_set_allocated:resource.GetAccountsRqst.options)
}

// -------------------------------------------------------------------

// GetAccountsRsp

// repeated .resource.Account accounts = 1;
inline int GetAccountsRsp::accounts_size() const {
  return accounts_.size();
}
inline void GetAccountsRsp::clear_accounts() {
  accounts_.Clear();
}
inline ::resource::Account* GetAccountsRsp::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetAccountsRsp.accounts)
  return accounts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::Account >*
GetAccountsRsp::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetAccountsRsp.accounts)
  return &accounts_;
}
inline const ::resource::Account& GetAccountsRsp::accounts(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetAccountsRsp.accounts)
  return accounts_.Get(index);
}
inline ::resource::Account* GetAccountsRsp::add_accounts() {
  // @@protoc_insertion_point(field_add:resource.GetAccountsRsp.accounts)
  return accounts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::Account >&
GetAccountsRsp::accounts() const {
  // @@protoc_insertion_point(field_list:resource.GetAccountsRsp.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// GetAccountRqst

// string accountId = 1;
inline void GetAccountRqst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAccountRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.GetAccountRqst.accountId)
  return accountid_.GetNoArena();
}
inline void GetAccountRqst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetAccountRqst.accountId)
}
#if LANG_CXX11
inline void GetAccountRqst::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetAccountRqst.accountId)
}
#endif
inline void GetAccountRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetAccountRqst.accountId)
}
inline void GetAccountRqst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetAccountRqst.accountId)
}
inline ::std::string* GetAccountRqst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetAccountRqst.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAccountRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.GetAccountRqst.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccountRqst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.GetAccountRqst.accountId)
}

// -------------------------------------------------------------------

// GetAccountRsp

// .resource.Account account = 1;
inline bool GetAccountRsp::has_account() const {
  return this != internal_default_instance() && account_ != NULL;
}
inline void GetAccountRsp::clear_account() {
  if (GetArenaNoVirtual() == NULL && account_ != NULL) {
    delete account_;
  }
  account_ = NULL;
}
inline const ::resource::Account& GetAccountRsp::_internal_account() const {
  return *account_;
}
inline const ::resource::Account& GetAccountRsp::account() const {
  const ::resource::Account* p = account_;
  // @@protoc_insertion_point(field_get:resource.GetAccountRsp.account)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Account*>(
      &::resource::_Account_default_instance_);
}
inline ::resource::Account* GetAccountRsp::release_account() {
  // @@protoc_insertion_point(field_release:resource.GetAccountRsp.account)
  
  ::resource::Account* temp = account_;
  account_ = NULL;
  return temp;
}
inline ::resource::Account* GetAccountRsp::mutable_account() {
  
  if (account_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Account>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.GetAccountRsp.account)
  return account_;
}
inline void GetAccountRsp::set_allocated_account(::resource::Account* account) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete account_;
  }
  if (account) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      account = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:resource.GetAccountRsp.account)
}

// -------------------------------------------------------------------

// SetAccountPasswordRqst

// string accountId = 1;
inline void SetAccountPasswordRqst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAccountPasswordRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.SetAccountPasswordRqst.accountId)
  return accountid_.GetNoArena();
}
inline void SetAccountPasswordRqst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.SetAccountPasswordRqst.accountId)
}
#if LANG_CXX11
inline void SetAccountPasswordRqst::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.SetAccountPasswordRqst.accountId)
}
#endif
inline void SetAccountPasswordRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.SetAccountPasswordRqst.accountId)
}
inline void SetAccountPasswordRqst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.SetAccountPasswordRqst.accountId)
}
inline ::std::string* SetAccountPasswordRqst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.SetAccountPasswordRqst.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAccountPasswordRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.SetAccountPasswordRqst.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAccountPasswordRqst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.SetAccountPasswordRqst.accountId)
}

// string old_password = 2;
inline void SetAccountPasswordRqst::clear_old_password() {
  old_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAccountPasswordRqst::old_password() const {
  // @@protoc_insertion_point(field_get:resource.SetAccountPasswordRqst.old_password)
  return old_password_.GetNoArena();
}
inline void SetAccountPasswordRqst::set_old_password(const ::std::string& value) {
  
  old_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.SetAccountPasswordRqst.old_password)
}
#if LANG_CXX11
inline void SetAccountPasswordRqst::set_old_password(::std::string&& value) {
  
  old_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.SetAccountPasswordRqst.old_password)
}
#endif
inline void SetAccountPasswordRqst::set_old_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  old_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.SetAccountPasswordRqst.old_password)
}
inline void SetAccountPasswordRqst::set_old_password(const char* value, size_t size) {
  
  old_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.SetAccountPasswordRqst.old_password)
}
inline ::std::string* SetAccountPasswordRqst::mutable_old_password() {
  
  // @@protoc_insertion_point(field_mutable:resource.SetAccountPasswordRqst.old_password)
  return old_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAccountPasswordRqst::release_old_password() {
  // @@protoc_insertion_point(field_release:resource.SetAccountPasswordRqst.old_password)
  
  return old_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAccountPasswordRqst::set_allocated_old_password(::std::string* old_password) {
  if (old_password != NULL) {
    
  } else {
    
  }
  old_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_password);
  // @@protoc_insertion_point(field_set_allocated:resource.SetAccountPasswordRqst.old_password)
}

// string new_password = 3;
inline void SetAccountPasswordRqst::clear_new_password() {
  new_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAccountPasswordRqst::new_password() const {
  // @@protoc_insertion_point(field_get:resource.SetAccountPasswordRqst.new_password)
  return new_password_.GetNoArena();
}
inline void SetAccountPasswordRqst::set_new_password(const ::std::string& value) {
  
  new_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.SetAccountPasswordRqst.new_password)
}
#if LANG_CXX11
inline void SetAccountPasswordRqst::set_new_password(::std::string&& value) {
  
  new_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.SetAccountPasswordRqst.new_password)
}
#endif
inline void SetAccountPasswordRqst::set_new_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.SetAccountPasswordRqst.new_password)
}
inline void SetAccountPasswordRqst::set_new_password(const char* value, size_t size) {
  
  new_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.SetAccountPasswordRqst.new_password)
}
inline ::std::string* SetAccountPasswordRqst::mutable_new_password() {
  
  // @@protoc_insertion_point(field_mutable:resource.SetAccountPasswordRqst.new_password)
  return new_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAccountPasswordRqst::release_new_password() {
  // @@protoc_insertion_point(field_release:resource.SetAccountPasswordRqst.new_password)
  
  return new_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAccountPasswordRqst::set_allocated_new_password(::std::string* new_password) {
  if (new_password != NULL) {
    
  } else {
    
  }
  new_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_password);
  // @@protoc_insertion_point(field_set_allocated:resource.SetAccountPasswordRqst.new_password)
}

// -------------------------------------------------------------------

// SetAccountPasswordRsp

// -------------------------------------------------------------------

// SetEmailRequest

// string accountId = 1;
inline void SetEmailRequest::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetEmailRequest::accountid() const {
  // @@protoc_insertion_point(field_get:resource.SetEmailRequest.accountId)
  return accountid_.GetNoArena();
}
inline void SetEmailRequest::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.SetEmailRequest.accountId)
}
#if LANG_CXX11
inline void SetEmailRequest::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.SetEmailRequest.accountId)
}
#endif
inline void SetEmailRequest::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.SetEmailRequest.accountId)
}
inline void SetEmailRequest::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.SetEmailRequest.accountId)
}
inline ::std::string* SetEmailRequest::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.SetEmailRequest.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetEmailRequest::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.SetEmailRequest.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetEmailRequest::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.SetEmailRequest.accountId)
}

// string oldEmail = 2;
inline void SetEmailRequest::clear_oldemail() {
  oldemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetEmailRequest::oldemail() const {
  // @@protoc_insertion_point(field_get:resource.SetEmailRequest.oldEmail)
  return oldemail_.GetNoArena();
}
inline void SetEmailRequest::set_oldemail(const ::std::string& value) {
  
  oldemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.SetEmailRequest.oldEmail)
}
#if LANG_CXX11
inline void SetEmailRequest::set_oldemail(::std::string&& value) {
  
  oldemail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.SetEmailRequest.oldEmail)
}
#endif
inline void SetEmailRequest::set_oldemail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  oldemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.SetEmailRequest.oldEmail)
}
inline void SetEmailRequest::set_oldemail(const char* value, size_t size) {
  
  oldemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.SetEmailRequest.oldEmail)
}
inline ::std::string* SetEmailRequest::mutable_oldemail() {
  
  // @@protoc_insertion_point(field_mutable:resource.SetEmailRequest.oldEmail)
  return oldemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetEmailRequest::release_oldemail() {
  // @@protoc_insertion_point(field_release:resource.SetEmailRequest.oldEmail)
  
  return oldemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetEmailRequest::set_allocated_oldemail(::std::string* oldemail) {
  if (oldemail != NULL) {
    
  } else {
    
  }
  oldemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oldemail);
  // @@protoc_insertion_point(field_set_allocated:resource.SetEmailRequest.oldEmail)
}

// string newEmail = 3;
inline void SetEmailRequest::clear_newemail() {
  newemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetEmailRequest::newemail() const {
  // @@protoc_insertion_point(field_get:resource.SetEmailRequest.newEmail)
  return newemail_.GetNoArena();
}
inline void SetEmailRequest::set_newemail(const ::std::string& value) {
  
  newemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.SetEmailRequest.newEmail)
}
#if LANG_CXX11
inline void SetEmailRequest::set_newemail(::std::string&& value) {
  
  newemail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.SetEmailRequest.newEmail)
}
#endif
inline void SetEmailRequest::set_newemail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  newemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.SetEmailRequest.newEmail)
}
inline void SetEmailRequest::set_newemail(const char* value, size_t size) {
  
  newemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.SetEmailRequest.newEmail)
}
inline ::std::string* SetEmailRequest::mutable_newemail() {
  
  // @@protoc_insertion_point(field_mutable:resource.SetEmailRequest.newEmail)
  return newemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetEmailRequest::release_newemail() {
  // @@protoc_insertion_point(field_release:resource.SetEmailRequest.newEmail)
  
  return newemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetEmailRequest::set_allocated_newemail(::std::string* newemail) {
  if (newemail != NULL) {
    
  } else {
    
  }
  newemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newemail);
  // @@protoc_insertion_point(field_set_allocated:resource.SetEmailRequest.newEmail)
}

// -------------------------------------------------------------------

// SetEmailResponse

// -------------------------------------------------------------------

// DeleteAccountRqst

// string id = 1;
inline void DeleteAccountRqst::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteAccountRqst::id() const {
  // @@protoc_insertion_point(field_get:resource.DeleteAccountRqst.id)
  return id_.GetNoArena();
}
inline void DeleteAccountRqst::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.DeleteAccountRqst.id)
}
#if LANG_CXX11
inline void DeleteAccountRqst::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteAccountRqst.id)
}
#endif
inline void DeleteAccountRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.DeleteAccountRqst.id)
}
inline void DeleteAccountRqst::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteAccountRqst.id)
}
inline ::std::string* DeleteAccountRqst::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.DeleteAccountRqst.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteAccountRqst::release_id() {
  // @@protoc_insertion_point(field_release:resource.DeleteAccountRqst.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteAccountRqst::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteAccountRqst.id)
}

// -------------------------------------------------------------------

// DeleteAccountRsp

// string result = 1;
inline void DeleteAccountRsp::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeleteAccountRsp.result)
  return result_.GetNoArena();
}
inline void DeleteAccountRsp::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.DeleteAccountRsp.result)
}
#if LANG_CXX11
inline void DeleteAccountRsp::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteAccountRsp.result)
}
#endif
inline void DeleteAccountRsp::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.DeleteAccountRsp.result)
}
inline void DeleteAccountRsp::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteAccountRsp.result)
}
inline ::std::string* DeleteAccountRsp::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:resource.DeleteAccountRsp.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteAccountRsp::release_result() {
  // @@protoc_insertion_point(field_release:resource.DeleteAccountRsp.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteAccountRsp::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteAccountRsp.result)
}

// -------------------------------------------------------------------

// AddAccountRoleRqst

// string accountId = 1;
inline void AddAccountRoleRqst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddAccountRoleRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.AddAccountRoleRqst.accountId)
  return accountid_.GetNoArena();
}
inline void AddAccountRoleRqst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddAccountRoleRqst.accountId)
}
#if LANG_CXX11
inline void AddAccountRoleRqst::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddAccountRoleRqst.accountId)
}
#endif
inline void AddAccountRoleRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddAccountRoleRqst.accountId)
}
inline void AddAccountRoleRqst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddAccountRoleRqst.accountId)
}
inline ::std::string* AddAccountRoleRqst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddAccountRoleRqst.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddAccountRoleRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.AddAccountRoleRqst.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddAccountRoleRqst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddAccountRoleRqst.accountId)
}

// string roleId = 2;
inline void AddAccountRoleRqst::clear_roleid() {
  roleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddAccountRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.AddAccountRoleRqst.roleId)
  return roleid_.GetNoArena();
}
inline void AddAccountRoleRqst::set_roleid(const ::std::string& value) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddAccountRoleRqst.roleId)
}
#if LANG_CXX11
inline void AddAccountRoleRqst::set_roleid(::std::string&& value) {
  
  roleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddAccountRoleRqst.roleId)
}
#endif
inline void AddAccountRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddAccountRoleRqst.roleId)
}
inline void AddAccountRoleRqst::set_roleid(const char* value, size_t size) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddAccountRoleRqst.roleId)
}
inline ::std::string* AddAccountRoleRqst::mutable_roleid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddAccountRoleRqst.roleId)
  return roleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddAccountRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.AddAccountRoleRqst.roleId)
  
  return roleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddAccountRoleRqst::set_allocated_roleid(::std::string* roleid) {
  if (roleid != NULL) {
    
  } else {
    
  }
  roleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roleid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddAccountRoleRqst.roleId)
}

// -------------------------------------------------------------------

// AddAccountRoleRsp

// bool result = 1;
inline void AddAccountRoleRsp::clear_result() {
  result_ = false;
}
inline bool AddAccountRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddAccountRoleRsp.result)
  return result_;
}
inline void AddAccountRoleRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.AddAccountRoleRsp.result)
}

// -------------------------------------------------------------------

// RemoveAccountRoleRqst

// string accountId = 1;
inline void RemoveAccountRoleRqst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveAccountRoleRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveAccountRoleRqst.accountId)
  return accountid_.GetNoArena();
}
inline void RemoveAccountRoleRqst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveAccountRoleRqst.accountId)
}
#if LANG_CXX11
inline void RemoveAccountRoleRqst::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveAccountRoleRqst.accountId)
}
#endif
inline void RemoveAccountRoleRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveAccountRoleRqst.accountId)
}
inline void RemoveAccountRoleRqst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveAccountRoleRqst.accountId)
}
inline ::std::string* RemoveAccountRoleRqst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveAccountRoleRqst.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveAccountRoleRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.RemoveAccountRoleRqst.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveAccountRoleRqst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveAccountRoleRqst.accountId)
}

// string roleId = 2;
inline void RemoveAccountRoleRqst::clear_roleid() {
  roleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveAccountRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveAccountRoleRqst.roleId)
  return roleid_.GetNoArena();
}
inline void RemoveAccountRoleRqst::set_roleid(const ::std::string& value) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveAccountRoleRqst.roleId)
}
#if LANG_CXX11
inline void RemoveAccountRoleRqst::set_roleid(::std::string&& value) {
  
  roleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveAccountRoleRqst.roleId)
}
#endif
inline void RemoveAccountRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveAccountRoleRqst.roleId)
}
inline void RemoveAccountRoleRqst::set_roleid(const char* value, size_t size) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveAccountRoleRqst.roleId)
}
inline ::std::string* RemoveAccountRoleRqst::mutable_roleid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveAccountRoleRqst.roleId)
  return roleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveAccountRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.RemoveAccountRoleRqst.roleId)
  
  return roleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveAccountRoleRqst::set_allocated_roleid(::std::string* roleid) {
  if (roleid != NULL) {
    
  } else {
    
  }
  roleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roleid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveAccountRoleRqst.roleId)
}

// -------------------------------------------------------------------

// RemoveAccountRoleRsp

// bool result = 1;
inline void RemoveAccountRoleRsp::clear_result() {
  result_ = false;
}
inline bool RemoveAccountRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveAccountRoleRsp.result)
  return result_;
}
inline void RemoveAccountRoleRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemoveAccountRoleRsp.result)
}

// -------------------------------------------------------------------

// Contact

// string id = 1;
inline void Contact::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Contact::id() const {
  // @@protoc_insertion_point(field_get:resource.Contact.id)
  return id_.GetNoArena();
}
inline void Contact::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Contact.id)
}
#if LANG_CXX11
inline void Contact::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Contact.id)
}
#endif
inline void Contact::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Contact.id)
}
inline void Contact::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Contact.id)
}
inline ::std::string* Contact::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.Contact.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_id() {
  // @@protoc_insertion_point(field_release:resource.Contact.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.Contact.id)
}

// int64 invitationTime = 2;
inline void Contact::clear_invitationtime() {
  invitationtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Contact::invitationtime() const {
  // @@protoc_insertion_point(field_get:resource.Contact.invitationTime)
  return invitationtime_;
}
inline void Contact::set_invitationtime(::google::protobuf::int64 value) {
  
  invitationtime_ = value;
  // @@protoc_insertion_point(field_set:resource.Contact.invitationTime)
}

// string status = 3;
inline void Contact::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Contact::status() const {
  // @@protoc_insertion_point(field_get:resource.Contact.status)
  return status_.GetNoArena();
}
inline void Contact::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Contact.status)
}
#if LANG_CXX11
inline void Contact::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Contact.status)
}
#endif
inline void Contact::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Contact.status)
}
inline void Contact::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Contact.status)
}
inline ::std::string* Contact::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:resource.Contact.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_status() {
  // @@protoc_insertion_point(field_release:resource.Contact.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:resource.Contact.status)
}

// -------------------------------------------------------------------

// SetAccountContactRqst

// string accountId = 1;
inline void SetAccountContactRqst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAccountContactRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.SetAccountContactRqst.accountId)
  return accountid_.GetNoArena();
}
inline void SetAccountContactRqst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.SetAccountContactRqst.accountId)
}
#if LANG_CXX11
inline void SetAccountContactRqst::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.SetAccountContactRqst.accountId)
}
#endif
inline void SetAccountContactRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.SetAccountContactRqst.accountId)
}
inline void SetAccountContactRqst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.SetAccountContactRqst.accountId)
}
inline ::std::string* SetAccountContactRqst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.SetAccountContactRqst.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAccountContactRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.SetAccountContactRqst.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAccountContactRqst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.SetAccountContactRqst.accountId)
}

// .resource.Contact contact = 2;
inline bool SetAccountContactRqst::has_contact() const {
  return this != internal_default_instance() && contact_ != NULL;
}
inline void SetAccountContactRqst::clear_contact() {
  if (GetArenaNoVirtual() == NULL && contact_ != NULL) {
    delete contact_;
  }
  contact_ = NULL;
}
inline const ::resource::Contact& SetAccountContactRqst::_internal_contact() const {
  return *contact_;
}
inline const ::resource::Contact& SetAccountContactRqst::contact() const {
  const ::resource::Contact* p = contact_;
  // @@protoc_insertion_point(field_get:resource.SetAccountContactRqst.contact)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Contact*>(
      &::resource::_Contact_default_instance_);
}
inline ::resource::Contact* SetAccountContactRqst::release_contact() {
  // @@protoc_insertion_point(field_release:resource.SetAccountContactRqst.contact)
  
  ::resource::Contact* temp = contact_;
  contact_ = NULL;
  return temp;
}
inline ::resource::Contact* SetAccountContactRqst::mutable_contact() {
  
  if (contact_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Contact>(GetArenaNoVirtual());
    contact_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.SetAccountContactRqst.contact)
  return contact_;
}
inline void SetAccountContactRqst::set_allocated_contact(::resource::Contact* contact) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete contact_;
  }
  if (contact) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contact = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contact, submessage_arena);
    }
    
  } else {
    
  }
  contact_ = contact;
  // @@protoc_insertion_point(field_set_allocated:resource.SetAccountContactRqst.contact)
}

// -------------------------------------------------------------------

// SetAccountContactRsp

// bool result = 1;
inline void SetAccountContactRsp::clear_result() {
  result_ = false;
}
inline bool SetAccountContactRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.SetAccountContactRsp.result)
  return result_;
}
inline void SetAccountContactRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.SetAccountContactRsp.result)
}

// -------------------------------------------------------------------

// CreateRoleRqst

// .resource.Role role = 1;
inline bool CreateRoleRqst::has_role() const {
  return this != internal_default_instance() && role_ != NULL;
}
inline void CreateRoleRqst::clear_role() {
  if (GetArenaNoVirtual() == NULL && role_ != NULL) {
    delete role_;
  }
  role_ = NULL;
}
inline const ::resource::Role& CreateRoleRqst::_internal_role() const {
  return *role_;
}
inline const ::resource::Role& CreateRoleRqst::role() const {
  const ::resource::Role* p = role_;
  // @@protoc_insertion_point(field_get:resource.CreateRoleRqst.role)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Role*>(
      &::resource::_Role_default_instance_);
}
inline ::resource::Role* CreateRoleRqst::release_role() {
  // @@protoc_insertion_point(field_release:resource.CreateRoleRqst.role)
  
  ::resource::Role* temp = role_;
  role_ = NULL;
  return temp;
}
inline ::resource::Role* CreateRoleRqst::mutable_role() {
  
  if (role_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Role>(GetArenaNoVirtual());
    role_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.CreateRoleRqst.role)
  return role_;
}
inline void CreateRoleRqst::set_allocated_role(::resource::Role* role) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete role_;
  }
  if (role) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      role = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:resource.CreateRoleRqst.role)
}

// -------------------------------------------------------------------

// CreateRoleRsp

// bool result = 1;
inline void CreateRoleRsp::clear_result() {
  result_ = false;
}
inline bool CreateRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.CreateRoleRsp.result)
  return result_;
}
inline void CreateRoleRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.CreateRoleRsp.result)
}

// -------------------------------------------------------------------

// GetRolesRqst

// string query = 1;
inline void GetRolesRqst::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRolesRqst::query() const {
  // @@protoc_insertion_point(field_get:resource.GetRolesRqst.query)
  return query_.GetNoArena();
}
inline void GetRolesRqst::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetRolesRqst.query)
}
#if LANG_CXX11
inline void GetRolesRqst::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetRolesRqst.query)
}
#endif
inline void GetRolesRqst::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetRolesRqst.query)
}
inline void GetRolesRqst::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetRolesRqst.query)
}
inline ::std::string* GetRolesRqst::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetRolesRqst.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRolesRqst::release_query() {
  // @@protoc_insertion_point(field_release:resource.GetRolesRqst.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRolesRqst::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:resource.GetRolesRqst.query)
}

// string options = 2;
inline void GetRolesRqst::clear_options() {
  options_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRolesRqst::options() const {
  // @@protoc_insertion_point(field_get:resource.GetRolesRqst.options)
  return options_.GetNoArena();
}
inline void GetRolesRqst::set_options(const ::std::string& value) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetRolesRqst.options)
}
#if LANG_CXX11
inline void GetRolesRqst::set_options(::std::string&& value) {
  
  options_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetRolesRqst.options)
}
#endif
inline void GetRolesRqst::set_options(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetRolesRqst.options)
}
inline void GetRolesRqst::set_options(const char* value, size_t size) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetRolesRqst.options)
}
inline ::std::string* GetRolesRqst::mutable_options() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetRolesRqst.options)
  return options_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRolesRqst::release_options() {
  // @@protoc_insertion_point(field_release:resource.GetRolesRqst.options)
  
  return options_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRolesRqst::set_allocated_options(::std::string* options) {
  if (options != NULL) {
    
  } else {
    
  }
  options_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), options);
  // @@protoc_insertion_point(field_set_allocated:resource.GetRolesRqst.options)
}

// -------------------------------------------------------------------

// GetRolesRsp

// repeated .resource.Role roles = 1;
inline int GetRolesRsp::roles_size() const {
  return roles_.size();
}
inline void GetRolesRsp::clear_roles() {
  roles_.Clear();
}
inline ::resource::Role* GetRolesRsp::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetRolesRsp.roles)
  return roles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::Role >*
GetRolesRsp::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetRolesRsp.roles)
  return &roles_;
}
inline const ::resource::Role& GetRolesRsp::roles(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetRolesRsp.roles)
  return roles_.Get(index);
}
inline ::resource::Role* GetRolesRsp::add_roles() {
  // @@protoc_insertion_point(field_add:resource.GetRolesRsp.roles)
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::Role >&
GetRolesRsp::roles() const {
  // @@protoc_insertion_point(field_list:resource.GetRolesRsp.roles)
  return roles_;
}

// -------------------------------------------------------------------

// DeleteRoleRqst

// string roleId = 1;
inline void DeleteRoleRqst::clear_roleid() {
  roleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.DeleteRoleRqst.roleId)
  return roleid_.GetNoArena();
}
inline void DeleteRoleRqst::set_roleid(const ::std::string& value) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.DeleteRoleRqst.roleId)
}
#if LANG_CXX11
inline void DeleteRoleRqst::set_roleid(::std::string&& value) {
  
  roleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteRoleRqst.roleId)
}
#endif
inline void DeleteRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.DeleteRoleRqst.roleId)
}
inline void DeleteRoleRqst::set_roleid(const char* value, size_t size) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteRoleRqst.roleId)
}
inline ::std::string* DeleteRoleRqst::mutable_roleid() {
  
  // @@protoc_insertion_point(field_mutable:resource.DeleteRoleRqst.roleId)
  return roleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.DeleteRoleRqst.roleId)
  
  return roleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRoleRqst::set_allocated_roleid(::std::string* roleid) {
  if (roleid != NULL) {
    
  } else {
    
  }
  roleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roleid);
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteRoleRqst.roleId)
}

// -------------------------------------------------------------------

// DeleteRoleRsp

// bool result = 1;
inline void DeleteRoleRsp::clear_result() {
  result_ = false;
}
inline bool DeleteRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeleteRoleRsp.result)
  return result_;
}
inline void DeleteRoleRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.DeleteRoleRsp.result)
}

// -------------------------------------------------------------------

// Application

// string id = 1;
inline void Application::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::id() const {
  // @@protoc_insertion_point(field_get:resource.Application.id)
  return id_.GetNoArena();
}
inline void Application::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Application.id)
}
#if LANG_CXX11
inline void Application::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Application.id)
}
#endif
inline void Application::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Application.id)
}
inline void Application::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Application.id)
}
inline ::std::string* Application::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.Application.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_id() {
  // @@protoc_insertion_point(field_release:resource.Application.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.Application.id)
}

// string name = 2;
inline void Application::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::name() const {
  // @@protoc_insertion_point(field_get:resource.Application.name)
  return name_.GetNoArena();
}
inline void Application::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Application.name)
}
#if LANG_CXX11
inline void Application::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Application.name)
}
#endif
inline void Application::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Application.name)
}
inline void Application::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Application.name)
}
inline ::std::string* Application::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:resource.Application.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_name() {
  // @@protoc_insertion_point(field_release:resource.Application.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:resource.Application.name)
}

// string domain = 3;
inline void Application::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::domain() const {
  // @@protoc_insertion_point(field_get:resource.Application.domain)
  return domain_.GetNoArena();
}
inline void Application::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Application.domain)
}
#if LANG_CXX11
inline void Application::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Application.domain)
}
#endif
inline void Application::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Application.domain)
}
inline void Application::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Application.domain)
}
inline ::std::string* Application::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:resource.Application.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_domain() {
  // @@protoc_insertion_point(field_release:resource.Application.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:resource.Application.domain)
}

// string password = 4;
inline void Application::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::password() const {
  // @@protoc_insertion_point(field_get:resource.Application.password)
  return password_.GetNoArena();
}
inline void Application::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Application.password)
}
#if LANG_CXX11
inline void Application::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Application.password)
}
#endif
inline void Application::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Application.password)
}
inline void Application::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Application.password)
}
inline ::std::string* Application::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:resource.Application.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_password() {
  // @@protoc_insertion_point(field_release:resource.Application.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:resource.Application.password)
}

// string path = 5;
inline void Application::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::path() const {
  // @@protoc_insertion_point(field_get:resource.Application.path)
  return path_.GetNoArena();
}
inline void Application::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Application.path)
}
#if LANG_CXX11
inline void Application::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Application.path)
}
#endif
inline void Application::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Application.path)
}
inline void Application::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Application.path)
}
inline ::std::string* Application::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:resource.Application.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_path() {
  // @@protoc_insertion_point(field_release:resource.Application.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:resource.Application.path)
}

// string version = 6;
inline void Application::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::version() const {
  // @@protoc_insertion_point(field_get:resource.Application.version)
  return version_.GetNoArena();
}
inline void Application::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Application.version)
}
#if LANG_CXX11
inline void Application::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Application.version)
}
#endif
inline void Application::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Application.version)
}
inline void Application::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Application.version)
}
inline ::std::string* Application::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:resource.Application.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_version() {
  // @@protoc_insertion_point(field_release:resource.Application.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:resource.Application.version)
}

// string description = 7;
inline void Application::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::description() const {
  // @@protoc_insertion_point(field_get:resource.Application.description)
  return description_.GetNoArena();
}
inline void Application::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Application.description)
}
#if LANG_CXX11
inline void Application::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Application.description)
}
#endif
inline void Application::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Application.description)
}
inline void Application::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Application.description)
}
inline ::std::string* Application::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:resource.Application.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_description() {
  // @@protoc_insertion_point(field_release:resource.Application.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:resource.Application.description)
}

// repeated string actions = 8;
inline int Application::actions_size() const {
  return actions_.size();
}
inline void Application::clear_actions() {
  actions_.Clear();
}
inline const ::std::string& Application::actions(int index) const {
  // @@protoc_insertion_point(field_get:resource.Application.actions)
  return actions_.Get(index);
}
inline ::std::string* Application::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Application.actions)
  return actions_.Mutable(index);
}
inline void Application::set_actions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Application.actions)
  actions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Application::set_actions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Application.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Application::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Application.actions)
}
inline void Application::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Application.actions)
}
inline ::std::string* Application::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:resource.Application.actions)
  return actions_.Add();
}
inline void Application::add_actions(const ::std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Application.actions)
}
#if LANG_CXX11
inline void Application::add_actions(::std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Application.actions)
}
#endif
inline void Application::add_actions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Application.actions)
}
inline void Application::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Application.actions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Application::actions() const {
  // @@protoc_insertion_point(field_list:resource.Application.actions)
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Application::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:resource.Application.actions)
  return &actions_;
}

// repeated string keywords = 9;
inline int Application::keywords_size() const {
  return keywords_.size();
}
inline void Application::clear_keywords() {
  keywords_.Clear();
}
inline const ::std::string& Application::keywords(int index) const {
  // @@protoc_insertion_point(field_get:resource.Application.keywords)
  return keywords_.Get(index);
}
inline ::std::string* Application::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Application.keywords)
  return keywords_.Mutable(index);
}
inline void Application::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Application.keywords)
  keywords_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Application::set_keywords(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Application.keywords)
  keywords_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Application::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Application.keywords)
}
inline void Application::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Application.keywords)
}
inline ::std::string* Application::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:resource.Application.keywords)
  return keywords_.Add();
}
inline void Application::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Application.keywords)
}
#if LANG_CXX11
inline void Application::add_keywords(::std::string&& value) {
  keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Application.keywords)
}
#endif
inline void Application::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Application.keywords)
}
inline void Application::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Application.keywords)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Application::keywords() const {
  // @@protoc_insertion_point(field_list:resource.Application.keywords)
  return keywords_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Application::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:resource.Application.keywords)
  return &keywords_;
}

// string icon = 10;
inline void Application::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::icon() const {
  // @@protoc_insertion_point(field_get:resource.Application.icon)
  return icon_.GetNoArena();
}
inline void Application::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Application.icon)
}
#if LANG_CXX11
inline void Application::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Application.icon)
}
#endif
inline void Application::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Application.icon)
}
inline void Application::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Application.icon)
}
inline ::std::string* Application::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:resource.Application.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_icon() {
  // @@protoc_insertion_point(field_release:resource.Application.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:resource.Application.icon)
}

// string alias = 11;
inline void Application::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::alias() const {
  // @@protoc_insertion_point(field_get:resource.Application.alias)
  return alias_.GetNoArena();
}
inline void Application::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Application.alias)
}
#if LANG_CXX11
inline void Application::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Application.alias)
}
#endif
inline void Application::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Application.alias)
}
inline void Application::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Application.alias)
}
inline ::std::string* Application::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:resource.Application.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_alias() {
  // @@protoc_insertion_point(field_release:resource.Application.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:resource.Application.alias)
}

// string PublisherID = 12;
inline void Application::clear_PublisherID() {
  PublisherID_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::PublisherID() const {
  // @@protoc_insertion_point(field_get:resource.Application.PublisherID)
  return PublisherID_.GetNoArena();
}
inline void Application::set_PublisherID(const ::std::string& value) {
  
  PublisherID_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Application.PublisherID)
}
#if LANG_CXX11
inline void Application::set_PublisherID(::std::string&& value) {
  
  PublisherID_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Application.PublisherID)
}
#endif
inline void Application::set_PublisherID(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  PublisherID_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Application.PublisherID)
}
inline void Application::set_PublisherID(const char* value, size_t size) {
  
  PublisherID_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Application.PublisherID)
}
inline ::std::string* Application::mutable_PublisherID() {
  
  // @@protoc_insertion_point(field_mutable:resource.Application.PublisherID)
  return PublisherID_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_PublisherID() {
  // @@protoc_insertion_point(field_release:resource.Application.PublisherID)
  
  return PublisherID_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_PublisherID(::std::string* PublisherID) {
  if (PublisherID != NULL) {
    
  } else {
    
  }
  PublisherID_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), PublisherID);
  // @@protoc_insertion_point(field_set_allocated:resource.Application.PublisherID)
}

// int64 creation_date = 13;
inline void Application::clear_creation_date() {
  creation_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Application::creation_date() const {
  // @@protoc_insertion_point(field_get:resource.Application.creation_date)
  return creation_date_;
}
inline void Application::set_creation_date(::google::protobuf::int64 value) {
  
  creation_date_ = value;
  // @@protoc_insertion_point(field_set:resource.Application.creation_date)
}

// int64 last_deployed = 14;
inline void Application::clear_last_deployed() {
  last_deployed_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Application::last_deployed() const {
  // @@protoc_insertion_point(field_get:resource.Application.last_deployed)
  return last_deployed_;
}
inline void Application::set_last_deployed(::google::protobuf::int64 value) {
  
  last_deployed_ = value;
  // @@protoc_insertion_point(field_set:resource.Application.last_deployed)
}

// -------------------------------------------------------------------

// CreateApplicationRqst

// .resource.Application application = 1;
inline bool CreateApplicationRqst::has_application() const {
  return this != internal_default_instance() && application_ != NULL;
}
inline void CreateApplicationRqst::clear_application() {
  if (GetArenaNoVirtual() == NULL && application_ != NULL) {
    delete application_;
  }
  application_ = NULL;
}
inline const ::resource::Application& CreateApplicationRqst::_internal_application() const {
  return *application_;
}
inline const ::resource::Application& CreateApplicationRqst::application() const {
  const ::resource::Application* p = application_;
  // @@protoc_insertion_point(field_get:resource.CreateApplicationRqst.application)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Application*>(
      &::resource::_Application_default_instance_);
}
inline ::resource::Application* CreateApplicationRqst::release_application() {
  // @@protoc_insertion_point(field_release:resource.CreateApplicationRqst.application)
  
  ::resource::Application* temp = application_;
  application_ = NULL;
  return temp;
}
inline ::resource::Application* CreateApplicationRqst::mutable_application() {
  
  if (application_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Application>(GetArenaNoVirtual());
    application_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.CreateApplicationRqst.application)
  return application_;
}
inline void CreateApplicationRqst::set_allocated_application(::resource::Application* application) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete application_;
  }
  if (application) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      application = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, application, submessage_arena);
    }
    
  } else {
    
  }
  application_ = application;
  // @@protoc_insertion_point(field_set_allocated:resource.CreateApplicationRqst.application)
}

// -------------------------------------------------------------------

// CreateApplicationRsp

// -------------------------------------------------------------------

// UpdateApplicationRqst

// string applicationId = 1;
inline void UpdateApplicationRqst::clear_applicationid() {
  applicationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateApplicationRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:resource.UpdateApplicationRqst.applicationId)
  return applicationid_.GetNoArena();
}
inline void UpdateApplicationRqst::set_applicationid(const ::std::string& value) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.UpdateApplicationRqst.applicationId)
}
#if LANG_CXX11
inline void UpdateApplicationRqst::set_applicationid(::std::string&& value) {
  
  applicationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.UpdateApplicationRqst.applicationId)
}
#endif
inline void UpdateApplicationRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.UpdateApplicationRqst.applicationId)
}
inline void UpdateApplicationRqst::set_applicationid(const char* value, size_t size) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.UpdateApplicationRqst.applicationId)
}
inline ::std::string* UpdateApplicationRqst::mutable_applicationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.UpdateApplicationRqst.applicationId)
  return applicationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateApplicationRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:resource.UpdateApplicationRqst.applicationId)
  
  return applicationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateApplicationRqst::set_allocated_applicationid(::std::string* applicationid) {
  if (applicationid != NULL) {
    
  } else {
    
  }
  applicationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applicationid);
  // @@protoc_insertion_point(field_set_allocated:resource.UpdateApplicationRqst.applicationId)
}

// string values = 2;
inline void UpdateApplicationRqst::clear_values() {
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateApplicationRqst::values() const {
  // @@protoc_insertion_point(field_get:resource.UpdateApplicationRqst.values)
  return values_.GetNoArena();
}
inline void UpdateApplicationRqst::set_values(const ::std::string& value) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.UpdateApplicationRqst.values)
}
#if LANG_CXX11
inline void UpdateApplicationRqst::set_values(::std::string&& value) {
  
  values_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.UpdateApplicationRqst.values)
}
#endif
inline void UpdateApplicationRqst::set_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.UpdateApplicationRqst.values)
}
inline void UpdateApplicationRqst::set_values(const char* value, size_t size) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.UpdateApplicationRqst.values)
}
inline ::std::string* UpdateApplicationRqst::mutable_values() {
  
  // @@protoc_insertion_point(field_mutable:resource.UpdateApplicationRqst.values)
  return values_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateApplicationRqst::release_values() {
  // @@protoc_insertion_point(field_release:resource.UpdateApplicationRqst.values)
  
  return values_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateApplicationRqst::set_allocated_values(::std::string* values) {
  if (values != NULL) {
    
  } else {
    
  }
  values_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values);
  // @@protoc_insertion_point(field_set_allocated:resource.UpdateApplicationRqst.values)
}

// -------------------------------------------------------------------

// UpdateApplicationRsp

// bool result = 1;
inline void UpdateApplicationRsp::clear_result() {
  result_ = false;
}
inline bool UpdateApplicationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.UpdateApplicationRsp.result)
  return result_;
}
inline void UpdateApplicationRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.UpdateApplicationRsp.result)
}

// -------------------------------------------------------------------

// DeleteApplicationRqst

// string applicationId = 1;
inline void DeleteApplicationRqst::clear_applicationid() {
  applicationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteApplicationRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:resource.DeleteApplicationRqst.applicationId)
  return applicationid_.GetNoArena();
}
inline void DeleteApplicationRqst::set_applicationid(const ::std::string& value) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.DeleteApplicationRqst.applicationId)
}
#if LANG_CXX11
inline void DeleteApplicationRqst::set_applicationid(::std::string&& value) {
  
  applicationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteApplicationRqst.applicationId)
}
#endif
inline void DeleteApplicationRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.DeleteApplicationRqst.applicationId)
}
inline void DeleteApplicationRqst::set_applicationid(const char* value, size_t size) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteApplicationRqst.applicationId)
}
inline ::std::string* DeleteApplicationRqst::mutable_applicationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.DeleteApplicationRqst.applicationId)
  return applicationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteApplicationRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:resource.DeleteApplicationRqst.applicationId)
  
  return applicationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteApplicationRqst::set_allocated_applicationid(::std::string* applicationid) {
  if (applicationid != NULL) {
    
  } else {
    
  }
  applicationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applicationid);
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteApplicationRqst.applicationId)
}

// -------------------------------------------------------------------

// DeleteApplicationRsp

// bool result = 1;
inline void DeleteApplicationRsp::clear_result() {
  result_ = false;
}
inline bool DeleteApplicationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeleteApplicationRsp.result)
  return result_;
}
inline void DeleteApplicationRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.DeleteApplicationRsp.result)
}

// -------------------------------------------------------------------

// AddApplicationActionsRqst

// string applicationId = 1;
inline void AddApplicationActionsRqst::clear_applicationid() {
  applicationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddApplicationActionsRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:resource.AddApplicationActionsRqst.applicationId)
  return applicationid_.GetNoArena();
}
inline void AddApplicationActionsRqst::set_applicationid(const ::std::string& value) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddApplicationActionsRqst.applicationId)
}
#if LANG_CXX11
inline void AddApplicationActionsRqst::set_applicationid(::std::string&& value) {
  
  applicationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddApplicationActionsRqst.applicationId)
}
#endif
inline void AddApplicationActionsRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddApplicationActionsRqst.applicationId)
}
inline void AddApplicationActionsRqst::set_applicationid(const char* value, size_t size) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddApplicationActionsRqst.applicationId)
}
inline ::std::string* AddApplicationActionsRqst::mutable_applicationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddApplicationActionsRqst.applicationId)
  return applicationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddApplicationActionsRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:resource.AddApplicationActionsRqst.applicationId)
  
  return applicationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddApplicationActionsRqst::set_allocated_applicationid(::std::string* applicationid) {
  if (applicationid != NULL) {
    
  } else {
    
  }
  applicationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applicationid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddApplicationActionsRqst.applicationId)
}

// repeated string actions = 2;
inline int AddApplicationActionsRqst::actions_size() const {
  return actions_.size();
}
inline void AddApplicationActionsRqst::clear_actions() {
  actions_.Clear();
}
inline const ::std::string& AddApplicationActionsRqst::actions(int index) const {
  // @@protoc_insertion_point(field_get:resource.AddApplicationActionsRqst.actions)
  return actions_.Get(index);
}
inline ::std::string* AddApplicationActionsRqst::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:resource.AddApplicationActionsRqst.actions)
  return actions_.Mutable(index);
}
inline void AddApplicationActionsRqst::set_actions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.AddApplicationActionsRqst.actions)
  actions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AddApplicationActionsRqst::set_actions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.AddApplicationActionsRqst.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AddApplicationActionsRqst::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.AddApplicationActionsRqst.actions)
}
inline void AddApplicationActionsRqst::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.AddApplicationActionsRqst.actions)
}
inline ::std::string* AddApplicationActionsRqst::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:resource.AddApplicationActionsRqst.actions)
  return actions_.Add();
}
inline void AddApplicationActionsRqst::add_actions(const ::std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.AddApplicationActionsRqst.actions)
}
#if LANG_CXX11
inline void AddApplicationActionsRqst::add_actions(::std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.AddApplicationActionsRqst.actions)
}
#endif
inline void AddApplicationActionsRqst::add_actions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.AddApplicationActionsRqst.actions)
}
inline void AddApplicationActionsRqst::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.AddApplicationActionsRqst.actions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddApplicationActionsRqst::actions() const {
  // @@protoc_insertion_point(field_list:resource.AddApplicationActionsRqst.actions)
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddApplicationActionsRqst::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:resource.AddApplicationActionsRqst.actions)
  return &actions_;
}

// -------------------------------------------------------------------

// AddApplicationActionsRsp

// bool result = 1;
inline void AddApplicationActionsRsp::clear_result() {
  result_ = false;
}
inline bool AddApplicationActionsRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddApplicationActionsRsp.result)
  return result_;
}
inline void AddApplicationActionsRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.AddApplicationActionsRsp.result)
}

// -------------------------------------------------------------------

// RemoveApplicationActionRqst

// string applicationId = 1;
inline void RemoveApplicationActionRqst::clear_applicationid() {
  applicationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveApplicationActionRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveApplicationActionRqst.applicationId)
  return applicationid_.GetNoArena();
}
inline void RemoveApplicationActionRqst::set_applicationid(const ::std::string& value) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveApplicationActionRqst.applicationId)
}
#if LANG_CXX11
inline void RemoveApplicationActionRqst::set_applicationid(::std::string&& value) {
  
  applicationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveApplicationActionRqst.applicationId)
}
#endif
inline void RemoveApplicationActionRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveApplicationActionRqst.applicationId)
}
inline void RemoveApplicationActionRqst::set_applicationid(const char* value, size_t size) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveApplicationActionRqst.applicationId)
}
inline ::std::string* RemoveApplicationActionRqst::mutable_applicationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveApplicationActionRqst.applicationId)
  return applicationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveApplicationActionRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveApplicationActionRqst.applicationId)
  
  return applicationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveApplicationActionRqst::set_allocated_applicationid(::std::string* applicationid) {
  if (applicationid != NULL) {
    
  } else {
    
  }
  applicationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applicationid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveApplicationActionRqst.applicationId)
}

// string action = 2;
inline void RemoveApplicationActionRqst::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveApplicationActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.RemoveApplicationActionRqst.action)
  return action_.GetNoArena();
}
inline void RemoveApplicationActionRqst::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveApplicationActionRqst.action)
}
#if LANG_CXX11
inline void RemoveApplicationActionRqst::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveApplicationActionRqst.action)
}
#endif
inline void RemoveApplicationActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveApplicationActionRqst.action)
}
inline void RemoveApplicationActionRqst::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveApplicationActionRqst.action)
}
inline ::std::string* RemoveApplicationActionRqst::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveApplicationActionRqst.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveApplicationActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.RemoveApplicationActionRqst.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveApplicationActionRqst::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveApplicationActionRqst.action)
}

// -------------------------------------------------------------------

// RemoveApplicationActionRsp

// bool result = 1;
inline void RemoveApplicationActionRsp::clear_result() {
  result_ = false;
}
inline bool RemoveApplicationActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveApplicationActionRsp.result)
  return result_;
}
inline void RemoveApplicationActionRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemoveApplicationActionRsp.result)
}

// -------------------------------------------------------------------

// RemoveApplicationsActionRqst

// string action = 2;
inline void RemoveApplicationsActionRqst::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveApplicationsActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.RemoveApplicationsActionRqst.action)
  return action_.GetNoArena();
}
inline void RemoveApplicationsActionRqst::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveApplicationsActionRqst.action)
}
#if LANG_CXX11
inline void RemoveApplicationsActionRqst::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveApplicationsActionRqst.action)
}
#endif
inline void RemoveApplicationsActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveApplicationsActionRqst.action)
}
inline void RemoveApplicationsActionRqst::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveApplicationsActionRqst.action)
}
inline ::std::string* RemoveApplicationsActionRqst::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveApplicationsActionRqst.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveApplicationsActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.RemoveApplicationsActionRqst.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveApplicationsActionRqst::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveApplicationsActionRqst.action)
}

// -------------------------------------------------------------------

// RemoveApplicationsActionRsp

// bool result = 1;
inline void RemoveApplicationsActionRsp::clear_result() {
  result_ = false;
}
inline bool RemoveApplicationsActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveApplicationsActionRsp.result)
  return result_;
}
inline void RemoveApplicationsActionRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemoveApplicationsActionRsp.result)
}

// -------------------------------------------------------------------

// GetApplicationsRqst

// string query = 1;
inline void GetApplicationsRqst::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetApplicationsRqst::query() const {
  // @@protoc_insertion_point(field_get:resource.GetApplicationsRqst.query)
  return query_.GetNoArena();
}
inline void GetApplicationsRqst::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetApplicationsRqst.query)
}
#if LANG_CXX11
inline void GetApplicationsRqst::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetApplicationsRqst.query)
}
#endif
inline void GetApplicationsRqst::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetApplicationsRqst.query)
}
inline void GetApplicationsRqst::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetApplicationsRqst.query)
}
inline ::std::string* GetApplicationsRqst::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetApplicationsRqst.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetApplicationsRqst::release_query() {
  // @@protoc_insertion_point(field_release:resource.GetApplicationsRqst.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetApplicationsRqst::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:resource.GetApplicationsRqst.query)
}

// string options = 2;
inline void GetApplicationsRqst::clear_options() {
  options_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetApplicationsRqst::options() const {
  // @@protoc_insertion_point(field_get:resource.GetApplicationsRqst.options)
  return options_.GetNoArena();
}
inline void GetApplicationsRqst::set_options(const ::std::string& value) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetApplicationsRqst.options)
}
#if LANG_CXX11
inline void GetApplicationsRqst::set_options(::std::string&& value) {
  
  options_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetApplicationsRqst.options)
}
#endif
inline void GetApplicationsRqst::set_options(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetApplicationsRqst.options)
}
inline void GetApplicationsRqst::set_options(const char* value, size_t size) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetApplicationsRqst.options)
}
inline ::std::string* GetApplicationsRqst::mutable_options() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetApplicationsRqst.options)
  return options_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetApplicationsRqst::release_options() {
  // @@protoc_insertion_point(field_release:resource.GetApplicationsRqst.options)
  
  return options_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetApplicationsRqst::set_allocated_options(::std::string* options) {
  if (options != NULL) {
    
  } else {
    
  }
  options_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), options);
  // @@protoc_insertion_point(field_set_allocated:resource.GetApplicationsRqst.options)
}

// -------------------------------------------------------------------

// GetApplicationsRsp

// repeated .resource.Application applications = 1;
inline int GetApplicationsRsp::applications_size() const {
  return applications_.size();
}
inline void GetApplicationsRsp::clear_applications() {
  applications_.Clear();
}
inline ::resource::Application* GetApplicationsRsp::mutable_applications(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetApplicationsRsp.applications)
  return applications_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::Application >*
GetApplicationsRsp::mutable_applications() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetApplicationsRsp.applications)
  return &applications_;
}
inline const ::resource::Application& GetApplicationsRsp::applications(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetApplicationsRsp.applications)
  return applications_.Get(index);
}
inline ::resource::Application* GetApplicationsRsp::add_applications() {
  // @@protoc_insertion_point(field_add:resource.GetApplicationsRsp.applications)
  return applications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::Application >&
GetApplicationsRsp::applications() const {
  // @@protoc_insertion_point(field_list:resource.GetApplicationsRsp.applications)
  return applications_;
}

// -------------------------------------------------------------------

// GetApplicationVersionRqst

// string id = 1;
inline void GetApplicationVersionRqst::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetApplicationVersionRqst::id() const {
  // @@protoc_insertion_point(field_get:resource.GetApplicationVersionRqst.id)
  return id_.GetNoArena();
}
inline void GetApplicationVersionRqst::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetApplicationVersionRqst.id)
}
#if LANG_CXX11
inline void GetApplicationVersionRqst::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetApplicationVersionRqst.id)
}
#endif
inline void GetApplicationVersionRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetApplicationVersionRqst.id)
}
inline void GetApplicationVersionRqst::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetApplicationVersionRqst.id)
}
inline ::std::string* GetApplicationVersionRqst::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetApplicationVersionRqst.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetApplicationVersionRqst::release_id() {
  // @@protoc_insertion_point(field_release:resource.GetApplicationVersionRqst.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetApplicationVersionRqst::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.GetApplicationVersionRqst.id)
}

// -------------------------------------------------------------------

// GetApplicationVersionRsp

// string version = 1;
inline void GetApplicationVersionRsp::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetApplicationVersionRsp::version() const {
  // @@protoc_insertion_point(field_get:resource.GetApplicationVersionRsp.version)
  return version_.GetNoArena();
}
inline void GetApplicationVersionRsp::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetApplicationVersionRsp.version)
}
#if LANG_CXX11
inline void GetApplicationVersionRsp::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetApplicationVersionRsp.version)
}
#endif
inline void GetApplicationVersionRsp::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetApplicationVersionRsp.version)
}
inline void GetApplicationVersionRsp::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetApplicationVersionRsp.version)
}
inline ::std::string* GetApplicationVersionRsp::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetApplicationVersionRsp.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetApplicationVersionRsp::release_version() {
  // @@protoc_insertion_point(field_release:resource.GetApplicationVersionRsp.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetApplicationVersionRsp::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:resource.GetApplicationVersionRsp.version)
}

// -------------------------------------------------------------------

// GetApplicationIconRqst

// string id = 1;
inline void GetApplicationIconRqst::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetApplicationIconRqst::id() const {
  // @@protoc_insertion_point(field_get:resource.GetApplicationIconRqst.id)
  return id_.GetNoArena();
}
inline void GetApplicationIconRqst::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetApplicationIconRqst.id)
}
#if LANG_CXX11
inline void GetApplicationIconRqst::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetApplicationIconRqst.id)
}
#endif
inline void GetApplicationIconRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetApplicationIconRqst.id)
}
inline void GetApplicationIconRqst::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetApplicationIconRqst.id)
}
inline ::std::string* GetApplicationIconRqst::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetApplicationIconRqst.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetApplicationIconRqst::release_id() {
  // @@protoc_insertion_point(field_release:resource.GetApplicationIconRqst.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetApplicationIconRqst::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.GetApplicationIconRqst.id)
}

// -------------------------------------------------------------------

// GetApplicationIconRsp

// string icon = 1;
inline void GetApplicationIconRsp::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetApplicationIconRsp::icon() const {
  // @@protoc_insertion_point(field_get:resource.GetApplicationIconRsp.icon)
  return icon_.GetNoArena();
}
inline void GetApplicationIconRsp::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetApplicationIconRsp.icon)
}
#if LANG_CXX11
inline void GetApplicationIconRsp::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetApplicationIconRsp.icon)
}
#endif
inline void GetApplicationIconRsp::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetApplicationIconRsp.icon)
}
inline void GetApplicationIconRsp::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetApplicationIconRsp.icon)
}
inline ::std::string* GetApplicationIconRsp::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetApplicationIconRsp.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetApplicationIconRsp::release_icon() {
  // @@protoc_insertion_point(field_release:resource.GetApplicationIconRsp.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetApplicationIconRsp::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:resource.GetApplicationIconRsp.icon)
}

// -------------------------------------------------------------------

// GetApplicationAliasRqst

// string id = 1;
inline void GetApplicationAliasRqst::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetApplicationAliasRqst::id() const {
  // @@protoc_insertion_point(field_get:resource.GetApplicationAliasRqst.id)
  return id_.GetNoArena();
}
inline void GetApplicationAliasRqst::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetApplicationAliasRqst.id)
}
#if LANG_CXX11
inline void GetApplicationAliasRqst::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetApplicationAliasRqst.id)
}
#endif
inline void GetApplicationAliasRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetApplicationAliasRqst.id)
}
inline void GetApplicationAliasRqst::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetApplicationAliasRqst.id)
}
inline ::std::string* GetApplicationAliasRqst::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetApplicationAliasRqst.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetApplicationAliasRqst::release_id() {
  // @@protoc_insertion_point(field_release:resource.GetApplicationAliasRqst.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetApplicationAliasRqst::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.GetApplicationAliasRqst.id)
}

// -------------------------------------------------------------------

// GetApplicationAliasRsp

// string alias = 1;
inline void GetApplicationAliasRsp::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetApplicationAliasRsp::alias() const {
  // @@protoc_insertion_point(field_get:resource.GetApplicationAliasRsp.alias)
  return alias_.GetNoArena();
}
inline void GetApplicationAliasRsp::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetApplicationAliasRsp.alias)
}
#if LANG_CXX11
inline void GetApplicationAliasRsp::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetApplicationAliasRsp.alias)
}
#endif
inline void GetApplicationAliasRsp::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetApplicationAliasRsp.alias)
}
inline void GetApplicationAliasRsp::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetApplicationAliasRsp.alias)
}
inline ::std::string* GetApplicationAliasRsp::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetApplicationAliasRsp.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetApplicationAliasRsp::release_alias() {
  // @@protoc_insertion_point(field_release:resource.GetApplicationAliasRsp.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetApplicationAliasRsp::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:resource.GetApplicationAliasRsp.alias)
}

// -------------------------------------------------------------------

// Group

// string id = 1;
inline void Group::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::id() const {
  // @@protoc_insertion_point(field_get:resource.Group.id)
  return id_.GetNoArena();
}
inline void Group::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Group.id)
}
#if LANG_CXX11
inline void Group::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Group.id)
}
#endif
inline void Group::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Group.id)
}
inline void Group::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Group.id)
}
inline ::std::string* Group::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.Group.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_id() {
  // @@protoc_insertion_point(field_release:resource.Group.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.Group.id)
}

// string name = 2;
inline void Group::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:resource.Group.name)
  return name_.GetNoArena();
}
inline void Group::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Group.name)
}
#if LANG_CXX11
inline void Group::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Group.name)
}
#endif
inline void Group::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Group.name)
}
inline void Group::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Group.name)
}
inline ::std::string* Group::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:resource.Group.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:resource.Group.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:resource.Group.name)
}

// string domain = 3;
inline void Group::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::domain() const {
  // @@protoc_insertion_point(field_get:resource.Group.domain)
  return domain_.GetNoArena();
}
inline void Group::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Group.domain)
}
#if LANG_CXX11
inline void Group::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Group.domain)
}
#endif
inline void Group::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Group.domain)
}
inline void Group::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Group.domain)
}
inline ::std::string* Group::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:resource.Group.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_domain() {
  // @@protoc_insertion_point(field_release:resource.Group.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:resource.Group.domain)
}

// string description = 4;
inline void Group::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::description() const {
  // @@protoc_insertion_point(field_get:resource.Group.description)
  return description_.GetNoArena();
}
inline void Group::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Group.description)
}
#if LANG_CXX11
inline void Group::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Group.description)
}
#endif
inline void Group::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Group.description)
}
inline void Group::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Group.description)
}
inline ::std::string* Group::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:resource.Group.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_description() {
  // @@protoc_insertion_point(field_release:resource.Group.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:resource.Group.description)
}

// repeated string members = 5;
inline int Group::members_size() const {
  return members_.size();
}
inline void Group::clear_members() {
  members_.Clear();
}
inline const ::std::string& Group::members(int index) const {
  // @@protoc_insertion_point(field_get:resource.Group.members)
  return members_.Get(index);
}
inline ::std::string* Group::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Group.members)
  return members_.Mutable(index);
}
inline void Group::set_members(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Group.members)
  members_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Group::set_members(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Group.members)
  members_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Group::set_members(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Group.members)
}
inline void Group::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Group.members)
}
inline ::std::string* Group::add_members() {
  // @@protoc_insertion_point(field_add_mutable:resource.Group.members)
  return members_.Add();
}
inline void Group::add_members(const ::std::string& value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Group.members)
}
#if LANG_CXX11
inline void Group::add_members(::std::string&& value) {
  members_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Group.members)
}
#endif
inline void Group::add_members(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Group.members)
}
inline void Group::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Group.members)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Group::members() const {
  // @@protoc_insertion_point(field_list:resource.Group.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Group::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:resource.Group.members)
  return &members_;
}

// repeated string organizations = 6;
inline int Group::organizations_size() const {
  return organizations_.size();
}
inline void Group::clear_organizations() {
  organizations_.Clear();
}
inline const ::std::string& Group::organizations(int index) const {
  // @@protoc_insertion_point(field_get:resource.Group.organizations)
  return organizations_.Get(index);
}
inline ::std::string* Group::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Group.organizations)
  return organizations_.Mutable(index);
}
inline void Group::set_organizations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Group.organizations)
  organizations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Group::set_organizations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Group.organizations)
  organizations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Group::set_organizations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  organizations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Group.organizations)
}
inline void Group::set_organizations(int index, const char* value, size_t size) {
  organizations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Group.organizations)
}
inline ::std::string* Group::add_organizations() {
  // @@protoc_insertion_point(field_add_mutable:resource.Group.organizations)
  return organizations_.Add();
}
inline void Group::add_organizations(const ::std::string& value) {
  organizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Group.organizations)
}
#if LANG_CXX11
inline void Group::add_organizations(::std::string&& value) {
  organizations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Group.organizations)
}
#endif
inline void Group::add_organizations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  organizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Group.organizations)
}
inline void Group::add_organizations(const char* value, size_t size) {
  organizations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Group.organizations)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Group::organizations() const {
  // @@protoc_insertion_point(field_list:resource.Group.organizations)
  return organizations_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Group::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:resource.Group.organizations)
  return &organizations_;
}

// -------------------------------------------------------------------

// CreateGroupRqst

// .resource.Group group = 1;
inline bool CreateGroupRqst::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
inline void CreateGroupRqst::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) {
    delete group_;
  }
  group_ = NULL;
}
inline const ::resource::Group& CreateGroupRqst::_internal_group() const {
  return *group_;
}
inline const ::resource::Group& CreateGroupRqst::group() const {
  const ::resource::Group* p = group_;
  // @@protoc_insertion_point(field_get:resource.CreateGroupRqst.group)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Group*>(
      &::resource::_Group_default_instance_);
}
inline ::resource::Group* CreateGroupRqst::release_group() {
  // @@protoc_insertion_point(field_release:resource.CreateGroupRqst.group)
  
  ::resource::Group* temp = group_;
  group_ = NULL;
  return temp;
}
inline ::resource::Group* CreateGroupRqst::mutable_group() {
  
  if (group_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Group>(GetArenaNoVirtual());
    group_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.CreateGroupRqst.group)
  return group_;
}
inline void CreateGroupRqst::set_allocated_group(::resource::Group* group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete group_;
  }
  if (group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:resource.CreateGroupRqst.group)
}

// -------------------------------------------------------------------

// CreateGroupRsp

// bool result = 1;
inline void CreateGroupRsp::clear_result() {
  result_ = false;
}
inline bool CreateGroupRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.CreateGroupRsp.result)
  return result_;
}
inline void CreateGroupRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.CreateGroupRsp.result)
}

// -------------------------------------------------------------------

// UpdateGroupRqst

// string groupId = 1;
inline void UpdateGroupRqst::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateGroupRqst::groupid() const {
  // @@protoc_insertion_point(field_get:resource.UpdateGroupRqst.groupId)
  return groupid_.GetNoArena();
}
inline void UpdateGroupRqst::set_groupid(const ::std::string& value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.UpdateGroupRqst.groupId)
}
#if LANG_CXX11
inline void UpdateGroupRqst::set_groupid(::std::string&& value) {
  
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.UpdateGroupRqst.groupId)
}
#endif
inline void UpdateGroupRqst::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.UpdateGroupRqst.groupId)
}
inline void UpdateGroupRqst::set_groupid(const char* value, size_t size) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.UpdateGroupRqst.groupId)
}
inline ::std::string* UpdateGroupRqst::mutable_groupid() {
  
  // @@protoc_insertion_point(field_mutable:resource.UpdateGroupRqst.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateGroupRqst::release_groupid() {
  // @@protoc_insertion_point(field_release:resource.UpdateGroupRqst.groupId)
  
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateGroupRqst::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    
  } else {
    
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:resource.UpdateGroupRqst.groupId)
}

// string values = 2;
inline void UpdateGroupRqst::clear_values() {
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateGroupRqst::values() const {
  // @@protoc_insertion_point(field_get:resource.UpdateGroupRqst.values)
  return values_.GetNoArena();
}
inline void UpdateGroupRqst::set_values(const ::std::string& value) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.UpdateGroupRqst.values)
}
#if LANG_CXX11
inline void UpdateGroupRqst::set_values(::std::string&& value) {
  
  values_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.UpdateGroupRqst.values)
}
#endif
inline void UpdateGroupRqst::set_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.UpdateGroupRqst.values)
}
inline void UpdateGroupRqst::set_values(const char* value, size_t size) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.UpdateGroupRqst.values)
}
inline ::std::string* UpdateGroupRqst::mutable_values() {
  
  // @@protoc_insertion_point(field_mutable:resource.UpdateGroupRqst.values)
  return values_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateGroupRqst::release_values() {
  // @@protoc_insertion_point(field_release:resource.UpdateGroupRqst.values)
  
  return values_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateGroupRqst::set_allocated_values(::std::string* values) {
  if (values != NULL) {
    
  } else {
    
  }
  values_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values);
  // @@protoc_insertion_point(field_set_allocated:resource.UpdateGroupRqst.values)
}

// -------------------------------------------------------------------

// UpdateGroupRsp

// bool result = 1;
inline void UpdateGroupRsp::clear_result() {
  result_ = false;
}
inline bool UpdateGroupRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.UpdateGroupRsp.result)
  return result_;
}
inline void UpdateGroupRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.UpdateGroupRsp.result)
}

// -------------------------------------------------------------------

// GetGroupsRqst

// string query = 1;
inline void GetGroupsRqst::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetGroupsRqst::query() const {
  // @@protoc_insertion_point(field_get:resource.GetGroupsRqst.query)
  return query_.GetNoArena();
}
inline void GetGroupsRqst::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetGroupsRqst.query)
}
#if LANG_CXX11
inline void GetGroupsRqst::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetGroupsRqst.query)
}
#endif
inline void GetGroupsRqst::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetGroupsRqst.query)
}
inline void GetGroupsRqst::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetGroupsRqst.query)
}
inline ::std::string* GetGroupsRqst::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetGroupsRqst.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetGroupsRqst::release_query() {
  // @@protoc_insertion_point(field_release:resource.GetGroupsRqst.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetGroupsRqst::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:resource.GetGroupsRqst.query)
}

// string options = 2;
inline void GetGroupsRqst::clear_options() {
  options_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetGroupsRqst::options() const {
  // @@protoc_insertion_point(field_get:resource.GetGroupsRqst.options)
  return options_.GetNoArena();
}
inline void GetGroupsRqst::set_options(const ::std::string& value) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetGroupsRqst.options)
}
#if LANG_CXX11
inline void GetGroupsRqst::set_options(::std::string&& value) {
  
  options_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetGroupsRqst.options)
}
#endif
inline void GetGroupsRqst::set_options(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetGroupsRqst.options)
}
inline void GetGroupsRqst::set_options(const char* value, size_t size) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetGroupsRqst.options)
}
inline ::std::string* GetGroupsRqst::mutable_options() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetGroupsRqst.options)
  return options_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetGroupsRqst::release_options() {
  // @@protoc_insertion_point(field_release:resource.GetGroupsRqst.options)
  
  return options_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetGroupsRqst::set_allocated_options(::std::string* options) {
  if (options != NULL) {
    
  } else {
    
  }
  options_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), options);
  // @@protoc_insertion_point(field_set_allocated:resource.GetGroupsRqst.options)
}

// -------------------------------------------------------------------

// GetGroupsRsp

// repeated .resource.Group groups = 1;
inline int GetGroupsRsp::groups_size() const {
  return groups_.size();
}
inline void GetGroupsRsp::clear_groups() {
  groups_.Clear();
}
inline ::resource::Group* GetGroupsRsp::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetGroupsRsp.groups)
  return groups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::Group >*
GetGroupsRsp::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetGroupsRsp.groups)
  return &groups_;
}
inline const ::resource::Group& GetGroupsRsp::groups(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetGroupsRsp.groups)
  return groups_.Get(index);
}
inline ::resource::Group* GetGroupsRsp::add_groups() {
  // @@protoc_insertion_point(field_add:resource.GetGroupsRsp.groups)
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::Group >&
GetGroupsRsp::groups() const {
  // @@protoc_insertion_point(field_list:resource.GetGroupsRsp.groups)
  return groups_;
}

// -------------------------------------------------------------------

// DeleteGroupRqst

// string group = 1;
inline void DeleteGroupRqst::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteGroupRqst::group() const {
  // @@protoc_insertion_point(field_get:resource.DeleteGroupRqst.group)
  return group_.GetNoArena();
}
inline void DeleteGroupRqst::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.DeleteGroupRqst.group)
}
#if LANG_CXX11
inline void DeleteGroupRqst::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteGroupRqst.group)
}
#endif
inline void DeleteGroupRqst::set_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.DeleteGroupRqst.group)
}
inline void DeleteGroupRqst::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteGroupRqst.group)
}
inline ::std::string* DeleteGroupRqst::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:resource.DeleteGroupRqst.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteGroupRqst::release_group() {
  // @@protoc_insertion_point(field_release:resource.DeleteGroupRqst.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteGroupRqst::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteGroupRqst.group)
}

// -------------------------------------------------------------------

// DeleteGroupRsp

// bool result = 1;
inline void DeleteGroupRsp::clear_result() {
  result_ = false;
}
inline bool DeleteGroupRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeleteGroupRsp.result)
  return result_;
}
inline void DeleteGroupRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.DeleteGroupRsp.result)
}

// -------------------------------------------------------------------

// AddGroupMemberAccountRqst

// string groupId = 1;
inline void AddGroupMemberAccountRqst::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddGroupMemberAccountRqst::groupid() const {
  // @@protoc_insertion_point(field_get:resource.AddGroupMemberAccountRqst.groupId)
  return groupid_.GetNoArena();
}
inline void AddGroupMemberAccountRqst::set_groupid(const ::std::string& value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddGroupMemberAccountRqst.groupId)
}
#if LANG_CXX11
inline void AddGroupMemberAccountRqst::set_groupid(::std::string&& value) {
  
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddGroupMemberAccountRqst.groupId)
}
#endif
inline void AddGroupMemberAccountRqst::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddGroupMemberAccountRqst.groupId)
}
inline void AddGroupMemberAccountRqst::set_groupid(const char* value, size_t size) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddGroupMemberAccountRqst.groupId)
}
inline ::std::string* AddGroupMemberAccountRqst::mutable_groupid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddGroupMemberAccountRqst.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddGroupMemberAccountRqst::release_groupid() {
  // @@protoc_insertion_point(field_release:resource.AddGroupMemberAccountRqst.groupId)
  
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddGroupMemberAccountRqst::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    
  } else {
    
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddGroupMemberAccountRqst.groupId)
}

// string accountId = 2;
inline void AddGroupMemberAccountRqst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddGroupMemberAccountRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.AddGroupMemberAccountRqst.accountId)
  return accountid_.GetNoArena();
}
inline void AddGroupMemberAccountRqst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddGroupMemberAccountRqst.accountId)
}
#if LANG_CXX11
inline void AddGroupMemberAccountRqst::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddGroupMemberAccountRqst.accountId)
}
#endif
inline void AddGroupMemberAccountRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddGroupMemberAccountRqst.accountId)
}
inline void AddGroupMemberAccountRqst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddGroupMemberAccountRqst.accountId)
}
inline ::std::string* AddGroupMemberAccountRqst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddGroupMemberAccountRqst.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddGroupMemberAccountRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.AddGroupMemberAccountRqst.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddGroupMemberAccountRqst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddGroupMemberAccountRqst.accountId)
}

// -------------------------------------------------------------------

// AddGroupMemberAccountRsp

// bool result = 1;
inline void AddGroupMemberAccountRsp::clear_result() {
  result_ = false;
}
inline bool AddGroupMemberAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddGroupMemberAccountRsp.result)
  return result_;
}
inline void AddGroupMemberAccountRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.AddGroupMemberAccountRsp.result)
}

// -------------------------------------------------------------------

// RemoveGroupMemberAccountRqst

// string groupId = 1;
inline void RemoveGroupMemberAccountRqst::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveGroupMemberAccountRqst::groupid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveGroupMemberAccountRqst.groupId)
  return groupid_.GetNoArena();
}
inline void RemoveGroupMemberAccountRqst::set_groupid(const ::std::string& value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveGroupMemberAccountRqst.groupId)
}
#if LANG_CXX11
inline void RemoveGroupMemberAccountRqst::set_groupid(::std::string&& value) {
  
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveGroupMemberAccountRqst.groupId)
}
#endif
inline void RemoveGroupMemberAccountRqst::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveGroupMemberAccountRqst.groupId)
}
inline void RemoveGroupMemberAccountRqst::set_groupid(const char* value, size_t size) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveGroupMemberAccountRqst.groupId)
}
inline ::std::string* RemoveGroupMemberAccountRqst::mutable_groupid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveGroupMemberAccountRqst.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveGroupMemberAccountRqst::release_groupid() {
  // @@protoc_insertion_point(field_release:resource.RemoveGroupMemberAccountRqst.groupId)
  
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveGroupMemberAccountRqst::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    
  } else {
    
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveGroupMemberAccountRqst.groupId)
}

// string accountId = 2;
inline void RemoveGroupMemberAccountRqst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveGroupMemberAccountRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveGroupMemberAccountRqst.accountId)
  return accountid_.GetNoArena();
}
inline void RemoveGroupMemberAccountRqst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveGroupMemberAccountRqst.accountId)
}
#if LANG_CXX11
inline void RemoveGroupMemberAccountRqst::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveGroupMemberAccountRqst.accountId)
}
#endif
inline void RemoveGroupMemberAccountRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveGroupMemberAccountRqst.accountId)
}
inline void RemoveGroupMemberAccountRqst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveGroupMemberAccountRqst.accountId)
}
inline ::std::string* RemoveGroupMemberAccountRqst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveGroupMemberAccountRqst.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveGroupMemberAccountRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.RemoveGroupMemberAccountRqst.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveGroupMemberAccountRqst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveGroupMemberAccountRqst.accountId)
}

// -------------------------------------------------------------------

// RemoveGroupMemberAccountRsp

// bool result = 1;
inline void RemoveGroupMemberAccountRsp::clear_result() {
  result_ = false;
}
inline bool RemoveGroupMemberAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveGroupMemberAccountRsp.result)
  return result_;
}
inline void RemoveGroupMemberAccountRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemoveGroupMemberAccountRsp.result)
}

// -------------------------------------------------------------------

// Organization

// string id = 1;
inline void Organization::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Organization::id() const {
  // @@protoc_insertion_point(field_get:resource.Organization.id)
  return id_.GetNoArena();
}
inline void Organization::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Organization.id)
}
#if LANG_CXX11
inline void Organization::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Organization.id)
}
#endif
inline void Organization::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Organization.id)
}
inline void Organization::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.id)
}
inline ::std::string* Organization::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.Organization.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organization::release_id() {
  // @@protoc_insertion_point(field_release:resource.Organization.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organization::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.Organization.id)
}

// string domain = 2;
inline void Organization::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Organization::domain() const {
  // @@protoc_insertion_point(field_get:resource.Organization.domain)
  return domain_.GetNoArena();
}
inline void Organization::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Organization.domain)
}
#if LANG_CXX11
inline void Organization::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Organization.domain)
}
#endif
inline void Organization::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Organization.domain)
}
inline void Organization::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.domain)
}
inline ::std::string* Organization::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:resource.Organization.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organization::release_domain() {
  // @@protoc_insertion_point(field_release:resource.Organization.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organization::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:resource.Organization.domain)
}

// string name = 3;
inline void Organization::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Organization::name() const {
  // @@protoc_insertion_point(field_get:resource.Organization.name)
  return name_.GetNoArena();
}
inline void Organization::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Organization.name)
}
#if LANG_CXX11
inline void Organization::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Organization.name)
}
#endif
inline void Organization::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Organization.name)
}
inline void Organization::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.name)
}
inline ::std::string* Organization::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:resource.Organization.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organization::release_name() {
  // @@protoc_insertion_point(field_release:resource.Organization.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organization::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:resource.Organization.name)
}

// string email = 4;
inline void Organization::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Organization::email() const {
  // @@protoc_insertion_point(field_get:resource.Organization.email)
  return email_.GetNoArena();
}
inline void Organization::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Organization.email)
}
#if LANG_CXX11
inline void Organization::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Organization.email)
}
#endif
inline void Organization::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Organization.email)
}
inline void Organization::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.email)
}
inline ::std::string* Organization::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:resource.Organization.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organization::release_email() {
  // @@protoc_insertion_point(field_release:resource.Organization.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organization::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:resource.Organization.email)
}

// string icon = 5;
inline void Organization::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Organization::icon() const {
  // @@protoc_insertion_point(field_get:resource.Organization.icon)
  return icon_.GetNoArena();
}
inline void Organization::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Organization.icon)
}
#if LANG_CXX11
inline void Organization::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Organization.icon)
}
#endif
inline void Organization::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Organization.icon)
}
inline void Organization::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.icon)
}
inline ::std::string* Organization::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:resource.Organization.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organization::release_icon() {
  // @@protoc_insertion_point(field_release:resource.Organization.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organization::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:resource.Organization.icon)
}

// string description = 6;
inline void Organization::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Organization::description() const {
  // @@protoc_insertion_point(field_get:resource.Organization.description)
  return description_.GetNoArena();
}
inline void Organization::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Organization.description)
}
#if LANG_CXX11
inline void Organization::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Organization.description)
}
#endif
inline void Organization::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Organization.description)
}
inline void Organization::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.description)
}
inline ::std::string* Organization::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:resource.Organization.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Organization::release_description() {
  // @@protoc_insertion_point(field_release:resource.Organization.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Organization::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:resource.Organization.description)
}

// repeated string accounts = 7;
inline int Organization::accounts_size() const {
  return accounts_.size();
}
inline void Organization::clear_accounts() {
  accounts_.Clear();
}
inline const ::std::string& Organization::accounts(int index) const {
  // @@protoc_insertion_point(field_get:resource.Organization.accounts)
  return accounts_.Get(index);
}
inline ::std::string* Organization::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Organization.accounts)
  return accounts_.Mutable(index);
}
inline void Organization::set_accounts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.accounts)
  accounts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Organization::set_accounts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.accounts)
  accounts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Organization::set_accounts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Organization.accounts)
}
inline void Organization::set_accounts(int index, const char* value, size_t size) {
  accounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.accounts)
}
inline ::std::string* Organization::add_accounts() {
  // @@protoc_insertion_point(field_add_mutable:resource.Organization.accounts)
  return accounts_.Add();
}
inline void Organization::add_accounts(const ::std::string& value) {
  accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Organization.accounts)
}
#if LANG_CXX11
inline void Organization::add_accounts(::std::string&& value) {
  accounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Organization.accounts)
}
#endif
inline void Organization::add_accounts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Organization.accounts)
}
inline void Organization::add_accounts(const char* value, size_t size) {
  accounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Organization.accounts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Organization::accounts() const {
  // @@protoc_insertion_point(field_list:resource.Organization.accounts)
  return accounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Organization::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:resource.Organization.accounts)
  return &accounts_;
}

// repeated string groups = 8;
inline int Organization::groups_size() const {
  return groups_.size();
}
inline void Organization::clear_groups() {
  groups_.Clear();
}
inline const ::std::string& Organization::groups(int index) const {
  // @@protoc_insertion_point(field_get:resource.Organization.groups)
  return groups_.Get(index);
}
inline ::std::string* Organization::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Organization.groups)
  return groups_.Mutable(index);
}
inline void Organization::set_groups(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.groups)
  groups_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Organization::set_groups(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.groups)
  groups_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Organization::set_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Organization.groups)
}
inline void Organization::set_groups(int index, const char* value, size_t size) {
  groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.groups)
}
inline ::std::string* Organization::add_groups() {
  // @@protoc_insertion_point(field_add_mutable:resource.Organization.groups)
  return groups_.Add();
}
inline void Organization::add_groups(const ::std::string& value) {
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Organization.groups)
}
#if LANG_CXX11
inline void Organization::add_groups(::std::string&& value) {
  groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Organization.groups)
}
#endif
inline void Organization::add_groups(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Organization.groups)
}
inline void Organization::add_groups(const char* value, size_t size) {
  groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Organization.groups)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Organization::groups() const {
  // @@protoc_insertion_point(field_list:resource.Organization.groups)
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Organization::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:resource.Organization.groups)
  return &groups_;
}

// repeated string roles = 9;
inline int Organization::roles_size() const {
  return roles_.size();
}
inline void Organization::clear_roles() {
  roles_.Clear();
}
inline const ::std::string& Organization::roles(int index) const {
  // @@protoc_insertion_point(field_get:resource.Organization.roles)
  return roles_.Get(index);
}
inline ::std::string* Organization::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Organization.roles)
  return roles_.Mutable(index);
}
inline void Organization::set_roles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.roles)
  roles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Organization::set_roles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.roles)
  roles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Organization::set_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Organization.roles)
}
inline void Organization::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.roles)
}
inline ::std::string* Organization::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:resource.Organization.roles)
  return roles_.Add();
}
inline void Organization::add_roles(const ::std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Organization.roles)
}
#if LANG_CXX11
inline void Organization::add_roles(::std::string&& value) {
  roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Organization.roles)
}
#endif
inline void Organization::add_roles(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Organization.roles)
}
inline void Organization::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Organization.roles)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Organization::roles() const {
  // @@protoc_insertion_point(field_list:resource.Organization.roles)
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Organization::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:resource.Organization.roles)
  return &roles_;
}

// repeated string applications = 10;
inline int Organization::applications_size() const {
  return applications_.size();
}
inline void Organization::clear_applications() {
  applications_.Clear();
}
inline const ::std::string& Organization::applications(int index) const {
  // @@protoc_insertion_point(field_get:resource.Organization.applications)
  return applications_.Get(index);
}
inline ::std::string* Organization::mutable_applications(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Organization.applications)
  return applications_.Mutable(index);
}
inline void Organization::set_applications(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.applications)
  applications_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Organization::set_applications(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Organization.applications)
  applications_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Organization::set_applications(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  applications_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Organization.applications)
}
inline void Organization::set_applications(int index, const char* value, size_t size) {
  applications_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Organization.applications)
}
inline ::std::string* Organization::add_applications() {
  // @@protoc_insertion_point(field_add_mutable:resource.Organization.applications)
  return applications_.Add();
}
inline void Organization::add_applications(const ::std::string& value) {
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Organization.applications)
}
#if LANG_CXX11
inline void Organization::add_applications(::std::string&& value) {
  applications_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Organization.applications)
}
#endif
inline void Organization::add_applications(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  applications_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Organization.applications)
}
inline void Organization::add_applications(const char* value, size_t size) {
  applications_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Organization.applications)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Organization::applications() const {
  // @@protoc_insertion_point(field_list:resource.Organization.applications)
  return applications_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Organization::mutable_applications() {
  // @@protoc_insertion_point(field_mutable_list:resource.Organization.applications)
  return &applications_;
}

// -------------------------------------------------------------------

// CreateOrganizationRqst

// .resource.Organization organization = 1;
inline bool CreateOrganizationRqst::has_organization() const {
  return this != internal_default_instance() && organization_ != NULL;
}
inline void CreateOrganizationRqst::clear_organization() {
  if (GetArenaNoVirtual() == NULL && organization_ != NULL) {
    delete organization_;
  }
  organization_ = NULL;
}
inline const ::resource::Organization& CreateOrganizationRqst::_internal_organization() const {
  return *organization_;
}
inline const ::resource::Organization& CreateOrganizationRqst::organization() const {
  const ::resource::Organization* p = organization_;
  // @@protoc_insertion_point(field_get:resource.CreateOrganizationRqst.organization)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Organization*>(
      &::resource::_Organization_default_instance_);
}
inline ::resource::Organization* CreateOrganizationRqst::release_organization() {
  // @@protoc_insertion_point(field_release:resource.CreateOrganizationRqst.organization)
  
  ::resource::Organization* temp = organization_;
  organization_ = NULL;
  return temp;
}
inline ::resource::Organization* CreateOrganizationRqst::mutable_organization() {
  
  if (organization_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Organization>(GetArenaNoVirtual());
    organization_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.CreateOrganizationRqst.organization)
  return organization_;
}
inline void CreateOrganizationRqst::set_allocated_organization(::resource::Organization* organization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete organization_;
  }
  if (organization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      organization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, organization, submessage_arena);
    }
    
  } else {
    
  }
  organization_ = organization;
  // @@protoc_insertion_point(field_set_allocated:resource.CreateOrganizationRqst.organization)
}

// -------------------------------------------------------------------

// CreateOrganizationRsp

// bool result = 1;
inline void CreateOrganizationRsp::clear_result() {
  result_ = false;
}
inline bool CreateOrganizationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.CreateOrganizationRsp.result)
  return result_;
}
inline void CreateOrganizationRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.CreateOrganizationRsp.result)
}

// -------------------------------------------------------------------

// UpdateOrganizationRqst

// string organizationId = 1;
inline void UpdateOrganizationRqst::clear_organizationid() {
  organizationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateOrganizationRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.UpdateOrganizationRqst.organizationId)
  return organizationid_.GetNoArena();
}
inline void UpdateOrganizationRqst::set_organizationid(const ::std::string& value) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.UpdateOrganizationRqst.organizationId)
}
#if LANG_CXX11
inline void UpdateOrganizationRqst::set_organizationid(::std::string&& value) {
  
  organizationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.UpdateOrganizationRqst.organizationId)
}
#endif
inline void UpdateOrganizationRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.UpdateOrganizationRqst.organizationId)
}
inline void UpdateOrganizationRqst::set_organizationid(const char* value, size_t size) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.UpdateOrganizationRqst.organizationId)
}
inline ::std::string* UpdateOrganizationRqst::mutable_organizationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.UpdateOrganizationRqst.organizationId)
  return organizationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateOrganizationRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.UpdateOrganizationRqst.organizationId)
  
  return organizationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateOrganizationRqst::set_allocated_organizationid(::std::string* organizationid) {
  if (organizationid != NULL) {
    
  } else {
    
  }
  organizationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organizationid);
  // @@protoc_insertion_point(field_set_allocated:resource.UpdateOrganizationRqst.organizationId)
}

// string values = 2;
inline void UpdateOrganizationRqst::clear_values() {
  values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateOrganizationRqst::values() const {
  // @@protoc_insertion_point(field_get:resource.UpdateOrganizationRqst.values)
  return values_.GetNoArena();
}
inline void UpdateOrganizationRqst::set_values(const ::std::string& value) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.UpdateOrganizationRqst.values)
}
#if LANG_CXX11
inline void UpdateOrganizationRqst::set_values(::std::string&& value) {
  
  values_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.UpdateOrganizationRqst.values)
}
#endif
inline void UpdateOrganizationRqst::set_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.UpdateOrganizationRqst.values)
}
inline void UpdateOrganizationRqst::set_values(const char* value, size_t size) {
  
  values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.UpdateOrganizationRqst.values)
}
inline ::std::string* UpdateOrganizationRqst::mutable_values() {
  
  // @@protoc_insertion_point(field_mutable:resource.UpdateOrganizationRqst.values)
  return values_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateOrganizationRqst::release_values() {
  // @@protoc_insertion_point(field_release:resource.UpdateOrganizationRqst.values)
  
  return values_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateOrganizationRqst::set_allocated_values(::std::string* values) {
  if (values != NULL) {
    
  } else {
    
  }
  values_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values);
  // @@protoc_insertion_point(field_set_allocated:resource.UpdateOrganizationRqst.values)
}

// -------------------------------------------------------------------

// UpdateOrganizationRsp

// bool result = 1;
inline void UpdateOrganizationRsp::clear_result() {
  result_ = false;
}
inline bool UpdateOrganizationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.UpdateOrganizationRsp.result)
  return result_;
}
inline void UpdateOrganizationRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.UpdateOrganizationRsp.result)
}

// -------------------------------------------------------------------

// GetOrganizationsRqst

// string query = 1;
inline void GetOrganizationsRqst::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOrganizationsRqst::query() const {
  // @@protoc_insertion_point(field_get:resource.GetOrganizationsRqst.query)
  return query_.GetNoArena();
}
inline void GetOrganizationsRqst::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetOrganizationsRqst.query)
}
#if LANG_CXX11
inline void GetOrganizationsRqst::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetOrganizationsRqst.query)
}
#endif
inline void GetOrganizationsRqst::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetOrganizationsRqst.query)
}
inline void GetOrganizationsRqst::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetOrganizationsRqst.query)
}
inline ::std::string* GetOrganizationsRqst::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetOrganizationsRqst.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOrganizationsRqst::release_query() {
  // @@protoc_insertion_point(field_release:resource.GetOrganizationsRqst.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOrganizationsRqst::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:resource.GetOrganizationsRqst.query)
}

// string options = 2;
inline void GetOrganizationsRqst::clear_options() {
  options_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOrganizationsRqst::options() const {
  // @@protoc_insertion_point(field_get:resource.GetOrganizationsRqst.options)
  return options_.GetNoArena();
}
inline void GetOrganizationsRqst::set_options(const ::std::string& value) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetOrganizationsRqst.options)
}
#if LANG_CXX11
inline void GetOrganizationsRqst::set_options(::std::string&& value) {
  
  options_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetOrganizationsRqst.options)
}
#endif
inline void GetOrganizationsRqst::set_options(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetOrganizationsRqst.options)
}
inline void GetOrganizationsRqst::set_options(const char* value, size_t size) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetOrganizationsRqst.options)
}
inline ::std::string* GetOrganizationsRqst::mutable_options() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetOrganizationsRqst.options)
  return options_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOrganizationsRqst::release_options() {
  // @@protoc_insertion_point(field_release:resource.GetOrganizationsRqst.options)
  
  return options_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOrganizationsRqst::set_allocated_options(::std::string* options) {
  if (options != NULL) {
    
  } else {
    
  }
  options_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), options);
  // @@protoc_insertion_point(field_set_allocated:resource.GetOrganizationsRqst.options)
}

// -------------------------------------------------------------------

// GetOrganizationsRsp

// repeated .resource.Organization organizations = 1;
inline int GetOrganizationsRsp::organizations_size() const {
  return organizations_.size();
}
inline void GetOrganizationsRsp::clear_organizations() {
  organizations_.Clear();
}
inline ::resource::Organization* GetOrganizationsRsp::mutable_organizations(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetOrganizationsRsp.organizations)
  return organizations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::Organization >*
GetOrganizationsRsp::mutable_organizations() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetOrganizationsRsp.organizations)
  return &organizations_;
}
inline const ::resource::Organization& GetOrganizationsRsp::organizations(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetOrganizationsRsp.organizations)
  return organizations_.Get(index);
}
inline ::resource::Organization* GetOrganizationsRsp::add_organizations() {
  // @@protoc_insertion_point(field_add:resource.GetOrganizationsRsp.organizations)
  return organizations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::Organization >&
GetOrganizationsRsp::organizations() const {
  // @@protoc_insertion_point(field_list:resource.GetOrganizationsRsp.organizations)
  return organizations_;
}

// -------------------------------------------------------------------

// AddOrganizationAccountRqst

// string organizationId = 1;
inline void AddOrganizationAccountRqst::clear_organizationid() {
  organizationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddOrganizationAccountRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationAccountRqst.organizationId)
  return organizationid_.GetNoArena();
}
inline void AddOrganizationAccountRqst::set_organizationid(const ::std::string& value) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationAccountRqst.organizationId)
}
#if LANG_CXX11
inline void AddOrganizationAccountRqst::set_organizationid(::std::string&& value) {
  
  organizationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationAccountRqst.organizationId)
}
#endif
inline void AddOrganizationAccountRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationAccountRqst.organizationId)
}
inline void AddOrganizationAccountRqst::set_organizationid(const char* value, size_t size) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationAccountRqst.organizationId)
}
inline ::std::string* AddOrganizationAccountRqst::mutable_organizationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationAccountRqst.organizationId)
  return organizationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddOrganizationAccountRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationAccountRqst.organizationId)
  
  return organizationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddOrganizationAccountRqst::set_allocated_organizationid(::std::string* organizationid) {
  if (organizationid != NULL) {
    
  } else {
    
  }
  organizationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organizationid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationAccountRqst.organizationId)
}

// string accountId = 2;
inline void AddOrganizationAccountRqst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddOrganizationAccountRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationAccountRqst.accountId)
  return accountid_.GetNoArena();
}
inline void AddOrganizationAccountRqst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationAccountRqst.accountId)
}
#if LANG_CXX11
inline void AddOrganizationAccountRqst::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationAccountRqst.accountId)
}
#endif
inline void AddOrganizationAccountRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationAccountRqst.accountId)
}
inline void AddOrganizationAccountRqst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationAccountRqst.accountId)
}
inline ::std::string* AddOrganizationAccountRqst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationAccountRqst.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddOrganizationAccountRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationAccountRqst.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddOrganizationAccountRqst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationAccountRqst.accountId)
}

// -------------------------------------------------------------------

// AddOrganizationAccountRsp

// bool result = 1;
inline void AddOrganizationAccountRsp::clear_result() {
  result_ = false;
}
inline bool AddOrganizationAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationAccountRsp.result)
  return result_;
}
inline void AddOrganizationAccountRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.AddOrganizationAccountRsp.result)
}

// -------------------------------------------------------------------

// AddOrganizationGroupRqst

// string organizationId = 1;
inline void AddOrganizationGroupRqst::clear_organizationid() {
  organizationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddOrganizationGroupRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationGroupRqst.organizationId)
  return organizationid_.GetNoArena();
}
inline void AddOrganizationGroupRqst::set_organizationid(const ::std::string& value) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationGroupRqst.organizationId)
}
#if LANG_CXX11
inline void AddOrganizationGroupRqst::set_organizationid(::std::string&& value) {
  
  organizationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationGroupRqst.organizationId)
}
#endif
inline void AddOrganizationGroupRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationGroupRqst.organizationId)
}
inline void AddOrganizationGroupRqst::set_organizationid(const char* value, size_t size) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationGroupRqst.organizationId)
}
inline ::std::string* AddOrganizationGroupRqst::mutable_organizationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationGroupRqst.organizationId)
  return organizationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddOrganizationGroupRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationGroupRqst.organizationId)
  
  return organizationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddOrganizationGroupRqst::set_allocated_organizationid(::std::string* organizationid) {
  if (organizationid != NULL) {
    
  } else {
    
  }
  organizationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organizationid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationGroupRqst.organizationId)
}

// string groupId = 2;
inline void AddOrganizationGroupRqst::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddOrganizationGroupRqst::groupid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationGroupRqst.groupId)
  return groupid_.GetNoArena();
}
inline void AddOrganizationGroupRqst::set_groupid(const ::std::string& value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationGroupRqst.groupId)
}
#if LANG_CXX11
inline void AddOrganizationGroupRqst::set_groupid(::std::string&& value) {
  
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationGroupRqst.groupId)
}
#endif
inline void AddOrganizationGroupRqst::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationGroupRqst.groupId)
}
inline void AddOrganizationGroupRqst::set_groupid(const char* value, size_t size) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationGroupRqst.groupId)
}
inline ::std::string* AddOrganizationGroupRqst::mutable_groupid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationGroupRqst.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddOrganizationGroupRqst::release_groupid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationGroupRqst.groupId)
  
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddOrganizationGroupRqst::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    
  } else {
    
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationGroupRqst.groupId)
}

// -------------------------------------------------------------------

// AddOrganizationGroupRsp

// bool result = 1;
inline void AddOrganizationGroupRsp::clear_result() {
  result_ = false;
}
inline bool AddOrganizationGroupRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationGroupRsp.result)
  return result_;
}
inline void AddOrganizationGroupRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.AddOrganizationGroupRsp.result)
}

// -------------------------------------------------------------------

// AddOrganizationRoleRqst

// string organizationId = 1;
inline void AddOrganizationRoleRqst::clear_organizationid() {
  organizationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddOrganizationRoleRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationRoleRqst.organizationId)
  return organizationid_.GetNoArena();
}
inline void AddOrganizationRoleRqst::set_organizationid(const ::std::string& value) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationRoleRqst.organizationId)
}
#if LANG_CXX11
inline void AddOrganizationRoleRqst::set_organizationid(::std::string&& value) {
  
  organizationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationRoleRqst.organizationId)
}
#endif
inline void AddOrganizationRoleRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationRoleRqst.organizationId)
}
inline void AddOrganizationRoleRqst::set_organizationid(const char* value, size_t size) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationRoleRqst.organizationId)
}
inline ::std::string* AddOrganizationRoleRqst::mutable_organizationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationRoleRqst.organizationId)
  return organizationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddOrganizationRoleRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationRoleRqst.organizationId)
  
  return organizationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddOrganizationRoleRqst::set_allocated_organizationid(::std::string* organizationid) {
  if (organizationid != NULL) {
    
  } else {
    
  }
  organizationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organizationid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationRoleRqst.organizationId)
}

// string roleId = 2;
inline void AddOrganizationRoleRqst::clear_roleid() {
  roleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddOrganizationRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationRoleRqst.roleId)
  return roleid_.GetNoArena();
}
inline void AddOrganizationRoleRqst::set_roleid(const ::std::string& value) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationRoleRqst.roleId)
}
#if LANG_CXX11
inline void AddOrganizationRoleRqst::set_roleid(::std::string&& value) {
  
  roleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationRoleRqst.roleId)
}
#endif
inline void AddOrganizationRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationRoleRqst.roleId)
}
inline void AddOrganizationRoleRqst::set_roleid(const char* value, size_t size) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationRoleRqst.roleId)
}
inline ::std::string* AddOrganizationRoleRqst::mutable_roleid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationRoleRqst.roleId)
  return roleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddOrganizationRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationRoleRqst.roleId)
  
  return roleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddOrganizationRoleRqst::set_allocated_roleid(::std::string* roleid) {
  if (roleid != NULL) {
    
  } else {
    
  }
  roleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roleid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationRoleRqst.roleId)
}

// -------------------------------------------------------------------

// AddOrganizationRoleRsp

// bool result = 1;
inline void AddOrganizationRoleRsp::clear_result() {
  result_ = false;
}
inline bool AddOrganizationRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationRoleRsp.result)
  return result_;
}
inline void AddOrganizationRoleRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.AddOrganizationRoleRsp.result)
}

// -------------------------------------------------------------------

// AddOrganizationApplicationRqst

// string organizationId = 1;
inline void AddOrganizationApplicationRqst::clear_organizationid() {
  organizationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddOrganizationApplicationRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationApplicationRqst.organizationId)
  return organizationid_.GetNoArena();
}
inline void AddOrganizationApplicationRqst::set_organizationid(const ::std::string& value) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationApplicationRqst.organizationId)
}
#if LANG_CXX11
inline void AddOrganizationApplicationRqst::set_organizationid(::std::string&& value) {
  
  organizationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationApplicationRqst.organizationId)
}
#endif
inline void AddOrganizationApplicationRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationApplicationRqst.organizationId)
}
inline void AddOrganizationApplicationRqst::set_organizationid(const char* value, size_t size) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationApplicationRqst.organizationId)
}
inline ::std::string* AddOrganizationApplicationRqst::mutable_organizationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationApplicationRqst.organizationId)
  return organizationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddOrganizationApplicationRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationApplicationRqst.organizationId)
  
  return organizationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddOrganizationApplicationRqst::set_allocated_organizationid(::std::string* organizationid) {
  if (organizationid != NULL) {
    
  } else {
    
  }
  organizationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organizationid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationApplicationRqst.organizationId)
}

// string applicationId = 2;
inline void AddOrganizationApplicationRqst::clear_applicationid() {
  applicationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddOrganizationApplicationRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationApplicationRqst.applicationId)
  return applicationid_.GetNoArena();
}
inline void AddOrganizationApplicationRqst::set_applicationid(const ::std::string& value) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddOrganizationApplicationRqst.applicationId)
}
#if LANG_CXX11
inline void AddOrganizationApplicationRqst::set_applicationid(::std::string&& value) {
  
  applicationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddOrganizationApplicationRqst.applicationId)
}
#endif
inline void AddOrganizationApplicationRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddOrganizationApplicationRqst.applicationId)
}
inline void AddOrganizationApplicationRqst::set_applicationid(const char* value, size_t size) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddOrganizationApplicationRqst.applicationId)
}
inline ::std::string* AddOrganizationApplicationRqst::mutable_applicationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddOrganizationApplicationRqst.applicationId)
  return applicationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddOrganizationApplicationRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:resource.AddOrganizationApplicationRqst.applicationId)
  
  return applicationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddOrganizationApplicationRqst::set_allocated_applicationid(::std::string* applicationid) {
  if (applicationid != NULL) {
    
  } else {
    
  }
  applicationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applicationid);
  // @@protoc_insertion_point(field_set_allocated:resource.AddOrganizationApplicationRqst.applicationId)
}

// -------------------------------------------------------------------

// AddOrganizationApplicationRsp

// bool result = 1;
inline void AddOrganizationApplicationRsp::clear_result() {
  result_ = false;
}
inline bool AddOrganizationApplicationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddOrganizationApplicationRsp.result)
  return result_;
}
inline void AddOrganizationApplicationRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.AddOrganizationApplicationRsp.result)
}

// -------------------------------------------------------------------

// RemoveOrganizationGroupRqst

// string organizationId = 1;
inline void RemoveOrganizationGroupRqst::clear_organizationid() {
  organizationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveOrganizationGroupRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationGroupRqst.organizationId)
  return organizationid_.GetNoArena();
}
inline void RemoveOrganizationGroupRqst::set_organizationid(const ::std::string& value) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationGroupRqst.organizationId)
}
#if LANG_CXX11
inline void RemoveOrganizationGroupRqst::set_organizationid(::std::string&& value) {
  
  organizationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationGroupRqst.organizationId)
}
#endif
inline void RemoveOrganizationGroupRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationGroupRqst.organizationId)
}
inline void RemoveOrganizationGroupRqst::set_organizationid(const char* value, size_t size) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationGroupRqst.organizationId)
}
inline ::std::string* RemoveOrganizationGroupRqst::mutable_organizationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationGroupRqst.organizationId)
  return organizationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveOrganizationGroupRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationGroupRqst.organizationId)
  
  return organizationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveOrganizationGroupRqst::set_allocated_organizationid(::std::string* organizationid) {
  if (organizationid != NULL) {
    
  } else {
    
  }
  organizationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organizationid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationGroupRqst.organizationId)
}

// string groupId = 2;
inline void RemoveOrganizationGroupRqst::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveOrganizationGroupRqst::groupid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationGroupRqst.groupId)
  return groupid_.GetNoArena();
}
inline void RemoveOrganizationGroupRqst::set_groupid(const ::std::string& value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationGroupRqst.groupId)
}
#if LANG_CXX11
inline void RemoveOrganizationGroupRqst::set_groupid(::std::string&& value) {
  
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationGroupRqst.groupId)
}
#endif
inline void RemoveOrganizationGroupRqst::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationGroupRqst.groupId)
}
inline void RemoveOrganizationGroupRqst::set_groupid(const char* value, size_t size) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationGroupRqst.groupId)
}
inline ::std::string* RemoveOrganizationGroupRqst::mutable_groupid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationGroupRqst.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveOrganizationGroupRqst::release_groupid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationGroupRqst.groupId)
  
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveOrganizationGroupRqst::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    
  } else {
    
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationGroupRqst.groupId)
}

// -------------------------------------------------------------------

// RemoveOrganizationGroupRsp

// bool result = 1;
inline void RemoveOrganizationGroupRsp::clear_result() {
  result_ = false;
}
inline bool RemoveOrganizationGroupRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationGroupRsp.result)
  return result_;
}
inline void RemoveOrganizationGroupRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationGroupRsp.result)
}

// -------------------------------------------------------------------

// RemoveOrganizationRoleRqst

// string organizationId = 1;
inline void RemoveOrganizationRoleRqst::clear_organizationid() {
  organizationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveOrganizationRoleRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationRoleRqst.organizationId)
  return organizationid_.GetNoArena();
}
inline void RemoveOrganizationRoleRqst::set_organizationid(const ::std::string& value) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationRoleRqst.organizationId)
}
#if LANG_CXX11
inline void RemoveOrganizationRoleRqst::set_organizationid(::std::string&& value) {
  
  organizationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationRoleRqst.organizationId)
}
#endif
inline void RemoveOrganizationRoleRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationRoleRqst.organizationId)
}
inline void RemoveOrganizationRoleRqst::set_organizationid(const char* value, size_t size) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationRoleRqst.organizationId)
}
inline ::std::string* RemoveOrganizationRoleRqst::mutable_organizationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationRoleRqst.organizationId)
  return organizationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveOrganizationRoleRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationRoleRqst.organizationId)
  
  return organizationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveOrganizationRoleRqst::set_allocated_organizationid(::std::string* organizationid) {
  if (organizationid != NULL) {
    
  } else {
    
  }
  organizationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organizationid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationRoleRqst.organizationId)
}

// string roleId = 2;
inline void RemoveOrganizationRoleRqst::clear_roleid() {
  roleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveOrganizationRoleRqst::roleid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationRoleRqst.roleId)
  return roleid_.GetNoArena();
}
inline void RemoveOrganizationRoleRqst::set_roleid(const ::std::string& value) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationRoleRqst.roleId)
}
#if LANG_CXX11
inline void RemoveOrganizationRoleRqst::set_roleid(::std::string&& value) {
  
  roleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationRoleRqst.roleId)
}
#endif
inline void RemoveOrganizationRoleRqst::set_roleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationRoleRqst.roleId)
}
inline void RemoveOrganizationRoleRqst::set_roleid(const char* value, size_t size) {
  
  roleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationRoleRqst.roleId)
}
inline ::std::string* RemoveOrganizationRoleRqst::mutable_roleid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationRoleRqst.roleId)
  return roleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveOrganizationRoleRqst::release_roleid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationRoleRqst.roleId)
  
  return roleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveOrganizationRoleRqst::set_allocated_roleid(::std::string* roleid) {
  if (roleid != NULL) {
    
  } else {
    
  }
  roleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roleid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationRoleRqst.roleId)
}

// -------------------------------------------------------------------

// RemoveOrganizationRoleRsp

// bool result = 1;
inline void RemoveOrganizationRoleRsp::clear_result() {
  result_ = false;
}
inline bool RemoveOrganizationRoleRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationRoleRsp.result)
  return result_;
}
inline void RemoveOrganizationRoleRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationRoleRsp.result)
}

// -------------------------------------------------------------------

// RemoveOrganizationApplicationRqst

// string organizationId = 1;
inline void RemoveOrganizationApplicationRqst::clear_organizationid() {
  organizationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveOrganizationApplicationRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationApplicationRqst.organizationId)
  return organizationid_.GetNoArena();
}
inline void RemoveOrganizationApplicationRqst::set_organizationid(const ::std::string& value) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationApplicationRqst.organizationId)
}
#if LANG_CXX11
inline void RemoveOrganizationApplicationRqst::set_organizationid(::std::string&& value) {
  
  organizationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationApplicationRqst.organizationId)
}
#endif
inline void RemoveOrganizationApplicationRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationApplicationRqst.organizationId)
}
inline void RemoveOrganizationApplicationRqst::set_organizationid(const char* value, size_t size) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationApplicationRqst.organizationId)
}
inline ::std::string* RemoveOrganizationApplicationRqst::mutable_organizationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationApplicationRqst.organizationId)
  return organizationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveOrganizationApplicationRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationApplicationRqst.organizationId)
  
  return organizationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveOrganizationApplicationRqst::set_allocated_organizationid(::std::string* organizationid) {
  if (organizationid != NULL) {
    
  } else {
    
  }
  organizationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organizationid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationApplicationRqst.organizationId)
}

// string applicationId = 2;
inline void RemoveOrganizationApplicationRqst::clear_applicationid() {
  applicationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveOrganizationApplicationRqst::applicationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationApplicationRqst.applicationId)
  return applicationid_.GetNoArena();
}
inline void RemoveOrganizationApplicationRqst::set_applicationid(const ::std::string& value) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationApplicationRqst.applicationId)
}
#if LANG_CXX11
inline void RemoveOrganizationApplicationRqst::set_applicationid(::std::string&& value) {
  
  applicationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationApplicationRqst.applicationId)
}
#endif
inline void RemoveOrganizationApplicationRqst::set_applicationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationApplicationRqst.applicationId)
}
inline void RemoveOrganizationApplicationRqst::set_applicationid(const char* value, size_t size) {
  
  applicationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationApplicationRqst.applicationId)
}
inline ::std::string* RemoveOrganizationApplicationRqst::mutable_applicationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationApplicationRqst.applicationId)
  return applicationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveOrganizationApplicationRqst::release_applicationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationApplicationRqst.applicationId)
  
  return applicationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveOrganizationApplicationRqst::set_allocated_applicationid(::std::string* applicationid) {
  if (applicationid != NULL) {
    
  } else {
    
  }
  applicationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applicationid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationApplicationRqst.applicationId)
}

// -------------------------------------------------------------------

// RemoveOrganizationApplicationRsp

// bool result = 1;
inline void RemoveOrganizationApplicationRsp::clear_result() {
  result_ = false;
}
inline bool RemoveOrganizationApplicationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationApplicationRsp.result)
  return result_;
}
inline void RemoveOrganizationApplicationRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationApplicationRsp.result)
}

// -------------------------------------------------------------------

// RemoveOrganizationAccountRqst

// string organizationId = 1;
inline void RemoveOrganizationAccountRqst::clear_organizationid() {
  organizationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveOrganizationAccountRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationAccountRqst.organizationId)
  return organizationid_.GetNoArena();
}
inline void RemoveOrganizationAccountRqst::set_organizationid(const ::std::string& value) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationAccountRqst.organizationId)
}
#if LANG_CXX11
inline void RemoveOrganizationAccountRqst::set_organizationid(::std::string&& value) {
  
  organizationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationAccountRqst.organizationId)
}
#endif
inline void RemoveOrganizationAccountRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationAccountRqst.organizationId)
}
inline void RemoveOrganizationAccountRqst::set_organizationid(const char* value, size_t size) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationAccountRqst.organizationId)
}
inline ::std::string* RemoveOrganizationAccountRqst::mutable_organizationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationAccountRqst.organizationId)
  return organizationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveOrganizationAccountRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationAccountRqst.organizationId)
  
  return organizationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveOrganizationAccountRqst::set_allocated_organizationid(::std::string* organizationid) {
  if (organizationid != NULL) {
    
  } else {
    
  }
  organizationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organizationid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationAccountRqst.organizationId)
}

// string accountId = 2;
inline void RemoveOrganizationAccountRqst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveOrganizationAccountRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationAccountRqst.accountId)
  return accountid_.GetNoArena();
}
inline void RemoveOrganizationAccountRqst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationAccountRqst.accountId)
}
#if LANG_CXX11
inline void RemoveOrganizationAccountRqst::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveOrganizationAccountRqst.accountId)
}
#endif
inline void RemoveOrganizationAccountRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveOrganizationAccountRqst.accountId)
}
inline void RemoveOrganizationAccountRqst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveOrganizationAccountRqst.accountId)
}
inline ::std::string* RemoveOrganizationAccountRqst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveOrganizationAccountRqst.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveOrganizationAccountRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.RemoveOrganizationAccountRqst.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveOrganizationAccountRqst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveOrganizationAccountRqst.accountId)
}

// -------------------------------------------------------------------

// RemoveOrganizationAccountRsp

// bool result = 1;
inline void RemoveOrganizationAccountRsp::clear_result() {
  result_ = false;
}
inline bool RemoveOrganizationAccountRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemoveOrganizationAccountRsp.result)
  return result_;
}
inline void RemoveOrganizationAccountRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemoveOrganizationAccountRsp.result)
}

// -------------------------------------------------------------------

// IsOrgnanizationMemberRqst

// string organizationId = 1;
inline void IsOrgnanizationMemberRqst::clear_organizationid() {
  organizationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IsOrgnanizationMemberRqst::organizationid() const {
  // @@protoc_insertion_point(field_get:resource.IsOrgnanizationMemberRqst.organizationId)
  return organizationid_.GetNoArena();
}
inline void IsOrgnanizationMemberRqst::set_organizationid(const ::std::string& value) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.IsOrgnanizationMemberRqst.organizationId)
}
#if LANG_CXX11
inline void IsOrgnanizationMemberRqst::set_organizationid(::std::string&& value) {
  
  organizationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.IsOrgnanizationMemberRqst.organizationId)
}
#endif
inline void IsOrgnanizationMemberRqst::set_organizationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.IsOrgnanizationMemberRqst.organizationId)
}
inline void IsOrgnanizationMemberRqst::set_organizationid(const char* value, size_t size) {
  
  organizationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.IsOrgnanizationMemberRqst.organizationId)
}
inline ::std::string* IsOrgnanizationMemberRqst::mutable_organizationid() {
  
  // @@protoc_insertion_point(field_mutable:resource.IsOrgnanizationMemberRqst.organizationId)
  return organizationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IsOrgnanizationMemberRqst::release_organizationid() {
  // @@protoc_insertion_point(field_release:resource.IsOrgnanizationMemberRqst.organizationId)
  
  return organizationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IsOrgnanizationMemberRqst::set_allocated_organizationid(::std::string* organizationid) {
  if (organizationid != NULL) {
    
  } else {
    
  }
  organizationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organizationid);
  // @@protoc_insertion_point(field_set_allocated:resource.IsOrgnanizationMemberRqst.organizationId)
}

// string accountId = 2;
inline void IsOrgnanizationMemberRqst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IsOrgnanizationMemberRqst::accountid() const {
  // @@protoc_insertion_point(field_get:resource.IsOrgnanizationMemberRqst.accountId)
  return accountid_.GetNoArena();
}
inline void IsOrgnanizationMemberRqst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.IsOrgnanizationMemberRqst.accountId)
}
#if LANG_CXX11
inline void IsOrgnanizationMemberRqst::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.IsOrgnanizationMemberRqst.accountId)
}
#endif
inline void IsOrgnanizationMemberRqst::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.IsOrgnanizationMemberRqst.accountId)
}
inline void IsOrgnanizationMemberRqst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.IsOrgnanizationMemberRqst.accountId)
}
inline ::std::string* IsOrgnanizationMemberRqst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.IsOrgnanizationMemberRqst.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IsOrgnanizationMemberRqst::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.IsOrgnanizationMemberRqst.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IsOrgnanizationMemberRqst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.IsOrgnanizationMemberRqst.accountId)
}

// -------------------------------------------------------------------

// IsOrgnanizationMemberRsp

// bool result = 1;
inline void IsOrgnanizationMemberRsp::clear_result() {
  result_ = false;
}
inline bool IsOrgnanizationMemberRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.IsOrgnanizationMemberRsp.result)
  return result_;
}
inline void IsOrgnanizationMemberRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.IsOrgnanizationMemberRsp.result)
}

// -------------------------------------------------------------------

// DeleteOrganizationRqst

// string organization = 1;
inline void DeleteOrganizationRqst::clear_organization() {
  organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteOrganizationRqst::organization() const {
  // @@protoc_insertion_point(field_get:resource.DeleteOrganizationRqst.organization)
  return organization_.GetNoArena();
}
inline void DeleteOrganizationRqst::set_organization(const ::std::string& value) {
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.DeleteOrganizationRqst.organization)
}
#if LANG_CXX11
inline void DeleteOrganizationRqst::set_organization(::std::string&& value) {
  
  organization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteOrganizationRqst.organization)
}
#endif
inline void DeleteOrganizationRqst::set_organization(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.DeleteOrganizationRqst.organization)
}
inline void DeleteOrganizationRqst::set_organization(const char* value, size_t size) {
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteOrganizationRqst.organization)
}
inline ::std::string* DeleteOrganizationRqst::mutable_organization() {
  
  // @@protoc_insertion_point(field_mutable:resource.DeleteOrganizationRqst.organization)
  return organization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteOrganizationRqst::release_organization() {
  // @@protoc_insertion_point(field_release:resource.DeleteOrganizationRqst.organization)
  
  return organization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteOrganizationRqst::set_allocated_organization(::std::string* organization) {
  if (organization != NULL) {
    
  } else {
    
  }
  organization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organization);
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteOrganizationRqst.organization)
}

// -------------------------------------------------------------------

// DeleteOrganizationRsp

// bool result = 1;
inline void DeleteOrganizationRsp::clear_result() {
  result_ = false;
}
inline bool DeleteOrganizationRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeleteOrganizationRsp.result)
  return result_;
}
inline void DeleteOrganizationRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.DeleteOrganizationRsp.result)
}

// -------------------------------------------------------------------

// Peer

// string hostname = 1;
inline void Peer::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Peer::hostname() const {
  // @@protoc_insertion_point(field_get:resource.Peer.hostname)
  return hostname_.GetNoArena();
}
inline void Peer::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Peer.hostname)
}
#if LANG_CXX11
inline void Peer::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Peer.hostname)
}
#endif
inline void Peer::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Peer.hostname)
}
inline void Peer::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Peer.hostname)
}
inline ::std::string* Peer::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:resource.Peer.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Peer::release_hostname() {
  // @@protoc_insertion_point(field_release:resource.Peer.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:resource.Peer.hostname)
}

// string address = 2;
inline void Peer::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Peer::address() const {
  // @@protoc_insertion_point(field_get:resource.Peer.address)
  return address_.GetNoArena();
}
inline void Peer::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Peer.address)
}
#if LANG_CXX11
inline void Peer::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Peer.address)
}
#endif
inline void Peer::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Peer.address)
}
inline void Peer::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Peer.address)
}
inline ::std::string* Peer::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:resource.Peer.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Peer::release_address() {
  // @@protoc_insertion_point(field_release:resource.Peer.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:resource.Peer.address)
}

// string domain = 3;
inline void Peer::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Peer::domain() const {
  // @@protoc_insertion_point(field_get:resource.Peer.domain)
  return domain_.GetNoArena();
}
inline void Peer::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Peer.domain)
}
#if LANG_CXX11
inline void Peer::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Peer.domain)
}
#endif
inline void Peer::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Peer.domain)
}
inline void Peer::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Peer.domain)
}
inline ::std::string* Peer::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:resource.Peer.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Peer::release_domain() {
  // @@protoc_insertion_point(field_release:resource.Peer.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:resource.Peer.domain)
}

// string external_ip_address = 4;
inline void Peer::clear_external_ip_address() {
  external_ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Peer::external_ip_address() const {
  // @@protoc_insertion_point(field_get:resource.Peer.external_ip_address)
  return external_ip_address_.GetNoArena();
}
inline void Peer::set_external_ip_address(const ::std::string& value) {
  
  external_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Peer.external_ip_address)
}
#if LANG_CXX11
inline void Peer::set_external_ip_address(::std::string&& value) {
  
  external_ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Peer.external_ip_address)
}
#endif
inline void Peer::set_external_ip_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  external_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Peer.external_ip_address)
}
inline void Peer::set_external_ip_address(const char* value, size_t size) {
  
  external_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Peer.external_ip_address)
}
inline ::std::string* Peer::mutable_external_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:resource.Peer.external_ip_address)
  return external_ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Peer::release_external_ip_address() {
  // @@protoc_insertion_point(field_release:resource.Peer.external_ip_address)
  
  return external_ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_external_ip_address(::std::string* external_ip_address) {
  if (external_ip_address != NULL) {
    
  } else {
    
  }
  external_ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_ip_address);
  // @@protoc_insertion_point(field_set_allocated:resource.Peer.external_ip_address)
}

// string local_ip_address = 5;
inline void Peer::clear_local_ip_address() {
  local_ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Peer::local_ip_address() const {
  // @@protoc_insertion_point(field_get:resource.Peer.local_ip_address)
  return local_ip_address_.GetNoArena();
}
inline void Peer::set_local_ip_address(const ::std::string& value) {
  
  local_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Peer.local_ip_address)
}
#if LANG_CXX11
inline void Peer::set_local_ip_address(::std::string&& value) {
  
  local_ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Peer.local_ip_address)
}
#endif
inline void Peer::set_local_ip_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Peer.local_ip_address)
}
inline void Peer::set_local_ip_address(const char* value, size_t size) {
  
  local_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Peer.local_ip_address)
}
inline ::std::string* Peer::mutable_local_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:resource.Peer.local_ip_address)
  return local_ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Peer::release_local_ip_address() {
  // @@protoc_insertion_point(field_release:resource.Peer.local_ip_address)
  
  return local_ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_local_ip_address(::std::string* local_ip_address) {
  if (local_ip_address != NULL) {
    
  } else {
    
  }
  local_ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_ip_address);
  // @@protoc_insertion_point(field_set_allocated:resource.Peer.local_ip_address)
}

// string mac = 6;
inline void Peer::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Peer::mac() const {
  // @@protoc_insertion_point(field_get:resource.Peer.mac)
  return mac_.GetNoArena();
}
inline void Peer::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Peer.mac)
}
#if LANG_CXX11
inline void Peer::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Peer.mac)
}
#endif
inline void Peer::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Peer.mac)
}
inline void Peer::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Peer.mac)
}
inline ::std::string* Peer::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:resource.Peer.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Peer::release_mac() {
  // @@protoc_insertion_point(field_release:resource.Peer.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:resource.Peer.mac)
}

// .resource.PeerApprovalState state = 7;
inline void Peer::clear_state() {
  state_ = 0;
}
inline ::resource::PeerApprovalState Peer::state() const {
  // @@protoc_insertion_point(field_get:resource.Peer.state)
  return static_cast< ::resource::PeerApprovalState >(state_);
}
inline void Peer::set_state(::resource::PeerApprovalState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:resource.Peer.state)
}

// repeated string actions = 8;
inline int Peer::actions_size() const {
  return actions_.size();
}
inline void Peer::clear_actions() {
  actions_.Clear();
}
inline const ::std::string& Peer::actions(int index) const {
  // @@protoc_insertion_point(field_get:resource.Peer.actions)
  return actions_.Get(index);
}
inline ::std::string* Peer::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:resource.Peer.actions)
  return actions_.Mutable(index);
}
inline void Peer::set_actions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.Peer.actions)
  actions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Peer::set_actions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.Peer.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Peer::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.Peer.actions)
}
inline void Peer::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.Peer.actions)
}
inline ::std::string* Peer::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:resource.Peer.actions)
  return actions_.Add();
}
inline void Peer::add_actions(const ::std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.Peer.actions)
}
#if LANG_CXX11
inline void Peer::add_actions(::std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.Peer.actions)
}
#endif
inline void Peer::add_actions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.Peer.actions)
}
inline void Peer::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.Peer.actions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Peer::actions() const {
  // @@protoc_insertion_point(field_list:resource.Peer.actions)
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Peer::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:resource.Peer.actions)
  return &actions_;
}

// -------------------------------------------------------------------

// GetPeerApprovalStateRqst

// string mac = 1;
inline void GetPeerApprovalStateRqst::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerApprovalStateRqst::mac() const {
  // @@protoc_insertion_point(field_get:resource.GetPeerApprovalStateRqst.mac)
  return mac_.GetNoArena();
}
inline void GetPeerApprovalStateRqst::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPeerApprovalStateRqst.mac)
}
#if LANG_CXX11
inline void GetPeerApprovalStateRqst::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPeerApprovalStateRqst.mac)
}
#endif
inline void GetPeerApprovalStateRqst::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPeerApprovalStateRqst.mac)
}
inline void GetPeerApprovalStateRqst::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPeerApprovalStateRqst.mac)
}
inline ::std::string* GetPeerApprovalStateRqst::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPeerApprovalStateRqst.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerApprovalStateRqst::release_mac() {
  // @@protoc_insertion_point(field_release:resource.GetPeerApprovalStateRqst.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerApprovalStateRqst::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPeerApprovalStateRqst.mac)
}

// string remote_peer_address = 2;
inline void GetPeerApprovalStateRqst::clear_remote_peer_address() {
  remote_peer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerApprovalStateRqst::remote_peer_address() const {
  // @@protoc_insertion_point(field_get:resource.GetPeerApprovalStateRqst.remote_peer_address)
  return remote_peer_address_.GetNoArena();
}
inline void GetPeerApprovalStateRqst::set_remote_peer_address(const ::std::string& value) {
  
  remote_peer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPeerApprovalStateRqst.remote_peer_address)
}
#if LANG_CXX11
inline void GetPeerApprovalStateRqst::set_remote_peer_address(::std::string&& value) {
  
  remote_peer_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPeerApprovalStateRqst.remote_peer_address)
}
#endif
inline void GetPeerApprovalStateRqst::set_remote_peer_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_peer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPeerApprovalStateRqst.remote_peer_address)
}
inline void GetPeerApprovalStateRqst::set_remote_peer_address(const char* value, size_t size) {
  
  remote_peer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPeerApprovalStateRqst.remote_peer_address)
}
inline ::std::string* GetPeerApprovalStateRqst::mutable_remote_peer_address() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPeerApprovalStateRqst.remote_peer_address)
  return remote_peer_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerApprovalStateRqst::release_remote_peer_address() {
  // @@protoc_insertion_point(field_release:resource.GetPeerApprovalStateRqst.remote_peer_address)
  
  return remote_peer_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerApprovalStateRqst::set_allocated_remote_peer_address(::std::string* remote_peer_address) {
  if (remote_peer_address != NULL) {
    
  } else {
    
  }
  remote_peer_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_peer_address);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPeerApprovalStateRqst.remote_peer_address)
}

// -------------------------------------------------------------------

// GetPeerApprovalStateRsp

// .resource.PeerApprovalState state = 1;
inline void GetPeerApprovalStateRsp::clear_state() {
  state_ = 0;
}
inline ::resource::PeerApprovalState GetPeerApprovalStateRsp::state() const {
  // @@protoc_insertion_point(field_get:resource.GetPeerApprovalStateRsp.state)
  return static_cast< ::resource::PeerApprovalState >(state_);
}
inline void GetPeerApprovalStateRsp::set_state(::resource::PeerApprovalState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:resource.GetPeerApprovalStateRsp.state)
}

// -------------------------------------------------------------------

// GetPeerPublicKeyRqst

// string mac = 1;
inline void GetPeerPublicKeyRqst::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerPublicKeyRqst::mac() const {
  // @@protoc_insertion_point(field_get:resource.GetPeerPublicKeyRqst.mac)
  return mac_.GetNoArena();
}
inline void GetPeerPublicKeyRqst::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPeerPublicKeyRqst.mac)
}
#if LANG_CXX11
inline void GetPeerPublicKeyRqst::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPeerPublicKeyRqst.mac)
}
#endif
inline void GetPeerPublicKeyRqst::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPeerPublicKeyRqst.mac)
}
inline void GetPeerPublicKeyRqst::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPeerPublicKeyRqst.mac)
}
inline ::std::string* GetPeerPublicKeyRqst::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPeerPublicKeyRqst.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerPublicKeyRqst::release_mac() {
  // @@protoc_insertion_point(field_release:resource.GetPeerPublicKeyRqst.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerPublicKeyRqst::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPeerPublicKeyRqst.mac)
}

// string remote_peer_address = 2;
inline void GetPeerPublicKeyRqst::clear_remote_peer_address() {
  remote_peer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerPublicKeyRqst::remote_peer_address() const {
  // @@protoc_insertion_point(field_get:resource.GetPeerPublicKeyRqst.remote_peer_address)
  return remote_peer_address_.GetNoArena();
}
inline void GetPeerPublicKeyRqst::set_remote_peer_address(const ::std::string& value) {
  
  remote_peer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPeerPublicKeyRqst.remote_peer_address)
}
#if LANG_CXX11
inline void GetPeerPublicKeyRqst::set_remote_peer_address(::std::string&& value) {
  
  remote_peer_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPeerPublicKeyRqst.remote_peer_address)
}
#endif
inline void GetPeerPublicKeyRqst::set_remote_peer_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_peer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPeerPublicKeyRqst.remote_peer_address)
}
inline void GetPeerPublicKeyRqst::set_remote_peer_address(const char* value, size_t size) {
  
  remote_peer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPeerPublicKeyRqst.remote_peer_address)
}
inline ::std::string* GetPeerPublicKeyRqst::mutable_remote_peer_address() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPeerPublicKeyRqst.remote_peer_address)
  return remote_peer_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerPublicKeyRqst::release_remote_peer_address() {
  // @@protoc_insertion_point(field_release:resource.GetPeerPublicKeyRqst.remote_peer_address)
  
  return remote_peer_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerPublicKeyRqst::set_allocated_remote_peer_address(::std::string* remote_peer_address) {
  if (remote_peer_address != NULL) {
    
  } else {
    
  }
  remote_peer_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_peer_address);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPeerPublicKeyRqst.remote_peer_address)
}

// -------------------------------------------------------------------

// GetPeerPublicKeyRsp

// string public_key = 1;
inline void GetPeerPublicKeyRsp::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerPublicKeyRsp::public_key() const {
  // @@protoc_insertion_point(field_get:resource.GetPeerPublicKeyRsp.public_key)
  return public_key_.GetNoArena();
}
inline void GetPeerPublicKeyRsp::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPeerPublicKeyRsp.public_key)
}
#if LANG_CXX11
inline void GetPeerPublicKeyRsp::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPeerPublicKeyRsp.public_key)
}
#endif
inline void GetPeerPublicKeyRsp::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPeerPublicKeyRsp.public_key)
}
inline void GetPeerPublicKeyRsp::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPeerPublicKeyRsp.public_key)
}
inline ::std::string* GetPeerPublicKeyRsp::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPeerPublicKeyRsp.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerPublicKeyRsp::release_public_key() {
  // @@protoc_insertion_point(field_release:resource.GetPeerPublicKeyRsp.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerPublicKeyRsp::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPeerPublicKeyRsp.public_key)
}

// -------------------------------------------------------------------

// RegisterPeerRqst

// .resource.Peer peer = 1;
inline bool RegisterPeerRqst::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void RegisterPeerRqst::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::resource::Peer& RegisterPeerRqst::_internal_peer() const {
  return *peer_;
}
inline const ::resource::Peer& RegisterPeerRqst::peer() const {
  const ::resource::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:resource.RegisterPeerRqst.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Peer*>(
      &::resource::_Peer_default_instance_);
}
inline ::resource::Peer* RegisterPeerRqst::release_peer() {
  // @@protoc_insertion_point(field_release:resource.RegisterPeerRqst.peer)
  
  ::resource::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::resource::Peer* RegisterPeerRqst::mutable_peer() {
  
  if (peer_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.RegisterPeerRqst.peer)
  return peer_;
}
inline void RegisterPeerRqst::set_allocated_peer(::resource::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:resource.RegisterPeerRqst.peer)
}

// string public_key = 2;
inline void RegisterPeerRqst::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterPeerRqst::public_key() const {
  // @@protoc_insertion_point(field_get:resource.RegisterPeerRqst.public_key)
  return public_key_.GetNoArena();
}
inline void RegisterPeerRqst::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RegisterPeerRqst.public_key)
}
#if LANG_CXX11
inline void RegisterPeerRqst::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RegisterPeerRqst.public_key)
}
#endif
inline void RegisterPeerRqst::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RegisterPeerRqst.public_key)
}
inline void RegisterPeerRqst::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RegisterPeerRqst.public_key)
}
inline ::std::string* RegisterPeerRqst::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:resource.RegisterPeerRqst.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterPeerRqst::release_public_key() {
  // @@protoc_insertion_point(field_release:resource.RegisterPeerRqst.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPeerRqst::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:resource.RegisterPeerRqst.public_key)
}

// -------------------------------------------------------------------

// RegisterPeerRsp

// .resource.Peer peer = 1;
inline bool RegisterPeerRsp::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void RegisterPeerRsp::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::resource::Peer& RegisterPeerRsp::_internal_peer() const {
  return *peer_;
}
inline const ::resource::Peer& RegisterPeerRsp::peer() const {
  const ::resource::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:resource.RegisterPeerRsp.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Peer*>(
      &::resource::_Peer_default_instance_);
}
inline ::resource::Peer* RegisterPeerRsp::release_peer() {
  // @@protoc_insertion_point(field_release:resource.RegisterPeerRsp.peer)
  
  ::resource::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::resource::Peer* RegisterPeerRsp::mutable_peer() {
  
  if (peer_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.RegisterPeerRsp.peer)
  return peer_;
}
inline void RegisterPeerRsp::set_allocated_peer(::resource::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:resource.RegisterPeerRsp.peer)
}

// string public_key = 2;
inline void RegisterPeerRsp::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterPeerRsp::public_key() const {
  // @@protoc_insertion_point(field_get:resource.RegisterPeerRsp.public_key)
  return public_key_.GetNoArena();
}
inline void RegisterPeerRsp::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RegisterPeerRsp.public_key)
}
#if LANG_CXX11
inline void RegisterPeerRsp::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RegisterPeerRsp.public_key)
}
#endif
inline void RegisterPeerRsp::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RegisterPeerRsp.public_key)
}
inline void RegisterPeerRsp::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RegisterPeerRsp.public_key)
}
inline ::std::string* RegisterPeerRsp::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:resource.RegisterPeerRsp.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterPeerRsp::release_public_key() {
  // @@protoc_insertion_point(field_release:resource.RegisterPeerRsp.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPeerRsp::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:resource.RegisterPeerRsp.public_key)
}

// -------------------------------------------------------------------

// GetPeersRqst

// string query = 1;
inline void GetPeersRqst::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeersRqst::query() const {
  // @@protoc_insertion_point(field_get:resource.GetPeersRqst.query)
  return query_.GetNoArena();
}
inline void GetPeersRqst::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPeersRqst.query)
}
#if LANG_CXX11
inline void GetPeersRqst::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPeersRqst.query)
}
#endif
inline void GetPeersRqst::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPeersRqst.query)
}
inline void GetPeersRqst::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPeersRqst.query)
}
inline ::std::string* GetPeersRqst::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPeersRqst.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeersRqst::release_query() {
  // @@protoc_insertion_point(field_release:resource.GetPeersRqst.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeersRqst::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPeersRqst.query)
}

// string options = 2;
inline void GetPeersRqst::clear_options() {
  options_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeersRqst::options() const {
  // @@protoc_insertion_point(field_get:resource.GetPeersRqst.options)
  return options_.GetNoArena();
}
inline void GetPeersRqst::set_options(const ::std::string& value) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetPeersRqst.options)
}
#if LANG_CXX11
inline void GetPeersRqst::set_options(::std::string&& value) {
  
  options_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetPeersRqst.options)
}
#endif
inline void GetPeersRqst::set_options(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetPeersRqst.options)
}
inline void GetPeersRqst::set_options(const char* value, size_t size) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetPeersRqst.options)
}
inline ::std::string* GetPeersRqst::mutable_options() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetPeersRqst.options)
  return options_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeersRqst::release_options() {
  // @@protoc_insertion_point(field_release:resource.GetPeersRqst.options)
  
  return options_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeersRqst::set_allocated_options(::std::string* options) {
  if (options != NULL) {
    
  } else {
    
  }
  options_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), options);
  // @@protoc_insertion_point(field_set_allocated:resource.GetPeersRqst.options)
}

// -------------------------------------------------------------------

// GetPeersRsp

// repeated .resource.Peer peers = 1;
inline int GetPeersRsp::peers_size() const {
  return peers_.size();
}
inline void GetPeersRsp::clear_peers() {
  peers_.Clear();
}
inline ::resource::Peer* GetPeersRsp::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetPeersRsp.peers)
  return peers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::Peer >*
GetPeersRsp::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetPeersRsp.peers)
  return &peers_;
}
inline const ::resource::Peer& GetPeersRsp::peers(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetPeersRsp.peers)
  return peers_.Get(index);
}
inline ::resource::Peer* GetPeersRsp::add_peers() {
  // @@protoc_insertion_point(field_add:resource.GetPeersRsp.peers)
  return peers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::Peer >&
GetPeersRsp::peers() const {
  // @@protoc_insertion_point(field_list:resource.GetPeersRsp.peers)
  return peers_;
}

// -------------------------------------------------------------------

// DeletePeerRqst

// .resource.Peer peer = 1;
inline bool DeletePeerRqst::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void DeletePeerRqst::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::resource::Peer& DeletePeerRqst::_internal_peer() const {
  return *peer_;
}
inline const ::resource::Peer& DeletePeerRqst::peer() const {
  const ::resource::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:resource.DeletePeerRqst.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Peer*>(
      &::resource::_Peer_default_instance_);
}
inline ::resource::Peer* DeletePeerRqst::release_peer() {
  // @@protoc_insertion_point(field_release:resource.DeletePeerRqst.peer)
  
  ::resource::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::resource::Peer* DeletePeerRqst::mutable_peer() {
  
  if (peer_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.DeletePeerRqst.peer)
  return peer_;
}
inline void DeletePeerRqst::set_allocated_peer(::resource::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:resource.DeletePeerRqst.peer)
}

// -------------------------------------------------------------------

// DeletePeerRsp

// bool result = 1;
inline void DeletePeerRsp::clear_result() {
  result_ = false;
}
inline bool DeletePeerRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.DeletePeerRsp.result)
  return result_;
}
inline void DeletePeerRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.DeletePeerRsp.result)
}

// -------------------------------------------------------------------

// AddPeerActionsRqst

// string mac = 1;
inline void AddPeerActionsRqst::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddPeerActionsRqst::mac() const {
  // @@protoc_insertion_point(field_get:resource.AddPeerActionsRqst.mac)
  return mac_.GetNoArena();
}
inline void AddPeerActionsRqst::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.AddPeerActionsRqst.mac)
}
#if LANG_CXX11
inline void AddPeerActionsRqst::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.AddPeerActionsRqst.mac)
}
#endif
inline void AddPeerActionsRqst::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.AddPeerActionsRqst.mac)
}
inline void AddPeerActionsRqst::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.AddPeerActionsRqst.mac)
}
inline ::std::string* AddPeerActionsRqst::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:resource.AddPeerActionsRqst.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddPeerActionsRqst::release_mac() {
  // @@protoc_insertion_point(field_release:resource.AddPeerActionsRqst.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddPeerActionsRqst::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:resource.AddPeerActionsRqst.mac)
}

// repeated string actions = 2;
inline int AddPeerActionsRqst::actions_size() const {
  return actions_.size();
}
inline void AddPeerActionsRqst::clear_actions() {
  actions_.Clear();
}
inline const ::std::string& AddPeerActionsRqst::actions(int index) const {
  // @@protoc_insertion_point(field_get:resource.AddPeerActionsRqst.actions)
  return actions_.Get(index);
}
inline ::std::string* AddPeerActionsRqst::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:resource.AddPeerActionsRqst.actions)
  return actions_.Mutable(index);
}
inline void AddPeerActionsRqst::set_actions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:resource.AddPeerActionsRqst.actions)
  actions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AddPeerActionsRqst::set_actions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:resource.AddPeerActionsRqst.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AddPeerActionsRqst::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:resource.AddPeerActionsRqst.actions)
}
inline void AddPeerActionsRqst::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:resource.AddPeerActionsRqst.actions)
}
inline ::std::string* AddPeerActionsRqst::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:resource.AddPeerActionsRqst.actions)
  return actions_.Add();
}
inline void AddPeerActionsRqst::add_actions(const ::std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:resource.AddPeerActionsRqst.actions)
}
#if LANG_CXX11
inline void AddPeerActionsRqst::add_actions(::std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:resource.AddPeerActionsRqst.actions)
}
#endif
inline void AddPeerActionsRqst::add_actions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:resource.AddPeerActionsRqst.actions)
}
inline void AddPeerActionsRqst::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:resource.AddPeerActionsRqst.actions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddPeerActionsRqst::actions() const {
  // @@protoc_insertion_point(field_list:resource.AddPeerActionsRqst.actions)
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddPeerActionsRqst::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:resource.AddPeerActionsRqst.actions)
  return &actions_;
}

// -------------------------------------------------------------------

// AddPeerActionsRsp

// bool result = 1;
inline void AddPeerActionsRsp::clear_result() {
  result_ = false;
}
inline bool AddPeerActionsRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AddPeerActionsRsp.result)
  return result_;
}
inline void AddPeerActionsRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.AddPeerActionsRsp.result)
}

// -------------------------------------------------------------------

// RemovePeerActionRqst

// string mac = 1;
inline void RemovePeerActionRqst::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemovePeerActionRqst::mac() const {
  // @@protoc_insertion_point(field_get:resource.RemovePeerActionRqst.mac)
  return mac_.GetNoArena();
}
inline void RemovePeerActionRqst::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemovePeerActionRqst.mac)
}
#if LANG_CXX11
inline void RemovePeerActionRqst::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemovePeerActionRqst.mac)
}
#endif
inline void RemovePeerActionRqst::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemovePeerActionRqst.mac)
}
inline void RemovePeerActionRqst::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemovePeerActionRqst.mac)
}
inline ::std::string* RemovePeerActionRqst::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemovePeerActionRqst.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemovePeerActionRqst::release_mac() {
  // @@protoc_insertion_point(field_release:resource.RemovePeerActionRqst.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePeerActionRqst::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:resource.RemovePeerActionRqst.mac)
}

// string action = 2;
inline void RemovePeerActionRqst::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemovePeerActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.RemovePeerActionRqst.action)
  return action_.GetNoArena();
}
inline void RemovePeerActionRqst::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemovePeerActionRqst.action)
}
#if LANG_CXX11
inline void RemovePeerActionRqst::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemovePeerActionRqst.action)
}
#endif
inline void RemovePeerActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemovePeerActionRqst.action)
}
inline void RemovePeerActionRqst::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemovePeerActionRqst.action)
}
inline ::std::string* RemovePeerActionRqst::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemovePeerActionRqst.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemovePeerActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.RemovePeerActionRqst.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePeerActionRqst::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:resource.RemovePeerActionRqst.action)
}

// -------------------------------------------------------------------

// RemovePeerActionRsp

// bool result = 1;
inline void RemovePeerActionRsp::clear_result() {
  result_ = false;
}
inline bool RemovePeerActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemovePeerActionRsp.result)
  return result_;
}
inline void RemovePeerActionRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemovePeerActionRsp.result)
}

// -------------------------------------------------------------------

// RemovePeersActionRqst

// string action = 2;
inline void RemovePeersActionRqst::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemovePeersActionRqst::action() const {
  // @@protoc_insertion_point(field_get:resource.RemovePeersActionRqst.action)
  return action_.GetNoArena();
}
inline void RemovePeersActionRqst::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemovePeersActionRqst.action)
}
#if LANG_CXX11
inline void RemovePeersActionRqst::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemovePeersActionRqst.action)
}
#endif
inline void RemovePeersActionRqst::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemovePeersActionRqst.action)
}
inline void RemovePeersActionRqst::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemovePeersActionRqst.action)
}
inline ::std::string* RemovePeersActionRqst::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemovePeersActionRqst.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemovePeersActionRqst::release_action() {
  // @@protoc_insertion_point(field_release:resource.RemovePeersActionRqst.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePeersActionRqst::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:resource.RemovePeersActionRqst.action)
}

// -------------------------------------------------------------------

// RemovePeersActionRsp

// bool result = 1;
inline void RemovePeersActionRsp::clear_result() {
  result_ = false;
}
inline bool RemovePeersActionRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RemovePeersActionRsp.result)
  return result_;
}
inline void RemovePeersActionRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RemovePeersActionRsp.result)
}

// -------------------------------------------------------------------

// AcceptPeerRqst

// .resource.Peer peer = 1;
inline bool AcceptPeerRqst::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void AcceptPeerRqst::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::resource::Peer& AcceptPeerRqst::_internal_peer() const {
  return *peer_;
}
inline const ::resource::Peer& AcceptPeerRqst::peer() const {
  const ::resource::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:resource.AcceptPeerRqst.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Peer*>(
      &::resource::_Peer_default_instance_);
}
inline ::resource::Peer* AcceptPeerRqst::release_peer() {
  // @@protoc_insertion_point(field_release:resource.AcceptPeerRqst.peer)
  
  ::resource::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::resource::Peer* AcceptPeerRqst::mutable_peer() {
  
  if (peer_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.AcceptPeerRqst.peer)
  return peer_;
}
inline void AcceptPeerRqst::set_allocated_peer(::resource::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:resource.AcceptPeerRqst.peer)
}

// -------------------------------------------------------------------

// AcceptPeerRsp

// bool result = 1;
inline void AcceptPeerRsp::clear_result() {
  result_ = false;
}
inline bool AcceptPeerRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.AcceptPeerRsp.result)
  return result_;
}
inline void AcceptPeerRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.AcceptPeerRsp.result)
}

// -------------------------------------------------------------------

// RejectPeerRqst

// .resource.Peer peer = 1;
inline bool RejectPeerRqst::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void RejectPeerRqst::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::resource::Peer& RejectPeerRqst::_internal_peer() const {
  return *peer_;
}
inline const ::resource::Peer& RejectPeerRqst::peer() const {
  const ::resource::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:resource.RejectPeerRqst.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Peer*>(
      &::resource::_Peer_default_instance_);
}
inline ::resource::Peer* RejectPeerRqst::release_peer() {
  // @@protoc_insertion_point(field_release:resource.RejectPeerRqst.peer)
  
  ::resource::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::resource::Peer* RejectPeerRqst::mutable_peer() {
  
  if (peer_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.RejectPeerRqst.peer)
  return peer_;
}
inline void RejectPeerRqst::set_allocated_peer(::resource::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:resource.RejectPeerRqst.peer)
}

// -------------------------------------------------------------------

// RejectPeerRsp

// bool result = 1;
inline void RejectPeerRsp::clear_result() {
  result_ = false;
}
inline bool RejectPeerRsp::result() const {
  // @@protoc_insertion_point(field_get:resource.RejectPeerRsp.result)
  return result_;
}
inline void RejectPeerRsp::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:resource.RejectPeerRsp.result)
}

// -------------------------------------------------------------------

// Notification

// string id = 1;
inline void Notification::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Notification::id() const {
  // @@protoc_insertion_point(field_get:resource.Notification.id)
  return id_.GetNoArena();
}
inline void Notification::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Notification.id)
}
#if LANG_CXX11
inline void Notification::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Notification.id)
}
#endif
inline void Notification::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Notification.id)
}
inline void Notification::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Notification.id)
}
inline ::std::string* Notification::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.Notification.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Notification::release_id() {
  // @@protoc_insertion_point(field_release:resource.Notification.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.Notification.id)
}

// int64 date = 2;
inline void Notification::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Notification::date() const {
  // @@protoc_insertion_point(field_get:resource.Notification.date)
  return date_;
}
inline void Notification::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:resource.Notification.date)
}

// string message = 3;
inline void Notification::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Notification::message() const {
  // @@protoc_insertion_point(field_get:resource.Notification.message)
  return message_.GetNoArena();
}
inline void Notification::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Notification.message)
}
#if LANG_CXX11
inline void Notification::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Notification.message)
}
#endif
inline void Notification::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Notification.message)
}
inline void Notification::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Notification.message)
}
inline ::std::string* Notification::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:resource.Notification.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Notification::release_message() {
  // @@protoc_insertion_point(field_release:resource.Notification.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:resource.Notification.message)
}

// string recipient = 4;
inline void Notification::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Notification::recipient() const {
  // @@protoc_insertion_point(field_get:resource.Notification.recipient)
  return recipient_.GetNoArena();
}
inline void Notification::set_recipient(const ::std::string& value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Notification.recipient)
}
#if LANG_CXX11
inline void Notification::set_recipient(::std::string&& value) {
  
  recipient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Notification.recipient)
}
#endif
inline void Notification::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Notification.recipient)
}
inline void Notification::set_recipient(const char* value, size_t size) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Notification.recipient)
}
inline ::std::string* Notification::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:resource.Notification.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Notification::release_recipient() {
  // @@protoc_insertion_point(field_release:resource.Notification.recipient)
  
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_recipient(::std::string* recipient) {
  if (recipient != NULL) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:resource.Notification.recipient)
}

// string sender = 5;
inline void Notification::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Notification::sender() const {
  // @@protoc_insertion_point(field_get:resource.Notification.sender)
  return sender_.GetNoArena();
}
inline void Notification::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Notification.sender)
}
#if LANG_CXX11
inline void Notification::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Notification.sender)
}
#endif
inline void Notification::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Notification.sender)
}
inline void Notification::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Notification.sender)
}
inline ::std::string* Notification::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:resource.Notification.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Notification::release_sender() {
  // @@protoc_insertion_point(field_release:resource.Notification.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:resource.Notification.sender)
}

// .resource.NotificationType notification_type = 6;
inline void Notification::clear_notification_type() {
  notification_type_ = 0;
}
inline ::resource::NotificationType Notification::notification_type() const {
  // @@protoc_insertion_point(field_get:resource.Notification.notification_type)
  return static_cast< ::resource::NotificationType >(notification_type_);
}
inline void Notification::set_notification_type(::resource::NotificationType value) {
  
  notification_type_ = value;
  // @@protoc_insertion_point(field_set:resource.Notification.notification_type)
}

// -------------------------------------------------------------------

// CreateNotificationRqst

// .resource.Notification notification = 1;
inline bool CreateNotificationRqst::has_notification() const {
  return this != internal_default_instance() && notification_ != NULL;
}
inline void CreateNotificationRqst::clear_notification() {
  if (GetArenaNoVirtual() == NULL && notification_ != NULL) {
    delete notification_;
  }
  notification_ = NULL;
}
inline const ::resource::Notification& CreateNotificationRqst::_internal_notification() const {
  return *notification_;
}
inline const ::resource::Notification& CreateNotificationRqst::notification() const {
  const ::resource::Notification* p = notification_;
  // @@protoc_insertion_point(field_get:resource.CreateNotificationRqst.notification)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Notification*>(
      &::resource::_Notification_default_instance_);
}
inline ::resource::Notification* CreateNotificationRqst::release_notification() {
  // @@protoc_insertion_point(field_release:resource.CreateNotificationRqst.notification)
  
  ::resource::Notification* temp = notification_;
  notification_ = NULL;
  return temp;
}
inline ::resource::Notification* CreateNotificationRqst::mutable_notification() {
  
  if (notification_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Notification>(GetArenaNoVirtual());
    notification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.CreateNotificationRqst.notification)
  return notification_;
}
inline void CreateNotificationRqst::set_allocated_notification(::resource::Notification* notification) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete notification_;
  }
  if (notification) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      notification = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, notification, submessage_arena);
    }
    
  } else {
    
  }
  notification_ = notification;
  // @@protoc_insertion_point(field_set_allocated:resource.CreateNotificationRqst.notification)
}

// -------------------------------------------------------------------

// CreateNotificationRsp

// -------------------------------------------------------------------

// GetNotificationsRqst

// string recipient = 1;
inline void GetNotificationsRqst::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNotificationsRqst::recipient() const {
  // @@protoc_insertion_point(field_get:resource.GetNotificationsRqst.recipient)
  return recipient_.GetNoArena();
}
inline void GetNotificationsRqst::set_recipient(const ::std::string& value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetNotificationsRqst.recipient)
}
#if LANG_CXX11
inline void GetNotificationsRqst::set_recipient(::std::string&& value) {
  
  recipient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetNotificationsRqst.recipient)
}
#endif
inline void GetNotificationsRqst::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetNotificationsRqst.recipient)
}
inline void GetNotificationsRqst::set_recipient(const char* value, size_t size) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetNotificationsRqst.recipient)
}
inline ::std::string* GetNotificationsRqst::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetNotificationsRqst.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNotificationsRqst::release_recipient() {
  // @@protoc_insertion_point(field_release:resource.GetNotificationsRqst.recipient)
  
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNotificationsRqst::set_allocated_recipient(::std::string* recipient) {
  if (recipient != NULL) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:resource.GetNotificationsRqst.recipient)
}

// -------------------------------------------------------------------

// GetNotificationsRsp

// repeated .resource.Notification notifications = 1;
inline int GetNotificationsRsp::notifications_size() const {
  return notifications_.size();
}
inline void GetNotificationsRsp::clear_notifications() {
  notifications_.Clear();
}
inline ::resource::Notification* GetNotificationsRsp::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetNotificationsRsp.notifications)
  return notifications_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::Notification >*
GetNotificationsRsp::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetNotificationsRsp.notifications)
  return &notifications_;
}
inline const ::resource::Notification& GetNotificationsRsp::notifications(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetNotificationsRsp.notifications)
  return notifications_.Get(index);
}
inline ::resource::Notification* GetNotificationsRsp::add_notifications() {
  // @@protoc_insertion_point(field_add:resource.GetNotificationsRsp.notifications)
  return notifications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::Notification >&
GetNotificationsRsp::notifications() const {
  // @@protoc_insertion_point(field_list:resource.GetNotificationsRsp.notifications)
  return notifications_;
}

// -------------------------------------------------------------------

// DeleteNotificationRqst

// string id = 1;
inline void DeleteNotificationRqst::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNotificationRqst::id() const {
  // @@protoc_insertion_point(field_get:resource.DeleteNotificationRqst.id)
  return id_.GetNoArena();
}
inline void DeleteNotificationRqst::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.DeleteNotificationRqst.id)
}
#if LANG_CXX11
inline void DeleteNotificationRqst::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteNotificationRqst.id)
}
#endif
inline void DeleteNotificationRqst::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.DeleteNotificationRqst.id)
}
inline void DeleteNotificationRqst::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteNotificationRqst.id)
}
inline ::std::string* DeleteNotificationRqst::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:resource.DeleteNotificationRqst.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNotificationRqst::release_id() {
  // @@protoc_insertion_point(field_release:resource.DeleteNotificationRqst.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNotificationRqst::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteNotificationRqst.id)
}

// string recipient = 2;
inline void DeleteNotificationRqst::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNotificationRqst::recipient() const {
  // @@protoc_insertion_point(field_get:resource.DeleteNotificationRqst.recipient)
  return recipient_.GetNoArena();
}
inline void DeleteNotificationRqst::set_recipient(const ::std::string& value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.DeleteNotificationRqst.recipient)
}
#if LANG_CXX11
inline void DeleteNotificationRqst::set_recipient(::std::string&& value) {
  
  recipient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.DeleteNotificationRqst.recipient)
}
#endif
inline void DeleteNotificationRqst::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.DeleteNotificationRqst.recipient)
}
inline void DeleteNotificationRqst::set_recipient(const char* value, size_t size) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.DeleteNotificationRqst.recipient)
}
inline ::std::string* DeleteNotificationRqst::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:resource.DeleteNotificationRqst.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNotificationRqst::release_recipient() {
  // @@protoc_insertion_point(field_release:resource.DeleteNotificationRqst.recipient)
  
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNotificationRqst::set_allocated_recipient(::std::string* recipient) {
  if (recipient != NULL) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:resource.DeleteNotificationRqst.recipient)
}

// -------------------------------------------------------------------

// DeleteNotificationRsp

// -------------------------------------------------------------------

// ClearAllNotificationsRqst

// string recipient = 1;
inline void ClearAllNotificationsRqst::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClearAllNotificationsRqst::recipient() const {
  // @@protoc_insertion_point(field_get:resource.ClearAllNotificationsRqst.recipient)
  return recipient_.GetNoArena();
}
inline void ClearAllNotificationsRqst::set_recipient(const ::std::string& value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.ClearAllNotificationsRqst.recipient)
}
#if LANG_CXX11
inline void ClearAllNotificationsRqst::set_recipient(::std::string&& value) {
  
  recipient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.ClearAllNotificationsRqst.recipient)
}
#endif
inline void ClearAllNotificationsRqst::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.ClearAllNotificationsRqst.recipient)
}
inline void ClearAllNotificationsRqst::set_recipient(const char* value, size_t size) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.ClearAllNotificationsRqst.recipient)
}
inline ::std::string* ClearAllNotificationsRqst::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:resource.ClearAllNotificationsRqst.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClearAllNotificationsRqst::release_recipient() {
  // @@protoc_insertion_point(field_release:resource.ClearAllNotificationsRqst.recipient)
  
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClearAllNotificationsRqst::set_allocated_recipient(::std::string* recipient) {
  if (recipient != NULL) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:resource.ClearAllNotificationsRqst.recipient)
}

// -------------------------------------------------------------------

// ClearAllNotificationsRsp

// -------------------------------------------------------------------

// ClearNotificationsByTypeRqst

// string recipient = 1;
inline void ClearNotificationsByTypeRqst::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClearNotificationsByTypeRqst::recipient() const {
  // @@protoc_insertion_point(field_get:resource.ClearNotificationsByTypeRqst.recipient)
  return recipient_.GetNoArena();
}
inline void ClearNotificationsByTypeRqst::set_recipient(const ::std::string& value) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.ClearNotificationsByTypeRqst.recipient)
}
#if LANG_CXX11
inline void ClearNotificationsByTypeRqst::set_recipient(::std::string&& value) {
  
  recipient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.ClearNotificationsByTypeRqst.recipient)
}
#endif
inline void ClearNotificationsByTypeRqst::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.ClearNotificationsByTypeRqst.recipient)
}
inline void ClearNotificationsByTypeRqst::set_recipient(const char* value, size_t size) {
  
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.ClearNotificationsByTypeRqst.recipient)
}
inline ::std::string* ClearNotificationsByTypeRqst::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:resource.ClearNotificationsByTypeRqst.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClearNotificationsByTypeRqst::release_recipient() {
  // @@protoc_insertion_point(field_release:resource.ClearNotificationsByTypeRqst.recipient)
  
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClearNotificationsByTypeRqst::set_allocated_recipient(::std::string* recipient) {
  if (recipient != NULL) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:resource.ClearNotificationsByTypeRqst.recipient)
}

// .resource.NotificationType notification_type = 2;
inline void ClearNotificationsByTypeRqst::clear_notification_type() {
  notification_type_ = 0;
}
inline ::resource::NotificationType ClearNotificationsByTypeRqst::notification_type() const {
  // @@protoc_insertion_point(field_get:resource.ClearNotificationsByTypeRqst.notification_type)
  return static_cast< ::resource::NotificationType >(notification_type_);
}
inline void ClearNotificationsByTypeRqst::set_notification_type(::resource::NotificationType value) {
  
  notification_type_ = value;
  // @@protoc_insertion_point(field_set:resource.ClearNotificationsByTypeRqst.notification_type)
}

// -------------------------------------------------------------------

// ClearNotificationsByTypeRsp

// -------------------------------------------------------------------

// Session

// string accountId = 1;
inline void Session::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Session::accountid() const {
  // @@protoc_insertion_point(field_get:resource.Session.accountId)
  return accountid_.GetNoArena();
}
inline void Session::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.Session.accountId)
}
#if LANG_CXX11
inline void Session::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.Session.accountId)
}
#endif
inline void Session::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.Session.accountId)
}
inline void Session::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.Session.accountId)
}
inline ::std::string* Session::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.Session.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Session::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.Session.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.Session.accountId)
}

// .resource.SessionState state = 2;
inline void Session::clear_state() {
  state_ = 0;
}
inline ::resource::SessionState Session::state() const {
  // @@protoc_insertion_point(field_get:resource.Session.state)
  return static_cast< ::resource::SessionState >(state_);
}
inline void Session::set_state(::resource::SessionState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:resource.Session.state)
}

// int64 last_state_time = 3;
inline void Session::clear_last_state_time() {
  last_state_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Session::last_state_time() const {
  // @@protoc_insertion_point(field_get:resource.Session.last_state_time)
  return last_state_time_;
}
inline void Session::set_last_state_time(::google::protobuf::int64 value) {
  
  last_state_time_ = value;
  // @@protoc_insertion_point(field_set:resource.Session.last_state_time)
}

// int64 expire_at = 4;
inline void Session::clear_expire_at() {
  expire_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Session::expire_at() const {
  // @@protoc_insertion_point(field_get:resource.Session.expire_at)
  return expire_at_;
}
inline void Session::set_expire_at(::google::protobuf::int64 value) {
  
  expire_at_ = value;
  // @@protoc_insertion_point(field_set:resource.Session.expire_at)
}

// -------------------------------------------------------------------

// UpdateSessionRequest

// .resource.Session session = 1;
inline bool UpdateSessionRequest::has_session() const {
  return this != internal_default_instance() && session_ != NULL;
}
inline void UpdateSessionRequest::clear_session() {
  if (GetArenaNoVirtual() == NULL && session_ != NULL) {
    delete session_;
  }
  session_ = NULL;
}
inline const ::resource::Session& UpdateSessionRequest::_internal_session() const {
  return *session_;
}
inline const ::resource::Session& UpdateSessionRequest::session() const {
  const ::resource::Session* p = session_;
  // @@protoc_insertion_point(field_get:resource.UpdateSessionRequest.session)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Session*>(
      &::resource::_Session_default_instance_);
}
inline ::resource::Session* UpdateSessionRequest::release_session() {
  // @@protoc_insertion_point(field_release:resource.UpdateSessionRequest.session)
  
  ::resource::Session* temp = session_;
  session_ = NULL;
  return temp;
}
inline ::resource::Session* UpdateSessionRequest::mutable_session() {
  
  if (session_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Session>(GetArenaNoVirtual());
    session_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.UpdateSessionRequest.session)
  return session_;
}
inline void UpdateSessionRequest::set_allocated_session(::resource::Session* session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete session_;
  }
  if (session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:resource.UpdateSessionRequest.session)
}

// -------------------------------------------------------------------

// UpdateSessionResponse

// -------------------------------------------------------------------

// RemoveSessionRequest

// string accountId = 1;
inline void RemoveSessionRequest::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveSessionRequest::accountid() const {
  // @@protoc_insertion_point(field_get:resource.RemoveSessionRequest.accountId)
  return accountid_.GetNoArena();
}
inline void RemoveSessionRequest::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.RemoveSessionRequest.accountId)
}
#if LANG_CXX11
inline void RemoveSessionRequest::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.RemoveSessionRequest.accountId)
}
#endif
inline void RemoveSessionRequest::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.RemoveSessionRequest.accountId)
}
inline void RemoveSessionRequest::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.RemoveSessionRequest.accountId)
}
inline ::std::string* RemoveSessionRequest::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.RemoveSessionRequest.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveSessionRequest::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.RemoveSessionRequest.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveSessionRequest::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.RemoveSessionRequest.accountId)
}

// -------------------------------------------------------------------

// RemoveSessionResponse

// -------------------------------------------------------------------

// GetSessionsRequest

// string query = 1;
inline void GetSessionsRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSessionsRequest::query() const {
  // @@protoc_insertion_point(field_get:resource.GetSessionsRequest.query)
  return query_.GetNoArena();
}
inline void GetSessionsRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetSessionsRequest.query)
}
#if LANG_CXX11
inline void GetSessionsRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetSessionsRequest.query)
}
#endif
inline void GetSessionsRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetSessionsRequest.query)
}
inline void GetSessionsRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetSessionsRequest.query)
}
inline ::std::string* GetSessionsRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetSessionsRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSessionsRequest::release_query() {
  // @@protoc_insertion_point(field_release:resource.GetSessionsRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSessionsRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:resource.GetSessionsRequest.query)
}

// string options = 2;
inline void GetSessionsRequest::clear_options() {
  options_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSessionsRequest::options() const {
  // @@protoc_insertion_point(field_get:resource.GetSessionsRequest.options)
  return options_.GetNoArena();
}
inline void GetSessionsRequest::set_options(const ::std::string& value) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetSessionsRequest.options)
}
#if LANG_CXX11
inline void GetSessionsRequest::set_options(::std::string&& value) {
  
  options_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetSessionsRequest.options)
}
#endif
inline void GetSessionsRequest::set_options(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetSessionsRequest.options)
}
inline void GetSessionsRequest::set_options(const char* value, size_t size) {
  
  options_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetSessionsRequest.options)
}
inline ::std::string* GetSessionsRequest::mutable_options() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetSessionsRequest.options)
  return options_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSessionsRequest::release_options() {
  // @@protoc_insertion_point(field_release:resource.GetSessionsRequest.options)
  
  return options_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSessionsRequest::set_allocated_options(::std::string* options) {
  if (options != NULL) {
    
  } else {
    
  }
  options_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), options);
  // @@protoc_insertion_point(field_set_allocated:resource.GetSessionsRequest.options)
}

// -------------------------------------------------------------------

// GetSessionsResponse

// repeated .resource.Session sessions = 1;
inline int GetSessionsResponse::sessions_size() const {
  return sessions_.size();
}
inline void GetSessionsResponse::clear_sessions() {
  sessions_.Clear();
}
inline ::resource::Session* GetSessionsResponse::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:resource.GetSessionsResponse.sessions)
  return sessions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::resource::Session >*
GetSessionsResponse::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:resource.GetSessionsResponse.sessions)
  return &sessions_;
}
inline const ::resource::Session& GetSessionsResponse::sessions(int index) const {
  // @@protoc_insertion_point(field_get:resource.GetSessionsResponse.sessions)
  return sessions_.Get(index);
}
inline ::resource::Session* GetSessionsResponse::add_sessions() {
  // @@protoc_insertion_point(field_add:resource.GetSessionsResponse.sessions)
  return sessions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::resource::Session >&
GetSessionsResponse::sessions() const {
  // @@protoc_insertion_point(field_list:resource.GetSessionsResponse.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// GetSessionRequest

// string accountId = 1;
inline void GetSessionRequest::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSessionRequest::accountid() const {
  // @@protoc_insertion_point(field_get:resource.GetSessionRequest.accountId)
  return accountid_.GetNoArena();
}
inline void GetSessionRequest::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:resource.GetSessionRequest.accountId)
}
#if LANG_CXX11
inline void GetSessionRequest::set_accountid(::std::string&& value) {
  
  accountid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:resource.GetSessionRequest.accountId)
}
#endif
inline void GetSessionRequest::set_accountid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:resource.GetSessionRequest.accountId)
}
inline void GetSessionRequest::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:resource.GetSessionRequest.accountId)
}
inline ::std::string* GetSessionRequest::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:resource.GetSessionRequest.accountId)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSessionRequest::release_accountid() {
  // @@protoc_insertion_point(field_release:resource.GetSessionRequest.accountId)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSessionRequest::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:resource.GetSessionRequest.accountId)
}

// -------------------------------------------------------------------

// GetSessionResponse

// .resource.Session session = 1;
inline bool GetSessionResponse::has_session() const {
  return this != internal_default_instance() && session_ != NULL;
}
inline void GetSessionResponse::clear_session() {
  if (GetArenaNoVirtual() == NULL && session_ != NULL) {
    delete session_;
  }
  session_ = NULL;
}
inline const ::resource::Session& GetSessionResponse::_internal_session() const {
  return *session_;
}
inline const ::resource::Session& GetSessionResponse::session() const {
  const ::resource::Session* p = session_;
  // @@protoc_insertion_point(field_get:resource.GetSessionResponse.session)
  return p != NULL ? *p : *reinterpret_cast<const ::resource::Session*>(
      &::resource::_Session_default_instance_);
}
inline ::resource::Session* GetSessionResponse::release_session() {
  // @@protoc_insertion_point(field_release:resource.GetSessionResponse.session)
  
  ::resource::Session* temp = session_;
  session_ = NULL;
  return temp;
}
inline ::resource::Session* GetSessionResponse::mutable_session() {
  
  if (session_ == NULL) {
    auto* p = CreateMaybeMessage<::resource::Session>(GetArenaNoVirtual());
    session_ = p;
  }
  // @@protoc_insertion_point(field_mutable:resource.GetSessionResponse.session)
  return session_;
}
inline void GetSessionResponse::set_allocated_session(::resource::Session* session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete session_;
  }
  if (session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:resource.GetSessionResponse.session)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resource

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::resource::PackageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::resource::PackageType>() {
  return ::resource::PackageType_descriptor();
}
template <> struct is_proto_enum< ::resource::PeerApprovalState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::resource::PeerApprovalState>() {
  return ::resource::PeerApprovalState_descriptor();
}
template <> struct is_proto_enum< ::resource::NotificationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::resource::NotificationType>() {
  return ::resource::NotificationType_descriptor();
}
template <> struct is_proto_enum< ::resource::SessionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::resource::SessionState>() {
  return ::resource::SessionState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_resource_2eproto
