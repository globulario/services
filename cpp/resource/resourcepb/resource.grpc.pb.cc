// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: resource.proto

#include "resource.pb.h"
#include "resource.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace resource {

static const char* ResourceService_method_names[] = {
  "/resource.ResourceService/CreateOrganization",
  "/resource.ResourceService/GetOrganizations",
  "/resource.ResourceService/DeleteOrganization",
  "/resource.ResourceService/AddOrganizationAccount",
  "/resource.ResourceService/AddOrganizationGroup",
  "/resource.ResourceService/AddOrganizationRole",
  "/resource.ResourceService/AddOrganizationApplication",
  "/resource.ResourceService/RemoveOrganizationAccount",
  "/resource.ResourceService/RemoveOrganizationGroup",
  "/resource.ResourceService/RemoveOrganizationRole",
  "/resource.ResourceService/RemoveOrganizationApplication",
  "/resource.ResourceService/CreateGroup",
  "/resource.ResourceService/UpdateGroup",
  "/resource.ResourceService/GetGroups",
  "/resource.ResourceService/DeleteGroup",
  "/resource.ResourceService/AddGroupMemberAccount",
  "/resource.ResourceService/RemoveGroupMemberAccount",
  "/resource.ResourceService/RegisterAccount",
  "/resource.ResourceService/DeleteAccount",
  "/resource.ResourceService/GetAccount",
  "/resource.ResourceService/SetAccountPassword",
  "/resource.ResourceService/GetAccounts",
  "/resource.ResourceService/AddAccountRole",
  "/resource.ResourceService/RemoveAccountRole",
  "/resource.ResourceService/SetAccountContact",
  "/resource.ResourceService/SetEmail",
  "/resource.ResourceService/IsOrgnanizationMember",
  "/resource.ResourceService/CreateRole",
  "/resource.ResourceService/GetRoles",
  "/resource.ResourceService/DeleteRole",
  "/resource.ResourceService/AddRoleActions",
  "/resource.ResourceService/RemoveRoleAction",
  "/resource.ResourceService/RemoveRolesAction",
  "/resource.ResourceService/CreateApplication",
  "/resource.ResourceService/UpdateApplication",
  "/resource.ResourceService/GetApplications",
  "/resource.ResourceService/DeleteApplication",
  "/resource.ResourceService/AddApplicationActions",
  "/resource.ResourceService/RemoveApplicationAction",
  "/resource.ResourceService/RemoveApplicationsAction",
  "/resource.ResourceService/GetApplicationVersion",
  "/resource.ResourceService/GetApplicationAlias",
  "/resource.ResourceService/GetApplicationIcon",
  "/resource.ResourceService/RegisterPeer",
  "/resource.ResourceService/GetPeers",
  "/resource.ResourceService/DeletePeer",
  "/resource.ResourceService/AddPeerActions",
  "/resource.ResourceService/RemovePeerAction",
  "/resource.ResourceService/RemovePeersAction",
  "/resource.ResourceService/CreateNotification",
  "/resource.ResourceService/GetNotifications",
  "/resource.ResourceService/DeleteNotification",
  "/resource.ResourceService/ClearAllNotifications",
  "/resource.ResourceService/ClearNotificationsByType",
  "/resource.ResourceService/FindPackages",
  "/resource.ResourceService/GetPackageDescriptor",
  "/resource.ResourceService/GetPackagesDescriptor",
  "/resource.ResourceService/SetPackageDescriptor",
  "/resource.ResourceService/SetPackageBundle",
  "/resource.ResourceService/GetPackageBundleChecksum",
  "/resource.ResourceService/UpdateSession",
  "/resource.ResourceService/GetSessions",
  "/resource.ResourceService/RemoveSession",
  "/resource.ResourceService/GetSession",
};

std::unique_ptr< ResourceService::Stub> ResourceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ResourceService::Stub> stub(new ResourceService::Stub(channel));
  return stub;
}

ResourceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateOrganization_(ResourceService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrganizations_(ResourceService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteOrganization_(ResourceService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddOrganizationAccount_(ResourceService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddOrganizationGroup_(ResourceService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddOrganizationRole_(ResourceService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddOrganizationApplication_(ResourceService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveOrganizationAccount_(ResourceService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveOrganizationGroup_(ResourceService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveOrganizationRole_(ResourceService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveOrganizationApplication_(ResourceService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateGroup_(ResourceService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroup_(ResourceService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGroups_(ResourceService_method_names[13], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteGroup_(ResourceService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddGroupMemberAccount_(ResourceService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveGroupMemberAccount_(ResourceService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterAccount_(ResourceService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAccount_(ResourceService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccount_(ResourceService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAccountPassword_(ResourceService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAccounts_(ResourceService_method_names[21], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AddAccountRole_(ResourceService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveAccountRole_(ResourceService_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAccountContact_(ResourceService_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEmail_(ResourceService_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsOrgnanizationMember_(ResourceService_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRole_(ResourceService_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoles_(ResourceService_method_names[28], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteRole_(ResourceService_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddRoleActions_(ResourceService_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveRoleAction_(ResourceService_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveRolesAction_(ResourceService_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateApplication_(ResourceService_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateApplication_(ResourceService_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetApplications_(ResourceService_method_names[35], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteApplication_(ResourceService_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddApplicationActions_(ResourceService_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveApplicationAction_(ResourceService_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveApplicationsAction_(ResourceService_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetApplicationVersion_(ResourceService_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetApplicationAlias_(ResourceService_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetApplicationIcon_(ResourceService_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterPeer_(ResourceService_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeers_(ResourceService_method_names[44], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeletePeer_(ResourceService_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPeerActions_(ResourceService_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePeerAction_(ResourceService_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePeersAction_(ResourceService_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNotification_(ResourceService_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNotifications_(ResourceService_method_names[50], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DeleteNotification_(ResourceService_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearAllNotifications_(ResourceService_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearNotificationsByType_(ResourceService_method_names[53], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindPackages_(ResourceService_method_names[54], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPackageDescriptor_(ResourceService_method_names[55], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPackagesDescriptor_(ResourceService_method_names[56], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetPackageDescriptor_(ResourceService_method_names[57], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPackageBundle_(ResourceService_method_names[58], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPackageBundleChecksum_(ResourceService_method_names[59], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSession_(ResourceService_method_names[60], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSessions_(ResourceService_method_names[61], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveSession_(ResourceService_method_names[62], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSession_(ResourceService_method_names[63], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ResourceService::Stub::CreateOrganization(::grpc::ClientContext* context, const ::resource::CreateOrganizationRqst& request, ::resource::CreateOrganizationRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateOrganization_, context, request, response);
}

void ResourceService::Stub::experimental_async::CreateOrganization(::grpc::ClientContext* context, const ::resource::CreateOrganizationRqst* request, ::resource::CreateOrganizationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::CreateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateOrganizationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::CreateOrganization(::grpc::ClientContext* context, const ::resource::CreateOrganizationRqst* request, ::resource::CreateOrganizationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::CreateOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateOrganizationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::CreateOrganizationRsp>* ResourceService::Stub::AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::resource::CreateOrganizationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::CreateOrganizationRsp>::Create(channel_.get(), cq, rpcmethod_CreateOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::CreateOrganizationRsp>* ResourceService::Stub::PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::resource::CreateOrganizationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::CreateOrganizationRsp>::Create(channel_.get(), cq, rpcmethod_CreateOrganization_, context, request, false);
}

::grpc::ClientReader< ::resource::GetOrganizationsRsp>* ResourceService::Stub::GetOrganizationsRaw(::grpc::ClientContext* context, const ::resource::GetOrganizationsRqst& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::resource::GetOrganizationsRsp>::Create(channel_.get(), rpcmethod_GetOrganizations_, context, request);
}

void ResourceService::Stub::experimental_async::GetOrganizations(::grpc::ClientContext* context, ::resource::GetOrganizationsRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetOrganizationsRsp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::resource::GetOrganizationsRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_GetOrganizations_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::resource::GetOrganizationsRsp>* ResourceService::Stub::AsyncGetOrganizationsRaw(::grpc::ClientContext* context, const ::resource::GetOrganizationsRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetOrganizationsRsp>::Create(channel_.get(), cq, rpcmethod_GetOrganizations_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::resource::GetOrganizationsRsp>* ResourceService::Stub::PrepareAsyncGetOrganizationsRaw(::grpc::ClientContext* context, const ::resource::GetOrganizationsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetOrganizationsRsp>::Create(channel_.get(), cq, rpcmethod_GetOrganizations_, context, request, false, nullptr);
}

::grpc::Status ResourceService::Stub::DeleteOrganization(::grpc::ClientContext* context, const ::resource::DeleteOrganizationRqst& request, ::resource::DeleteOrganizationRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteOrganization_, context, request, response);
}

void ResourceService::Stub::experimental_async::DeleteOrganization(::grpc::ClientContext* context, const ::resource::DeleteOrganizationRqst* request, ::resource::DeleteOrganizationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteOrganization_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteOrganizationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteOrganization_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteOrganization(::grpc::ClientContext* context, const ::resource::DeleteOrganizationRqst* request, ::resource::DeleteOrganizationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteOrganization_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::DeleteOrganization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteOrganizationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteOrganizationRsp>* ResourceService::Stub::AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::resource::DeleteOrganizationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteOrganizationRsp>::Create(channel_.get(), cq, rpcmethod_DeleteOrganization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteOrganizationRsp>* ResourceService::Stub::PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::resource::DeleteOrganizationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteOrganizationRsp>::Create(channel_.get(), cq, rpcmethod_DeleteOrganization_, context, request, false);
}

::grpc::Status ResourceService::Stub::AddOrganizationAccount(::grpc::ClientContext* context, const ::resource::AddOrganizationAccountRqst& request, ::resource::AddOrganizationAccountRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddOrganizationAccount_, context, request, response);
}

void ResourceService::Stub::experimental_async::AddOrganizationAccount(::grpc::ClientContext* context, const ::resource::AddOrganizationAccountRqst* request, ::resource::AddOrganizationAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddOrganizationAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddOrganizationAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddOrganizationAccount(::grpc::ClientContext* context, const ::resource::AddOrganizationAccountRqst* request, ::resource::AddOrganizationAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationAccount_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::AddOrganizationAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddOrganizationAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::AddOrganizationAccountRsp>* ResourceService::Stub::AsyncAddOrganizationAccountRaw(::grpc::ClientContext* context, const ::resource::AddOrganizationAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddOrganizationAccountRsp>::Create(channel_.get(), cq, rpcmethod_AddOrganizationAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::AddOrganizationAccountRsp>* ResourceService::Stub::PrepareAsyncAddOrganizationAccountRaw(::grpc::ClientContext* context, const ::resource::AddOrganizationAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddOrganizationAccountRsp>::Create(channel_.get(), cq, rpcmethod_AddOrganizationAccount_, context, request, false);
}

::grpc::Status ResourceService::Stub::AddOrganizationGroup(::grpc::ClientContext* context, const ::resource::AddOrganizationGroupRqst& request, ::resource::AddOrganizationGroupRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddOrganizationGroup_, context, request, response);
}

void ResourceService::Stub::experimental_async::AddOrganizationGroup(::grpc::ClientContext* context, const ::resource::AddOrganizationGroupRqst* request, ::resource::AddOrganizationGroupRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationGroup_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddOrganizationGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddOrganizationGroupRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationGroup_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddOrganizationGroup(::grpc::ClientContext* context, const ::resource::AddOrganizationGroupRqst* request, ::resource::AddOrganizationGroupRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationGroup_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::AddOrganizationGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddOrganizationGroupRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::AddOrganizationGroupRsp>* ResourceService::Stub::AsyncAddOrganizationGroupRaw(::grpc::ClientContext* context, const ::resource::AddOrganizationGroupRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddOrganizationGroupRsp>::Create(channel_.get(), cq, rpcmethod_AddOrganizationGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::AddOrganizationGroupRsp>* ResourceService::Stub::PrepareAsyncAddOrganizationGroupRaw(::grpc::ClientContext* context, const ::resource::AddOrganizationGroupRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddOrganizationGroupRsp>::Create(channel_.get(), cq, rpcmethod_AddOrganizationGroup_, context, request, false);
}

::grpc::Status ResourceService::Stub::AddOrganizationRole(::grpc::ClientContext* context, const ::resource::AddOrganizationRoleRqst& request, ::resource::AddOrganizationRoleRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddOrganizationRole_, context, request, response);
}

void ResourceService::Stub::experimental_async::AddOrganizationRole(::grpc::ClientContext* context, const ::resource::AddOrganizationRoleRqst* request, ::resource::AddOrganizationRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddOrganizationRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddOrganizationRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddOrganizationRole(::grpc::ClientContext* context, const ::resource::AddOrganizationRoleRqst* request, ::resource::AddOrganizationRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationRole_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::AddOrganizationRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddOrganizationRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::AddOrganizationRoleRsp>* ResourceService::Stub::AsyncAddOrganizationRoleRaw(::grpc::ClientContext* context, const ::resource::AddOrganizationRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddOrganizationRoleRsp>::Create(channel_.get(), cq, rpcmethod_AddOrganizationRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::AddOrganizationRoleRsp>* ResourceService::Stub::PrepareAsyncAddOrganizationRoleRaw(::grpc::ClientContext* context, const ::resource::AddOrganizationRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddOrganizationRoleRsp>::Create(channel_.get(), cq, rpcmethod_AddOrganizationRole_, context, request, false);
}

::grpc::Status ResourceService::Stub::AddOrganizationApplication(::grpc::ClientContext* context, const ::resource::AddOrganizationApplicationRqst& request, ::resource::AddOrganizationApplicationRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddOrganizationApplication_, context, request, response);
}

void ResourceService::Stub::experimental_async::AddOrganizationApplication(::grpc::ClientContext* context, const ::resource::AddOrganizationApplicationRqst* request, ::resource::AddOrganizationApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationApplication_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddOrganizationApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddOrganizationApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationApplication_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddOrganizationApplication(::grpc::ClientContext* context, const ::resource::AddOrganizationApplicationRqst* request, ::resource::AddOrganizationApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationApplication_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::AddOrganizationApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddOrganizationApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddOrganizationApplication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::AddOrganizationApplicationRsp>* ResourceService::Stub::AsyncAddOrganizationApplicationRaw(::grpc::ClientContext* context, const ::resource::AddOrganizationApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddOrganizationApplicationRsp>::Create(channel_.get(), cq, rpcmethod_AddOrganizationApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::AddOrganizationApplicationRsp>* ResourceService::Stub::PrepareAsyncAddOrganizationApplicationRaw(::grpc::ClientContext* context, const ::resource::AddOrganizationApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddOrganizationApplicationRsp>::Create(channel_.get(), cq, rpcmethod_AddOrganizationApplication_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemoveOrganizationAccount(::grpc::ClientContext* context, const ::resource::RemoveOrganizationAccountRqst& request, ::resource::RemoveOrganizationAccountRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveOrganizationAccount_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemoveOrganizationAccount(::grpc::ClientContext* context, const ::resource::RemoveOrganizationAccountRqst* request, ::resource::RemoveOrganizationAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveOrganizationAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveOrganizationAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveOrganizationAccount(::grpc::ClientContext* context, const ::resource::RemoveOrganizationAccountRqst* request, ::resource::RemoveOrganizationAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationAccount_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemoveOrganizationAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveOrganizationAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveOrganizationAccountRsp>* ResourceService::Stub::AsyncRemoveOrganizationAccountRaw(::grpc::ClientContext* context, const ::resource::RemoveOrganizationAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveOrganizationAccountRsp>::Create(channel_.get(), cq, rpcmethod_RemoveOrganizationAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveOrganizationAccountRsp>* ResourceService::Stub::PrepareAsyncRemoveOrganizationAccountRaw(::grpc::ClientContext* context, const ::resource::RemoveOrganizationAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveOrganizationAccountRsp>::Create(channel_.get(), cq, rpcmethod_RemoveOrganizationAccount_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemoveOrganizationGroup(::grpc::ClientContext* context, const ::resource::RemoveOrganizationGroupRqst& request, ::resource::RemoveOrganizationGroupRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveOrganizationGroup_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemoveOrganizationGroup(::grpc::ClientContext* context, const ::resource::RemoveOrganizationGroupRqst* request, ::resource::RemoveOrganizationGroupRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationGroup_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveOrganizationGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveOrganizationGroupRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationGroup_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveOrganizationGroup(::grpc::ClientContext* context, const ::resource::RemoveOrganizationGroupRqst* request, ::resource::RemoveOrganizationGroupRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationGroup_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemoveOrganizationGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveOrganizationGroupRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveOrganizationGroupRsp>* ResourceService::Stub::AsyncRemoveOrganizationGroupRaw(::grpc::ClientContext* context, const ::resource::RemoveOrganizationGroupRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveOrganizationGroupRsp>::Create(channel_.get(), cq, rpcmethod_RemoveOrganizationGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveOrganizationGroupRsp>* ResourceService::Stub::PrepareAsyncRemoveOrganizationGroupRaw(::grpc::ClientContext* context, const ::resource::RemoveOrganizationGroupRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveOrganizationGroupRsp>::Create(channel_.get(), cq, rpcmethod_RemoveOrganizationGroup_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemoveOrganizationRole(::grpc::ClientContext* context, const ::resource::RemoveOrganizationRoleRqst& request, ::resource::RemoveOrganizationRoleRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveOrganizationRole_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemoveOrganizationRole(::grpc::ClientContext* context, const ::resource::RemoveOrganizationRoleRqst* request, ::resource::RemoveOrganizationRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveOrganizationRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveOrganizationRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveOrganizationRole(::grpc::ClientContext* context, const ::resource::RemoveOrganizationRoleRqst* request, ::resource::RemoveOrganizationRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationRole_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemoveOrganizationRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveOrganizationRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveOrganizationRoleRsp>* ResourceService::Stub::AsyncRemoveOrganizationRoleRaw(::grpc::ClientContext* context, const ::resource::RemoveOrganizationRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveOrganizationRoleRsp>::Create(channel_.get(), cq, rpcmethod_RemoveOrganizationRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveOrganizationRoleRsp>* ResourceService::Stub::PrepareAsyncRemoveOrganizationRoleRaw(::grpc::ClientContext* context, const ::resource::RemoveOrganizationRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveOrganizationRoleRsp>::Create(channel_.get(), cq, rpcmethod_RemoveOrganizationRole_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemoveOrganizationApplication(::grpc::ClientContext* context, const ::resource::RemoveOrganizationApplicationRqst& request, ::resource::RemoveOrganizationApplicationRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveOrganizationApplication_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemoveOrganizationApplication(::grpc::ClientContext* context, const ::resource::RemoveOrganizationApplicationRqst* request, ::resource::RemoveOrganizationApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationApplication_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveOrganizationApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveOrganizationApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationApplication_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveOrganizationApplication(::grpc::ClientContext* context, const ::resource::RemoveOrganizationApplicationRqst* request, ::resource::RemoveOrganizationApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationApplication_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemoveOrganizationApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveOrganizationApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveOrganizationApplication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveOrganizationApplicationRsp>* ResourceService::Stub::AsyncRemoveOrganizationApplicationRaw(::grpc::ClientContext* context, const ::resource::RemoveOrganizationApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveOrganizationApplicationRsp>::Create(channel_.get(), cq, rpcmethod_RemoveOrganizationApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveOrganizationApplicationRsp>* ResourceService::Stub::PrepareAsyncRemoveOrganizationApplicationRaw(::grpc::ClientContext* context, const ::resource::RemoveOrganizationApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveOrganizationApplicationRsp>::Create(channel_.get(), cq, rpcmethod_RemoveOrganizationApplication_, context, request, false);
}

::grpc::Status ResourceService::Stub::CreateGroup(::grpc::ClientContext* context, const ::resource::CreateGroupRqst& request, ::resource::CreateGroupRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateGroup_, context, request, response);
}

void ResourceService::Stub::experimental_async::CreateGroup(::grpc::ClientContext* context, const ::resource::CreateGroupRqst* request, ::resource::CreateGroupRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateGroup_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::CreateGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateGroupRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateGroup_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::CreateGroup(::grpc::ClientContext* context, const ::resource::CreateGroupRqst* request, ::resource::CreateGroupRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateGroup_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::CreateGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateGroupRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::CreateGroupRsp>* ResourceService::Stub::AsyncCreateGroupRaw(::grpc::ClientContext* context, const ::resource::CreateGroupRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::CreateGroupRsp>::Create(channel_.get(), cq, rpcmethod_CreateGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::CreateGroupRsp>* ResourceService::Stub::PrepareAsyncCreateGroupRaw(::grpc::ClientContext* context, const ::resource::CreateGroupRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::CreateGroupRsp>::Create(channel_.get(), cq, rpcmethod_CreateGroup_, context, request, false);
}

::grpc::Status ResourceService::Stub::UpdateGroup(::grpc::ClientContext* context, const ::resource::UpdateGroupRqst& request, ::resource::UpdateGroupRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateGroup_, context, request, response);
}

void ResourceService::Stub::experimental_async::UpdateGroup(::grpc::ClientContext* context, const ::resource::UpdateGroupRqst* request, ::resource::UpdateGroupRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGroup_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::UpdateGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::UpdateGroupRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateGroup_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::UpdateGroup(::grpc::ClientContext* context, const ::resource::UpdateGroupRqst* request, ::resource::UpdateGroupRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateGroup_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::UpdateGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::UpdateGroupRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::UpdateGroupRsp>* ResourceService::Stub::AsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::resource::UpdateGroupRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::UpdateGroupRsp>::Create(channel_.get(), cq, rpcmethod_UpdateGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::UpdateGroupRsp>* ResourceService::Stub::PrepareAsyncUpdateGroupRaw(::grpc::ClientContext* context, const ::resource::UpdateGroupRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::UpdateGroupRsp>::Create(channel_.get(), cq, rpcmethod_UpdateGroup_, context, request, false);
}

::grpc::ClientReader< ::resource::GetGroupsRsp>* ResourceService::Stub::GetGroupsRaw(::grpc::ClientContext* context, const ::resource::GetGroupsRqst& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::resource::GetGroupsRsp>::Create(channel_.get(), rpcmethod_GetGroups_, context, request);
}

void ResourceService::Stub::experimental_async::GetGroups(::grpc::ClientContext* context, ::resource::GetGroupsRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetGroupsRsp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::resource::GetGroupsRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_GetGroups_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::resource::GetGroupsRsp>* ResourceService::Stub::AsyncGetGroupsRaw(::grpc::ClientContext* context, const ::resource::GetGroupsRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetGroupsRsp>::Create(channel_.get(), cq, rpcmethod_GetGroups_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::resource::GetGroupsRsp>* ResourceService::Stub::PrepareAsyncGetGroupsRaw(::grpc::ClientContext* context, const ::resource::GetGroupsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetGroupsRsp>::Create(channel_.get(), cq, rpcmethod_GetGroups_, context, request, false, nullptr);
}

::grpc::Status ResourceService::Stub::DeleteGroup(::grpc::ClientContext* context, const ::resource::DeleteGroupRqst& request, ::resource::DeleteGroupRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteGroup_, context, request, response);
}

void ResourceService::Stub::experimental_async::DeleteGroup(::grpc::ClientContext* context, const ::resource::DeleteGroupRqst* request, ::resource::DeleteGroupRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteGroup_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteGroupRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteGroup_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteGroup(::grpc::ClientContext* context, const ::resource::DeleteGroupRqst* request, ::resource::DeleteGroupRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteGroup_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::DeleteGroup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteGroupRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteGroupRsp>* ResourceService::Stub::AsyncDeleteGroupRaw(::grpc::ClientContext* context, const ::resource::DeleteGroupRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteGroupRsp>::Create(channel_.get(), cq, rpcmethod_DeleteGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteGroupRsp>* ResourceService::Stub::PrepareAsyncDeleteGroupRaw(::grpc::ClientContext* context, const ::resource::DeleteGroupRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteGroupRsp>::Create(channel_.get(), cq, rpcmethod_DeleteGroup_, context, request, false);
}

::grpc::Status ResourceService::Stub::AddGroupMemberAccount(::grpc::ClientContext* context, const ::resource::AddGroupMemberAccountRqst& request, ::resource::AddGroupMemberAccountRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddGroupMemberAccount_, context, request, response);
}

void ResourceService::Stub::experimental_async::AddGroupMemberAccount(::grpc::ClientContext* context, const ::resource::AddGroupMemberAccountRqst* request, ::resource::AddGroupMemberAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddGroupMemberAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddGroupMemberAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddGroupMemberAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddGroupMemberAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddGroupMemberAccount(::grpc::ClientContext* context, const ::resource::AddGroupMemberAccountRqst* request, ::resource::AddGroupMemberAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddGroupMemberAccount_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::AddGroupMemberAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddGroupMemberAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddGroupMemberAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::AddGroupMemberAccountRsp>* ResourceService::Stub::AsyncAddGroupMemberAccountRaw(::grpc::ClientContext* context, const ::resource::AddGroupMemberAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddGroupMemberAccountRsp>::Create(channel_.get(), cq, rpcmethod_AddGroupMemberAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::AddGroupMemberAccountRsp>* ResourceService::Stub::PrepareAsyncAddGroupMemberAccountRaw(::grpc::ClientContext* context, const ::resource::AddGroupMemberAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddGroupMemberAccountRsp>::Create(channel_.get(), cq, rpcmethod_AddGroupMemberAccount_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemoveGroupMemberAccount(::grpc::ClientContext* context, const ::resource::RemoveGroupMemberAccountRqst& request, ::resource::RemoveGroupMemberAccountRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveGroupMemberAccount_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemoveGroupMemberAccount(::grpc::ClientContext* context, const ::resource::RemoveGroupMemberAccountRqst* request, ::resource::RemoveGroupMemberAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveGroupMemberAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveGroupMemberAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveGroupMemberAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveGroupMemberAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveGroupMemberAccount(::grpc::ClientContext* context, const ::resource::RemoveGroupMemberAccountRqst* request, ::resource::RemoveGroupMemberAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveGroupMemberAccount_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemoveGroupMemberAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveGroupMemberAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveGroupMemberAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveGroupMemberAccountRsp>* ResourceService::Stub::AsyncRemoveGroupMemberAccountRaw(::grpc::ClientContext* context, const ::resource::RemoveGroupMemberAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveGroupMemberAccountRsp>::Create(channel_.get(), cq, rpcmethod_RemoveGroupMemberAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveGroupMemberAccountRsp>* ResourceService::Stub::PrepareAsyncRemoveGroupMemberAccountRaw(::grpc::ClientContext* context, const ::resource::RemoveGroupMemberAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveGroupMemberAccountRsp>::Create(channel_.get(), cq, rpcmethod_RemoveGroupMemberAccount_, context, request, false);
}

::grpc::Status ResourceService::Stub::RegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::resource::RegisterAccountRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterAccount_, context, request, response);
}

void ResourceService::Stub::experimental_async::RegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst* request, ::resource::RegisterAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RegisterAccount(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst* request, ::resource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterAccount_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RegisterAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RegisterAccountRsp>* ResourceService::Stub::AsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RegisterAccountRsp>::Create(channel_.get(), cq, rpcmethod_RegisterAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RegisterAccountRsp>* ResourceService::Stub::PrepareAsyncRegisterAccountRaw(::grpc::ClientContext* context, const ::resource::RegisterAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RegisterAccountRsp>::Create(channel_.get(), cq, rpcmethod_RegisterAccount_, context, request, false);
}

::grpc::Status ResourceService::Stub::DeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::resource::DeleteAccountRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteAccount_, context, request, response);
}

void ResourceService::Stub::experimental_async::DeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst* request, ::resource::DeleteAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteAccount(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst* request, ::resource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::DeleteAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountRsp>* ResourceService::Stub::AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteAccountRsp>::Create(channel_.get(), cq, rpcmethod_DeleteAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteAccountRsp>* ResourceService::Stub::PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::resource::DeleteAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteAccountRsp>::Create(channel_.get(), cq, rpcmethod_DeleteAccount_, context, request, false);
}

::grpc::Status ResourceService::Stub::GetAccount(::grpc::ClientContext* context, const ::resource::GetAccountRqst& request, ::resource::GetAccountRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAccount_, context, request, response);
}

void ResourceService::Stub::experimental_async::GetAccount(::grpc::ClientContext* context, const ::resource::GetAccountRqst* request, ::resource::GetAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAccountRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAccount_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetAccount(::grpc::ClientContext* context, const ::resource::GetAccountRqst* request, ::resource::GetAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAccount_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::GetAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetAccountRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::GetAccountRsp>* ResourceService::Stub::AsyncGetAccountRaw(::grpc::ClientContext* context, const ::resource::GetAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetAccountRsp>::Create(channel_.get(), cq, rpcmethod_GetAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::GetAccountRsp>* ResourceService::Stub::PrepareAsyncGetAccountRaw(::grpc::ClientContext* context, const ::resource::GetAccountRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetAccountRsp>::Create(channel_.get(), cq, rpcmethod_GetAccount_, context, request, false);
}

::grpc::Status ResourceService::Stub::SetAccountPassword(::grpc::ClientContext* context, const ::resource::SetAccountPasswordRqst& request, ::resource::SetAccountPasswordRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetAccountPassword_, context, request, response);
}

void ResourceService::Stub::experimental_async::SetAccountPassword(::grpc::ClientContext* context, const ::resource::SetAccountPasswordRqst* request, ::resource::SetAccountPasswordRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAccountPassword_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::SetAccountPassword(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetAccountPasswordRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAccountPassword_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::SetAccountPassword(::grpc::ClientContext* context, const ::resource::SetAccountPasswordRqst* request, ::resource::SetAccountPasswordRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAccountPassword_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::SetAccountPassword(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetAccountPasswordRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAccountPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::SetAccountPasswordRsp>* ResourceService::Stub::AsyncSetAccountPasswordRaw(::grpc::ClientContext* context, const ::resource::SetAccountPasswordRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::SetAccountPasswordRsp>::Create(channel_.get(), cq, rpcmethod_SetAccountPassword_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::SetAccountPasswordRsp>* ResourceService::Stub::PrepareAsyncSetAccountPasswordRaw(::grpc::ClientContext* context, const ::resource::SetAccountPasswordRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::SetAccountPasswordRsp>::Create(channel_.get(), cq, rpcmethod_SetAccountPassword_, context, request, false);
}

::grpc::ClientReader< ::resource::GetAccountsRsp>* ResourceService::Stub::GetAccountsRaw(::grpc::ClientContext* context, const ::resource::GetAccountsRqst& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::resource::GetAccountsRsp>::Create(channel_.get(), rpcmethod_GetAccounts_, context, request);
}

void ResourceService::Stub::experimental_async::GetAccounts(::grpc::ClientContext* context, ::resource::GetAccountsRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetAccountsRsp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::resource::GetAccountsRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAccounts_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::resource::GetAccountsRsp>* ResourceService::Stub::AsyncGetAccountsRaw(::grpc::ClientContext* context, const ::resource::GetAccountsRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetAccountsRsp>::Create(channel_.get(), cq, rpcmethod_GetAccounts_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::resource::GetAccountsRsp>* ResourceService::Stub::PrepareAsyncGetAccountsRaw(::grpc::ClientContext* context, const ::resource::GetAccountsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetAccountsRsp>::Create(channel_.get(), cq, rpcmethod_GetAccounts_, context, request, false, nullptr);
}

::grpc::Status ResourceService::Stub::AddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::resource::AddAccountRoleRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddAccountRole_, context, request, response);
}

void ResourceService::Stub::experimental_async::AddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst* request, ::resource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddAccountRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddAccountRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddAccountRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddAccountRole(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst* request, ::resource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddAccountRole_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::AddAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddAccountRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::AddAccountRoleRsp>* ResourceService::Stub::AsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddAccountRoleRsp>::Create(channel_.get(), cq, rpcmethod_AddAccountRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::AddAccountRoleRsp>* ResourceService::Stub::PrepareAsyncAddAccountRoleRaw(::grpc::ClientContext* context, const ::resource::AddAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddAccountRoleRsp>::Create(channel_.get(), cq, rpcmethod_AddAccountRole_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::resource::RemoveAccountRoleRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveAccountRole_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst* request, ::resource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveAccountRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveAccountRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveAccountRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveAccountRole(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst* request, ::resource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveAccountRole_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemoveAccountRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveAccountRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveAccountRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveAccountRoleRsp>* ResourceService::Stub::AsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveAccountRoleRsp>::Create(channel_.get(), cq, rpcmethod_RemoveAccountRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveAccountRoleRsp>* ResourceService::Stub::PrepareAsyncRemoveAccountRoleRaw(::grpc::ClientContext* context, const ::resource::RemoveAccountRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveAccountRoleRsp>::Create(channel_.get(), cq, rpcmethod_RemoveAccountRole_, context, request, false);
}

::grpc::Status ResourceService::Stub::SetAccountContact(::grpc::ClientContext* context, const ::resource::SetAccountContactRqst& request, ::resource::SetAccountContactRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetAccountContact_, context, request, response);
}

void ResourceService::Stub::experimental_async::SetAccountContact(::grpc::ClientContext* context, const ::resource::SetAccountContactRqst* request, ::resource::SetAccountContactRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAccountContact_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::SetAccountContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetAccountContactRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAccountContact_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::SetAccountContact(::grpc::ClientContext* context, const ::resource::SetAccountContactRqst* request, ::resource::SetAccountContactRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAccountContact_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::SetAccountContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetAccountContactRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAccountContact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::SetAccountContactRsp>* ResourceService::Stub::AsyncSetAccountContactRaw(::grpc::ClientContext* context, const ::resource::SetAccountContactRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::SetAccountContactRsp>::Create(channel_.get(), cq, rpcmethod_SetAccountContact_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::SetAccountContactRsp>* ResourceService::Stub::PrepareAsyncSetAccountContactRaw(::grpc::ClientContext* context, const ::resource::SetAccountContactRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::SetAccountContactRsp>::Create(channel_.get(), cq, rpcmethod_SetAccountContact_, context, request, false);
}

::grpc::Status ResourceService::Stub::SetEmail(::grpc::ClientContext* context, const ::resource::SetEmailRequest& request, ::resource::SetEmailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetEmail_, context, request, response);
}

void ResourceService::Stub::experimental_async::SetEmail(::grpc::ClientContext* context, const ::resource::SetEmailRequest* request, ::resource::SetEmailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEmail_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::SetEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetEmailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEmail_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::SetEmail(::grpc::ClientContext* context, const ::resource::SetEmailRequest* request, ::resource::SetEmailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEmail_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::SetEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetEmailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::SetEmailResponse>* ResourceService::Stub::AsyncSetEmailRaw(::grpc::ClientContext* context, const ::resource::SetEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::SetEmailResponse>::Create(channel_.get(), cq, rpcmethod_SetEmail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::SetEmailResponse>* ResourceService::Stub::PrepareAsyncSetEmailRaw(::grpc::ClientContext* context, const ::resource::SetEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::SetEmailResponse>::Create(channel_.get(), cq, rpcmethod_SetEmail_, context, request, false);
}

::grpc::Status ResourceService::Stub::IsOrgnanizationMember(::grpc::ClientContext* context, const ::resource::IsOrgnanizationMemberRqst& request, ::resource::IsOrgnanizationMemberRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsOrgnanizationMember_, context, request, response);
}

void ResourceService::Stub::experimental_async::IsOrgnanizationMember(::grpc::ClientContext* context, const ::resource::IsOrgnanizationMemberRqst* request, ::resource::IsOrgnanizationMemberRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsOrgnanizationMember_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::IsOrgnanizationMember(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::IsOrgnanizationMemberRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsOrgnanizationMember_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::IsOrgnanizationMember(::grpc::ClientContext* context, const ::resource::IsOrgnanizationMemberRqst* request, ::resource::IsOrgnanizationMemberRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsOrgnanizationMember_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::IsOrgnanizationMember(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::IsOrgnanizationMemberRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsOrgnanizationMember_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::IsOrgnanizationMemberRsp>* ResourceService::Stub::AsyncIsOrgnanizationMemberRaw(::grpc::ClientContext* context, const ::resource::IsOrgnanizationMemberRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::IsOrgnanizationMemberRsp>::Create(channel_.get(), cq, rpcmethod_IsOrgnanizationMember_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::IsOrgnanizationMemberRsp>* ResourceService::Stub::PrepareAsyncIsOrgnanizationMemberRaw(::grpc::ClientContext* context, const ::resource::IsOrgnanizationMemberRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::IsOrgnanizationMemberRsp>::Create(channel_.get(), cq, rpcmethod_IsOrgnanizationMember_, context, request, false);
}

::grpc::Status ResourceService::Stub::CreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::resource::CreateRoleRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateRole_, context, request, response);
}

void ResourceService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst* request, ::resource::CreateRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::resource::CreateRoleRqst* request, ::resource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::CreateRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::CreateRoleRsp>* ResourceService::Stub::AsyncCreateRoleRaw(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::CreateRoleRsp>::Create(channel_.get(), cq, rpcmethod_CreateRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::CreateRoleRsp>* ResourceService::Stub::PrepareAsyncCreateRoleRaw(::grpc::ClientContext* context, const ::resource::CreateRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::CreateRoleRsp>::Create(channel_.get(), cq, rpcmethod_CreateRole_, context, request, false);
}

::grpc::ClientReader< ::resource::GetRolesRsp>* ResourceService::Stub::GetRolesRaw(::grpc::ClientContext* context, const ::resource::GetRolesRqst& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::resource::GetRolesRsp>::Create(channel_.get(), rpcmethod_GetRoles_, context, request);
}

void ResourceService::Stub::experimental_async::GetRoles(::grpc::ClientContext* context, ::resource::GetRolesRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetRolesRsp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::resource::GetRolesRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_GetRoles_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::resource::GetRolesRsp>* ResourceService::Stub::AsyncGetRolesRaw(::grpc::ClientContext* context, const ::resource::GetRolesRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetRolesRsp>::Create(channel_.get(), cq, rpcmethod_GetRoles_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::resource::GetRolesRsp>* ResourceService::Stub::PrepareAsyncGetRolesRaw(::grpc::ClientContext* context, const ::resource::GetRolesRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetRolesRsp>::Create(channel_.get(), cq, rpcmethod_GetRoles_, context, request, false, nullptr);
}

::grpc::Status ResourceService::Stub::DeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::resource::DeleteRoleRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRole_, context, request, response);
}

void ResourceService::Stub::experimental_async::DeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst* request, ::resource::DeleteRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRoleRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteRole(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst* request, ::resource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::DeleteRole(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteRoleRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteRole_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteRoleRsp>* ResourceService::Stub::AsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteRoleRsp>::Create(channel_.get(), cq, rpcmethod_DeleteRole_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteRoleRsp>* ResourceService::Stub::PrepareAsyncDeleteRoleRaw(::grpc::ClientContext* context, const ::resource::DeleteRoleRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteRoleRsp>::Create(channel_.get(), cq, rpcmethod_DeleteRole_, context, request, false);
}

::grpc::Status ResourceService::Stub::AddRoleActions(::grpc::ClientContext* context, const ::resource::AddRoleActionsRqst& request, ::resource::AddRoleActionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddRoleActions_, context, request, response);
}

void ResourceService::Stub::experimental_async::AddRoleActions(::grpc::ClientContext* context, const ::resource::AddRoleActionsRqst* request, ::resource::AddRoleActionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddRoleActions_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddRoleActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddRoleActionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddRoleActions_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddRoleActions(::grpc::ClientContext* context, const ::resource::AddRoleActionsRqst* request, ::resource::AddRoleActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddRoleActions_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::AddRoleActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddRoleActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddRoleActions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::AddRoleActionsRsp>* ResourceService::Stub::AsyncAddRoleActionsRaw(::grpc::ClientContext* context, const ::resource::AddRoleActionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddRoleActionsRsp>::Create(channel_.get(), cq, rpcmethod_AddRoleActions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::AddRoleActionsRsp>* ResourceService::Stub::PrepareAsyncAddRoleActionsRaw(::grpc::ClientContext* context, const ::resource::AddRoleActionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddRoleActionsRsp>::Create(channel_.get(), cq, rpcmethod_AddRoleActions_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::resource::RemoveRoleActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveRoleAction_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst* request, ::resource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveRoleAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveRoleActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveRoleAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveRoleAction(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst* request, ::resource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveRoleAction_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemoveRoleAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveRoleActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveRoleAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveRoleActionRsp>* ResourceService::Stub::AsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveRoleActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveRoleAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveRoleActionRsp>* ResourceService::Stub::PrepareAsyncRemoveRoleActionRaw(::grpc::ClientContext* context, const ::resource::RemoveRoleActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveRoleActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveRoleAction_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemoveRolesAction(::grpc::ClientContext* context, const ::resource::RemoveRolesActionRqst& request, ::resource::RemoveRolesActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveRolesAction_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemoveRolesAction(::grpc::ClientContext* context, const ::resource::RemoveRolesActionRqst* request, ::resource::RemoveRolesActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveRolesAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveRolesAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveRolesActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveRolesAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveRolesAction(::grpc::ClientContext* context, const ::resource::RemoveRolesActionRqst* request, ::resource::RemoveRolesActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveRolesAction_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemoveRolesAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveRolesActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveRolesAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveRolesActionRsp>* ResourceService::Stub::AsyncRemoveRolesActionRaw(::grpc::ClientContext* context, const ::resource::RemoveRolesActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveRolesActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveRolesAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveRolesActionRsp>* ResourceService::Stub::PrepareAsyncRemoveRolesActionRaw(::grpc::ClientContext* context, const ::resource::RemoveRolesActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveRolesActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveRolesAction_, context, request, false);
}

::grpc::Status ResourceService::Stub::CreateApplication(::grpc::ClientContext* context, const ::resource::CreateApplicationRqst& request, ::resource::CreateApplicationRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateApplication_, context, request, response);
}

void ResourceService::Stub::experimental_async::CreateApplication(::grpc::ClientContext* context, const ::resource::CreateApplicationRqst* request, ::resource::CreateApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateApplication_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::CreateApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateApplication_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::CreateApplication(::grpc::ClientContext* context, const ::resource::CreateApplicationRqst* request, ::resource::CreateApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateApplication_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::CreateApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateApplication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::CreateApplicationRsp>* ResourceService::Stub::AsyncCreateApplicationRaw(::grpc::ClientContext* context, const ::resource::CreateApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::CreateApplicationRsp>::Create(channel_.get(), cq, rpcmethod_CreateApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::CreateApplicationRsp>* ResourceService::Stub::PrepareAsyncCreateApplicationRaw(::grpc::ClientContext* context, const ::resource::CreateApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::CreateApplicationRsp>::Create(channel_.get(), cq, rpcmethod_CreateApplication_, context, request, false);
}

::grpc::Status ResourceService::Stub::UpdateApplication(::grpc::ClientContext* context, const ::resource::UpdateApplicationRqst& request, ::resource::UpdateApplicationRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateApplication_, context, request, response);
}

void ResourceService::Stub::experimental_async::UpdateApplication(::grpc::ClientContext* context, const ::resource::UpdateApplicationRqst* request, ::resource::UpdateApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateApplication_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::UpdateApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::UpdateApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateApplication_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::UpdateApplication(::grpc::ClientContext* context, const ::resource::UpdateApplicationRqst* request, ::resource::UpdateApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateApplication_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::UpdateApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::UpdateApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateApplication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::UpdateApplicationRsp>* ResourceService::Stub::AsyncUpdateApplicationRaw(::grpc::ClientContext* context, const ::resource::UpdateApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::UpdateApplicationRsp>::Create(channel_.get(), cq, rpcmethod_UpdateApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::UpdateApplicationRsp>* ResourceService::Stub::PrepareAsyncUpdateApplicationRaw(::grpc::ClientContext* context, const ::resource::UpdateApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::UpdateApplicationRsp>::Create(channel_.get(), cq, rpcmethod_UpdateApplication_, context, request, false);
}

::grpc::ClientReader< ::resource::GetApplicationsRsp>* ResourceService::Stub::GetApplicationsRaw(::grpc::ClientContext* context, const ::resource::GetApplicationsRqst& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::resource::GetApplicationsRsp>::Create(channel_.get(), rpcmethod_GetApplications_, context, request);
}

void ResourceService::Stub::experimental_async::GetApplications(::grpc::ClientContext* context, ::resource::GetApplicationsRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetApplicationsRsp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::resource::GetApplicationsRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_GetApplications_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::resource::GetApplicationsRsp>* ResourceService::Stub::AsyncGetApplicationsRaw(::grpc::ClientContext* context, const ::resource::GetApplicationsRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetApplicationsRsp>::Create(channel_.get(), cq, rpcmethod_GetApplications_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::resource::GetApplicationsRsp>* ResourceService::Stub::PrepareAsyncGetApplicationsRaw(::grpc::ClientContext* context, const ::resource::GetApplicationsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetApplicationsRsp>::Create(channel_.get(), cq, rpcmethod_GetApplications_, context, request, false, nullptr);
}

::grpc::Status ResourceService::Stub::DeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::resource::DeleteApplicationRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteApplication_, context, request, response);
}

void ResourceService::Stub::experimental_async::DeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst* request, ::resource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteApplication_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteApplicationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteApplication_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteApplication(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst* request, ::resource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteApplication_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::DeleteApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteApplicationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteApplication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteApplicationRsp>* ResourceService::Stub::AsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteApplicationRsp>::Create(channel_.get(), cq, rpcmethod_DeleteApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteApplicationRsp>* ResourceService::Stub::PrepareAsyncDeleteApplicationRaw(::grpc::ClientContext* context, const ::resource::DeleteApplicationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteApplicationRsp>::Create(channel_.get(), cq, rpcmethod_DeleteApplication_, context, request, false);
}

::grpc::Status ResourceService::Stub::AddApplicationActions(::grpc::ClientContext* context, const ::resource::AddApplicationActionsRqst& request, ::resource::AddApplicationActionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddApplicationActions_, context, request, response);
}

void ResourceService::Stub::experimental_async::AddApplicationActions(::grpc::ClientContext* context, const ::resource::AddApplicationActionsRqst* request, ::resource::AddApplicationActionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddApplicationActions_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddApplicationActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddApplicationActionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddApplicationActions_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddApplicationActions(::grpc::ClientContext* context, const ::resource::AddApplicationActionsRqst* request, ::resource::AddApplicationActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddApplicationActions_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::AddApplicationActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddApplicationActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddApplicationActions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::AddApplicationActionsRsp>* ResourceService::Stub::AsyncAddApplicationActionsRaw(::grpc::ClientContext* context, const ::resource::AddApplicationActionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddApplicationActionsRsp>::Create(channel_.get(), cq, rpcmethod_AddApplicationActions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::AddApplicationActionsRsp>* ResourceService::Stub::PrepareAsyncAddApplicationActionsRaw(::grpc::ClientContext* context, const ::resource::AddApplicationActionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddApplicationActionsRsp>::Create(channel_.get(), cq, rpcmethod_AddApplicationActions_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::resource::RemoveApplicationActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveApplicationAction_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst* request, ::resource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveApplicationActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveApplicationAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst* request, ::resource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationAction_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemoveApplicationAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveApplicationActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveApplicationActionRsp>* ResourceService::Stub::AsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveApplicationActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveApplicationAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveApplicationActionRsp>* ResourceService::Stub::PrepareAsyncRemoveApplicationActionRaw(::grpc::ClientContext* context, const ::resource::RemoveApplicationActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveApplicationActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveApplicationAction_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemoveApplicationsAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationsActionRqst& request, ::resource::RemoveApplicationsActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveApplicationsAction_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemoveApplicationsAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationsActionRqst* request, ::resource::RemoveApplicationsActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationsAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveApplicationsAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveApplicationsActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationsAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveApplicationsAction(::grpc::ClientContext* context, const ::resource::RemoveApplicationsActionRqst* request, ::resource::RemoveApplicationsActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationsAction_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemoveApplicationsAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveApplicationsActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveApplicationsAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveApplicationsActionRsp>* ResourceService::Stub::AsyncRemoveApplicationsActionRaw(::grpc::ClientContext* context, const ::resource::RemoveApplicationsActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveApplicationsActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveApplicationsAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveApplicationsActionRsp>* ResourceService::Stub::PrepareAsyncRemoveApplicationsActionRaw(::grpc::ClientContext* context, const ::resource::RemoveApplicationsActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveApplicationsActionRsp>::Create(channel_.get(), cq, rpcmethod_RemoveApplicationsAction_, context, request, false);
}

::grpc::Status ResourceService::Stub::GetApplicationVersion(::grpc::ClientContext* context, const ::resource::GetApplicationVersionRqst& request, ::resource::GetApplicationVersionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetApplicationVersion_, context, request, response);
}

void ResourceService::Stub::experimental_async::GetApplicationVersion(::grpc::ClientContext* context, const ::resource::GetApplicationVersionRqst* request, ::resource::GetApplicationVersionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApplicationVersion_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetApplicationVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetApplicationVersionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApplicationVersion_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetApplicationVersion(::grpc::ClientContext* context, const ::resource::GetApplicationVersionRqst* request, ::resource::GetApplicationVersionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApplicationVersion_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::GetApplicationVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetApplicationVersionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApplicationVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::GetApplicationVersionRsp>* ResourceService::Stub::AsyncGetApplicationVersionRaw(::grpc::ClientContext* context, const ::resource::GetApplicationVersionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetApplicationVersionRsp>::Create(channel_.get(), cq, rpcmethod_GetApplicationVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::GetApplicationVersionRsp>* ResourceService::Stub::PrepareAsyncGetApplicationVersionRaw(::grpc::ClientContext* context, const ::resource::GetApplicationVersionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetApplicationVersionRsp>::Create(channel_.get(), cq, rpcmethod_GetApplicationVersion_, context, request, false);
}

::grpc::Status ResourceService::Stub::GetApplicationAlias(::grpc::ClientContext* context, const ::resource::GetApplicationAliasRqst& request, ::resource::GetApplicationAliasRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetApplicationAlias_, context, request, response);
}

void ResourceService::Stub::experimental_async::GetApplicationAlias(::grpc::ClientContext* context, const ::resource::GetApplicationAliasRqst* request, ::resource::GetApplicationAliasRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApplicationAlias_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetApplicationAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetApplicationAliasRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApplicationAlias_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetApplicationAlias(::grpc::ClientContext* context, const ::resource::GetApplicationAliasRqst* request, ::resource::GetApplicationAliasRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApplicationAlias_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::GetApplicationAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetApplicationAliasRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApplicationAlias_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::GetApplicationAliasRsp>* ResourceService::Stub::AsyncGetApplicationAliasRaw(::grpc::ClientContext* context, const ::resource::GetApplicationAliasRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetApplicationAliasRsp>::Create(channel_.get(), cq, rpcmethod_GetApplicationAlias_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::GetApplicationAliasRsp>* ResourceService::Stub::PrepareAsyncGetApplicationAliasRaw(::grpc::ClientContext* context, const ::resource::GetApplicationAliasRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetApplicationAliasRsp>::Create(channel_.get(), cq, rpcmethod_GetApplicationAlias_, context, request, false);
}

::grpc::Status ResourceService::Stub::GetApplicationIcon(::grpc::ClientContext* context, const ::resource::GetApplicationIconRqst& request, ::resource::GetApplicationIconRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetApplicationIcon_, context, request, response);
}

void ResourceService::Stub::experimental_async::GetApplicationIcon(::grpc::ClientContext* context, const ::resource::GetApplicationIconRqst* request, ::resource::GetApplicationIconRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApplicationIcon_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetApplicationIcon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetApplicationIconRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetApplicationIcon_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetApplicationIcon(::grpc::ClientContext* context, const ::resource::GetApplicationIconRqst* request, ::resource::GetApplicationIconRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApplicationIcon_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::GetApplicationIcon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetApplicationIconRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetApplicationIcon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::GetApplicationIconRsp>* ResourceService::Stub::AsyncGetApplicationIconRaw(::grpc::ClientContext* context, const ::resource::GetApplicationIconRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetApplicationIconRsp>::Create(channel_.get(), cq, rpcmethod_GetApplicationIcon_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::GetApplicationIconRsp>* ResourceService::Stub::PrepareAsyncGetApplicationIconRaw(::grpc::ClientContext* context, const ::resource::GetApplicationIconRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetApplicationIconRsp>::Create(channel_.get(), cq, rpcmethod_GetApplicationIcon_, context, request, false);
}

::grpc::Status ResourceService::Stub::RegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::resource::RegisterPeerRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterPeer_, context, request, response);
}

void ResourceService::Stub::experimental_async::RegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst* request, ::resource::RegisterPeerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterPeer_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RegisterPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterPeerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterPeer_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RegisterPeer(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst* request, ::resource::RegisterPeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterPeer_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RegisterPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RegisterPeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterPeer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RegisterPeerRsp>* ResourceService::Stub::AsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RegisterPeerRsp>::Create(channel_.get(), cq, rpcmethod_RegisterPeer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RegisterPeerRsp>* ResourceService::Stub::PrepareAsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::resource::RegisterPeerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RegisterPeerRsp>::Create(channel_.get(), cq, rpcmethod_RegisterPeer_, context, request, false);
}

::grpc::ClientReader< ::resource::GetPeersRsp>* ResourceService::Stub::GetPeersRaw(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::resource::GetPeersRsp>::Create(channel_.get(), rpcmethod_GetPeers_, context, request);
}

void ResourceService::Stub::experimental_async::GetPeers(::grpc::ClientContext* context, ::resource::GetPeersRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetPeersRsp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::resource::GetPeersRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPeers_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::resource::GetPeersRsp>* ResourceService::Stub::AsyncGetPeersRaw(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetPeersRsp>::Create(channel_.get(), cq, rpcmethod_GetPeers_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::resource::GetPeersRsp>* ResourceService::Stub::PrepareAsyncGetPeersRaw(::grpc::ClientContext* context, const ::resource::GetPeersRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetPeersRsp>::Create(channel_.get(), cq, rpcmethod_GetPeers_, context, request, false, nullptr);
}

::grpc::Status ResourceService::Stub::DeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::resource::DeletePeerRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeletePeer_, context, request, response);
}

void ResourceService::Stub::experimental_async::DeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst* request, ::resource::DeletePeerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeletePeer_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeletePeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePeerRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeletePeer_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeletePeer(::grpc::ClientContext* context, const ::resource::DeletePeerRqst* request, ::resource::DeletePeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeletePeer_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::DeletePeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeletePeerRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeletePeer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::DeletePeerRsp>* ResourceService::Stub::AsyncDeletePeerRaw(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeletePeerRsp>::Create(channel_.get(), cq, rpcmethod_DeletePeer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::DeletePeerRsp>* ResourceService::Stub::PrepareAsyncDeletePeerRaw(::grpc::ClientContext* context, const ::resource::DeletePeerRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeletePeerRsp>::Create(channel_.get(), cq, rpcmethod_DeletePeer_, context, request, false);
}

::grpc::Status ResourceService::Stub::AddPeerActions(::grpc::ClientContext* context, const ::resource::AddPeerActionsRqst& request, ::resource::AddPeerActionsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddPeerActions_, context, request, response);
}

void ResourceService::Stub::experimental_async::AddPeerActions(::grpc::ClientContext* context, const ::resource::AddPeerActionsRqst* request, ::resource::AddPeerActionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddPeerActions_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddPeerActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddPeerActionsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddPeerActions_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::AddPeerActions(::grpc::ClientContext* context, const ::resource::AddPeerActionsRqst* request, ::resource::AddPeerActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddPeerActions_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::AddPeerActions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::AddPeerActionsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddPeerActions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::AddPeerActionsRsp>* ResourceService::Stub::AsyncAddPeerActionsRaw(::grpc::ClientContext* context, const ::resource::AddPeerActionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddPeerActionsRsp>::Create(channel_.get(), cq, rpcmethod_AddPeerActions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::AddPeerActionsRsp>* ResourceService::Stub::PrepareAsyncAddPeerActionsRaw(::grpc::ClientContext* context, const ::resource::AddPeerActionsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::AddPeerActionsRsp>::Create(channel_.get(), cq, rpcmethod_AddPeerActions_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::resource::RemovePeerActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemovePeerAction_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst* request, ::resource::RemovePeerActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemovePeerAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemovePeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemovePeerActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemovePeerAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemovePeerAction(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst* request, ::resource::RemovePeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemovePeerAction_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemovePeerAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemovePeerActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemovePeerAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemovePeerActionRsp>* ResourceService::Stub::AsyncRemovePeerActionRaw(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemovePeerActionRsp>::Create(channel_.get(), cq, rpcmethod_RemovePeerAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemovePeerActionRsp>* ResourceService::Stub::PrepareAsyncRemovePeerActionRaw(::grpc::ClientContext* context, const ::resource::RemovePeerActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemovePeerActionRsp>::Create(channel_.get(), cq, rpcmethod_RemovePeerAction_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemovePeersAction(::grpc::ClientContext* context, const ::resource::RemovePeersActionRqst& request, ::resource::RemovePeersActionRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemovePeersAction_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemovePeersAction(::grpc::ClientContext* context, const ::resource::RemovePeersActionRqst* request, ::resource::RemovePeersActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemovePeersAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemovePeersAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemovePeersActionRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemovePeersAction_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemovePeersAction(::grpc::ClientContext* context, const ::resource::RemovePeersActionRqst* request, ::resource::RemovePeersActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemovePeersAction_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemovePeersAction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemovePeersActionRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemovePeersAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemovePeersActionRsp>* ResourceService::Stub::AsyncRemovePeersActionRaw(::grpc::ClientContext* context, const ::resource::RemovePeersActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemovePeersActionRsp>::Create(channel_.get(), cq, rpcmethod_RemovePeersAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemovePeersActionRsp>* ResourceService::Stub::PrepareAsyncRemovePeersActionRaw(::grpc::ClientContext* context, const ::resource::RemovePeersActionRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemovePeersActionRsp>::Create(channel_.get(), cq, rpcmethod_RemovePeersAction_, context, request, false);
}

::grpc::Status ResourceService::Stub::CreateNotification(::grpc::ClientContext* context, const ::resource::CreateNotificationRqst& request, ::resource::CreateNotificationRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateNotification_, context, request, response);
}

void ResourceService::Stub::experimental_async::CreateNotification(::grpc::ClientContext* context, const ::resource::CreateNotificationRqst* request, ::resource::CreateNotificationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateNotification_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::CreateNotification(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateNotificationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateNotification_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::CreateNotification(::grpc::ClientContext* context, const ::resource::CreateNotificationRqst* request, ::resource::CreateNotificationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateNotification_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::CreateNotification(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::CreateNotificationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateNotification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::CreateNotificationRsp>* ResourceService::Stub::AsyncCreateNotificationRaw(::grpc::ClientContext* context, const ::resource::CreateNotificationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::CreateNotificationRsp>::Create(channel_.get(), cq, rpcmethod_CreateNotification_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::CreateNotificationRsp>* ResourceService::Stub::PrepareAsyncCreateNotificationRaw(::grpc::ClientContext* context, const ::resource::CreateNotificationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::CreateNotificationRsp>::Create(channel_.get(), cq, rpcmethod_CreateNotification_, context, request, false);
}

::grpc::ClientReader< ::resource::GetNotificationsRsp>* ResourceService::Stub::GetNotificationsRaw(::grpc::ClientContext* context, const ::resource::GetNotificationsRqst& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::resource::GetNotificationsRsp>::Create(channel_.get(), rpcmethod_GetNotifications_, context, request);
}

void ResourceService::Stub::experimental_async::GetNotifications(::grpc::ClientContext* context, ::resource::GetNotificationsRqst* request, ::grpc::experimental::ClientReadReactor< ::resource::GetNotificationsRsp>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::resource::GetNotificationsRsp>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNotifications_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::resource::GetNotificationsRsp>* ResourceService::Stub::AsyncGetNotificationsRaw(::grpc::ClientContext* context, const ::resource::GetNotificationsRqst& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetNotificationsRsp>::Create(channel_.get(), cq, rpcmethod_GetNotifications_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::resource::GetNotificationsRsp>* ResourceService::Stub::PrepareAsyncGetNotificationsRaw(::grpc::ClientContext* context, const ::resource::GetNotificationsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetNotificationsRsp>::Create(channel_.get(), cq, rpcmethod_GetNotifications_, context, request, false, nullptr);
}

::grpc::Status ResourceService::Stub::DeleteNotification(::grpc::ClientContext* context, const ::resource::DeleteNotificationRqst& request, ::resource::DeleteNotificationRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteNotification_, context, request, response);
}

void ResourceService::Stub::experimental_async::DeleteNotification(::grpc::ClientContext* context, const ::resource::DeleteNotificationRqst* request, ::resource::DeleteNotificationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteNotification_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteNotification(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteNotificationRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteNotification_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::DeleteNotification(::grpc::ClientContext* context, const ::resource::DeleteNotificationRqst* request, ::resource::DeleteNotificationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteNotification_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::DeleteNotification(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::DeleteNotificationRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteNotification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteNotificationRsp>* ResourceService::Stub::AsyncDeleteNotificationRaw(::grpc::ClientContext* context, const ::resource::DeleteNotificationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteNotificationRsp>::Create(channel_.get(), cq, rpcmethod_DeleteNotification_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::DeleteNotificationRsp>* ResourceService::Stub::PrepareAsyncDeleteNotificationRaw(::grpc::ClientContext* context, const ::resource::DeleteNotificationRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::DeleteNotificationRsp>::Create(channel_.get(), cq, rpcmethod_DeleteNotification_, context, request, false);
}

::grpc::Status ResourceService::Stub::ClearAllNotifications(::grpc::ClientContext* context, const ::resource::ClearAllNotificationsRqst& request, ::resource::ClearAllNotificationsRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClearAllNotifications_, context, request, response);
}

void ResourceService::Stub::experimental_async::ClearAllNotifications(::grpc::ClientContext* context, const ::resource::ClearAllNotificationsRqst* request, ::resource::ClearAllNotificationsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearAllNotifications_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::ClearAllNotifications(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ClearAllNotificationsRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearAllNotifications_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::ClearAllNotifications(::grpc::ClientContext* context, const ::resource::ClearAllNotificationsRqst* request, ::resource::ClearAllNotificationsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearAllNotifications_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::ClearAllNotifications(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ClearAllNotificationsRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearAllNotifications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::ClearAllNotificationsRsp>* ResourceService::Stub::AsyncClearAllNotificationsRaw(::grpc::ClientContext* context, const ::resource::ClearAllNotificationsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::ClearAllNotificationsRsp>::Create(channel_.get(), cq, rpcmethod_ClearAllNotifications_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::ClearAllNotificationsRsp>* ResourceService::Stub::PrepareAsyncClearAllNotificationsRaw(::grpc::ClientContext* context, const ::resource::ClearAllNotificationsRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::ClearAllNotificationsRsp>::Create(channel_.get(), cq, rpcmethod_ClearAllNotifications_, context, request, false);
}

::grpc::Status ResourceService::Stub::ClearNotificationsByType(::grpc::ClientContext* context, const ::resource::ClearNotificationsByTypeRqst& request, ::resource::ClearNotificationsByTypeRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClearNotificationsByType_, context, request, response);
}

void ResourceService::Stub::experimental_async::ClearNotificationsByType(::grpc::ClientContext* context, const ::resource::ClearNotificationsByTypeRqst* request, ::resource::ClearNotificationsByTypeRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearNotificationsByType_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::ClearNotificationsByType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ClearNotificationsByTypeRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearNotificationsByType_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::ClearNotificationsByType(::grpc::ClientContext* context, const ::resource::ClearNotificationsByTypeRqst* request, ::resource::ClearNotificationsByTypeRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearNotificationsByType_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::ClearNotificationsByType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::ClearNotificationsByTypeRsp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearNotificationsByType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::ClearNotificationsByTypeRsp>* ResourceService::Stub::AsyncClearNotificationsByTypeRaw(::grpc::ClientContext* context, const ::resource::ClearNotificationsByTypeRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::ClearNotificationsByTypeRsp>::Create(channel_.get(), cq, rpcmethod_ClearNotificationsByType_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::ClearNotificationsByTypeRsp>* ResourceService::Stub::PrepareAsyncClearNotificationsByTypeRaw(::grpc::ClientContext* context, const ::resource::ClearNotificationsByTypeRqst& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::ClearNotificationsByTypeRsp>::Create(channel_.get(), cq, rpcmethod_ClearNotificationsByType_, context, request, false);
}

::grpc::Status ResourceService::Stub::FindPackages(::grpc::ClientContext* context, const ::resource::FindPackagesDescriptorRequest& request, ::resource::FindPackagesDescriptorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FindPackages_, context, request, response);
}

void ResourceService::Stub::experimental_async::FindPackages(::grpc::ClientContext* context, const ::resource::FindPackagesDescriptorRequest* request, ::resource::FindPackagesDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FindPackages_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::FindPackages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::FindPackagesDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FindPackages_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::FindPackages(::grpc::ClientContext* context, const ::resource::FindPackagesDescriptorRequest* request, ::resource::FindPackagesDescriptorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FindPackages_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::FindPackages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::FindPackagesDescriptorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FindPackages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::FindPackagesDescriptorResponse>* ResourceService::Stub::AsyncFindPackagesRaw(::grpc::ClientContext* context, const ::resource::FindPackagesDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::FindPackagesDescriptorResponse>::Create(channel_.get(), cq, rpcmethod_FindPackages_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::FindPackagesDescriptorResponse>* ResourceService::Stub::PrepareAsyncFindPackagesRaw(::grpc::ClientContext* context, const ::resource::FindPackagesDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::FindPackagesDescriptorResponse>::Create(channel_.get(), cq, rpcmethod_FindPackages_, context, request, false);
}

::grpc::Status ResourceService::Stub::GetPackageDescriptor(::grpc::ClientContext* context, const ::resource::GetPackageDescriptorRequest& request, ::resource::GetPackageDescriptorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPackageDescriptor_, context, request, response);
}

void ResourceService::Stub::experimental_async::GetPackageDescriptor(::grpc::ClientContext* context, const ::resource::GetPackageDescriptorRequest* request, ::resource::GetPackageDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPackageDescriptor_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetPackageDescriptor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetPackageDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPackageDescriptor_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetPackageDescriptor(::grpc::ClientContext* context, const ::resource::GetPackageDescriptorRequest* request, ::resource::GetPackageDescriptorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPackageDescriptor_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::GetPackageDescriptor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetPackageDescriptorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPackageDescriptor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::GetPackageDescriptorResponse>* ResourceService::Stub::AsyncGetPackageDescriptorRaw(::grpc::ClientContext* context, const ::resource::GetPackageDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetPackageDescriptorResponse>::Create(channel_.get(), cq, rpcmethod_GetPackageDescriptor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::GetPackageDescriptorResponse>* ResourceService::Stub::PrepareAsyncGetPackageDescriptorRaw(::grpc::ClientContext* context, const ::resource::GetPackageDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetPackageDescriptorResponse>::Create(channel_.get(), cq, rpcmethod_GetPackageDescriptor_, context, request, false);
}

::grpc::ClientReader< ::resource::GetPackagesDescriptorResponse>* ResourceService::Stub::GetPackagesDescriptorRaw(::grpc::ClientContext* context, const ::resource::GetPackagesDescriptorRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::resource::GetPackagesDescriptorResponse>::Create(channel_.get(), rpcmethod_GetPackagesDescriptor_, context, request);
}

void ResourceService::Stub::experimental_async::GetPackagesDescriptor(::grpc::ClientContext* context, ::resource::GetPackagesDescriptorRequest* request, ::grpc::experimental::ClientReadReactor< ::resource::GetPackagesDescriptorResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::resource::GetPackagesDescriptorResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPackagesDescriptor_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::resource::GetPackagesDescriptorResponse>* ResourceService::Stub::AsyncGetPackagesDescriptorRaw(::grpc::ClientContext* context, const ::resource::GetPackagesDescriptorRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetPackagesDescriptorResponse>::Create(channel_.get(), cq, rpcmethod_GetPackagesDescriptor_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::resource::GetPackagesDescriptorResponse>* ResourceService::Stub::PrepareAsyncGetPackagesDescriptorRaw(::grpc::ClientContext* context, const ::resource::GetPackagesDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::resource::GetPackagesDescriptorResponse>::Create(channel_.get(), cq, rpcmethod_GetPackagesDescriptor_, context, request, false, nullptr);
}

::grpc::Status ResourceService::Stub::SetPackageDescriptor(::grpc::ClientContext* context, const ::resource::SetPackageDescriptorRequest& request, ::resource::SetPackageDescriptorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPackageDescriptor_, context, request, response);
}

void ResourceService::Stub::experimental_async::SetPackageDescriptor(::grpc::ClientContext* context, const ::resource::SetPackageDescriptorRequest* request, ::resource::SetPackageDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPackageDescriptor_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::SetPackageDescriptor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetPackageDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPackageDescriptor_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::SetPackageDescriptor(::grpc::ClientContext* context, const ::resource::SetPackageDescriptorRequest* request, ::resource::SetPackageDescriptorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPackageDescriptor_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::SetPackageDescriptor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetPackageDescriptorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPackageDescriptor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::SetPackageDescriptorResponse>* ResourceService::Stub::AsyncSetPackageDescriptorRaw(::grpc::ClientContext* context, const ::resource::SetPackageDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::SetPackageDescriptorResponse>::Create(channel_.get(), cq, rpcmethod_SetPackageDescriptor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::SetPackageDescriptorResponse>* ResourceService::Stub::PrepareAsyncSetPackageDescriptorRaw(::grpc::ClientContext* context, const ::resource::SetPackageDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::SetPackageDescriptorResponse>::Create(channel_.get(), cq, rpcmethod_SetPackageDescriptor_, context, request, false);
}

::grpc::Status ResourceService::Stub::SetPackageBundle(::grpc::ClientContext* context, const ::resource::SetPackageBundleRequest& request, ::resource::SetPackageBundleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPackageBundle_, context, request, response);
}

void ResourceService::Stub::experimental_async::SetPackageBundle(::grpc::ClientContext* context, const ::resource::SetPackageBundleRequest* request, ::resource::SetPackageBundleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPackageBundle_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::SetPackageBundle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetPackageBundleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPackageBundle_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::SetPackageBundle(::grpc::ClientContext* context, const ::resource::SetPackageBundleRequest* request, ::resource::SetPackageBundleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPackageBundle_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::SetPackageBundle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::SetPackageBundleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPackageBundle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::SetPackageBundleResponse>* ResourceService::Stub::AsyncSetPackageBundleRaw(::grpc::ClientContext* context, const ::resource::SetPackageBundleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::SetPackageBundleResponse>::Create(channel_.get(), cq, rpcmethod_SetPackageBundle_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::SetPackageBundleResponse>* ResourceService::Stub::PrepareAsyncSetPackageBundleRaw(::grpc::ClientContext* context, const ::resource::SetPackageBundleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::SetPackageBundleResponse>::Create(channel_.get(), cq, rpcmethod_SetPackageBundle_, context, request, false);
}

::grpc::Status ResourceService::Stub::GetPackageBundleChecksum(::grpc::ClientContext* context, const ::resource::GetPackageBundleChecksumRequest& request, ::resource::GetPackageBundleChecksumResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPackageBundleChecksum_, context, request, response);
}

void ResourceService::Stub::experimental_async::GetPackageBundleChecksum(::grpc::ClientContext* context, const ::resource::GetPackageBundleChecksumRequest* request, ::resource::GetPackageBundleChecksumResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPackageBundleChecksum_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetPackageBundleChecksum(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetPackageBundleChecksumResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPackageBundleChecksum_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetPackageBundleChecksum(::grpc::ClientContext* context, const ::resource::GetPackageBundleChecksumRequest* request, ::resource::GetPackageBundleChecksumResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPackageBundleChecksum_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::GetPackageBundleChecksum(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetPackageBundleChecksumResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPackageBundleChecksum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::GetPackageBundleChecksumResponse>* ResourceService::Stub::AsyncGetPackageBundleChecksumRaw(::grpc::ClientContext* context, const ::resource::GetPackageBundleChecksumRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetPackageBundleChecksumResponse>::Create(channel_.get(), cq, rpcmethod_GetPackageBundleChecksum_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::GetPackageBundleChecksumResponse>* ResourceService::Stub::PrepareAsyncGetPackageBundleChecksumRaw(::grpc::ClientContext* context, const ::resource::GetPackageBundleChecksumRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetPackageBundleChecksumResponse>::Create(channel_.get(), cq, rpcmethod_GetPackageBundleChecksum_, context, request, false);
}

::grpc::Status ResourceService::Stub::UpdateSession(::grpc::ClientContext* context, const ::resource::UpdateSessionRequest& request, ::resource::UpdateSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateSession_, context, request, response);
}

void ResourceService::Stub::experimental_async::UpdateSession(::grpc::ClientContext* context, const ::resource::UpdateSessionRequest* request, ::resource::UpdateSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateSession_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::UpdateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::UpdateSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateSession_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::UpdateSession(::grpc::ClientContext* context, const ::resource::UpdateSessionRequest* request, ::resource::UpdateSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateSession_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::UpdateSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::UpdateSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::UpdateSessionResponse>* ResourceService::Stub::AsyncUpdateSessionRaw(::grpc::ClientContext* context, const ::resource::UpdateSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::UpdateSessionResponse>::Create(channel_.get(), cq, rpcmethod_UpdateSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::UpdateSessionResponse>* ResourceService::Stub::PrepareAsyncUpdateSessionRaw(::grpc::ClientContext* context, const ::resource::UpdateSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::UpdateSessionResponse>::Create(channel_.get(), cq, rpcmethod_UpdateSession_, context, request, false);
}

::grpc::Status ResourceService::Stub::GetSessions(::grpc::ClientContext* context, const ::resource::GetSessionsRequest& request, ::resource::GetSessionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSessions_, context, request, response);
}

void ResourceService::Stub::experimental_async::GetSessions(::grpc::ClientContext* context, const ::resource::GetSessionsRequest* request, ::resource::GetSessionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSessions_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetSessions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetSessionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSessions_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetSessions(::grpc::ClientContext* context, const ::resource::GetSessionsRequest* request, ::resource::GetSessionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSessions_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::GetSessions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetSessionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSessions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::GetSessionsResponse>* ResourceService::Stub::AsyncGetSessionsRaw(::grpc::ClientContext* context, const ::resource::GetSessionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetSessionsResponse>::Create(channel_.get(), cq, rpcmethod_GetSessions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::GetSessionsResponse>* ResourceService::Stub::PrepareAsyncGetSessionsRaw(::grpc::ClientContext* context, const ::resource::GetSessionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetSessionsResponse>::Create(channel_.get(), cq, rpcmethod_GetSessions_, context, request, false);
}

::grpc::Status ResourceService::Stub::RemoveSession(::grpc::ClientContext* context, const ::resource::RemoveSessionRequest& request, ::resource::RemoveSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveSession_, context, request, response);
}

void ResourceService::Stub::experimental_async::RemoveSession(::grpc::ClientContext* context, const ::resource::RemoveSessionRequest* request, ::resource::RemoveSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveSession_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveSession_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::RemoveSession(::grpc::ClientContext* context, const ::resource::RemoveSessionRequest* request, ::resource::RemoveSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveSession_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::RemoveSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::RemoveSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveSessionResponse>* ResourceService::Stub::AsyncRemoveSessionRaw(::grpc::ClientContext* context, const ::resource::RemoveSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveSessionResponse>::Create(channel_.get(), cq, rpcmethod_RemoveSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::RemoveSessionResponse>* ResourceService::Stub::PrepareAsyncRemoveSessionRaw(::grpc::ClientContext* context, const ::resource::RemoveSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::RemoveSessionResponse>::Create(channel_.get(), cq, rpcmethod_RemoveSession_, context, request, false);
}

::grpc::Status ResourceService::Stub::GetSession(::grpc::ClientContext* context, const ::resource::GetSessionRequest& request, ::resource::GetSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSession_, context, request, response);
}

void ResourceService::Stub::experimental_async::GetSession(::grpc::ClientContext* context, const ::resource::GetSessionRequest* request, ::resource::GetSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSession_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSession_, context, request, response, std::move(f));
}

void ResourceService::Stub::experimental_async::GetSession(::grpc::ClientContext* context, const ::resource::GetSessionRequest* request, ::resource::GetSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSession_, context, request, response, reactor);
}

void ResourceService::Stub::experimental_async::GetSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::resource::GetSessionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::resource::GetSessionResponse>* ResourceService::Stub::AsyncGetSessionRaw(::grpc::ClientContext* context, const ::resource::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetSessionResponse>::Create(channel_.get(), cq, rpcmethod_GetSession_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::resource::GetSessionResponse>* ResourceService::Stub::PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::resource::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::resource::GetSessionResponse>::Create(channel_.get(), cq, rpcmethod_GetSession_, context, request, false);
}

ResourceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::CreateOrganizationRqst, ::resource::CreateOrganizationRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::CreateOrganizationRqst* req,
             ::resource::CreateOrganizationRsp* resp) {
               return service->CreateOrganization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ResourceService::Service, ::resource::GetOrganizationsRqst, ::resource::GetOrganizationsRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetOrganizationsRqst* req,
             ::grpc_impl::ServerWriter<::resource::GetOrganizationsRsp>* writer) {
               return service->GetOrganizations(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::DeleteOrganizationRqst, ::resource::DeleteOrganizationRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::DeleteOrganizationRqst* req,
             ::resource::DeleteOrganizationRsp* resp) {
               return service->DeleteOrganization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::AddOrganizationAccountRqst, ::resource::AddOrganizationAccountRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::AddOrganizationAccountRqst* req,
             ::resource::AddOrganizationAccountRsp* resp) {
               return service->AddOrganizationAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::AddOrganizationGroupRqst, ::resource::AddOrganizationGroupRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::AddOrganizationGroupRqst* req,
             ::resource::AddOrganizationGroupRsp* resp) {
               return service->AddOrganizationGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::AddOrganizationRoleRqst, ::resource::AddOrganizationRoleRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::AddOrganizationRoleRqst* req,
             ::resource::AddOrganizationRoleRsp* resp) {
               return service->AddOrganizationRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::AddOrganizationApplicationRqst, ::resource::AddOrganizationApplicationRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::AddOrganizationApplicationRqst* req,
             ::resource::AddOrganizationApplicationRsp* resp) {
               return service->AddOrganizationApplication(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemoveOrganizationAccountRqst, ::resource::RemoveOrganizationAccountRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemoveOrganizationAccountRqst* req,
             ::resource::RemoveOrganizationAccountRsp* resp) {
               return service->RemoveOrganizationAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemoveOrganizationGroupRqst, ::resource::RemoveOrganizationGroupRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemoveOrganizationGroupRqst* req,
             ::resource::RemoveOrganizationGroupRsp* resp) {
               return service->RemoveOrganizationGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemoveOrganizationRoleRqst, ::resource::RemoveOrganizationRoleRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemoveOrganizationRoleRqst* req,
             ::resource::RemoveOrganizationRoleRsp* resp) {
               return service->RemoveOrganizationRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemoveOrganizationApplicationRqst, ::resource::RemoveOrganizationApplicationRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemoveOrganizationApplicationRqst* req,
             ::resource::RemoveOrganizationApplicationRsp* resp) {
               return service->RemoveOrganizationApplication(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::CreateGroupRqst, ::resource::CreateGroupRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::CreateGroupRqst* req,
             ::resource::CreateGroupRsp* resp) {
               return service->CreateGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::UpdateGroupRqst, ::resource::UpdateGroupRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::UpdateGroupRqst* req,
             ::resource::UpdateGroupRsp* resp) {
               return service->UpdateGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[13],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ResourceService::Service, ::resource::GetGroupsRqst, ::resource::GetGroupsRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetGroupsRqst* req,
             ::grpc_impl::ServerWriter<::resource::GetGroupsRsp>* writer) {
               return service->GetGroups(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::DeleteGroupRqst, ::resource::DeleteGroupRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::DeleteGroupRqst* req,
             ::resource::DeleteGroupRsp* resp) {
               return service->DeleteGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::AddGroupMemberAccountRqst, ::resource::AddGroupMemberAccountRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::AddGroupMemberAccountRqst* req,
             ::resource::AddGroupMemberAccountRsp* resp) {
               return service->AddGroupMemberAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemoveGroupMemberAccountRqst, ::resource::RemoveGroupMemberAccountRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemoveGroupMemberAccountRqst* req,
             ::resource::RemoveGroupMemberAccountRsp* resp) {
               return service->RemoveGroupMemberAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RegisterAccountRqst, ::resource::RegisterAccountRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RegisterAccountRqst* req,
             ::resource::RegisterAccountRsp* resp) {
               return service->RegisterAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::DeleteAccountRqst, ::resource::DeleteAccountRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::DeleteAccountRqst* req,
             ::resource::DeleteAccountRsp* resp) {
               return service->DeleteAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::GetAccountRqst, ::resource::GetAccountRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetAccountRqst* req,
             ::resource::GetAccountRsp* resp) {
               return service->GetAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::SetAccountPasswordRqst, ::resource::SetAccountPasswordRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::SetAccountPasswordRqst* req,
             ::resource::SetAccountPasswordRsp* resp) {
               return service->SetAccountPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[21],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ResourceService::Service, ::resource::GetAccountsRqst, ::resource::GetAccountsRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetAccountsRqst* req,
             ::grpc_impl::ServerWriter<::resource::GetAccountsRsp>* writer) {
               return service->GetAccounts(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::AddAccountRoleRqst, ::resource::AddAccountRoleRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::AddAccountRoleRqst* req,
             ::resource::AddAccountRoleRsp* resp) {
               return service->AddAccountRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemoveAccountRoleRqst, ::resource::RemoveAccountRoleRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemoveAccountRoleRqst* req,
             ::resource::RemoveAccountRoleRsp* resp) {
               return service->RemoveAccountRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::SetAccountContactRqst, ::resource::SetAccountContactRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::SetAccountContactRqst* req,
             ::resource::SetAccountContactRsp* resp) {
               return service->SetAccountContact(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::SetEmailRequest, ::resource::SetEmailResponse>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::SetEmailRequest* req,
             ::resource::SetEmailResponse* resp) {
               return service->SetEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::IsOrgnanizationMemberRqst, ::resource::IsOrgnanizationMemberRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::IsOrgnanizationMemberRqst* req,
             ::resource::IsOrgnanizationMemberRsp* resp) {
               return service->IsOrgnanizationMember(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::CreateRoleRqst, ::resource::CreateRoleRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::CreateRoleRqst* req,
             ::resource::CreateRoleRsp* resp) {
               return service->CreateRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[28],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ResourceService::Service, ::resource::GetRolesRqst, ::resource::GetRolesRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetRolesRqst* req,
             ::grpc_impl::ServerWriter<::resource::GetRolesRsp>* writer) {
               return service->GetRoles(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::DeleteRoleRqst, ::resource::DeleteRoleRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::DeleteRoleRqst* req,
             ::resource::DeleteRoleRsp* resp) {
               return service->DeleteRole(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::AddRoleActionsRqst, ::resource::AddRoleActionsRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::AddRoleActionsRqst* req,
             ::resource::AddRoleActionsRsp* resp) {
               return service->AddRoleActions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemoveRoleActionRqst, ::resource::RemoveRoleActionRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemoveRoleActionRqst* req,
             ::resource::RemoveRoleActionRsp* resp) {
               return service->RemoveRoleAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemoveRolesActionRqst, ::resource::RemoveRolesActionRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemoveRolesActionRqst* req,
             ::resource::RemoveRolesActionRsp* resp) {
               return service->RemoveRolesAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::CreateApplicationRqst, ::resource::CreateApplicationRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::CreateApplicationRqst* req,
             ::resource::CreateApplicationRsp* resp) {
               return service->CreateApplication(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::UpdateApplicationRqst, ::resource::UpdateApplicationRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::UpdateApplicationRqst* req,
             ::resource::UpdateApplicationRsp* resp) {
               return service->UpdateApplication(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[35],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ResourceService::Service, ::resource::GetApplicationsRqst, ::resource::GetApplicationsRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetApplicationsRqst* req,
             ::grpc_impl::ServerWriter<::resource::GetApplicationsRsp>* writer) {
               return service->GetApplications(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::DeleteApplicationRqst, ::resource::DeleteApplicationRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::DeleteApplicationRqst* req,
             ::resource::DeleteApplicationRsp* resp) {
               return service->DeleteApplication(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::AddApplicationActionsRqst, ::resource::AddApplicationActionsRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::AddApplicationActionsRqst* req,
             ::resource::AddApplicationActionsRsp* resp) {
               return service->AddApplicationActions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemoveApplicationActionRqst, ::resource::RemoveApplicationActionRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemoveApplicationActionRqst* req,
             ::resource::RemoveApplicationActionRsp* resp) {
               return service->RemoveApplicationAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemoveApplicationsActionRqst, ::resource::RemoveApplicationsActionRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemoveApplicationsActionRqst* req,
             ::resource::RemoveApplicationsActionRsp* resp) {
               return service->RemoveApplicationsAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::GetApplicationVersionRqst, ::resource::GetApplicationVersionRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetApplicationVersionRqst* req,
             ::resource::GetApplicationVersionRsp* resp) {
               return service->GetApplicationVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::GetApplicationAliasRqst, ::resource::GetApplicationAliasRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetApplicationAliasRqst* req,
             ::resource::GetApplicationAliasRsp* resp) {
               return service->GetApplicationAlias(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::GetApplicationIconRqst, ::resource::GetApplicationIconRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetApplicationIconRqst* req,
             ::resource::GetApplicationIconRsp* resp) {
               return service->GetApplicationIcon(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RegisterPeerRqst, ::resource::RegisterPeerRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RegisterPeerRqst* req,
             ::resource::RegisterPeerRsp* resp) {
               return service->RegisterPeer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[44],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ResourceService::Service, ::resource::GetPeersRqst, ::resource::GetPeersRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetPeersRqst* req,
             ::grpc_impl::ServerWriter<::resource::GetPeersRsp>* writer) {
               return service->GetPeers(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::DeletePeerRqst, ::resource::DeletePeerRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::DeletePeerRqst* req,
             ::resource::DeletePeerRsp* resp) {
               return service->DeletePeer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::AddPeerActionsRqst, ::resource::AddPeerActionsRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::AddPeerActionsRqst* req,
             ::resource::AddPeerActionsRsp* resp) {
               return service->AddPeerActions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemovePeerActionRqst, ::resource::RemovePeerActionRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemovePeerActionRqst* req,
             ::resource::RemovePeerActionRsp* resp) {
               return service->RemovePeerAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemovePeersActionRqst, ::resource::RemovePeersActionRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemovePeersActionRqst* req,
             ::resource::RemovePeersActionRsp* resp) {
               return service->RemovePeersAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::CreateNotificationRqst, ::resource::CreateNotificationRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::CreateNotificationRqst* req,
             ::resource::CreateNotificationRsp* resp) {
               return service->CreateNotification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[50],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ResourceService::Service, ::resource::GetNotificationsRqst, ::resource::GetNotificationsRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetNotificationsRqst* req,
             ::grpc_impl::ServerWriter<::resource::GetNotificationsRsp>* writer) {
               return service->GetNotifications(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::DeleteNotificationRqst, ::resource::DeleteNotificationRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::DeleteNotificationRqst* req,
             ::resource::DeleteNotificationRsp* resp) {
               return service->DeleteNotification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::ClearAllNotificationsRqst, ::resource::ClearAllNotificationsRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::ClearAllNotificationsRqst* req,
             ::resource::ClearAllNotificationsRsp* resp) {
               return service->ClearAllNotifications(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::ClearNotificationsByTypeRqst, ::resource::ClearNotificationsByTypeRsp>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::ClearNotificationsByTypeRqst* req,
             ::resource::ClearNotificationsByTypeRsp* resp) {
               return service->ClearNotificationsByType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::FindPackagesDescriptorRequest, ::resource::FindPackagesDescriptorResponse>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::FindPackagesDescriptorRequest* req,
             ::resource::FindPackagesDescriptorResponse* resp) {
               return service->FindPackages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::GetPackageDescriptorRequest, ::resource::GetPackageDescriptorResponse>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetPackageDescriptorRequest* req,
             ::resource::GetPackageDescriptorResponse* resp) {
               return service->GetPackageDescriptor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[56],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ResourceService::Service, ::resource::GetPackagesDescriptorRequest, ::resource::GetPackagesDescriptorResponse>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetPackagesDescriptorRequest* req,
             ::grpc_impl::ServerWriter<::resource::GetPackagesDescriptorResponse>* writer) {
               return service->GetPackagesDescriptor(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::SetPackageDescriptorRequest, ::resource::SetPackageDescriptorResponse>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::SetPackageDescriptorRequest* req,
             ::resource::SetPackageDescriptorResponse* resp) {
               return service->SetPackageDescriptor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::SetPackageBundleRequest, ::resource::SetPackageBundleResponse>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::SetPackageBundleRequest* req,
             ::resource::SetPackageBundleResponse* resp) {
               return service->SetPackageBundle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::GetPackageBundleChecksumRequest, ::resource::GetPackageBundleChecksumResponse>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetPackageBundleChecksumRequest* req,
             ::resource::GetPackageBundleChecksumResponse* resp) {
               return service->GetPackageBundleChecksum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::UpdateSessionRequest, ::resource::UpdateSessionResponse>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::UpdateSessionRequest* req,
             ::resource::UpdateSessionResponse* resp) {
               return service->UpdateSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::GetSessionsRequest, ::resource::GetSessionsResponse>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetSessionsRequest* req,
             ::resource::GetSessionsResponse* resp) {
               return service->GetSessions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::RemoveSessionRequest, ::resource::RemoveSessionResponse>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::RemoveSessionRequest* req,
             ::resource::RemoveSessionResponse* resp) {
               return service->RemoveSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::resource::GetSessionRequest, ::resource::GetSessionResponse>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::resource::GetSessionRequest* req,
             ::resource::GetSessionResponse* resp) {
               return service->GetSession(ctx, req, resp);
             }, this)));
}

ResourceService::Service::~Service() {
}

::grpc::Status ResourceService::Service::CreateOrganization(::grpc::ServerContext* context, const ::resource::CreateOrganizationRqst* request, ::resource::CreateOrganizationRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetOrganizations(::grpc::ServerContext* context, const ::resource::GetOrganizationsRqst* request, ::grpc::ServerWriter< ::resource::GetOrganizationsRsp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::DeleteOrganization(::grpc::ServerContext* context, const ::resource::DeleteOrganizationRqst* request, ::resource::DeleteOrganizationRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::AddOrganizationAccount(::grpc::ServerContext* context, const ::resource::AddOrganizationAccountRqst* request, ::resource::AddOrganizationAccountRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::AddOrganizationGroup(::grpc::ServerContext* context, const ::resource::AddOrganizationGroupRqst* request, ::resource::AddOrganizationGroupRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::AddOrganizationRole(::grpc::ServerContext* context, const ::resource::AddOrganizationRoleRqst* request, ::resource::AddOrganizationRoleRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::AddOrganizationApplication(::grpc::ServerContext* context, const ::resource::AddOrganizationApplicationRqst* request, ::resource::AddOrganizationApplicationRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemoveOrganizationAccount(::grpc::ServerContext* context, const ::resource::RemoveOrganizationAccountRqst* request, ::resource::RemoveOrganizationAccountRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemoveOrganizationGroup(::grpc::ServerContext* context, const ::resource::RemoveOrganizationGroupRqst* request, ::resource::RemoveOrganizationGroupRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemoveOrganizationRole(::grpc::ServerContext* context, const ::resource::RemoveOrganizationRoleRqst* request, ::resource::RemoveOrganizationRoleRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemoveOrganizationApplication(::grpc::ServerContext* context, const ::resource::RemoveOrganizationApplicationRqst* request, ::resource::RemoveOrganizationApplicationRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::CreateGroup(::grpc::ServerContext* context, const ::resource::CreateGroupRqst* request, ::resource::CreateGroupRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::UpdateGroup(::grpc::ServerContext* context, const ::resource::UpdateGroupRqst* request, ::resource::UpdateGroupRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetGroups(::grpc::ServerContext* context, const ::resource::GetGroupsRqst* request, ::grpc::ServerWriter< ::resource::GetGroupsRsp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::DeleteGroup(::grpc::ServerContext* context, const ::resource::DeleteGroupRqst* request, ::resource::DeleteGroupRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::AddGroupMemberAccount(::grpc::ServerContext* context, const ::resource::AddGroupMemberAccountRqst* request, ::resource::AddGroupMemberAccountRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemoveGroupMemberAccount(::grpc::ServerContext* context, const ::resource::RemoveGroupMemberAccountRqst* request, ::resource::RemoveGroupMemberAccountRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RegisterAccount(::grpc::ServerContext* context, const ::resource::RegisterAccountRqst* request, ::resource::RegisterAccountRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::DeleteAccount(::grpc::ServerContext* context, const ::resource::DeleteAccountRqst* request, ::resource::DeleteAccountRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetAccount(::grpc::ServerContext* context, const ::resource::GetAccountRqst* request, ::resource::GetAccountRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::SetAccountPassword(::grpc::ServerContext* context, const ::resource::SetAccountPasswordRqst* request, ::resource::SetAccountPasswordRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetAccounts(::grpc::ServerContext* context, const ::resource::GetAccountsRqst* request, ::grpc::ServerWriter< ::resource::GetAccountsRsp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::AddAccountRole(::grpc::ServerContext* context, const ::resource::AddAccountRoleRqst* request, ::resource::AddAccountRoleRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemoveAccountRole(::grpc::ServerContext* context, const ::resource::RemoveAccountRoleRqst* request, ::resource::RemoveAccountRoleRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::SetAccountContact(::grpc::ServerContext* context, const ::resource::SetAccountContactRqst* request, ::resource::SetAccountContactRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::SetEmail(::grpc::ServerContext* context, const ::resource::SetEmailRequest* request, ::resource::SetEmailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::IsOrgnanizationMember(::grpc::ServerContext* context, const ::resource::IsOrgnanizationMemberRqst* request, ::resource::IsOrgnanizationMemberRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::CreateRole(::grpc::ServerContext* context, const ::resource::CreateRoleRqst* request, ::resource::CreateRoleRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetRoles(::grpc::ServerContext* context, const ::resource::GetRolesRqst* request, ::grpc::ServerWriter< ::resource::GetRolesRsp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::DeleteRole(::grpc::ServerContext* context, const ::resource::DeleteRoleRqst* request, ::resource::DeleteRoleRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::AddRoleActions(::grpc::ServerContext* context, const ::resource::AddRoleActionsRqst* request, ::resource::AddRoleActionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemoveRoleAction(::grpc::ServerContext* context, const ::resource::RemoveRoleActionRqst* request, ::resource::RemoveRoleActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemoveRolesAction(::grpc::ServerContext* context, const ::resource::RemoveRolesActionRqst* request, ::resource::RemoveRolesActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::CreateApplication(::grpc::ServerContext* context, const ::resource::CreateApplicationRqst* request, ::resource::CreateApplicationRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::UpdateApplication(::grpc::ServerContext* context, const ::resource::UpdateApplicationRqst* request, ::resource::UpdateApplicationRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetApplications(::grpc::ServerContext* context, const ::resource::GetApplicationsRqst* request, ::grpc::ServerWriter< ::resource::GetApplicationsRsp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::DeleteApplication(::grpc::ServerContext* context, const ::resource::DeleteApplicationRqst* request, ::resource::DeleteApplicationRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::AddApplicationActions(::grpc::ServerContext* context, const ::resource::AddApplicationActionsRqst* request, ::resource::AddApplicationActionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemoveApplicationAction(::grpc::ServerContext* context, const ::resource::RemoveApplicationActionRqst* request, ::resource::RemoveApplicationActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemoveApplicationsAction(::grpc::ServerContext* context, const ::resource::RemoveApplicationsActionRqst* request, ::resource::RemoveApplicationsActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetApplicationVersion(::grpc::ServerContext* context, const ::resource::GetApplicationVersionRqst* request, ::resource::GetApplicationVersionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetApplicationAlias(::grpc::ServerContext* context, const ::resource::GetApplicationAliasRqst* request, ::resource::GetApplicationAliasRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetApplicationIcon(::grpc::ServerContext* context, const ::resource::GetApplicationIconRqst* request, ::resource::GetApplicationIconRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RegisterPeer(::grpc::ServerContext* context, const ::resource::RegisterPeerRqst* request, ::resource::RegisterPeerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetPeers(::grpc::ServerContext* context, const ::resource::GetPeersRqst* request, ::grpc::ServerWriter< ::resource::GetPeersRsp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::DeletePeer(::grpc::ServerContext* context, const ::resource::DeletePeerRqst* request, ::resource::DeletePeerRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::AddPeerActions(::grpc::ServerContext* context, const ::resource::AddPeerActionsRqst* request, ::resource::AddPeerActionsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemovePeerAction(::grpc::ServerContext* context, const ::resource::RemovePeerActionRqst* request, ::resource::RemovePeerActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemovePeersAction(::grpc::ServerContext* context, const ::resource::RemovePeersActionRqst* request, ::resource::RemovePeersActionRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::CreateNotification(::grpc::ServerContext* context, const ::resource::CreateNotificationRqst* request, ::resource::CreateNotificationRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetNotifications(::grpc::ServerContext* context, const ::resource::GetNotificationsRqst* request, ::grpc::ServerWriter< ::resource::GetNotificationsRsp>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::DeleteNotification(::grpc::ServerContext* context, const ::resource::DeleteNotificationRqst* request, ::resource::DeleteNotificationRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::ClearAllNotifications(::grpc::ServerContext* context, const ::resource::ClearAllNotificationsRqst* request, ::resource::ClearAllNotificationsRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::ClearNotificationsByType(::grpc::ServerContext* context, const ::resource::ClearNotificationsByTypeRqst* request, ::resource::ClearNotificationsByTypeRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::FindPackages(::grpc::ServerContext* context, const ::resource::FindPackagesDescriptorRequest* request, ::resource::FindPackagesDescriptorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetPackageDescriptor(::grpc::ServerContext* context, const ::resource::GetPackageDescriptorRequest* request, ::resource::GetPackageDescriptorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetPackagesDescriptor(::grpc::ServerContext* context, const ::resource::GetPackagesDescriptorRequest* request, ::grpc::ServerWriter< ::resource::GetPackagesDescriptorResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::SetPackageDescriptor(::grpc::ServerContext* context, const ::resource::SetPackageDescriptorRequest* request, ::resource::SetPackageDescriptorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::SetPackageBundle(::grpc::ServerContext* context, const ::resource::SetPackageBundleRequest* request, ::resource::SetPackageBundleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetPackageBundleChecksum(::grpc::ServerContext* context, const ::resource::GetPackageBundleChecksumRequest* request, ::resource::GetPackageBundleChecksumResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::UpdateSession(::grpc::ServerContext* context, const ::resource::UpdateSessionRequest* request, ::resource::UpdateSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetSessions(::grpc::ServerContext* context, const ::resource::GetSessionsRequest* request, ::resource::GetSessionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RemoveSession(::grpc::ServerContext* context, const ::resource::RemoveSessionRequest* request, ::resource::RemoveSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetSession(::grpc::ServerContext* context, const ::resource::GetSessionRequest* request, ::resource::GetSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace resource

